(function () {
	'use strict';

	var n,l$1,u$1,t$1,r$1,o$2,f$1,e$2={},c$1=[],s$1=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function a$1(n,l){for(var u in l)n[u]=l[u];return n}function h$1(n){var l=n.parentNode;l&&l.removeChild(n);}function v$1(l,u,i){var t,r,o,f={};for(o in u)"key"==o?t=u[o]:"ref"==o?r=u[o]:f[o]=u[o];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),"function"==typeof l&&null!=l.defaultProps)for(o in l.defaultProps)void 0===f[o]&&(f[o]=l.defaultProps[o]);return y$1(l,f,t,r,null)}function y$1(n,i,t,r,o){var f={type:n,props:i,key:t,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++u$1:o};return null==o&&null!=l$1.vnode&&l$1.vnode(f),f}function p$1(){return {current:null}}function d$1(n){return n.children}function _$1(n,l){this.props=n,this.context=l;}function k$2(n,l){if(null==l)return n.__?k$2(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return "function"==typeof n.type?k$2(n):null}function b$1(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return b$1(n)}}function m$1(n){(!n.__d&&(n.__d=!0)&&t$1.push(n)&&!g$2.__r++||o$2!==l$1.debounceRendering)&&((o$2=l$1.debounceRendering)||r$1)(g$2);}function g$2(){for(var n;g$2.__r=t$1.length;)n=t$1.sort(function(n,l){return n.__v.__b-l.__v.__b}),t$1=[],n.some(function(n){var l,u,i,t,r,o;n.__d&&(r=(t=(l=n).__v).__e,(o=l.__P)&&(u=[],(i=a$1({},t)).__v=t.__v+1,j$2(o,t,i,l.__n,void 0!==o.ownerSVGElement,null!=t.__h?[r]:null,u,null==r?k$2(t):r,t.__h),z$1(u,t),t.__e!=r&&b$1(t)));});}function w$2(n,l,u,i,t,r,o,f,s,a){var h,v,p,_,b,m,g,w=i&&i.__k||c$1,A=w.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(_=u.__k[h]=null==(_=l[h])||"boolean"==typeof _?null:"string"==typeof _||"number"==typeof _||"bigint"==typeof _?y$1(null,_,null,null,_):Array.isArray(_)?y$1(d$1,{children:_},null,null,null):_.__b>0?y$1(_.type,_.props,_.key,null,_.__v):_)){if(_.__=u,_.__b=u.__b+1,null===(p=w[h])||p&&_.key==p.key&&_.type===p.type)w[h]=void 0;else for(v=0;v<A;v++){if((p=w[v])&&_.key==p.key&&_.type===p.type){w[v]=void 0;break}p=null;}j$2(n,_,p=p||e$2,t,r,o,f,s,a),b=_.__e,(v=_.ref)&&p.ref!=v&&(g||(g=[]),p.ref&&g.push(p.ref,null,_),g.push(v,_.__c||b,_)),null!=b?(null==m&&(m=b),"function"==typeof _.type&&_.__k===p.__k?_.__d=s=x$2(_,s,n):s=P$1(n,_,p,w,b,s),"function"==typeof u.type&&(u.__d=s)):s&&p.__e==s&&s.parentNode!=n&&(s=k$2(p));}for(u.__e=m,h=A;h--;)null!=w[h]&&("function"==typeof u.type&&null!=w[h].__e&&w[h].__e==u.__d&&(u.__d=k$2(i,h+1)),N$1(w[h],w[h]));if(g)for(h=0;h<g.length;h++)M$1(g[h],g[++h],g[++h]);}function x$2(n,l,u){for(var i,t=n.__k,r=0;t&&r<t.length;r++)(i=t[r])&&(i.__=n,l="function"==typeof i.type?x$2(i,l,u):P$1(u,i,i,t,i.__e,l));return l}function A$2(n,l){return l=l||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some(function(n){A$2(n,l);}):l.push(n)),l}function P$1(n,l,u,i,t,r){var o,f,e;if(void 0!==l.__d)o=l.__d,l.__d=void 0;else if(null==u||t!=r||null==t.parentNode)n:if(null==r||r.parentNode!==n)n.appendChild(t),o=null;else {for(f=r,e=0;(f=f.nextSibling)&&e<i.length;e+=2)if(f==t)break n;n.insertBefore(t,r),o=r;}return void 0!==o?o:t.nextSibling}function C$1(n,l,u,i,t){var r;for(r in u)"children"===r||"key"===r||r in l||H$1(n,r,null,u[r],i);for(r in l)t&&"function"!=typeof l[r]||"children"===r||"key"===r||"value"===r||"checked"===r||u[r]===l[r]||H$1(n,r,l[r],u[r],i);}function $$1(n,l,u){"-"===l[0]?n.setProperty(l,u):n[l]=null==u?"":"number"!=typeof u||s$1.test(l)?u:u+"px";}function H$1(n,l,u,i,t){var r;n:if("style"===l)if("string"==typeof u)n.style.cssText=u;else {if("string"==typeof i&&(n.style.cssText=i=""),i)for(l in i)u&&l in u||$$1(n.style,l,"");if(u)for(l in u)i&&u[l]===i[l]||$$1(n.style,l,u[l]);}else if("o"===l[0]&&"n"===l[1])r=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+r]=u,u?i||n.addEventListener(l,r?T$2:I$1,r):n.removeEventListener(l,r?T$2:I$1,r);else if("dangerouslySetInnerHTML"!==l){if(t)l=l.replace(/xlink[H:h]/,"h").replace(/sName$/,"s");else if("href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n}catch(n){}"function"==typeof u||(null!=u&&(!1!==u||"a"===l[0]&&"r"===l[1])?n.setAttribute(l,u):n.removeAttribute(l));}}function I$1(n){this.l[n.type+!1](l$1.event?l$1.event(n):n);}function T$2(n){this.l[n.type+!0](l$1.event?l$1.event(n):n);}function j$2(n,u,i,t,r,o,f,e,c){var s,h,v,y,p,k,b,m,g,x,A,P=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,o=[e]),(s=l$1.__b)&&s(u);try{n:if("function"==typeof P){if(m=u.props,g=(s=P.contextType)&&t[s.__c],x=s?g?g.props.value:s.__:t,i.__c?b=(h=u.__c=i.__c).__=h.__E:("prototype"in P&&P.prototype.render?u.__c=h=new P(m,x):(u.__c=h=new _$1(m,x),h.constructor=P,h.render=O$1),g&&g.sub(h),h.props=m,h.state||(h.state={}),h.context=x,h.__n=t,v=h.__d=!0,h.__h=[]),null==h.__s&&(h.__s=h.state),null!=P.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=a$1({},h.__s)),a$1(h.__s,P.getDerivedStateFromProps(m,h.__s))),y=h.props,p=h.state,v)null==P.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else {if(null==P.getDerivedStateFromProps&&m!==y&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(m,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(m,h.__s,x)||u.__v===i.__v){h.props=m,h.state=h.__s,u.__v!==i.__v&&(h.__d=!1),h.__v=u,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u);}),h.__h.length&&f.push(h);break n}null!=h.componentWillUpdate&&h.componentWillUpdate(m,h.__s,x),null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(y,p,k);});}h.context=x,h.props=m,h.state=h.__s,(s=l$1.__r)&&s(u),h.__d=!1,h.__v=u,h.__P=n,s=h.render(h.props,h.state,h.context),h.state=h.__s,null!=h.getChildContext&&(t=a$1(a$1({},t),h.getChildContext())),v||null==h.getSnapshotBeforeUpdate||(k=h.getSnapshotBeforeUpdate(y,p)),A=null!=s&&s.type===d$1&&null==s.key?s.props.children:s,w$2(n,Array.isArray(A)?A:[A],u,i,t,r,o,f,e,c),h.base=u.__e,u.__h=null,h.__h.length&&f.push(h),b&&(h.__E=h.__=null),h.__e=!1;}else null==o&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=L$1(i.__e,u,i,t,r,o,f,c);(s=l$1.diffed)&&s(u);}catch(n){u.__v=null,(c||null!=o)&&(u.__e=e,u.__h=!!c,o[o.indexOf(e)]=null),l$1.__e(n,u,i);}}function z$1(n,u){l$1.__c&&l$1.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l$1.__e(n,u.__v);}});}function L$1(l,u,i,t,r,o,f,c){var s,a,v,y=i.props,p=u.props,d=u.type,_=0;if("svg"===d&&(r=!0),null!=o)for(;_<o.length;_++)if((s=o[_])&&"setAttribute"in s==!!d&&(d?s.localName===d:3===s.nodeType)){l=s,o[_]=null;break}if(null==l){if(null===d)return document.createTextNode(p);l=r?document.createElementNS("http://www.w3.org/2000/svg",d):document.createElement(d,p.is&&p),o=null,c=!1;}if(null===d)y===p||c&&l.data===p||(l.data=p);else {if(o=o&&n.call(l.childNodes),a=(y=i.props||e$2).dangerouslySetInnerHTML,v=p.dangerouslySetInnerHTML,!c){if(null!=o)for(y={},_=0;_<l.attributes.length;_++)y[l.attributes[_].name]=l.attributes[_].value;(v||a)&&(v&&(a&&v.__html==a.__html||v.__html===l.innerHTML)||(l.innerHTML=v&&v.__html||""));}if(C$1(l,p,y,r,c),v)u.__k=[];else if(_=u.props.children,w$2(l,Array.isArray(_)?_:[_],u,i,t,r&&"foreignObject"!==d,o,f,o?o[0]:i.__k&&k$2(i,0),c),null!=o)for(_=o.length;_--;)null!=o[_]&&h$1(o[_]);c||("value"in p&&void 0!==(_=p.value)&&(_!==y.value||_!==l.value||"progress"===d&&!_)&&H$1(l,"value",_,y.value,!1),"checked"in p&&void 0!==(_=p.checked)&&_!==l.checked&&H$1(l,"checked",_,y.checked,!1));}return l}function M$1(n,u,i){try{"function"==typeof n?n(u):n.current=u;}catch(n){l$1.__e(n,i);}}function N$1(n,u,i){var t,r;if(l$1.unmount&&l$1.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||M$1(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(n){l$1.__e(n,u);}t.base=t.__P=null;}if(t=n.__k)for(r=0;r<t.length;r++)t[r]&&N$1(t[r],u,"function"!=typeof n.type);i||null==n.__e||h$1(n.__e),n.__e=n.__d=void 0;}function O$1(n,l,u){return this.constructor(n,u)}function S$1(u,i,t){var r,o,f;l$1.__&&l$1.__(u,i),o=(r="function"==typeof t)?null:t&&t.__k||i.__k,f=[],j$2(i,u=(!r&&t||i).__k=v$1(d$1,null,[u]),o||e$2,e$2,void 0!==i.ownerSVGElement,!r&&t?[t]:o?null:i.firstChild?n.call(i.childNodes):null,f,!r&&t?t:o?o.__e:i.firstChild,r),z$1(f,u);}function q$2(n,l){S$1(n,l,q$2);}function B$1(l,u,i){var t,r,o,f=a$1({},l.props);for(o in u)"key"==o?t=u[o]:"ref"==o?r=u[o]:f[o]=u[o];return arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),y$1(l.type,f,t||l.key,r||l.ref,null)}function D$1(n,l){var u={__c:l="__cC"+f$1++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(m$1);},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n=c$1.slice,l$1={__e:function(n,l){for(var u,i,t;l=l.__;)if((u=l.__c)&&!u.__)try{if((i=u.constructor)&&null!=i.getDerivedStateFromError&&(u.setState(i.getDerivedStateFromError(n)),t=u.__d),null!=u.componentDidCatch&&(u.componentDidCatch(n),t=u.__d),t)return u.__E=u}catch(l){n=l;}throw n}},u$1=0,_$1.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=a$1({},this.state),"function"==typeof n&&(n=n(a$1({},u),this.props)),n&&a$1(u,n),null!=n&&this.__v&&(l&&this.__h.push(l),m$1(this));},_$1.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),m$1(this));},_$1.prototype.render=d$1,t$1=[],r$1="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,g$2.__r=0,f$1=0;

	var t,u,r,o$1=0,i=[],c=l$1.__b,f=l$1.__r,e$1=l$1.diffed,a=l$1.__c,v=l$1.unmount;function m(t,r){l$1.__h&&l$1.__h(u,t,o$1||r),o$1=0;var i=u.__H||(u.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({}),i.__[t]}function l(n){return o$1=1,p(w$1,n)}function p(n,r,o){var i=m(t++,2);return i.t=n,i.__c||(i.__=[o?o(r):w$1(void 0,r),function(n){var t=i.t(i.__[0],n);i.__[0]!==t&&(i.__=[t,i.__[1]],i.__c.setState({}));}],i.__c=u),i.__}function y(r,o){var i=m(t++,3);!l$1.__s&&k$1(i.__H,o)&&(i.__=r,i.__H=o,u.__H.__h.push(i));}function h(r,o){var i=m(t++,4);!l$1.__s&&k$1(i.__H,o)&&(i.__=r,i.__H=o,u.__h.push(i));}function s(n){return o$1=5,d(function(){return {current:n}},[])}function _(n,t,u){o$1=6,h(function(){"function"==typeof n?n(t()):n&&(n.current=t());},null==u?u:u.concat(n));}function d(n,u){var r=m(t++,7);return k$1(r.__H,u)&&(r.__=n(),r.__H=u,r.__h=n),r.__}function A$1(n,t){return o$1=8,d(function(){return n},t)}function F$1(n){var r=u.context[n.__c],o=m(t++,9);return o.c=n,r?(null==o.__&&(o.__=!0,r.sub(u)),r.props.value):n.__}function T$1(t,u){l$1.useDebugValue&&l$1.useDebugValue(u?u(t):t);}function q$1(n){var r=m(t++,10),o=l();return r.__=n,u.componentDidCatch||(u.componentDidCatch=function(n){r.__&&r.__(n),o[1](n);}),[o[0],function(){o[1](void 0);}]}function x$1(){for(var t;t=i.shift();)if(t.__P)try{t.__H.__h.forEach(g$1),t.__H.__h.forEach(j$1),t.__H.__h=[];}catch(u){t.__H.__h=[],l$1.__e(u,t.__v);}}l$1.__b=function(n){u=null,c&&c(n);},l$1.__r=function(n){f&&f(n),t=0;var r=(u=n.__c).__H;r&&(r.__h.forEach(g$1),r.__h.forEach(j$1),r.__h=[]);},l$1.diffed=function(t){e$1&&e$1(t);var o=t.__c;o&&o.__H&&o.__H.__h.length&&(1!==i.push(o)&&r===l$1.requestAnimationFrame||((r=l$1.requestAnimationFrame)||function(n){var t,u=function(){clearTimeout(r),b&&cancelAnimationFrame(t),setTimeout(n);},r=setTimeout(u,100);b&&(t=requestAnimationFrame(u));})(x$1)),u=null;},l$1.__c=function(t,u){u.some(function(t){try{t.__h.forEach(g$1),t.__h=t.__h.filter(function(n){return !n.__||j$1(n)});}catch(r){u.some(function(n){n.__h&&(n.__h=[]);}),u=[],l$1.__e(r,t.__v);}}),a&&a(t,u);},l$1.unmount=function(t){v&&v(t);var u,r=t.__c;r&&r.__H&&(r.__H.__.forEach(function(n){try{g$1(n);}catch(n){u=n;}}),u&&l$1.__e(u,r.__v));};var b="function"==typeof requestAnimationFrame;function g$1(n){var t=u,r=n.__c;"function"==typeof r&&(n.__c=void 0,r()),u=t;}function j$1(n){var t=u;n.__c=n.__(),u=t;}function k$1(n,t){return !n||n.length!==t.length||t.some(function(t,u){return t!==n[u]})}function w$1(n,t){return "function"==typeof t?t(n):t}

	function C(n,t){for(var e in t)n[e]=t[e];return n}function S(n,t){for(var e in n)if("__source"!==e&&!(e in t))return !0;for(var r in t)if("__source"!==r&&n[r]!==t[r])return !0;return !1}function E(n){this.props=n;}function g(n,t){function e(n){var e=this.props.ref,r=e==n.ref;return !r&&e&&(e.call?e(null):e.current=null),t?!t(this.props,n)||!r:S(this.props,n)}function r(t){return this.shouldComponentUpdate=e,v$1(n,t)}return r.displayName="Memo("+(n.displayName||n.name)+")",r.prototype.isReactComponent=!0,r.__f=!0,r}(E.prototype=new _$1).isPureReactComponent=!0,E.prototype.shouldComponentUpdate=function(n,t){return S(this.props,n)||S(this.state,t)};var w=l$1.__b;l$1.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),w&&w(n);};var R="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function x(n){function t(t,e){var r=C({},t);return delete r.ref,n(r,(e=t.ref||e)&&("object"!=typeof e||"current"in e)?e:null)}return t.$$typeof=R,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(n.displayName||n.name)+")",t}var N=function(n,t){return null==n?null:A$2(A$2(n).map(t))},k={map:N,forEach:N,count:function(n){return n?A$2(n).length:0},only:function(n){var t=A$2(n);if(1!==t.length)throw "Children.only";return t[0]},toArray:A$2},A=l$1.__e;l$1.__e=function(n,t,e){if(n.then)for(var r,u=t;u=u.__;)if((r=u.__c)&&r.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),r.__c(n,t);A(n,t,e);};var O=l$1.unmount;function L(){this.__u=0,this.t=null,this.__b=null;}function U(n){var t=n.__.__c;return t&&t.__e&&t.__e(n)}function F(n){var t,e,r;function u(u){if(t||(t=n()).then(function(n){e=n.default||n;},function(n){r=n;}),r)throw r;if(!e)throw t;return v$1(e,u)}return u.displayName="Lazy",u.__f=!0,u}function M(){this.u=null,this.o=null;}l$1.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&!0===n.__h&&(n.type=null),O&&O(n);},(L.prototype=new _$1).__c=function(n,t){var e=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(e);var u=U(r.__v),o=!1,i=function(){o||(o=!0,e.__R=null,u?u(l):l());};e.__R=i;var l=function(){if(!--r.__u){if(r.state.__e){var n=r.state.__e;r.__v.__k[0]=function n(t,e,r){return t&&(t.__v=null,t.__k=t.__k&&t.__k.map(function(t){return n(t,e,r)}),t.__c&&t.__c.__P===e&&(t.__e&&r.insertBefore(t.__e,t.__d),t.__c.__e=!0,t.__c.__P=r)),t}(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__e:r.__b=null});t=r.t.pop();)t.forceUpdate();}},c=!0===t.__h;r.__u++||c||r.setState({__e:r.__b=r.__v.__k[0]}),n.then(i,i);},L.prototype.componentWillUnmount=function(){this.t=[];},L.prototype.render=function(n,t){if(this.__b){if(this.__v.__k){var e=document.createElement("div"),r=this.__v.__k[0].__c;this.__v.__k[0]=function n(t,e,r){return t&&(t.__c&&t.__c.__H&&(t.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),t.__c.__H=null),null!=(t=C({},t)).__c&&(t.__c.__P===r&&(t.__c.__P=e),t.__c=null),t.__k=t.__k&&t.__k.map(function(t){return n(t,e,r)})),t}(this.__b,e,r.__O=r.__P);}this.__b=null;}var u=t.__e&&v$1(d$1,null,n.fallback);return u&&(u.__h=null),[v$1(d$1,null,t.__e?null:n.children),u]};var T=function(n,t,e){if(++e[1]===e[0]&&n.o.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.o.size))for(e=n.u;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.u=e=e[2];}};function D(n){return this.getChildContext=function(){return n.context},n.children}function I(n){var t=this,e=n.i;t.componentWillUnmount=function(){S$1(null,t.l),t.l=null,t.i=null;},t.i&&t.i!==e&&t.componentWillUnmount(),n.__v?(t.l||(t.i=e,t.l={nodeType:1,parentNode:e,childNodes:[],appendChild:function(n){this.childNodes.push(n),t.i.appendChild(n);},insertBefore:function(n,e){this.childNodes.push(n),t.i.appendChild(n);},removeChild:function(n){this.childNodes.splice(this.childNodes.indexOf(n)>>>1,1),t.i.removeChild(n);}}),S$1(v$1(D,{context:t.context},n.__v),t.l)):t.l&&t.componentWillUnmount();}function W(n,t){return v$1(I,{__v:n,i:t})}(M.prototype=new _$1).__e=function(n){var t=this,e=U(t.__v),r=t.o.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),T(t,n,r)):u();};e?e(o):o();}},M.prototype.render=function(n){this.u=null,this.o=new Map;var t=A$2(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;)this.o.set(t[e],this.u=[1,0,this.u]);return n.children},M.prototype.componentDidUpdate=M.prototype.componentDidMount=function(){var n=this;this.o.forEach(function(t,e){T(n,e,t);});};var j="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,P=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,V="undefined"!=typeof document,z=function(n){return ("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(n)};function B(n,t,e){return null==t.__k&&(t.textContent=""),S$1(n,t),"function"==typeof e&&e(),n?n.__c:null}function $(n,t,e){return q$2(n,t),"function"==typeof e&&e(),n?n.__c:null}_$1.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(n){Object.defineProperty(_$1.prototype,n,{configurable:!0,get:function(){return this["UNSAFE_"+n]},set:function(t){Object.defineProperty(this,n,{configurable:!0,writable:!0,value:t});}});});var H=l$1.event;function Z(){}function Y(){return this.cancelBubble}function q(){return this.defaultPrevented}l$1.event=function(n){return H&&(n=H(n)),n.persist=Z,n.isPropagationStopped=Y,n.isDefaultPrevented=q,n.nativeEvent=n};var G,J={configurable:!0,get:function(){return this.class}},K=l$1.vnode;l$1.vnode=function(n){var t=n.type,e=n.props,r=e;if("string"==typeof t){var u=-1===t.indexOf("-");for(var o in r={},e){var i=e[o];V&&"children"===o&&"noscript"===t||"value"===o&&"defaultValue"in e&&null==i||("defaultValue"===o&&"value"in e&&null==e.value?o="value":"download"===o&&!0===i?i="":/ondoubleclick/i.test(o)?o="ondblclick":/^onchange(textarea|input)/i.test(o+t)&&!z(e.type)?o="oninput":/^onfocus$/i.test(o)?o="onfocusin":/^onblur$/i.test(o)?o="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(o)?o=o.toLowerCase():u&&P.test(o)?o=o.replace(/[A-Z0-9]/,"-$&").toLowerCase():null===i&&(i=void 0),r[o]=i);}"select"==t&&r.multiple&&Array.isArray(r.value)&&(r.value=A$2(e.children).forEach(function(n){n.props.selected=-1!=r.value.indexOf(n.props.value);})),"select"==t&&null!=r.defaultValue&&(r.value=A$2(e.children).forEach(function(n){n.props.selected=r.multiple?-1!=r.defaultValue.indexOf(n.props.value):r.defaultValue==n.props.value;})),n.props=r,e.class!=e.className&&(J.enumerable="className"in e,null!=e.className&&(r.class=e.className),Object.defineProperty(r,"className",J));}n.$$typeof=j,K&&K(n);};var Q=l$1.__r;l$1.__r=function(n){Q&&Q(n),G=n.__c;};var X={ReactCurrentDispatcher:{current:{readContext:function(n){return G.__n[n.__c].props.value}}}},nn="17.0.2";function tn(n){return v$1.bind(null,n)}function en(n){return !!n&&n.$$typeof===j}function rn(n){return en(n)?B$1.apply(null,arguments):n}function un(n){return !!n.__k&&(S$1(null,n),!0)}function on(n){return n&&(n.base||1===n.nodeType&&n)||null}var ln=function(n,t){return n(t)},cn=function(n,t){return n(t)},fn=d$1;var compat_module = {useState:l,useReducer:p,useEffect:y,useLayoutEffect:h,useRef:s,useImperativeHandle:_,useMemo:d,useCallback:A$1,useContext:F$1,useDebugValue:T$1,version:"17.0.2",Children:k,render:B,hydrate:$,unmountComponentAtNode:un,createPortal:W,createElement:v$1,createContext:D$1,createFactory:tn,cloneElement:rn,createRef:p$1,Fragment:d$1,isValidElement:en,findDOMNode:on,Component:_$1,PureComponent:E,memo:g,forwardRef:x,flushSync:cn,unstable_batchedUpdates:ln,StrictMode:d$1,Suspense:L,SuspenseList:M,lazy:F,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:X};

	var compat_module$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': compat_module,
		version: nn,
		Children: k,
		render: B,
		hydrate: $,
		unmountComponentAtNode: un,
		createPortal: W,
		createFactory: tn,
		cloneElement: rn,
		isValidElement: en,
		findDOMNode: on,
		PureComponent: E,
		memo: g,
		forwardRef: x,
		flushSync: cn,
		unstable_batchedUpdates: ln,
		StrictMode: fn,
		Suspense: L,
		SuspenseList: M,
		lazy: F,
		__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: X,
		createElement: v$1,
		createContext: D$1,
		createRef: p$1,
		Fragment: d$1,
		Component: _$1,
		useState: l,
		useReducer: p,
		useEffect: y,
		useLayoutEffect: h,
		useRef: s,
		useImperativeHandle: _,
		useMemo: d,
		useCallback: A$1,
		useContext: F$1,
		useDebugValue: T$1,
		useErrorBoundary: q$1
	});

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
	  var f = n.default;
		if (typeof f == "function") {
			var a = function () {
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var lib = {};

	var exports$2 = {};

	var interopRequireDefault$1 = {exports: {}};

	(function (module) {
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}

		module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (interopRequireDefault$1));

	var Provider = {};

	var interopRequireWildcard = {exports: {}};

	var _typeof = {exports: {}};

	(function (module) {
		function _typeof(obj) {
		  "@babel/helpers - typeof";

		  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
		    return typeof obj;
		  } : function (obj) {
		    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
		}

		module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (_typeof));

	(function (module) {
		var _typeof$1 = _typeof.exports["default"];

		function _getRequireWildcardCache(nodeInterop) {
		  if (typeof WeakMap !== "function") return null;
		  var cacheBabelInterop = new WeakMap();
		  var cacheNodeInterop = new WeakMap();
		  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
		    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
		  })(nodeInterop);
		}

		function _interopRequireWildcard(obj, nodeInterop) {
		  if (!nodeInterop && obj && obj.__esModule) {
		    return obj;
		  }

		  if (obj === null || _typeof$1(obj) !== "object" && typeof obj !== "function") {
		    return {
		      "default": obj
		    };
		  }

		  var cache = _getRequireWildcardCache(nodeInterop);

		  if (cache && cache.has(obj)) {
		    return cache.get(obj);
		  }

		  var newObj = {};
		  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

		  for (var key in obj) {
		    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
		      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

		      if (desc && (desc.get || desc.set)) {
		        Object.defineProperty(newObj, key, desc);
		      } else {
		        newObj[key] = obj[key];
		      }
		    }
		  }

		  newObj["default"] = obj;

		  if (cache) {
		    cache.set(obj, newObj);
		  }

		  return newObj;
		}

		module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (interopRequireWildcard));

	var require$$3 = /*@__PURE__*/getAugmentedNamespace(compat_module$1);

	var propTypes = {exports: {}};

	var reactIs$3 = {exports: {}};

	var reactIs_development$2 = {};

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */



	{
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development$2.AsyncMode = AsyncMode;
	reactIs_development$2.ConcurrentMode = ConcurrentMode;
	reactIs_development$2.ContextConsumer = ContextConsumer;
	reactIs_development$2.ContextProvider = ContextProvider;
	reactIs_development$2.Element = Element;
	reactIs_development$2.ForwardRef = ForwardRef;
	reactIs_development$2.Fragment = Fragment;
	reactIs_development$2.Lazy = Lazy;
	reactIs_development$2.Memo = Memo;
	reactIs_development$2.Portal = Portal;
	reactIs_development$2.Profiler = Profiler;
	reactIs_development$2.StrictMode = StrictMode;
	reactIs_development$2.Suspense = Suspense;
	reactIs_development$2.isAsyncMode = isAsyncMode;
	reactIs_development$2.isConcurrentMode = isConcurrentMode;
	reactIs_development$2.isContextConsumer = isContextConsumer;
	reactIs_development$2.isContextProvider = isContextProvider;
	reactIs_development$2.isElement = isElement;
	reactIs_development$2.isForwardRef = isForwardRef;
	reactIs_development$2.isFragment = isFragment;
	reactIs_development$2.isLazy = isLazy;
	reactIs_development$2.isMemo = isMemo;
	reactIs_development$2.isPortal = isPortal;
	reactIs_development$2.isProfiler = isProfiler;
	reactIs_development$2.isStrictMode = isStrictMode;
	reactIs_development$2.isSuspense = isSuspense;
	reactIs_development$2.isValidElementType = isValidElementType;
	reactIs_development$2.typeOf = typeOf;
	  })();
	}

	{
	  reactIs$3.exports = reactIs_development$2;
	}

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty$1.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols$1) {
				symbols = getOwnPropertySymbols$1(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret$2 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret$2;

	var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var printWarning$1 = function() {};

	{
	  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
	  var loggedTypeFailures = {};
	  var has$1 = has$2;

	  printWarning$1 = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) { /**/ }
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
	  {
	    for (var typeSpecName in typeSpecs) {
	      if (has$1(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
	              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning$1(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning$1(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes$1.resetWarningCache = function() {
	  {
	    loggedTypeFailures = {};
	  }
	};

	var checkPropTypes_1 = checkPropTypes$1;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactIs$1 = reactIs$3.exports;
	var assign = objectAssign;

	var ReactPropTypesSecret = ReactPropTypesSecret_1;
	var has = has$2;
	var checkPropTypes = checkPropTypes_1;

	var printWarning = function() {};

	{
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bigint: createPrimitiveTypeChecker('bigint'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message, data) {
	    this.message = message;
	    this.data = data && typeof data === 'object' ? data: {};
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError(
	          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
	          {expectedType: expectedType}
	        );
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs$1.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      {
	        if (arguments.length > 1) {
	          printWarning(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var expectedTypes = [];
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
	        if (checkerResult == null) {
	          return null;
	        }
	        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
	          expectedTypes.push(checkerResult.data.expectedType);
	        }
	      }
	      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function invalidValidatorError(componentName, location, propFullName, key, type) {
	    return new PropTypeError(
	      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
	      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
	    );
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (has(shapeTypes, key) && typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  var ReactIs = reactIs$3.exports;

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
	}

	var Context$2 = {};

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault$1.exports["default"];

		exports.__esModule = true;
		exports["default"] = exports.ReactReduxContext = void 0;

		var _react = _interopRequireDefault(require$$3);

		var ReactReduxContext = /*#__PURE__*/_react["default"].createContext(null);

		exports.ReactReduxContext = ReactReduxContext;

		{
		  ReactReduxContext.displayName = 'ReactRedux';
		}

		var _default = ReactReduxContext;
		exports["default"] = _default;
	} (Context$2));

	var Subscription = {};

	var batch$1 = {};

	batch$1.__esModule = true;
	batch$1.setBatch = batch$1.getBatch = void 0;

	// Default to a dummy "batch" implementation that just runs the callback
	function defaultNoopBatch(callback) {
	  callback();
	}

	var batch = defaultNoopBatch; // Allow injecting another batching function later

	var setBatch = function setBatch(newBatch) {
	  return batch = newBatch;
	}; // Supply a getter just to skip dealing with ESM bindings


	batch$1.setBatch = setBatch;

	var getBatch = function getBatch() {
	  return batch;
	};

	batch$1.getBatch = getBatch;

	Subscription.__esModule = true;
	Subscription.createSubscription = createSubscription;

	var _batch = batch$1;

	// encapsulates the subscription logic for connecting a component to the redux store, as
	// well as nesting subscriptions of descendant components, so that we can ensure the
	// ancestor components re-render before descendants
	function createListenerCollection() {
	  var batch = (0, _batch.getBatch)();
	  var first = null;
	  var last = null;
	  return {
	    clear: function clear() {
	      first = null;
	      last = null;
	    },
	    notify: function notify() {
	      batch(function () {
	        var listener = first;

	        while (listener) {
	          listener.callback();
	          listener = listener.next;
	        }
	      });
	    },
	    get: function get() {
	      var listeners = [];
	      var listener = first;

	      while (listener) {
	        listeners.push(listener);
	        listener = listener.next;
	      }

	      return listeners;
	    },
	    subscribe: function subscribe(callback) {
	      var isSubscribed = true;
	      var listener = last = {
	        callback: callback,
	        next: null,
	        prev: last
	      };

	      if (listener.prev) {
	        listener.prev.next = listener;
	      } else {
	        first = listener;
	      }

	      return function unsubscribe() {
	        if (!isSubscribed || first === null) return;
	        isSubscribed = false;

	        if (listener.next) {
	          listener.next.prev = listener.prev;
	        } else {
	          last = listener.prev;
	        }

	        if (listener.prev) {
	          listener.prev.next = listener.next;
	        } else {
	          first = listener.next;
	        }
	      };
	    }
	  };
	}

	var nullListeners = {
	  notify: function notify() {},
	  get: function get() {
	    return [];
	  }
	};

	function createSubscription(store, parentSub) {
	  var unsubscribe;
	  var listeners = nullListeners;

	  function addNestedSub(listener) {
	    trySubscribe();
	    return listeners.subscribe(listener);
	  }

	  function notifyNestedSubs() {
	    listeners.notify();
	  }

	  function handleChangeWrapper() {
	    if (subscription.onStateChange) {
	      subscription.onStateChange();
	    }
	  }

	  function isSubscribed() {
	    return Boolean(unsubscribe);
	  }

	  function trySubscribe() {
	    if (!unsubscribe) {
	      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
	      listeners = createListenerCollection();
	    }
	  }

	  function tryUnsubscribe() {
	    if (unsubscribe) {
	      unsubscribe();
	      unsubscribe = undefined;
	      listeners.clear();
	      listeners = nullListeners;
	    }
	  }

	  var subscription = {
	    addNestedSub: addNestedSub,
	    notifyNestedSubs: notifyNestedSubs,
	    handleChangeWrapper: handleChangeWrapper,
	    isSubscribed: isSubscribed,
	    trySubscribe: trySubscribe,
	    tryUnsubscribe: tryUnsubscribe,
	    getListeners: function getListeners() {
	      return listeners;
	    }
	  };
	  return subscription;
	}

	var useIsomorphicLayoutEffect$1 = {};

	useIsomorphicLayoutEffect$1.__esModule = true;
	useIsomorphicLayoutEffect$1.useIsomorphicLayoutEffect = void 0;

	var _react$b = require$$3;

	// React currently throws a warning when using useLayoutEffect on the server.
	// To get around it, we can conditionally useEffect on the server (no-op) and
	// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store
	// subscription callback always has the selector from the latest render commit
	// available, otherwise a store update may happen between render and the effect,
	// which may cause missed updates; we also must ensure the store subscription
	// is created synchronously, otherwise a store update may occur before the
	// subscription is created and an inconsistent state may be observed
	var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? _react$b.useLayoutEffect : _react$b.useEffect;
	useIsomorphicLayoutEffect$1.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault$1.exports["default"];

		var _interopRequireWildcard = interopRequireWildcard.exports["default"];

		exports.__esModule = true;
		exports["default"] = void 0;

		var _react = _interopRequireWildcard(require$$3);

		var _propTypes = _interopRequireDefault(propTypes.exports);

		var _Context = Context$2;

		var _Subscription = Subscription;

		var _useIsomorphicLayoutEffect = useIsomorphicLayoutEffect$1;

		function Provider(_ref) {
		  var store = _ref.store,
		      context = _ref.context,
		      children = _ref.children;
		  var contextValue = (0, _react.useMemo)(function () {
		    var subscription = (0, _Subscription.createSubscription)(store);
		    subscription.onStateChange = subscription.notifyNestedSubs;
		    return {
		      store: store,
		      subscription: subscription
		    };
		  }, [store]);
		  var previousState = (0, _react.useMemo)(function () {
		    return store.getState();
		  }, [store]);
		  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
		    var subscription = contextValue.subscription;
		    subscription.trySubscribe();

		    if (previousState !== store.getState()) {
		      subscription.notifyNestedSubs();
		    }

		    return function () {
		      subscription.tryUnsubscribe();
		      subscription.onStateChange = null;
		    };
		  }, [contextValue, previousState]);
		  var Context = context || _Context.ReactReduxContext;
		  return /*#__PURE__*/_react["default"].createElement(Context.Provider, {
		    value: contextValue
		  }, children);
		}

		{
		  Provider.propTypes = {
		    store: _propTypes["default"].shape({
		      subscribe: _propTypes["default"].func.isRequired,
		      dispatch: _propTypes["default"].func.isRequired,
		      getState: _propTypes["default"].func.isRequired
		    }),
		    context: _propTypes["default"].object,
		    children: _propTypes["default"].any
		  };
		}

		var _default = Provider;
		exports["default"] = _default;
	} (Provider));

	var connectAdvanced = {};

	var _extends$6 = {exports: {}};

	(function (module) {
		function _extends() {
		  module.exports = _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];

		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }

		    return target;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  return _extends.apply(this, arguments);
		}

		module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (_extends$6));

	var objectWithoutPropertiesLoose$1 = {exports: {}};

	(function (module) {
		function _objectWithoutPropertiesLoose(source, excluded) {
		  if (source == null) return {};
		  var target = {};
		  var sourceKeys = Object.keys(source);
		  var key, i;

		  for (i = 0; i < sourceKeys.length; i++) {
		    key = sourceKeys[i];
		    if (excluded.indexOf(key) >= 0) continue;
		    target[key] = source[key];
		  }

		  return target;
		}

		module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (objectWithoutPropertiesLoose$1));

	var reactIs$2 = {exports: {}};

	var reactIs_development$1 = {};

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */



	{
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development$1.AsyncMode = AsyncMode;
	reactIs_development$1.ConcurrentMode = ConcurrentMode;
	reactIs_development$1.ContextConsumer = ContextConsumer;
	reactIs_development$1.ContextProvider = ContextProvider;
	reactIs_development$1.Element = Element;
	reactIs_development$1.ForwardRef = ForwardRef;
	reactIs_development$1.Fragment = Fragment;
	reactIs_development$1.Lazy = Lazy;
	reactIs_development$1.Memo = Memo;
	reactIs_development$1.Portal = Portal;
	reactIs_development$1.Profiler = Profiler;
	reactIs_development$1.StrictMode = StrictMode;
	reactIs_development$1.Suspense = Suspense;
	reactIs_development$1.isAsyncMode = isAsyncMode;
	reactIs_development$1.isConcurrentMode = isConcurrentMode;
	reactIs_development$1.isContextConsumer = isContextConsumer;
	reactIs_development$1.isContextProvider = isContextProvider;
	reactIs_development$1.isElement = isElement;
	reactIs_development$1.isForwardRef = isForwardRef;
	reactIs_development$1.isFragment = isFragment;
	reactIs_development$1.isLazy = isLazy;
	reactIs_development$1.isMemo = isMemo;
	reactIs_development$1.isPortal = isPortal;
	reactIs_development$1.isProfiler = isProfiler;
	reactIs_development$1.isStrictMode = isStrictMode;
	reactIs_development$1.isSuspense = isSuspense;
	reactIs_development$1.isValidElementType = isValidElementType;
	reactIs_development$1.typeOf = typeOf;
	  })();
	}

	{
	  reactIs$2.exports = reactIs_development$1;
	}

	var reactIs$1 = reactIs$2.exports;

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	  childContextTypes: true,
	  contextType: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDefaultProps: true,
	  getDerivedStateFromError: true,
	  getDerivedStateFromProps: true,
	  mixins: true,
	  propTypes: true,
	  type: true
	};
	var KNOWN_STATICS = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;

	function getStatics(component) {
	  // React v16.11 and below
	  if (reactIs$1.isMemo(component)) {
	    return MEMO_STATICS;
	  } // React v16.12 and above


	  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}

	var defineProperty$1 = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = Object.prototype;
	function hoistNonReactStatics$3(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components
	    if (objectPrototype) {
	      var inheritedComponent = getPrototypeOf(sourceComponent);

	      if (inheritedComponent && inheritedComponent !== objectPrototype) {
	        hoistNonReactStatics$3(targetComponent, inheritedComponent, blacklist);
	      }
	    }

	    var keys = getOwnPropertyNames(sourceComponent);

	    if (getOwnPropertySymbols) {
	      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	    }

	    var targetStatics = getStatics(targetComponent);
	    var sourceStatics = getStatics(sourceComponent);

	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i];

	      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

	        try {
	          // Avoid failures from read-only properties
	          defineProperty$1(targetComponent, key, descriptor);
	        } catch (e) {}
	      }
	    }
	  }

	  return targetComponent;
	}

	var hoistNonReactStatics_cjs = hoistNonReactStatics$3;

	var reactIs = {exports: {}};

	var reactIs_development = {};

	/** @license React v17.0.2
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  (function() {

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = 0xeac7;
	var REACT_PORTAL_TYPE = 0xeaca;
	var REACT_FRAGMENT_TYPE = 0xeacb;
	var REACT_STRICT_MODE_TYPE = 0xeacc;
	var REACT_PROFILER_TYPE = 0xead2;
	var REACT_PROVIDER_TYPE = 0xeacd;
	var REACT_CONTEXT_TYPE = 0xeace;
	var REACT_FORWARD_REF_TYPE = 0xead0;
	var REACT_SUSPENSE_TYPE = 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = 0xead8;
	var REACT_MEMO_TYPE = 0xead3;
	var REACT_LAZY_TYPE = 0xead4;
	var REACT_BLOCK_TYPE = 0xead9;
	var REACT_SERVER_BLOCK_TYPE = 0xeada;
	var REACT_FUNDAMENTAL_TYPE = 0xead5;
	var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
	var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

	if (typeof Symbol === 'function' && Symbol.for) {
	  var symbolFor = Symbol.for;
	  REACT_ELEMENT_TYPE = symbolFor('react.element');
	  REACT_PORTAL_TYPE = symbolFor('react.portal');
	  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
	  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
	  REACT_PROFILER_TYPE = symbolFor('react.profiler');
	  REACT_PROVIDER_TYPE = symbolFor('react.provider');
	  REACT_CONTEXT_TYPE = symbolFor('react.context');
	  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
	  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
	  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
	  REACT_MEMO_TYPE = symbolFor('react.memo');
	  REACT_LAZY_TYPE = symbolFor('react.lazy');
	  REACT_BLOCK_TYPE = symbolFor('react.block');
	  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
	  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
	  symbolFor('react.scope');
	  symbolFor('react.opaque.id');
	  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
	  symbolFor('react.offscreen');
	  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
	}

	// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

	var enableScopeAPI = false; // Experimental Create Event Handle API.

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
	      return true;
	    }
	  }

	  return false;
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	          case REACT_SUSPENSE_LIST_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	}
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false;
	var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isConcurrentMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
	      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development.ContextConsumer = ContextConsumer;
	reactIs_development.ContextProvider = ContextProvider;
	reactIs_development.Element = Element;
	reactIs_development.ForwardRef = ForwardRef;
	reactIs_development.Fragment = Fragment;
	reactIs_development.Lazy = Lazy;
	reactIs_development.Memo = Memo;
	reactIs_development.Portal = Portal;
	reactIs_development.Profiler = Profiler;
	reactIs_development.StrictMode = StrictMode;
	reactIs_development.Suspense = Suspense;
	reactIs_development.isAsyncMode = isAsyncMode;
	reactIs_development.isConcurrentMode = isConcurrentMode;
	reactIs_development.isContextConsumer = isContextConsumer;
	reactIs_development.isContextProvider = isContextProvider;
	reactIs_development.isElement = isElement;
	reactIs_development.isForwardRef = isForwardRef;
	reactIs_development.isFragment = isFragment;
	reactIs_development.isLazy = isLazy;
	reactIs_development.isMemo = isMemo;
	reactIs_development.isPortal = isPortal;
	reactIs_development.isProfiler = isProfiler;
	reactIs_development.isStrictMode = isStrictMode;
	reactIs_development.isSuspense = isSuspense;
	reactIs_development.isValidElementType = isValidElementType;
	reactIs_development.typeOf = typeOf;
	  })();
	}

	{
	  reactIs.exports = reactIs_development;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault$1.exports["default"];

		var _interopRequireWildcard = interopRequireWildcard.exports["default"];

		exports.__esModule = true;
		exports["default"] = connectAdvanced;

		var _extends2 = _interopRequireDefault(_extends$6.exports);

		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLoose$1.exports);

		var _hoistNonReactStatics = _interopRequireDefault(hoistNonReactStatics_cjs);

		var _react = _interopRequireWildcard(require$$3);

		var _reactIs = reactIs.exports;

		var _Subscription = Subscription;

		var _useIsomorphicLayoutEffect = useIsomorphicLayoutEffect$1;

		var _Context = Context$2;

		var _excluded = ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"],
		    _excluded2 = ["reactReduxForwardedRef"];
		// Define some constant arrays just to avoid re-creating these
		var EMPTY_ARRAY = [];
		var NO_SUBSCRIPTION_ARRAY = [null, null];

		var stringifyComponent = function stringifyComponent(Comp) {
		  try {
		    return JSON.stringify(Comp);
		  } catch (err) {
		    return String(Comp);
		  }
		};

		function storeStateUpdatesReducer(state, action) {
		  var updateCount = state[1];
		  return [action.payload, updateCount + 1];
		}

		function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
		  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
		    return effectFunc.apply(void 0, effectArgs);
		  }, dependencies);
		}

		function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
		  // We want to capture the wrapper props and child props we used for later comparisons
		  lastWrapperProps.current = wrapperProps;
		  lastChildProps.current = actualChildProps;
		  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update

		  if (childPropsFromStoreUpdate.current) {
		    childPropsFromStoreUpdate.current = null;
		    notifyNestedSubs();
		  }
		}

		function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
		  // If we're not subscribed to the store, nothing to do here
		  if (!shouldHandleStateChanges) return; // Capture values for checking if and when this component unmounts

		  var didUnsubscribe = false;
		  var lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component

		  var checkForUpdates = function checkForUpdates() {
		    if (didUnsubscribe) {
		      // Don't run stale listeners.
		      // Redux doesn't guarantee unsubscriptions happen until next dispatch.
		      return;
		    }

		    var latestStoreState = store.getState();
		    var newChildProps, error;

		    try {
		      // Actually run the selector with the most recent store state and wrapper props
		      // to determine what the child props should be
		      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
		    } catch (e) {
		      error = e;
		      lastThrownError = e;
		    }

		    if (!error) {
		      lastThrownError = null;
		    } // If the child props haven't changed, nothing to do here - cascade the subscription update


		    if (newChildProps === lastChildProps.current) {
		      if (!renderIsScheduled.current) {
		        notifyNestedSubs();
		      }
		    } else {
		      // Save references to the new child props.  Note that we track the "child props from store update"
		      // as a ref instead of a useState/useReducer because we need a way to determine if that value has
		      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without
		      // forcing another re-render, which we don't want.
		      lastChildProps.current = newChildProps;
		      childPropsFromStoreUpdate.current = newChildProps;
		      renderIsScheduled.current = true; // If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

		      forceComponentUpdateDispatch({
		        type: 'STORE_UPDATED',
		        payload: {
		          error: error
		        }
		      });
		    }
		  }; // Actually subscribe to the nearest connected ancestor (or store)


		  subscription.onStateChange = checkForUpdates;
		  subscription.trySubscribe(); // Pull data from the store after first render in case the store has
		  // changed since we began.

		  checkForUpdates();

		  var unsubscribeWrapper = function unsubscribeWrapper() {
		    didUnsubscribe = true;
		    subscription.tryUnsubscribe();
		    subscription.onStateChange = null;

		    if (lastThrownError) {
		      // It's possible that we caught an error due to a bad mapState function, but the
		      // parent re-rendered without this component and we're about to unmount.
		      // This shouldn't happen as long as we do top-down subscriptions correctly, but
		      // if we ever do those wrong, this throw will surface the error in our tests.
		      // In that case, throw the error from here so it doesn't get lost.
		      throw lastThrownError;
		    }
		  };

		  return unsubscribeWrapper;
		}

		var initStateUpdates = function initStateUpdates() {
		  return [null, 0];
		};

		function connectAdvanced(
		/*
		  selectorFactory is a func that is responsible for returning the selector function used to
		  compute new props from state, props, and dispatch. For example:
		     export default connectAdvanced((dispatch, options) => (state, props) => ({
		      thing: state.things[props.thingId],
		      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
		    }))(YourComponent)
		   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
		  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
		  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
		   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
		  props. Do not use connectAdvanced directly without memoizing results between calls to your
		  selector, otherwise the Connect component will re-render on every state or props change.
		*/
		selectorFactory, // options object:
		_ref) {
		  if (_ref === void 0) {
		    _ref = {};
		  }

		  var _ref2 = _ref,
		      _ref2$getDisplayName = _ref2.getDisplayName,
		      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
		    return "ConnectAdvanced(" + name + ")";
		  } : _ref2$getDisplayName,
		      _ref2$methodName = _ref2.methodName,
		      methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName,
		      _ref2$renderCountProp = _ref2.renderCountProp,
		      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,
		      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,
		      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,
		      _ref2$storeKey = _ref2.storeKey,
		      storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey,
		      _ref2$withRef = _ref2.withRef,
		      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,
		      _ref2$forwardRef = _ref2.forwardRef,
		      forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef,
		      _ref2$context = _ref2.context,
		      context = _ref2$context === void 0 ? _Context.ReactReduxContext : _ref2$context,
		      connectOptions = (0, _objectWithoutPropertiesLoose2["default"])(_ref2, _excluded);

		  {
		    if (renderCountProp !== undefined) {
		      throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
		    }

		    if (withRef) {
		      throw new Error('withRef is removed. To access the wrapped instance, use a ref on the connected component');
		    }

		    var customStoreWarningMessage = 'To use a custom Redux store for specific components, create a custom React context with ' + "React.createContext(), and pass the context object to React Redux's Provider and specific components" + ' like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. ' + 'You may also pass a {context : MyContext} option to connect';

		    if (storeKey !== 'store') {
		      throw new Error('storeKey has been removed and does not do anything. ' + customStoreWarningMessage);
		    }
		  }

		  var Context = context;
		  return function wrapWithConnect(WrappedComponent) {
		    if (!(0, _reactIs.isValidElementType)(WrappedComponent)) {
		      throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
		    }

		    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
		    var displayName = getDisplayName(wrappedComponentName);
		    var selectorFactoryOptions = (0, _extends2["default"])({}, connectOptions, {
		      getDisplayName: getDisplayName,
		      methodName: methodName,
		      renderCountProp: renderCountProp,
		      shouldHandleStateChanges: shouldHandleStateChanges,
		      storeKey: storeKey,
		      displayName: displayName,
		      wrappedComponentName: wrappedComponentName,
		      WrappedComponent: WrappedComponent
		    });
		    var pure = connectOptions.pure;

		    function createChildSelector(store) {
		      return selectorFactory(store.dispatch, selectorFactoryOptions);
		    } // If we aren't running in "pure" mode, we don't want to memoize values.
		    // To avoid conditionally calling hooks, we fall back to a tiny wrapper
		    // that just executes the given callback immediately.


		    var usePureOnlyMemo = pure ? _react.useMemo : function (callback) {
		      return callback();
		    };

		    function ConnectFunction(props) {
		      var _useMemo = (0, _react.useMemo)(function () {
		        // Distinguish between actual "data" props that were passed to the wrapper component,
		        // and values needed to control behavior (forwarded refs, alternate context instances).
		        // To maintain the wrapperProps object reference, memoize this destructuring.
		        var reactReduxForwardedRef = props.reactReduxForwardedRef,
		            wrapperProps = (0, _objectWithoutPropertiesLoose2["default"])(props, _excluded2);
		        return [props.context, reactReduxForwardedRef, wrapperProps];
		      }, [props]),
		          propsContext = _useMemo[0],
		          reactReduxForwardedRef = _useMemo[1],
		          wrapperProps = _useMemo[2];

		      var ContextToUse = (0, _react.useMemo)(function () {
		        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.
		        // Memoize the check that determines which context instance we should use.
		        return propsContext && propsContext.Consumer && (0, _reactIs.isContextConsumer)( /*#__PURE__*/_react["default"].createElement(propsContext.Consumer, null)) ? propsContext : Context;
		      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available

		      var contextValue = (0, _react.useContext)(ContextToUse); // The store _must_ exist as either a prop or in context.
		      // We'll check to see if it _looks_ like a Redux store first.
		      // This allows us to pass through a `store` prop that is just a plain value.

		      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
		      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);

		      if (!didStoreComeFromProps && !didStoreComeFromContext) {
		        throw new Error("Could not find \"store\" in the context of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
		      } // Based on the previous check, one of these must be true


		      var store = didStoreComeFromProps ? props.store : contextValue.store;
		      var childPropsSelector = (0, _react.useMemo)(function () {
		        // The child props selector needs the store reference as an input.
		        // Re-create this selector whenever the store changes.
		        return createChildSelector(store);
		      }, [store]);

		      var _useMemo2 = (0, _react.useMemo)(function () {
		        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component
		        // connected to the store via props shouldn't use subscription from context, or vice versa.

		        // This Subscription's source should match where store came from: props vs. context. A component
		        // connected to the store via props shouldn't use subscription from context, or vice versa.
		        var subscription = (0, _Subscription.createSubscription)(store, didStoreComeFromProps ? null : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
		        // the middle of the notification loop, where `subscription` will then be null. This can
		        // probably be avoided if Subscription's listeners logic is changed to not call listeners
		        // that have been unsubscribed in the  middle of the notification loop.

		        // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
		        // the middle of the notification loop, where `subscription` will then be null. This can
		        // probably be avoided if Subscription's listeners logic is changed to not call listeners
		        // that have been unsubscribed in the  middle of the notification loop.
		        var notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);
		        return [subscription, notifyNestedSubs];
		      }, [store, didStoreComeFromProps, contextValue]),
		          subscription = _useMemo2[0],
		          notifyNestedSubs = _useMemo2[1]; // Determine what {store, subscription} value should be put into nested context, if necessary,
		      // and memoize that value to avoid unnecessary context updates.


		      var overriddenContextValue = (0, _react.useMemo)(function () {
		        if (didStoreComeFromProps) {
		          // This component is directly subscribed to a store from props.
		          // We don't want descendants reading from this store - pass down whatever
		          // the existing context value is from the nearest connected ancestor.
		          return contextValue;
		        } // Otherwise, put this component's subscription instance into context, so that
		        // connected descendants won't update until after this component is done


		        return (0, _extends2["default"])({}, contextValue, {
		          subscription: subscription
		        });
		      }, [didStoreComeFromProps, contextValue, subscription]); // We need to force this wrapper component to re-render whenever a Redux store update
		      // causes a change to the calculated child component props (or we caught an error in mapState)

		      var _useReducer = (0, _react.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates),
		          _useReducer$ = _useReducer[0],
		          previousStateUpdateResult = _useReducer$[0],
		          forceComponentUpdateDispatch = _useReducer[1]; // Propagate any mapState/mapDispatch errors upwards


		      if (previousStateUpdateResult && previousStateUpdateResult.error) {
		        throw previousStateUpdateResult.error;
		      } // Set up refs to coordinate values between the subscription effect and the render logic


		      var lastChildProps = (0, _react.useRef)();
		      var lastWrapperProps = (0, _react.useRef)(wrapperProps);
		      var childPropsFromStoreUpdate = (0, _react.useRef)();
		      var renderIsScheduled = (0, _react.useRef)(false);
		      var actualChildProps = usePureOnlyMemo(function () {
		        // Tricky logic here:
		        // - This render may have been triggered by a Redux store update that produced new child props
		        // - However, we may have gotten new wrapper props after that
		        // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.
		        // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.
		        // So, we'll use the child props from store update only if the wrapper props are the same as last time.
		        if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
		          return childPropsFromStoreUpdate.current;
		        } // TODO We're reading the store directly in render() here. Bad idea?
		        // This will likely cause Bad Things (TM) to happen in Concurrent Mode.
		        // Note that we do this because on renders _not_ caused by store updates, we need the latest store state
		        // to determine what the child props should be.


		        return childPropsSelector(store.getState(), wrapperProps);
		      }, [store, previousStateUpdateResult, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns
		      // about useLayoutEffect in SSR, so we try to detect environment and fall back to
		      // just useEffect instead to avoid the warning, since neither will run anyway.

		      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]); // Our re-subscribe logic only runs when the store/subscription setup changes

		      useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]); // Now that all that's done, we can finally try to actually render the child component.
		      // We memoize the elements for the rendered child component as an optimization.

		      var renderedWrappedComponent = (0, _react.useMemo)(function () {
		        return /*#__PURE__*/_react["default"].createElement(WrappedComponent, (0, _extends2["default"])({}, actualChildProps, {
		          ref: reactReduxForwardedRef
		        }));
		      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering
		      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

		      var renderedChild = (0, _react.useMemo)(function () {
		        if (shouldHandleStateChanges) {
		          // If this component is subscribed to store updates, we need to pass its own
		          // subscription instance down to our descendants. That means rendering the same
		          // Context instance, and putting a different value into the context.
		          return /*#__PURE__*/_react["default"].createElement(ContextToUse.Provider, {
		            value: overriddenContextValue
		          }, renderedWrappedComponent);
		        }

		        return renderedWrappedComponent;
		      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
		      return renderedChild;
		    } // If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.


		    var Connect = pure ? _react["default"].memo(ConnectFunction) : ConnectFunction;
		    Connect.WrappedComponent = WrappedComponent;
		    Connect.displayName = ConnectFunction.displayName = displayName;

		    if (forwardRef) {
		      var forwarded = _react["default"].forwardRef(function forwardConnectRef(props, ref) {
		        return /*#__PURE__*/_react["default"].createElement(Connect, (0, _extends2["default"])({}, props, {
		          reactReduxForwardedRef: ref
		        }));
		      });

		      forwarded.displayName = displayName;
		      forwarded.WrappedComponent = WrappedComponent;
		      return (0, _hoistNonReactStatics["default"])(forwarded, WrappedComponent);
		    }

		    return (0, _hoistNonReactStatics["default"])(Connect, WrappedComponent);
		  };
		}
	} (connectAdvanced));

	var connect = {};

	var shallowEqual = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = shallowEqual;

		function is(x, y) {
		  if (x === y) {
		    return x !== 0 || y !== 0 || 1 / x === 1 / y;
		  } else {
		    return x !== x && y !== y;
		  }
		}

		function shallowEqual(objA, objB) {
		  if (is(objA, objB)) return true;

		  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
		    return false;
		  }

		  var keysA = Object.keys(objA);
		  var keysB = Object.keys(objB);
		  if (keysA.length !== keysB.length) return false;

		  for (var i = 0; i < keysA.length; i++) {
		    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
		      return false;
		    }
		  }

		  return true;
		}
	} (shallowEqual));

	var mapDispatchToProps = {};

	var bindActionCreators$1 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = bindActionCreators;

		function bindActionCreators(actionCreators, dispatch) {
		  var boundActionCreators = {};

		  var _loop = function _loop(key) {
		    var actionCreator = actionCreators[key];

		    if (typeof actionCreator === 'function') {
		      boundActionCreators[key] = function () {
		        return dispatch(actionCreator.apply(void 0, arguments));
		      };
		    }
		  };

		  for (var key in actionCreators) {
		    _loop(key);
		  }

		  return boundActionCreators;
		}
	} (bindActionCreators$1));

	var wrapMapToProps = {};

	var verifyPlainObject = {};

	var isPlainObject$4 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = isPlainObject;

		/**
		 * @param {any} obj The object to inspect.
		 * @returns {boolean} True if the argument appears to be a plain object.
		 */
		function isPlainObject(obj) {
		  if (typeof obj !== 'object' || obj === null) return false;
		  var proto = Object.getPrototypeOf(obj);
		  if (proto === null) return true;
		  var baseProto = proto;

		  while (Object.getPrototypeOf(baseProto) !== null) {
		    baseProto = Object.getPrototypeOf(baseProto);
		  }

		  return proto === baseProto;
		}
	} (isPlainObject$4));

	var warning$2 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = warning;

		/**
		 * Prints a warning in the console if it exists.
		 *
		 * @param {String} message The warning message.
		 * @returns {void}
		 */
		function warning(message) {
		  /* eslint-disable no-console */
		  if (typeof console !== 'undefined' && typeof console.error === 'function') {
		    console.error(message);
		  }
		  /* eslint-enable no-console */


		  try {
		    // This error was thrown as a convenience so that if you enable
		    // "break on all exceptions" in your console,
		    // it would pause the execution at this line.
		    throw new Error(message);
		    /* eslint-disable no-empty */
		  } catch (e) {}
		  /* eslint-enable no-empty */

		}
	} (warning$2));

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault$1.exports["default"];

		exports.__esModule = true;
		exports["default"] = verifyPlainObject;

		var _isPlainObject = _interopRequireDefault(isPlainObject$4);

		var _warning = _interopRequireDefault(warning$2);

		function verifyPlainObject(value, displayName, methodName) {
		  if (!(0, _isPlainObject["default"])(value)) {
		    (0, _warning["default"])(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
		  }
		}
	} (verifyPlainObject));

	var _interopRequireDefault$2Y = interopRequireDefault$1.exports["default"];

	wrapMapToProps.__esModule = true;
	wrapMapToProps.getDependsOnOwnProps = getDependsOnOwnProps;
	wrapMapToProps.wrapMapToPropsConstant = wrapMapToPropsConstant;
	wrapMapToProps.wrapMapToPropsFunc = wrapMapToPropsFunc;

	var _verifyPlainObject = _interopRequireDefault$2Y(verifyPlainObject);

	function wrapMapToPropsConstant(getConstant) {
	  return function initConstantSelector(dispatch, options) {
	    var constant = getConstant(dispatch, options);

	    function constantSelector() {
	      return constant;
	    }

	    constantSelector.dependsOnOwnProps = false;
	    return constantSelector;
	  };
	} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
	// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
	// whether mapToProps needs to be invoked when props have changed.
	//
	// A length of one signals that mapToProps does not depend on props from the parent component.
	// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
	// therefore not reporting its length accurately..


	function getDependsOnOwnProps(mapToProps) {
	  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
	} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
	// this function wraps mapToProps in a proxy function which does several things:
	//
	//  * Detects whether the mapToProps function being called depends on props, which
	//    is used by selectorFactory to decide if it should reinvoke on props changes.
	//
	//  * On first call, handles mapToProps if returns another function, and treats that
	//    new function as the true mapToProps for subsequent calls.
	//
	//  * On first call, verifies the first result is a plain object, in order to warn
	//    the developer that their mapToProps function is not returning a valid result.
	//


	function wrapMapToPropsFunc(mapToProps, methodName) {
	  return function initProxySelector(dispatch, _ref) {
	    var displayName = _ref.displayName;

	    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
	      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
	    }; // allow detectFactoryAndVerify to get ownProps


	    proxy.dependsOnOwnProps = true;

	    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
	      proxy.mapToProps = mapToProps;
	      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
	      var props = proxy(stateOrDispatch, ownProps);

	      if (typeof props === 'function') {
	        proxy.mapToProps = props;
	        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
	        props = proxy(stateOrDispatch, ownProps);
	      }

	      (0, _verifyPlainObject["default"])(props, displayName, methodName);
	      return props;
	    };

	    return proxy;
	  };
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault$1.exports["default"];

		exports.__esModule = true;
		exports["default"] = void 0;
		exports.whenMapDispatchToPropsIsFunction = whenMapDispatchToPropsIsFunction;
		exports.whenMapDispatchToPropsIsMissing = whenMapDispatchToPropsIsMissing;
		exports.whenMapDispatchToPropsIsObject = whenMapDispatchToPropsIsObject;

		var _bindActionCreators = _interopRequireDefault(bindActionCreators$1);

		var _wrapMapToProps = wrapMapToProps;

		function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
		  return typeof mapDispatchToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapDispatchToProps, 'mapDispatchToProps') : undefined;
		}

		function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
		  return !mapDispatchToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
		    return {
		      dispatch: dispatch
		    };
		  }) : undefined;
		}

		function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
		  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
		    return (0, _bindActionCreators["default"])(mapDispatchToProps, dispatch);
		  }) : undefined;
		}

		var _default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
		exports["default"] = _default;
	} (mapDispatchToProps));

	var mapStateToProps = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = void 0;
		exports.whenMapStateToPropsIsFunction = whenMapStateToPropsIsFunction;
		exports.whenMapStateToPropsIsMissing = whenMapStateToPropsIsMissing;

		var _wrapMapToProps = wrapMapToProps;

		function whenMapStateToPropsIsFunction(mapStateToProps) {
		  return typeof mapStateToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapStateToProps, 'mapStateToProps') : undefined;
		}

		function whenMapStateToPropsIsMissing(mapStateToProps) {
		  return !mapStateToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function () {
		    return {};
		  }) : undefined;
		}

		var _default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
		exports["default"] = _default;
	} (mapStateToProps));

	var mergeProps = {};

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault$1.exports["default"];

		exports.__esModule = true;
		exports["default"] = void 0;
		exports.defaultMergeProps = defaultMergeProps;
		exports.whenMergePropsIsFunction = whenMergePropsIsFunction;
		exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;
		exports.wrapMergePropsFunc = wrapMergePropsFunc;

		var _extends2 = _interopRequireDefault(_extends$6.exports);

		var _verifyPlainObject = _interopRequireDefault(verifyPlainObject);

		function defaultMergeProps(stateProps, dispatchProps, ownProps) {
		  return (0, _extends2["default"])({}, ownProps, stateProps, dispatchProps);
		}

		function wrapMergePropsFunc(mergeProps) {
		  return function initMergePropsProxy(dispatch, _ref) {
		    var displayName = _ref.displayName,
		        pure = _ref.pure,
		        areMergedPropsEqual = _ref.areMergedPropsEqual;
		    var hasRunOnce = false;
		    var mergedProps;
		    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
		      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

		      if (hasRunOnce) {
		        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
		      } else {
		        hasRunOnce = true;
		        mergedProps = nextMergedProps;
		        (0, _verifyPlainObject["default"])(mergedProps, displayName, 'mergeProps');
		      }

		      return mergedProps;
		    };
		  };
		}

		function whenMergePropsIsFunction(mergeProps) {
		  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
		}

		function whenMergePropsIsOmitted(mergeProps) {
		  return !mergeProps ? function () {
		    return defaultMergeProps;
		  } : undefined;
		}

		var _default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
		exports["default"] = _default;
	} (mergeProps));

	var selectorFactory = {};

	var verifySubselectors = {};

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault$1.exports["default"];

		exports.__esModule = true;
		exports["default"] = verifySubselectors;

		var _warning = _interopRequireDefault(warning$2);

		function verify(selector, methodName, displayName) {
		  if (!selector) {
		    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
		  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
		    if (!Object.prototype.hasOwnProperty.call(selector, 'dependsOnOwnProps')) {
		      (0, _warning["default"])("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
		    }
		  }
		}

		function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
		  verify(mapStateToProps, 'mapStateToProps', displayName);
		  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
		  verify(mergeProps, 'mergeProps', displayName);
		}
	} (verifySubselectors));

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault$1.exports["default"];

		exports.__esModule = true;
		exports["default"] = finalPropsSelectorFactory;
		exports.impureFinalPropsSelectorFactory = impureFinalPropsSelectorFactory;
		exports.pureFinalPropsSelectorFactory = pureFinalPropsSelectorFactory;

		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLoose$1.exports);

		var _verifySubselectors = _interopRequireDefault(verifySubselectors);

		var _excluded = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];

		function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
		  return function impureFinalPropsSelector(state, ownProps) {
		    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
		  };
		}

		function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
		  var areStatesEqual = _ref.areStatesEqual,
		      areOwnPropsEqual = _ref.areOwnPropsEqual,
		      areStatePropsEqual = _ref.areStatePropsEqual;
		  var hasRunAtLeastOnce = false;
		  var state;
		  var ownProps;
		  var stateProps;
		  var dispatchProps;
		  var mergedProps;

		  function handleFirstCall(firstState, firstOwnProps) {
		    state = firstState;
		    ownProps = firstOwnProps;
		    stateProps = mapStateToProps(state, ownProps);
		    dispatchProps = mapDispatchToProps(dispatch, ownProps);
		    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
		    hasRunAtLeastOnce = true;
		    return mergedProps;
		  }

		  function handleNewPropsAndNewState() {
		    stateProps = mapStateToProps(state, ownProps);
		    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
		    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
		    return mergedProps;
		  }

		  function handleNewProps() {
		    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
		    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
		    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
		    return mergedProps;
		  }

		  function handleNewState() {
		    var nextStateProps = mapStateToProps(state, ownProps);
		    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
		    stateProps = nextStateProps;
		    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
		    return mergedProps;
		  }

		  function handleSubsequentCalls(nextState, nextOwnProps) {
		    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
		    var stateChanged = !areStatesEqual(nextState, state);
		    state = nextState;
		    ownProps = nextOwnProps;
		    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
		    if (propsChanged) return handleNewProps();
		    if (stateChanged) return handleNewState();
		    return mergedProps;
		  }

		  return function pureFinalPropsSelector(nextState, nextOwnProps) {
		    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
		  };
		} // TODO: Add more comments
		// If pure is true, the selector returned by selectorFactory will memoize its results,
		// allowing connectAdvanced's shouldComponentUpdate to return false if final
		// props have not changed. If false, the selector will always return a new
		// object and shouldComponentUpdate will always return true.


		function finalPropsSelectorFactory(dispatch, _ref2) {
		  var initMapStateToProps = _ref2.initMapStateToProps,
		      initMapDispatchToProps = _ref2.initMapDispatchToProps,
		      initMergeProps = _ref2.initMergeProps,
		      options = (0, _objectWithoutPropertiesLoose2["default"])(_ref2, _excluded);
		  var mapStateToProps = initMapStateToProps(dispatch, options);
		  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
		  var mergeProps = initMergeProps(dispatch, options);

		  {
		    (0, _verifySubselectors["default"])(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
		  }

		  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
		  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
		}
	} (selectorFactory));

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault$1.exports["default"];

		exports.__esModule = true;
		exports.createConnect = createConnect;
		exports["default"] = void 0;

		var _extends2 = _interopRequireDefault(_extends$6.exports);

		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLoose$1.exports);

		var _connectAdvanced = _interopRequireDefault(connectAdvanced);

		var _shallowEqual = _interopRequireDefault(shallowEqual);

		var _mapDispatchToProps = _interopRequireDefault(mapDispatchToProps);

		var _mapStateToProps = _interopRequireDefault(mapStateToProps);

		var _mergeProps = _interopRequireDefault(mergeProps);

		var _selectorFactory = _interopRequireDefault(selectorFactory);

		var _excluded = ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"];

		/*
		  connect is a facade over connectAdvanced. It turns its args into a compatible
		  selectorFactory, which has the signature:

		    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
		  
		  connect passes its args to connectAdvanced as options, which will in turn pass them to
		  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

		  selectorFactory returns a final props selector from its mapStateToProps,
		  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
		  mergePropsFactories, and pure args.

		  The resulting final props selector is called by the Connect component instance whenever
		  it receives new props or store state.
		 */
		function match(arg, factories, name) {
		  for (var i = factories.length - 1; i >= 0; i--) {
		    var result = factories[i](arg);
		    if (result) return result;
		  }

		  return function (dispatch, options) {
		    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
		  };
		}

		function strictEqual(a, b) {
		  return a === b;
		} // createConnect with default args builds the 'official' connect behavior. Calling it with
		// different options opens up some testing and extensibility scenarios


		function createConnect(_temp) {
		  var _ref = _temp === void 0 ? {} : _temp,
		      _ref$connectHOC = _ref.connectHOC,
		      connectHOC = _ref$connectHOC === void 0 ? _connectAdvanced["default"] : _ref$connectHOC,
		      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
		      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? _mapStateToProps["default"] : _ref$mapStateToPropsF,
		      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
		      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? _mapDispatchToProps["default"] : _ref$mapDispatchToPro,
		      _ref$mergePropsFactor = _ref.mergePropsFactories,
		      mergePropsFactories = _ref$mergePropsFactor === void 0 ? _mergeProps["default"] : _ref$mergePropsFactor,
		      _ref$selectorFactory = _ref.selectorFactory,
		      selectorFactory = _ref$selectorFactory === void 0 ? _selectorFactory["default"] : _ref$selectorFactory;

		  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
		    if (_ref2 === void 0) {
		      _ref2 = {};
		    }

		    var _ref3 = _ref2,
		        _ref3$pure = _ref3.pure,
		        pure = _ref3$pure === void 0 ? true : _ref3$pure,
		        _ref3$areStatesEqual = _ref3.areStatesEqual,
		        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,
		        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,
		        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? _shallowEqual["default"] : _ref3$areOwnPropsEqua,
		        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,
		        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? _shallowEqual["default"] : _ref3$areStatePropsEq,
		        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,
		        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? _shallowEqual["default"] : _ref3$areMergedPropsE,
		        extraOptions = (0, _objectWithoutPropertiesLoose2["default"])(_ref3, _excluded);
		    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
		    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
		    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
		    return connectHOC(selectorFactory, (0, _extends2["default"])({
		      // used in error messages
		      methodName: 'connect',
		      // used to compute Connect's displayName from the wrapped component's displayName.
		      getDisplayName: function getDisplayName(name) {
		        return "Connect(" + name + ")";
		      },
		      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
		      shouldHandleStateChanges: Boolean(mapStateToProps),
		      // passed through to selectorFactory
		      initMapStateToProps: initMapStateToProps,
		      initMapDispatchToProps: initMapDispatchToProps,
		      initMergeProps: initMergeProps,
		      pure: pure,
		      areStatesEqual: areStatesEqual,
		      areOwnPropsEqual: areOwnPropsEqual,
		      areStatePropsEqual: areStatePropsEqual,
		      areMergedPropsEqual: areMergedPropsEqual
		    }, extraOptions));
		  };
		}

		var _default = /*#__PURE__*/createConnect();

		exports["default"] = _default;
	} (connect));

	var useDispatch$1 = {};

	var useStore$1 = {};

	var useReduxContext$1 = {};

	useReduxContext$1.__esModule = true;
	useReduxContext$1.useReduxContext = useReduxContext;

	var _react$a = require$$3;

	var _Context$4 = Context$2;

	/**
	 * A hook to access the value of the `ReactReduxContext`. This is a low-level
	 * hook that you should usually not need to call directly.
	 *
	 * @returns {any} the value of the `ReactReduxContext`
	 *
	 * @example
	 *
	 * import React from 'react'
	 * import { useReduxContext } from 'react-redux'
	 *
	 * export const CounterComponent = ({ value }) => {
	 *   const { store } = useReduxContext()
	 *   return <div>{store.getState()}</div>
	 * }
	 */
	function useReduxContext() {
	  var contextValue = (0, _react$a.useContext)(_Context$4.ReactReduxContext);

	  if (!contextValue) {
	    throw new Error('could not find react-redux context value; please ensure the component is wrapped in a <Provider>');
	  }

	  return contextValue;
	}

	useStore$1.__esModule = true;
	useStore$1.createStoreHook = createStoreHook;
	useStore$1.useStore = void 0;

	var _react$9 = require$$3;

	var _Context$3 = Context$2;

	var _useReduxContext2$1 = useReduxContext$1;

	/**
	 * Hook factory, which creates a `useStore` hook bound to a given context.
	 *
	 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
	 * @returns {Function} A `useStore` hook bound to the specified context.
	 */
	function createStoreHook(context) {
	  if (context === void 0) {
	    context = _Context$3.ReactReduxContext;
	  }

	  var useReduxContext = context === _Context$3.ReactReduxContext ? _useReduxContext2$1.useReduxContext : function () {
	    return (0, _react$9.useContext)(context);
	  };
	  return function useStore() {
	    var _useReduxContext = useReduxContext(),
	        store = _useReduxContext.store;

	    return store;
	  };
	}
	/**
	 * A hook to access the redux store.
	 *
	 * @returns {any} the redux store
	 *
	 * @example
	 *
	 * import React from 'react'
	 * import { useStore } from 'react-redux'
	 *
	 * export const ExampleComponent = () => {
	 *   const store = useStore()
	 *   return <div>{store.getState()}</div>
	 * }
	 */


	var useStore = /*#__PURE__*/createStoreHook();
	useStore$1.useStore = useStore;

	useDispatch$1.__esModule = true;
	useDispatch$1.createDispatchHook = createDispatchHook;
	useDispatch$1.useDispatch = void 0;

	var _Context$2 = Context$2;

	var _useStore$1 = useStore$1;

	/**
	 * Hook factory, which creates a `useDispatch` hook bound to a given context.
	 *
	 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
	 * @returns {Function} A `useDispatch` hook bound to the specified context.
	 */
	function createDispatchHook(context) {
	  if (context === void 0) {
	    context = _Context$2.ReactReduxContext;
	  }

	  var useStore = context === _Context$2.ReactReduxContext ? _useStore$1.useStore : (0, _useStore$1.createStoreHook)(context);
	  return function useDispatch() {
	    var store = useStore();
	    return store.dispatch;
	  };
	}
	/**
	 * A hook to access the redux `dispatch` function.
	 *
	 * @returns {any|function} redux store's `dispatch` function
	 *
	 * @example
	 *
	 * import React, { useCallback } from 'react'
	 * import { useDispatch } from 'react-redux'
	 *
	 * export const CounterComponent = ({ value }) => {
	 *   const dispatch = useDispatch()
	 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
	 *   return (
	 *     <div>
	 *       <span>{value}</span>
	 *       <button onClick={increaseCounter}>Increase counter</button>
	 *     </div>
	 *   )
	 * }
	 */


	var useDispatch = /*#__PURE__*/createDispatchHook();
	useDispatch$1.useDispatch = useDispatch;

	var useSelector$1 = {};

	useSelector$1.__esModule = true;
	useSelector$1.createSelectorHook = createSelectorHook;
	useSelector$1.useSelector = void 0;

	var _react$8 = require$$3;

	var _useReduxContext2 = useReduxContext$1;

	var _Subscription = Subscription;

	var _useIsomorphicLayoutEffect = useIsomorphicLayoutEffect$1;

	var _Context$1 = Context$2;

	var refEquality = function refEquality(a, b) {
	  return a === b;
	};

	function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
	  var _useReducer = (0, _react$8.useReducer)(function (s) {
	    return s + 1;
	  }, 0),
	      forceRender = _useReducer[1];

	  var subscription = (0, _react$8.useMemo)(function () {
	    return (0, _Subscription.createSubscription)(store, contextSub);
	  }, [store, contextSub]);
	  var latestSubscriptionCallbackError = (0, _react$8.useRef)();
	  var latestSelector = (0, _react$8.useRef)();
	  var latestStoreState = (0, _react$8.useRef)();
	  var latestSelectedState = (0, _react$8.useRef)();
	  var storeState = store.getState();
	  var selectedState;

	  try {
	    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
	      var newSelectedState = selector(storeState); // ensure latest selected state is reused so that a custom equality function can result in identical references

	      if (latestSelectedState.current === undefined || !equalityFn(newSelectedState, latestSelectedState.current)) {
	        selectedState = newSelectedState;
	      } else {
	        selectedState = latestSelectedState.current;
	      }
	    } else {
	      selectedState = latestSelectedState.current;
	    }
	  } catch (err) {
	    if (latestSubscriptionCallbackError.current) {
	      err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
	    }

	    throw err;
	  }

	  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
	    latestSelector.current = selector;
	    latestStoreState.current = storeState;
	    latestSelectedState.current = selectedState;
	    latestSubscriptionCallbackError.current = undefined;
	  });
	  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
	    function checkForUpdates() {
	      try {
	        var newStoreState = store.getState(); // Avoid calling selector multiple times if the store's state has not changed

	        if (newStoreState === latestStoreState.current) {
	          return;
	        }

	        var _newSelectedState = latestSelector.current(newStoreState);

	        if (equalityFn(_newSelectedState, latestSelectedState.current)) {
	          return;
	        }

	        latestSelectedState.current = _newSelectedState;
	        latestStoreState.current = newStoreState;
	      } catch (err) {
	        // we ignore all errors here, since when the component
	        // is re-rendered, the selectors are called again, and
	        // will throw again, if neither props nor store state
	        // changed
	        latestSubscriptionCallbackError.current = err;
	      }

	      forceRender();
	    }

	    subscription.onStateChange = checkForUpdates;
	    subscription.trySubscribe();
	    checkForUpdates();
	    return function () {
	      return subscription.tryUnsubscribe();
	    };
	  }, [store, subscription]);
	  return selectedState;
	}
	/**
	 * Hook factory, which creates a `useSelector` hook bound to a given context.
	 *
	 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
	 * @returns {Function} A `useSelector` hook bound to the specified context.
	 */


	function createSelectorHook(context) {
	  if (context === void 0) {
	    context = _Context$1.ReactReduxContext;
	  }

	  var useReduxContext = context === _Context$1.ReactReduxContext ? _useReduxContext2.useReduxContext : function () {
	    return (0, _react$8.useContext)(context);
	  };
	  return function useSelector(selector, equalityFn) {
	    if (equalityFn === void 0) {
	      equalityFn = refEquality;
	    }

	    {
	      if (!selector) {
	        throw new Error("You must pass a selector to useSelector");
	      }

	      if (typeof selector !== 'function') {
	        throw new Error("You must pass a function as a selector to useSelector");
	      }

	      if (typeof equalityFn !== 'function') {
	        throw new Error("You must pass a function as an equality function to useSelector");
	      }
	    }

	    var _useReduxContext = useReduxContext(),
	        store = _useReduxContext.store,
	        contextSub = _useReduxContext.subscription;

	    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
	    (0, _react$8.useDebugValue)(selectedState);
	    return selectedState;
	  };
	}
	/**
	 * A hook to access the redux store's state. This hook takes a selector function
	 * as an argument. The selector is called with the store state.
	 *
	 * This hook takes an optional equality comparison function as the second parameter
	 * that allows you to customize the way the selected state is compared to determine
	 * whether the component needs to be re-rendered.
	 *
	 * @param {Function} selector the selector function
	 * @param {Function=} equalityFn the function that will be used to determine equality
	 *
	 * @returns {any} the selected state
	 *
	 * @example
	 *
	 * import React from 'react'
	 * import { useSelector } from 'react-redux'
	 *
	 * export const CounterComponent = () => {
	 *   const counter = useSelector(state => state.counter)
	 *   return <div>{counter}</div>
	 * }
	 */


	var useSelector = /*#__PURE__*/createSelectorHook();
	useSelector$1.useSelector = useSelector;

	var _interopRequireDefault$2X = interopRequireDefault$1.exports["default"];

	exports$2.__esModule = true;

	var _Provider = _interopRequireDefault$2X(Provider);

	exports$2.Provider = _Provider["default"];

	var _connectAdvanced = _interopRequireDefault$2X(connectAdvanced);

	exports$2.connectAdvanced = _connectAdvanced["default"];

	var _Context = Context$2;

	exports$2.ReactReduxContext = _Context.ReactReduxContext;

	var _connect = _interopRequireDefault$2X(connect);

	exports$2.connect = _connect["default"];

	var _useDispatch = useDispatch$1;

	exports$2.useDispatch = _useDispatch.useDispatch;
	exports$2.createDispatchHook = _useDispatch.createDispatchHook;

	var _useSelector = useSelector$1;

	exports$2.useSelector = _useSelector.useSelector;
	exports$2.createSelectorHook = _useSelector.createSelectorHook;

	var _useStore = useStore$1;

	exports$2.useStore = _useStore.useStore;
	exports$2.createStoreHook = _useStore.createStoreHook;

	var _shallowEqual = _interopRequireDefault$2X(shallowEqual);

	exports$2.shallowEqual = _shallowEqual["default"];

	var reactBatchedUpdates = {};

	reactBatchedUpdates.__esModule = true;
	reactBatchedUpdates.unstable_batchedUpdates = void 0;

	var _reactDom$1 = require$$3;

	reactBatchedUpdates.unstable_batchedUpdates = _reactDom$1.unstable_batchedUpdates;

	(function (exports) {

		exports.__esModule = true;
		var _exportNames = {
		  batch: true
		};

		var _exports = exports$2;

		Object.keys(_exports).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _exports[key]) return;
		  exports[key] = _exports[key];
		});

		var _reactBatchedUpdates = reactBatchedUpdates;

		exports.batch = _reactBatchedUpdates.unstable_batchedUpdates;

		var _batch = batch$1;

		// Enable batched updates in our subscriptions for use
		// with standard React renderers (ReactDOM, React Native)
		(0, _batch.setBatch)(_reactBatchedUpdates.unstable_batchedUpdates);
	} (lib));

	var dist$8 = {exports: {}};

	var notistack_cjs_development = {};

	function toVal(mix) {
		var k, y, str='';

		if (typeof mix === 'string' || typeof mix === 'number') {
			str += mix;
		} else if (typeof mix === 'object') {
			if (Array.isArray(mix)) {
				for (k=0; k < mix.length; k++) {
					if (mix[k]) {
						if (y = toVal(mix[k])) {
							str && (str += ' ');
							str += y;
						}
					}
				}
			} else {
				for (k in mix) {
					if (mix[k]) {
						str && (str += ' ');
						str += k;
					}
				}
			}
		}

		return str;
	}

	var clsx$1 = function () {
		var i=0, tmp, x, str='';
		while (i < arguments.length) {
			if (tmp = arguments[i++]) {
				if (x = toVal(tmp)) {
					str && (str += ' ');
					str += x;
				}
			}
		}
		return str;
	};

	var Slide$3 = {};

	var interopRequireDefault = {exports: {}};

	(function (module) {
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}

		module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (interopRequireDefault));

	var Slide$2 = {};

	var _extends$5 = {exports: {}};

	(function (module) {
		function _extends() {
		  module.exports = _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];

		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }

		    return target;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  return _extends.apply(this, arguments);
		}

		module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (_extends$5));

	var objectWithoutPropertiesLoose = {exports: {}};

	(function (module) {
		function _objectWithoutPropertiesLoose(source, excluded) {
		  if (source == null) return {};
		  var target = {};
		  var sourceKeys = Object.keys(source);
		  var key, i;

		  for (i = 0; i < sourceKeys.length; i++) {
		    key = sourceKeys[i];
		    if (excluded.indexOf(key) >= 0) continue;
		    target[key] = source[key];
		  }

		  return target;
		}

		module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (objectWithoutPropertiesLoose));

	var cjs = {};

	var CSSTransition = {exports: {}};

	var addClass = {exports: {}};

	var hasClass = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports.default = hasClass;

		/**
		 * Checks if a given element has a CSS class.
		 * 
		 * @param element the element
		 * @param className the CSS class name
		 */
		function hasClass(element, className) {
		  if (element.classList) return !!className && element.classList.contains(className);
		  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
		}

		module.exports = exports["default"];
	} (hasClass, hasClass.exports));

	(function (module, exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		exports.__esModule = true;
		exports.default = addClass;

		var _hasClass = _interopRequireDefault(hasClass.exports);

		/**
		 * Adds a CSS class to a given element.
		 * 
		 * @param element the element
		 * @param className the CSS class name
		 */
		function addClass(element, className) {
		  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
		}

		module.exports = exports["default"];
	} (addClass, addClass.exports));

	var removeClass = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports.default = removeClass;

		function replaceClassName(origClass, classToRemove) {
		  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
		}
		/**
		 * Removes a CSS class from a given element.
		 * 
		 * @param element the element
		 * @param className the CSS class name
		 */


		function removeClass(element, className) {
		  if (element.classList) {
		    element.classList.remove(className);
		  } else if (typeof element.className === 'string') {
		    element.className = replaceClassName(element.className, className);
		  } else {
		    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
		  }
		}

		module.exports = exports["default"];
	} (removeClass, removeClass.exports));

	var Transition$1 = {};

	var config$1 = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports.default = void 0;
		var _default = {
		  disabled: false
		};
		exports.default = _default;
		module.exports = exports.default;
	} (config$1, config$1.exports));

	var PropTypes = {};

	PropTypes.__esModule = true;
	PropTypes.classNamesShape = PropTypes.timeoutsShape = void 0;

	var _propTypes$1v = _interopRequireDefault$2W(propTypes.exports);

	function _interopRequireDefault$2W(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var timeoutsShape = _propTypes$1v.default.oneOfType([_propTypes$1v.default.number, _propTypes$1v.default.shape({
	  enter: _propTypes$1v.default.number,
	  exit: _propTypes$1v.default.number,
	  appear: _propTypes$1v.default.number
	}).isRequired]) ;
	PropTypes.timeoutsShape = timeoutsShape;
	var classNamesShape = _propTypes$1v.default.oneOfType([_propTypes$1v.default.string, _propTypes$1v.default.shape({
	  enter: _propTypes$1v.default.string,
	  exit: _propTypes$1v.default.string,
	  active: _propTypes$1v.default.string
	}), _propTypes$1v.default.shape({
	  enter: _propTypes$1v.default.string,
	  enterDone: _propTypes$1v.default.string,
	  enterActive: _propTypes$1v.default.string,
	  exit: _propTypes$1v.default.string,
	  exitDone: _propTypes$1v.default.string,
	  exitActive: _propTypes$1v.default.string
	})]) ;
	PropTypes.classNamesShape = classNamesShape;

	var TransitionGroupContext = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports.default = void 0;

		var _react = _interopRequireDefault(require$$3);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var _default = _react.default.createContext(null);

		exports.default = _default;
		module.exports = exports.default;
	} (TransitionGroupContext, TransitionGroupContext.exports));

	Transition$1.__esModule = true;
	Transition$1.default = Transition$1.EXITING = Transition$1.ENTERED = Transition$1.ENTERING = Transition$1.EXITED = Transition$1.UNMOUNTED = void 0;

	var _propTypes$1u = _interopRequireDefault$2V(propTypes.exports);

	var _react$7 = _interopRequireDefault$2V(require$$3);

	var _reactDom = _interopRequireDefault$2V(require$$3);

	var _config$1 = _interopRequireDefault$2V(config$1.exports);

	var _PropTypes = PropTypes;

	var _TransitionGroupContext$1 = _interopRequireDefault$2V(TransitionGroupContext.exports);

	function _interopRequireDefault$2V(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutPropertiesLoose$1(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	function _inheritsLoose$2(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	var UNMOUNTED = 'unmounted';
	Transition$1.UNMOUNTED = UNMOUNTED;
	var EXITED = 'exited';
	Transition$1.EXITED = EXITED;
	var ENTERING = 'entering';
	Transition$1.ENTERING = ENTERING;
	var ENTERED = 'entered';
	Transition$1.ENTERED = ENTERED;
	var EXITING = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 1 },
	 *   entered:  { opacity: 1 },
	 *   exiting:  { opacity: 0 },
	 *   exited:  { opacity: 0 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */

	Transition$1.EXITING = EXITING;

	var Transition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose$2(Transition, _React$Component);

	  function Transition(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;

	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.appearStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED;
	      }
	    }

	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }

	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;

	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED
	      };
	    }

	    return null;
	  } // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }
	  ;

	  var _proto = Transition.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;

	    if (prevProps !== this.props) {
	      var status = this.state.status;

	      if (this.props.in) {
	        if (status !== ENTERING && status !== ENTERED) {
	          nextStatus = ENTERING;
	        }
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          nextStatus = EXITING;
	        }
	      }
	    }

	    this.updateStatus(false, nextStatus);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;

	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major

	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }

	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };

	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }

	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();

	      if (nextStatus === ENTERING) {
	        this.performEnter(mounting);
	      } else {
	        this.performExit();
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };

	  _proto.performEnter = function performEnter(mounting) {
	    var _this2 = this;

	    var enter = this.props.enter;
	    var appearing = this.context ? this.context.isMounting : mounting;

	    var _ref2 = this.props.nodeRef ? [appearing] : [_reactDom.default.findDOMNode(this), appearing],
	        maybeNode = _ref2[0],
	        maybeAppearing = _ref2[1];

	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set

	    if (!mounting && !enter || _config$1.default.disabled) {
	      this.safeSetState({
	        status: ENTERED
	      }, function () {
	        _this2.props.onEntered(maybeNode);
	      });
	      return;
	    }

	    this.props.onEnter(maybeNode, maybeAppearing);
	    this.safeSetState({
	      status: ENTERING
	    }, function () {
	      _this2.props.onEntering(maybeNode, maybeAppearing);

	      _this2.onTransitionEnd(enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED
	        }, function () {
	          _this2.props.onEntered(maybeNode, maybeAppearing);
	        });
	      });
	    });
	  };

	  _proto.performExit = function performExit() {
	    var _this3 = this;

	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts();
	    var maybeNode = this.props.nodeRef ? undefined : _reactDom.default.findDOMNode(this); // no exit animation skip right to EXITED

	    if (!exit || _config$1.default.disabled) {
	      this.safeSetState({
	        status: EXITED
	      }, function () {
	        _this3.props.onExited(maybeNode);
	      });
	      return;
	    }

	    this.props.onExit(maybeNode);
	    this.safeSetState({
	      status: EXITING
	    }, function () {
	      _this3.props.onExiting(maybeNode);

	      _this3.onTransitionEnd(timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED
	        }, function () {
	          _this3.props.onExited(maybeNode);
	        });
	      });
	    });
	  };

	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };

	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
	    this.setNextCallback(handler);
	    var node = this.props.nodeRef ? this.props.nodeRef.current : _reactDom.default.findDOMNode(this);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }

	    if (this.props.addEndListener) {
	      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
	          maybeNode = _ref3[0],
	          maybeNextCallback = _ref3[1];

	      this.props.addEndListener(maybeNode, maybeNextCallback);
	    }

	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };

	  _proto.render = function render() {
	    var status = this.state.status;

	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _this$props = this.props,
	        children = _this$props.children;
	        _this$props.in;
	        _this$props.mountOnEnter;
	        _this$props.unmountOnExit;
	        _this$props.appear;
	        _this$props.enter;
	        _this$props.exit;
	        _this$props.timeout;
	        _this$props.addEndListener;
	        _this$props.onEnter;
	        _this$props.onEntering;
	        _this$props.onEntered;
	        _this$props.onExit;
	        _this$props.onExiting;
	        _this$props.onExited;
	        _this$props.nodeRef;
	        var childProps = _objectWithoutPropertiesLoose$1(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

	    return (
	      /*#__PURE__*/
	      // allows for nested Transitions
	      _react$7.default.createElement(_TransitionGroupContext$1.default.Provider, {
	        value: null
	      }, typeof children === 'function' ? children(status, childProps) : _react$7.default.cloneElement(_react$7.default.Children.only(children), childProps))
	    );
	  };

	  return Transition;
	}(_react$7.default.Component);

	Transition.contextType = _TransitionGroupContext$1.default;
	Transition.propTypes = {
	  /**
	   * A React reference to DOM element that need to transition:
	   * https://stackoverflow.com/a/51127130/4671932
	   *
	   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
	   *      (e.g. `onEnter`) because user already has direct access to the node.
	   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
	   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
	   *     (see
	   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
	   */
	  nodeRef: _propTypes$1u.default.shape({
	    current: typeof Element === 'undefined' ? _propTypes$1u.default.any : function (propValue, key, componentName, location, propFullName, secret) {
	      var value = propValue[key];
	      return _propTypes$1u.default.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
	    }
	  }),

	  /**
	   * A `function` child can be used instead of a React element. This function is
	   * called with the current transition status (`'entering'`, `'entered'`,
	   * `'exiting'`, `'exited'`), which can be used to apply context
	   * specific props to a component.
	   *
	   * ```jsx
	   * <Transition in={this.state.in} timeout={150}>
	   *   {state => (
	   *     <MyComponent className={`fade fade-${state}`} />
	   *   )}
	   * </Transition>
	   * ```
	   */
	  children: _propTypes$1u.default.oneOfType([_propTypes$1u.default.func.isRequired, _propTypes$1u.default.element.isRequired]).isRequired,

	  /**
	   * Show the component; triggers the enter or exit states
	   */
	  in: _propTypes$1u.default.bool,

	  /**
	   * By default the child component is mounted immediately along with
	   * the parent `Transition` component. If you want to "lazy mount" the component on the
	   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
	   * mounted, even on "exited", unless you also specify `unmountOnExit`.
	   */
	  mountOnEnter: _propTypes$1u.default.bool,

	  /**
	   * By default the child component stays mounted after it reaches the `'exited'` state.
	   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
	   */
	  unmountOnExit: _propTypes$1u.default.bool,

	  /**
	   * By default the child component does not perform the enter transition when
	   * it first mounts, regardless of the value of `in`. If you want this
	   * behavior, set both `appear` and `in` to `true`.
	   *
	   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
	   * > only adds an additional enter transition. However, in the
	   * > `<CSSTransition>` component that first enter transition does result in
	   * > additional `.appear-*` classes, that way you can choose to style it
	   * > differently.
	   */
	  appear: _propTypes$1u.default.bool,

	  /**
	   * Enable or disable enter transitions.
	   */
	  enter: _propTypes$1u.default.bool,

	  /**
	   * Enable or disable exit transitions.
	   */
	  exit: _propTypes$1u.default.bool,

	  /**
	   * The duration of the transition, in milliseconds.
	   * Required unless `addEndListener` is provided.
	   *
	   * You may specify a single timeout for all transitions:
	   *
	   * ```jsx
	   * timeout={500}
	   * ```
	   *
	   * or individually:
	   *
	   * ```jsx
	   * timeout={{
	   *  appear: 500,
	   *  enter: 300,
	   *  exit: 500,
	   * }}
	   * ```
	   *
	   * - `appear` defaults to the value of `enter`
	   * - `enter` defaults to `0`
	   * - `exit` defaults to `0`
	   *
	   * @type {number | { enter?: number, exit?: number, appear?: number }}
	   */
	  timeout: function timeout(props) {
	    var pt = _PropTypes.timeoutsShape;
	    if (!props.addEndListener) pt = pt.isRequired;

	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    return pt.apply(void 0, [props].concat(args));
	  },

	  /**
	   * Add a custom transition end trigger. Called with the transitioning
	   * DOM node and a `done` callback. Allows for more fine grained transition end
	   * logic. Timeouts are still used as a fallback if provided.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * ```jsx
	   * addEndListener={(node, done) => {
	   *   // use the css transitionend event to mark the finish of a transition
	   *   node.addEventListener('transitionend', done, false);
	   * }}
	   * ```
	   */
	  addEndListener: _propTypes$1u.default.func,

	  /**
	   * Callback fired before the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEnter: _propTypes$1u.default.func,

	  /**
	   * Callback fired after the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: _propTypes$1u.default.func,

	  /**
	   * Callback fired after the "entered" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEntered: _propTypes$1u.default.func,

	  /**
	   * Callback fired before the "exiting" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExit: _propTypes$1u.default.func,

	  /**
	   * Callback fired after the "exiting" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExiting: _propTypes$1u.default.func,

	  /**
	   * Callback fired after the "exited" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExited: _propTypes$1u.default.func
	} ; // Name the function so it is clearer in the documentation

	function noop$1() {}

	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop$1,
	  onEntering: noop$1,
	  onEntered: noop$1,
	  onExit: noop$1,
	  onExiting: noop$1,
	  onExited: noop$1
	};
	Transition.UNMOUNTED = UNMOUNTED;
	Transition.EXITED = EXITED;
	Transition.ENTERING = ENTERING;
	Transition.ENTERED = ENTERED;
	Transition.EXITING = EXITING;
	var _default$3D = Transition;
	Transition$1.default = _default$3D;

	(function (module, exports) {

		exports.__esModule = true;
		exports.default = void 0;

		var _propTypes = _interopRequireDefault(propTypes.exports);

		var _addClass2 = _interopRequireDefault(addClass.exports);

		var _removeClass = _interopRequireDefault(removeClass.exports);

		var _react = _interopRequireDefault(require$$3);

		var _Transition = _interopRequireDefault(Transition$1);

		var _PropTypes = PropTypes;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

		function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

		var _addClass = function addClass(node, classes) {
		  return node && classes && classes.split(' ').forEach(function (c) {
		    return (0, _addClass2.default)(node, c);
		  });
		};

		var removeClass$1 = function removeClass(node, classes) {
		  return node && classes && classes.split(' ').forEach(function (c) {
		    return (0, _removeClass.default)(node, c);
		  });
		};
		/**
		 * A transition component inspired by the excellent
		 * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
		 * use it if you're using CSS transitions or animations. It's built upon the
		 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
		 * component, so it inherits all of its props.
		 *
		 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
		 * and `exit` states of the transition. The first class is applied and then a
		 * second `*-active` class in order to activate the CSS transition. After the
		 * transition, matching `*-done` class names are applied to persist the
		 * transition state.
		 *
		 * ```jsx
		 * function App() {
		 *   const [inProp, setInProp] = useState(false);
		 *   return (
		 *     <div>
		 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
		 *         <div>
		 *           {"I'll receive my-node-* classes"}
		 *         </div>
		 *       </CSSTransition>
		 *       <button type="button" onClick={() => setInProp(true)}>
		 *         Click to Enter
		 *       </button>
		 *     </div>
		 *   );
		 * }
		 * ```
		 *
		 * When the `in` prop is set to `true`, the child component will first receive
		 * the class `example-enter`, then the `example-enter-active` will be added in
		 * the next tick. `CSSTransition` [forces a
		 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
		 * between before adding the `example-enter-active`. This is an important trick
		 * because it allows us to transition between `example-enter` and
		 * `example-enter-active` even though they were added immediately one after
		 * another. Most notably, this is what makes it possible for us to animate
		 * _appearance_.
		 *
		 * ```css
		 * .my-node-enter {
		 *   opacity: 0;
		 * }
		 * .my-node-enter-active {
		 *   opacity: 1;
		 *   transition: opacity 200ms;
		 * }
		 * .my-node-exit {
		 *   opacity: 1;
		 * }
		 * .my-node-exit-active {
		 *   opacity: 0;
		 *   transition: opacity 200ms;
		 * }
		 * ```
		 *
		 * `*-active` classes represent which styles you want to animate **to**, so it's
		 * important to add `transition` declaration only to them, otherwise transitions
		 * might not behave as intended! This might not be obvious when the transitions
		 * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
		 * the example above (minus `transition`), but it becomes apparent in more
		 * complex transitions.
		 *
		 * **Note**: If you're using the
		 * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
		 * prop, make sure to define styles for `.appear-*` classes as well.
		 */


		var CSSTransition = /*#__PURE__*/function (_React$Component) {
		  _inheritsLoose(CSSTransition, _React$Component);

		  function CSSTransition() {
		    var _this;

		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
		    _this.appliedClasses = {
		      appear: {},
		      enter: {},
		      exit: {}
		    };

		    _this.onEnter = function (maybeNode, maybeAppearing) {
		      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
		          node = _this$resolveArgument[0],
		          appearing = _this$resolveArgument[1];

		      _this.removeClasses(node, 'exit');

		      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

		      if (_this.props.onEnter) {
		        _this.props.onEnter(maybeNode, maybeAppearing);
		      }
		    };

		    _this.onEntering = function (maybeNode, maybeAppearing) {
		      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
		          node = _this$resolveArgument2[0],
		          appearing = _this$resolveArgument2[1];

		      var type = appearing ? 'appear' : 'enter';

		      _this.addClass(node, type, 'active');

		      if (_this.props.onEntering) {
		        _this.props.onEntering(maybeNode, maybeAppearing);
		      }
		    };

		    _this.onEntered = function (maybeNode, maybeAppearing) {
		      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
		          node = _this$resolveArgument3[0],
		          appearing = _this$resolveArgument3[1];

		      var type = appearing ? 'appear' : 'enter';

		      _this.removeClasses(node, type);

		      _this.addClass(node, type, 'done');

		      if (_this.props.onEntered) {
		        _this.props.onEntered(maybeNode, maybeAppearing);
		      }
		    };

		    _this.onExit = function (maybeNode) {
		      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
		          node = _this$resolveArgument4[0];

		      _this.removeClasses(node, 'appear');

		      _this.removeClasses(node, 'enter');

		      _this.addClass(node, 'exit', 'base');

		      if (_this.props.onExit) {
		        _this.props.onExit(maybeNode);
		      }
		    };

		    _this.onExiting = function (maybeNode) {
		      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
		          node = _this$resolveArgument5[0];

		      _this.addClass(node, 'exit', 'active');

		      if (_this.props.onExiting) {
		        _this.props.onExiting(maybeNode);
		      }
		    };

		    _this.onExited = function (maybeNode) {
		      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
		          node = _this$resolveArgument6[0];

		      _this.removeClasses(node, 'exit');

		      _this.addClass(node, 'exit', 'done');

		      if (_this.props.onExited) {
		        _this.props.onExited(maybeNode);
		      }
		    };

		    _this.resolveArguments = function (maybeNode, maybeAppearing) {
		      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
		      : [maybeNode, maybeAppearing];
		    };

		    _this.getClassNames = function (type) {
		      var classNames = _this.props.classNames;
		      var isStringClassNames = typeof classNames === 'string';
		      var prefix = isStringClassNames && classNames ? classNames + "-" : '';
		      var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
		      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
		      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
		      return {
		        baseClassName: baseClassName,
		        activeClassName: activeClassName,
		        doneClassName: doneClassName
		      };
		    };

		    return _this;
		  }

		  var _proto = CSSTransition.prototype;

		  _proto.addClass = function addClass(node, type, phase) {
		    var className = this.getClassNames(type)[phase + "ClassName"];

		    var _this$getClassNames = this.getClassNames('enter'),
		        doneClassName = _this$getClassNames.doneClassName;

		    if (type === 'appear' && phase === 'done' && doneClassName) {
		      className += " " + doneClassName;
		    } // This is to force a repaint,
		    // which is necessary in order to transition styles when adding a class name.


		    if (phase === 'active') {
		      /* eslint-disable no-unused-expressions */
		      node && node.scrollTop;
		    }

		    if (className) {
		      this.appliedClasses[type][phase] = className;

		      _addClass(node, className);
		    }
		  };

		  _proto.removeClasses = function removeClasses(node, type) {
		    var _this$appliedClasses$ = this.appliedClasses[type],
		        baseClassName = _this$appliedClasses$.base,
		        activeClassName = _this$appliedClasses$.active,
		        doneClassName = _this$appliedClasses$.done;
		    this.appliedClasses[type] = {};

		    if (baseClassName) {
		      removeClass$1(node, baseClassName);
		    }

		    if (activeClassName) {
		      removeClass$1(node, activeClassName);
		    }

		    if (doneClassName) {
		      removeClass$1(node, doneClassName);
		    }
		  };

		  _proto.render = function render() {
		    var _this$props = this.props;
		        _this$props.classNames;
		        var props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);

		    return /*#__PURE__*/_react.default.createElement(_Transition.default, _extends({}, props, {
		      onEnter: this.onEnter,
		      onEntered: this.onEntered,
		      onEntering: this.onEntering,
		      onExit: this.onExit,
		      onExiting: this.onExiting,
		      onExited: this.onExited
		    }));
		  };

		  return CSSTransition;
		}(_react.default.Component);

		CSSTransition.defaultProps = {
		  classNames: ''
		};
		CSSTransition.propTypes = _extends({}, _Transition.default.propTypes, {
		  /**
		   * The animation classNames applied to the component as it appears, enters,
		   * exits or has finished the transition. A single name can be provided, which
		   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
		   *
		   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
		   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
		   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
		   *
		   * A few details to note about how these classes are applied:
		   *
		   * 1. They are _joined_ with the ones that are already defined on the child
		   *    component, so if you want to add some base styles, you can use
		   *    `className` without worrying that it will be overridden.
		   *
		   * 2. If the transition component mounts with `in={false}`, no classes are
		   *    applied yet. You might be expecting `*-exit-done`, but if you think
		   *    about it, a component cannot finish exiting if it hasn't entered yet.
		   *
		   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
		   *    allows you to define different behavior for when appearing is done and
		   *    when regular entering is done, using selectors like
		   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
		   *    an epic entrance animation when element first appears in the DOM using
		   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
		   *    simply use `fade-enter-done` for defining both cases.
		   *
		   * Each individual classNames can also be specified independently like:
		   *
		   * ```js
		   * classNames={{
		   *  appear: 'my-appear',
		   *  appearActive: 'my-active-appear',
		   *  appearDone: 'my-done-appear',
		   *  enter: 'my-enter',
		   *  enterActive: 'my-active-enter',
		   *  enterDone: 'my-done-enter',
		   *  exit: 'my-exit',
		   *  exitActive: 'my-active-exit',
		   *  exitDone: 'my-done-exit',
		   * }}
		   * ```
		   *
		   * If you want to set these classes using CSS Modules:
		   *
		   * ```js
		   * import styles from './styles.css';
		   * ```
		   *
		   * you might want to use camelCase in your CSS file, that way could simply
		   * spread them instead of listing them one by one:
		   *
		   * ```js
		   * classNames={{ ...styles }}
		   * ```
		   *
		   * @type {string | {
		   *  appear?: string,
		   *  appearActive?: string,
		   *  appearDone?: string,
		   *  enter?: string,
		   *  enterActive?: string,
		   *  enterDone?: string,
		   *  exit?: string,
		   *  exitActive?: string,
		   *  exitDone?: string,
		   * }}
		   */
		  classNames: _PropTypes.classNamesShape,

		  /**
		   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
		   * applied.
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
		   *
		   * @type Function(node: HtmlElement, isAppearing: bool)
		   */
		  onEnter: _propTypes.default.func,

		  /**
		   * A `<Transition>` callback fired immediately after the 'enter-active' or
		   * 'appear-active' class is applied.
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
		   *
		   * @type Function(node: HtmlElement, isAppearing: bool)
		   */
		  onEntering: _propTypes.default.func,

		  /**
		   * A `<Transition>` callback fired immediately after the 'enter' or
		   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
		   *
		   * @type Function(node: HtmlElement, isAppearing: bool)
		   */
		  onEntered: _propTypes.default.func,

		  /**
		   * A `<Transition>` callback fired immediately after the 'exit' class is
		   * applied.
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed
		   *
		   * @type Function(node: HtmlElement)
		   */
		  onExit: _propTypes.default.func,

		  /**
		   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed
		   *
		   * @type Function(node: HtmlElement)
		   */
		  onExiting: _propTypes.default.func,

		  /**
		   * A `<Transition>` callback fired immediately after the 'exit' classes
		   * are **removed** and the `exit-done` class is added to the DOM node.
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed
		   *
		   * @type Function(node: HtmlElement)
		   */
		  onExited: _propTypes.default.func
		}) ;
		var _default = CSSTransition;
		exports.default = _default;
		module.exports = exports.default;
	} (CSSTransition, CSSTransition.exports));

	var ReplaceTransition = {exports: {}};

	var TransitionGroup = {exports: {}};

	var ChildMapping = {};

	ChildMapping.__esModule = true;
	ChildMapping.getChildMapping = getChildMapping;
	ChildMapping.mergeChildMappings = mergeChildMappings;
	ChildMapping.getInitialChildMapping = getInitialChildMapping;
	ChildMapping.getNextChildMapping = getNextChildMapping;

	var _react$6 = require$$3;

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */
	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && (0, _react$6.isValidElement)(child) ? mapFn(child) : child;
	  };

	  var result = Object.create(null);
	  if (children) _react$6.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */


	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list


	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];

	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i;
	  var childMapping = {};

	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }

	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`


	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}

	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return (0, _react$6.cloneElement)(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}

	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!(0, _react$6.isValidElement)(child)) return;
	    var hasPrev = (key in prevChildMapping);
	    var hasNext = (key in nextChildMapping);
	    var prevChild = prevChildMapping[key];
	    var isLeaving = (0, _react$6.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = (0, _react$6.cloneElement)(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = (0, _react$6.cloneElement)(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && (0, _react$6.isValidElement)(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = (0, _react$6.cloneElement)(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}

	(function (module, exports) {

		exports.__esModule = true;
		exports.default = void 0;

		var _propTypes = _interopRequireDefault(propTypes.exports);

		var _react = _interopRequireDefault(require$$3);

		var _TransitionGroupContext = _interopRequireDefault(TransitionGroupContext.exports);

		var _ChildMapping = ChildMapping;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

		function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

		var values = Object.values || function (obj) {
		  return Object.keys(obj).map(function (k) {
		    return obj[k];
		  });
		};

		var defaultProps = {
		  component: 'div',
		  childFactory: function childFactory(child) {
		    return child;
		  }
		};
		/**
		 * The `<TransitionGroup>` component manages a set of transition components
		 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
		 * components, `<TransitionGroup>` is a state machine for managing the mounting
		 * and unmounting of components over time.
		 *
		 * Consider the example below. As items are removed or added to the TodoList the
		 * `in` prop is toggled automatically by the `<TransitionGroup>`.
		 *
		 * Note that `<TransitionGroup>`  does not define any animation behavior!
		 * Exactly _how_ a list item animates is up to the individual transition
		 * component. This means you can mix and match animations across different list
		 * items.
		 */

		var TransitionGroup = /*#__PURE__*/function (_React$Component) {
		  _inheritsLoose(TransitionGroup, _React$Component);

		  function TransitionGroup(props, context) {
		    var _this;

		    _this = _React$Component.call(this, props, context) || this;

		    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


		    _this.state = {
		      contextValue: {
		        isMounting: true
		      },
		      handleExited: handleExited,
		      firstRender: true
		    };
		    return _this;
		  }

		  var _proto = TransitionGroup.prototype;

		  _proto.componentDidMount = function componentDidMount() {
		    this.mounted = true;
		    this.setState({
		      contextValue: {
		        isMounting: false
		      }
		    });
		  };

		  _proto.componentWillUnmount = function componentWillUnmount() {
		    this.mounted = false;
		  };

		  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
		    var prevChildMapping = _ref.children,
		        handleExited = _ref.handleExited,
		        firstRender = _ref.firstRender;
		    return {
		      children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
		      firstRender: false
		    };
		  } // node is `undefined` when user provided `nodeRef` prop
		  ;

		  _proto.handleExited = function handleExited(child, node) {
		    var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
		    if (child.key in currentChildMapping) return;

		    if (child.props.onExited) {
		      child.props.onExited(node);
		    }

		    if (this.mounted) {
		      this.setState(function (state) {
		        var children = _extends({}, state.children);

		        delete children[child.key];
		        return {
		          children: children
		        };
		      });
		    }
		  };

		  _proto.render = function render() {
		    var _this$props = this.props,
		        Component = _this$props.component,
		        childFactory = _this$props.childFactory,
		        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

		    var contextValue = this.state.contextValue;
		    var children = values(this.state.children).map(childFactory);
		    delete props.appear;
		    delete props.enter;
		    delete props.exit;

		    if (Component === null) {
		      return /*#__PURE__*/_react.default.createElement(_TransitionGroupContext.default.Provider, {
		        value: contextValue
		      }, children);
		    }

		    return /*#__PURE__*/_react.default.createElement(_TransitionGroupContext.default.Provider, {
		      value: contextValue
		    }, /*#__PURE__*/_react.default.createElement(Component, props, children));
		  };

		  return TransitionGroup;
		}(_react.default.Component);

		TransitionGroup.propTypes = {
		  /**
		   * `<TransitionGroup>` renders a `<div>` by default. You can change this
		   * behavior by providing a `component` prop.
		   * If you use React v16+ and would like to avoid a wrapping `<div>` element
		   * you can pass in `component={null}`. This is useful if the wrapping div
		   * borks your css styles.
		   */
		  component: _propTypes.default.any,

		  /**
		   * A set of `<Transition>` components, that are toggled `in` and out as they
		   * leave. the `<TransitionGroup>` will inject specific transition props, so
		   * remember to spread them through if you are wrapping the `<Transition>` as
		   * with our `<Fade>` example.
		   *
		   * While this component is meant for multiple `Transition` or `CSSTransition`
		   * children, sometimes you may want to have a single transition child with
		   * content that you want to be transitioned out and in when you change it
		   * (e.g. routes, images etc.) In that case you can change the `key` prop of
		   * the transition child as you change its content, this will cause
		   * `TransitionGroup` to transition the child out and back in.
		   */
		  children: _propTypes.default.node,

		  /**
		   * A convenience prop that enables or disables appear animations
		   * for all children. Note that specifying this will override any defaults set
		   * on individual children Transitions.
		   */
		  appear: _propTypes.default.bool,

		  /**
		   * A convenience prop that enables or disables enter animations
		   * for all children. Note that specifying this will override any defaults set
		   * on individual children Transitions.
		   */
		  enter: _propTypes.default.bool,

		  /**
		   * A convenience prop that enables or disables exit animations
		   * for all children. Note that specifying this will override any defaults set
		   * on individual children Transitions.
		   */
		  exit: _propTypes.default.bool,

		  /**
		   * You may need to apply reactive updates to a child as it is exiting.
		   * This is generally done by using `cloneElement` however in the case of an exiting
		   * child the element has already been removed and not accessible to the consumer.
		   *
		   * If you do need to update a child as it leaves you can provide a `childFactory`
		   * to wrap every child, even the ones that are leaving.
		   *
		   * @type Function(child: ReactElement) -> ReactElement
		   */
		  childFactory: _propTypes.default.func
		} ;
		TransitionGroup.defaultProps = defaultProps;
		var _default = TransitionGroup;
		exports.default = _default;
		module.exports = exports.default;
	} (TransitionGroup, TransitionGroup.exports));

	(function (module, exports) {

		exports.__esModule = true;
		exports.default = void 0;

		var _propTypes = _interopRequireDefault(propTypes.exports);

		var _react = _interopRequireDefault(require$$3);

		var _reactDom = _interopRequireDefault(require$$3);

		var _TransitionGroup = _interopRequireDefault(TransitionGroup.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

		/**
		 * The `<ReplaceTransition>` component is a specialized `Transition` component
		 * that animates between two children.
		 *
		 * ```jsx
		 * <ReplaceTransition in>
		 *   <Fade><div>I appear first</div></Fade>
		 *   <Fade><div>I replace the above</div></Fade>
		 * </ReplaceTransition>
		 * ```
		 */
		var ReplaceTransition = /*#__PURE__*/function (_React$Component) {
		  _inheritsLoose(ReplaceTransition, _React$Component);

		  function ReplaceTransition() {
		    var _this;

		    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
		      _args[_key] = arguments[_key];
		    }

		    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

		    _this.handleEnter = function () {
		      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		        args[_key2] = arguments[_key2];
		      }

		      return _this.handleLifecycle('onEnter', 0, args);
		    };

		    _this.handleEntering = function () {
		      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
		        args[_key3] = arguments[_key3];
		      }

		      return _this.handleLifecycle('onEntering', 0, args);
		    };

		    _this.handleEntered = function () {
		      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
		        args[_key4] = arguments[_key4];
		      }

		      return _this.handleLifecycle('onEntered', 0, args);
		    };

		    _this.handleExit = function () {
		      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
		        args[_key5] = arguments[_key5];
		      }

		      return _this.handleLifecycle('onExit', 1, args);
		    };

		    _this.handleExiting = function () {
		      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
		        args[_key6] = arguments[_key6];
		      }

		      return _this.handleLifecycle('onExiting', 1, args);
		    };

		    _this.handleExited = function () {
		      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
		        args[_key7] = arguments[_key7];
		      }

		      return _this.handleLifecycle('onExited', 1, args);
		    };

		    return _this;
		  }

		  var _proto = ReplaceTransition.prototype;

		  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
		    var _child$props;

		    var children = this.props.children;

		    var child = _react.default.Children.toArray(children)[idx];

		    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);

		    if (this.props[handler]) {
		      var maybeNode = child.props.nodeRef ? undefined : _reactDom.default.findDOMNode(this);
		      this.props[handler](maybeNode);
		    }
		  };

		  _proto.render = function render() {
		    var _this$props = this.props,
		        children = _this$props.children,
		        inProp = _this$props.in,
		        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

		    var _React$Children$toArr = _react.default.Children.toArray(children),
		        first = _React$Children$toArr[0],
		        second = _React$Children$toArr[1];

		    delete props.onEnter;
		    delete props.onEntering;
		    delete props.onEntered;
		    delete props.onExit;
		    delete props.onExiting;
		    delete props.onExited;
		    return /*#__PURE__*/_react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
		      key: 'first',
		      onEnter: this.handleEnter,
		      onEntering: this.handleEntering,
		      onEntered: this.handleEntered
		    }) : _react.default.cloneElement(second, {
		      key: 'second',
		      onEnter: this.handleExit,
		      onEntering: this.handleExiting,
		      onEntered: this.handleExited
		    }));
		  };

		  return ReplaceTransition;
		}(_react.default.Component);

		ReplaceTransition.propTypes = {
		  in: _propTypes.default.bool.isRequired,
		  children: function children(props, propName) {
		    if (_react.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
		    return null;
		  }
		} ;
		var _default = ReplaceTransition;
		exports.default = _default;
		module.exports = exports.default;
	} (ReplaceTransition, ReplaceTransition.exports));

	var SwitchTransition$1 = {};

	SwitchTransition$1.__esModule = true;
	SwitchTransition$1.default = SwitchTransition$1.modes = void 0;

	var _react$5 = _interopRequireDefault$2U(require$$3);

	var _propTypes$1t = _interopRequireDefault$2U(propTypes.exports);

	var _Transition$1 = Transition$1;

	var _TransitionGroupContext = _interopRequireDefault$2U(TransitionGroupContext.exports);

	var _leaveRenders, _enterRenders;

	function _interopRequireDefault$2U(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _inheritsLoose$1(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	function areChildrenDifferent(oldChildren, newChildren) {
	  if (oldChildren === newChildren) return false;

	  if (_react$5.default.isValidElement(oldChildren) && _react$5.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
	    return false;
	  }

	  return true;
	}
	/**
	 * Enum of modes for SwitchTransition component
	 * @enum { string }
	 */


	var modes = {
	  out: 'out-in',
	  in: 'in-out'
	};
	SwitchTransition$1.modes = modes;

	var callHook = function callHook(element, name, cb) {
	  return function () {
	    var _element$props;

	    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
	    cb();
	  };
	};

	var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function (_ref) {
	  var current = _ref.current,
	      changeState = _ref.changeState;
	  return _react$5.default.cloneElement(current, {
	    in: false,
	    onExited: callHook(current, 'onExited', function () {
	      changeState(_Transition$1.ENTERING, null);
	    })
	  });
	}, _leaveRenders[modes.in] = function (_ref2) {
	  var current = _ref2.current,
	      changeState = _ref2.changeState,
	      children = _ref2.children;
	  return [current, _react$5.default.cloneElement(children, {
	    in: true,
	    onEntered: callHook(children, 'onEntered', function () {
	      changeState(_Transition$1.ENTERING);
	    })
	  })];
	}, _leaveRenders);
	var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function (_ref3) {
	  var children = _ref3.children,
	      changeState = _ref3.changeState;
	  return _react$5.default.cloneElement(children, {
	    in: true,
	    onEntered: callHook(children, 'onEntered', function () {
	      changeState(_Transition$1.ENTERED, _react$5.default.cloneElement(children, {
	        in: true
	      }));
	    })
	  });
	}, _enterRenders[modes.in] = function (_ref4) {
	  var current = _ref4.current,
	      children = _ref4.children,
	      changeState = _ref4.changeState;
	  return [_react$5.default.cloneElement(current, {
	    in: false,
	    onExited: callHook(current, 'onExited', function () {
	      changeState(_Transition$1.ENTERED, _react$5.default.cloneElement(children, {
	        in: true
	      }));
	    })
	  }), _react$5.default.cloneElement(children, {
	    in: true
	  })];
	}, _enterRenders);
	/**
	 * A transition component inspired by the [vue transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes).
	 * You can use it when you want to control the render between state transitions.
	 * Based on the selected mode and the child's key which is the `Transition` or `CSSTransition` component, the `SwitchTransition` makes a consistent transition between them.
	 *
	 * If the `out-in` mode is selected, the `SwitchTransition` waits until the old child leaves and then inserts a new child.
	 * If the `in-out` mode is selected, the `SwitchTransition` inserts a new child first, waits for the new child to enter and then removes the old child.
	 *
	 * **Note**: If you want the animation to happen simultaneously
	 * (that is, to have the old child removed and a new child inserted **at the same time**),
	 * you should use
	 * [`TransitionGroup`](https://reactcommunity.org/react-transition-group/transition-group)
	 * instead.
	 *
	 * ```jsx
	 * function App() {
	 *  const [state, setState] = useState(false);
	 *  return (
	 *    <SwitchTransition>
	 *      <CSSTransition
	 *        key={state ? "Goodbye, world!" : "Hello, world!"}
	 *        addEndListener={(node, done) => node.addEventListener("transitionend", done, false)}
	 *        classNames='fade'
	 *      >
	 *        <button onClick={() => setState(state => !state)}>
	 *          {state ? "Goodbye, world!" : "Hello, world!"}
	 *        </button>
	 *      </CSSTransition>
	 *    </SwitchTransition>
	 *  );
	 * }
	 * ```
	 *
	 * ```css
	 * .fade-enter{
	 *    opacity: 0;
	 * }
	 * .fade-exit{
	 *    opacity: 1;
	 * }
	 * .fade-enter-active{
	 *    opacity: 1;
	 * }
	 * .fade-exit-active{
	 *    opacity: 0;
	 * }
	 * .fade-enter-active,
	 * .fade-exit-active{
	 *    transition: opacity 500ms;
	 * }
	 * ```
	 */

	var SwitchTransition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose$1(SwitchTransition, _React$Component);

	  function SwitchTransition() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.state = {
	      status: _Transition$1.ENTERED,
	      current: null
	    };
	    _this.appeared = false;

	    _this.changeState = function (status, current) {
	      if (current === void 0) {
	        current = _this.state.current;
	      }

	      _this.setState({
	        status: status,
	        current: current
	      });
	    };

	    return _this;
	  }

	  var _proto = SwitchTransition.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.appeared = true;
	  };

	  SwitchTransition.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
	    if (props.children == null) {
	      return {
	        current: null
	      };
	    }

	    if (state.status === _Transition$1.ENTERING && props.mode === modes.in) {
	      return {
	        status: _Transition$1.ENTERING
	      };
	    }

	    if (state.current && areChildrenDifferent(state.current, props.children)) {
	      return {
	        status: _Transition$1.EXITING
	      };
	    }

	    return {
	      current: _react$5.default.cloneElement(props.children, {
	        in: true
	      })
	    };
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        children = _this$props.children,
	        mode = _this$props.mode,
	        _this$state = this.state,
	        status = _this$state.status,
	        current = _this$state.current;
	    var data = {
	      children: children,
	      current: current,
	      changeState: this.changeState,
	      status: status
	    };
	    var component;

	    switch (status) {
	      case _Transition$1.ENTERING:
	        component = enterRenders[mode](data);
	        break;

	      case _Transition$1.EXITING:
	        component = leaveRenders[mode](data);
	        break;

	      case _Transition$1.ENTERED:
	        component = current;
	    }

	    return /*#__PURE__*/_react$5.default.createElement(_TransitionGroupContext.default.Provider, {
	      value: {
	        isMounting: !this.appeared
	      }
	    }, component);
	  };

	  return SwitchTransition;
	}(_react$5.default.Component);

	SwitchTransition.propTypes = {
	  /**
	   * Transition modes.
	   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
	   * `in-out`: New element transitions in first, then when complete, the current element transitions out.
	   *
	   * @type {'out-in'|'in-out'}
	   */
	  mode: _propTypes$1t.default.oneOf([modes.in, modes.out]),

	  /**
	   * Any `Transition` or `CSSTransition` component.
	   */
	  children: _propTypes$1t.default.oneOfType([_propTypes$1t.default.element.isRequired])
	} ;
	SwitchTransition.defaultProps = {
	  mode: modes.out
	};
	var _default$3C = SwitchTransition;
	SwitchTransition$1.default = _default$3C;

	cjs.__esModule = true;
	cjs.config = cjs.Transition = cjs.TransitionGroup = cjs.SwitchTransition = cjs.ReplaceTransition = cjs.CSSTransition = void 0;

	var _CSSTransition = _interopRequireDefault$2T(CSSTransition.exports);

	cjs.CSSTransition = _CSSTransition.default;

	var _ReplaceTransition = _interopRequireDefault$2T(ReplaceTransition.exports);

	cjs.ReplaceTransition = _ReplaceTransition.default;

	var _SwitchTransition = _interopRequireDefault$2T(SwitchTransition$1);

	cjs.SwitchTransition = _SwitchTransition.default;

	var _TransitionGroup = _interopRequireDefault$2T(TransitionGroup.exports);

	cjs.TransitionGroup = _TransitionGroup.default;

	var _Transition = _interopRequireDefault$2T(Transition$1);

	cjs.Transition = _Transition.default;

	var _config = _interopRequireDefault$2T(config$1.exports);

	cjs.config = _config.default;

	function _interopRequireDefault$2T(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var utils$h = {};

	var chainPropTypes$1 = {};

	Object.defineProperty(chainPropTypes$1, "__esModule", {
	  value: true
	});
	chainPropTypes$1.default = chainPropTypes;

	function chainPropTypes(propType1, propType2) {

	  return function validate(...args) {
	    return propType1(...args) || propType2(...args);
	  };
	}

	var deepmerge$1 = {};

	var _interopRequireDefault$2S = interopRequireDefault.exports;

	Object.defineProperty(deepmerge$1, "__esModule", {
	  value: true
	});
	deepmerge$1.default = deepmerge;
	deepmerge$1.isPlainObject = isPlainObject$3;

	var _extends2$1H = _interopRequireDefault$2S(_extends$5.exports);

	function isPlainObject$3(item) {
	  return item !== null && typeof item === 'object' && item.constructor === Object;
	}

	function deepmerge(target, source, options = {
	  clone: true
	}) {
	  const output = options.clone ? (0, _extends2$1H.default)({}, target) : target;

	  if (isPlainObject$3(target) && isPlainObject$3(source)) {
	    Object.keys(source).forEach(key => {
	      // Avoid prototype pollution
	      if (key === '__proto__') {
	        return;
	      }

	      if (isPlainObject$3(source[key]) && key in target && isPlainObject$3(target[key])) {
	        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
	        output[key] = deepmerge(target[key], source[key], options);
	      } else {
	        output[key] = source[key];
	      }
	    });
	  }

	  return output;
	}

	var elementAcceptingRef$1 = {};

	var _interopRequireDefault$2R = interopRequireDefault.exports;

	Object.defineProperty(elementAcceptingRef$1, "__esModule", {
	  value: true
	});
	elementAcceptingRef$1.default = void 0;

	var _propTypes$1s = _interopRequireDefault$2R(propTypes.exports);

	var _chainPropTypes$1 = _interopRequireDefault$2R(chainPropTypes$1);

	function isClassComponent$1(elementType) {
	  // elementType.prototype?.isReactComponent
	  const {
	    prototype = {}
	  } = elementType;
	  return Boolean(prototype.isReactComponent);
	}

	function acceptingRef(props, propName, componentName, location, propFullName) {
	  const element = props[propName];
	  const safePropName = propFullName || propName;

	  if (element == null || // When server-side rendering React doesn't warn either.
	  // This is not an accurate check for SSR.
	  // This is only in place for emotion compat.
	  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
	  typeof window === 'undefined') {
	    return null;
	  }

	  let warningHint;
	  const elementType = element.type;
	  /**
	   * Blacklisting instead of whitelisting
	   *
	   * Blacklisting will miss some components, such as React.Fragment. Those will at least
	   * trigger a warning in React.
	   * We can't whitelist because there is no safe way to detect React.forwardRef
	   * or class components. "Safe" means there's no public API.
	   *
	   */

	  if (typeof elementType === 'function' && !isClassComponent$1(elementType)) {
	    warningHint = 'Did you accidentally use a plain function component for an element instead?';
	  }

	  if (warningHint !== undefined) {
	    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
	  }

	  return null;
	}

	const elementAcceptingRef = (0, _chainPropTypes$1.default)(_propTypes$1s.default.element, acceptingRef);
	elementAcceptingRef.isRequired = (0, _chainPropTypes$1.default)(_propTypes$1s.default.element.isRequired, acceptingRef);
	var _default$3B = elementAcceptingRef;
	elementAcceptingRef$1.default = _default$3B;

	var elementTypeAcceptingRef$1 = {};

	var _interopRequireDefault$2Q = interopRequireDefault.exports;

	Object.defineProperty(elementTypeAcceptingRef$1, "__esModule", {
	  value: true
	});
	elementTypeAcceptingRef$1.default = void 0;

	var _propTypes$1r = _interopRequireDefault$2Q(propTypes.exports);

	var _chainPropTypes = _interopRequireDefault$2Q(chainPropTypes$1);

	function isClassComponent(elementType) {
	  // elementType.prototype?.isReactComponent
	  const {
	    prototype = {}
	  } = elementType;
	  return Boolean(prototype.isReactComponent);
	}

	function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
	  const propValue = props[propName];
	  const safePropName = propFullName || propName;

	  if (propValue == null || // When server-side rendering React doesn't warn either.
	  // This is not an accurate check for SSR.
	  // This is only in place for emotion compat.
	  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
	  typeof window === 'undefined') {
	    return null;
	  }

	  let warningHint;
	  /**
	   * Blacklisting instead of whitelisting
	   *
	   * Blacklisting will miss some components, such as React.Fragment. Those will at least
	   * trigger a warning in React.
	   * We can't whitelist because there is no safe way to detect React.forwardRef
	   * or class components. "Safe" means there's no public API.
	   *
	   */

	  if (typeof propValue === 'function' && !isClassComponent(propValue)) {
	    warningHint = 'Did you accidentally provide a plain function component instead?';
	  }

	  if (warningHint !== undefined) {
	    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
	  }

	  return null;
	}

	var _default$3A = (0, _chainPropTypes.default)(_propTypes$1r.default.elementType, elementTypeAcceptingRef);

	elementTypeAcceptingRef$1.default = _default$3A;

	var exactProp$1 = {};

	var _interopRequireDefault$2P = interopRequireDefault.exports;

	Object.defineProperty(exactProp$1, "__esModule", {
	  value: true
	});
	exactProp$1.default = exactProp;

	var _extends2$1G = _interopRequireDefault$2P(_extends$5.exports);

	// This module is based on https://github.com/airbnb/prop-types-exact repository.
	// However, in order to reduce the number of dependencies and to remove some extra safe checks
	// the module was forked.
	const specialProperty = 'exact-prop: \u200b';

	function exactProp(propTypes) {

	  return (0, _extends2$1G.default)({}, propTypes, {
	    [specialProperty]: props => {
	      const unsupportedProps = Object.keys(props).filter(prop => !propTypes.hasOwnProperty(prop));

	      if (unsupportedProps.length > 0) {
	        return new Error(`The following props are not supported: ${unsupportedProps.map(prop => `\`${prop}\``).join(', ')}. Please remove them.`);
	      }

	      return null;
	    }
	  });
	}

	var formatMuiErrorMessage$1 = {};

	Object.defineProperty(formatMuiErrorMessage$1, "__esModule", {
	  value: true
	});
	formatMuiErrorMessage$1.default = formatMuiErrorMessage;

	/**
	 * WARNING: Don't import this directly.
	 * Use `MuiError` from `@mui/utils/macros/MuiError.macro` instead.
	 * @param {number} code
	 */
	function formatMuiErrorMessage(code) {
	  // Apply babel-plugin-transform-template-literals in loose mode
	  // loose mode is safe iff we're concatenating primitives
	  // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose

	  /* eslint-disable prefer-template */
	  let url = 'https://mui.com/production-error/?code=' + code;

	  for (let i = 1; i < arguments.length; i += 1) {
	    // rest params over-transpile for this case
	    // eslint-disable-next-line prefer-rest-params
	    url += '&args[]=' + encodeURIComponent(arguments[i]);
	  }

	  return 'Minified MUI error #' + code + '; visit ' + url + ' for the full message.';
	  /* eslint-enable prefer-template */
	}

	var getDisplayName$2 = {};

	Object.defineProperty(getDisplayName$2, "__esModule", {
	  value: true
	});
	getDisplayName$2.default = getDisplayName$1;
	getDisplayName$2.getFunctionName = getFunctionName$2;

	var _reactIs$6 = reactIs.exports;

	// Simplified polyfill for IE11 support
	// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
	const fnNameMatchRegex$1 = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;

	function getFunctionName$2(fn) {
	  const match = `${fn}`.match(fnNameMatchRegex$1);
	  const name = match && match[1];
	  return name || '';
	}

	function getFunctionComponentName$1(Component, fallback = '') {
	  return Component.displayName || Component.name || getFunctionName$2(Component) || fallback;
	}

	function getWrappedName$1(outerType, innerType, wrapperName) {
	  const functionName = getFunctionComponentName$1(innerType);
	  return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
	}
	/**
	 * cherry-pick from
	 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
	 * originally forked from recompose/getDisplayName with added IE11 support
	 */


	function getDisplayName$1(Component) {
	  if (Component == null) {
	    return undefined;
	  }

	  if (typeof Component === 'string') {
	    return Component;
	  }

	  if (typeof Component === 'function') {
	    return getFunctionComponentName$1(Component, 'Component');
	  } // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`


	  if (typeof Component === 'object') {
	    switch (Component.$$typeof) {
	      case _reactIs$6.ForwardRef:
	        return getWrappedName$1(Component, Component.render, 'ForwardRef');

	      case _reactIs$6.Memo:
	        return getWrappedName$1(Component, Component.type, 'memo');

	      default:
	        return undefined;
	    }
	  }

	  return undefined;
	}

	var HTMLElementType$1 = {};

	Object.defineProperty(HTMLElementType$1, "__esModule", {
	  value: true
	});
	HTMLElementType$1.default = HTMLElementType;

	function HTMLElementType(props, propName, componentName, location, propFullName) {

	  const propValue = props[propName];
	  const safePropName = propFullName || propName;

	  if (propValue == null) {
	    return null;
	  }

	  if (propValue && propValue.nodeType !== 1) {
	    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an HTMLElement.`);
	  }

	  return null;
	}

	var ponyfillGlobal = {};

	Object.defineProperty(ponyfillGlobal, "__esModule", {
	  value: true
	});
	ponyfillGlobal.default = void 0;

	/* eslint-disable */
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var _default$3z = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();

	ponyfillGlobal.default = _default$3z;

	var refType$1 = {};

	var _interopRequireDefault$2O = interopRequireDefault.exports;

	Object.defineProperty(refType$1, "__esModule", {
	  value: true
	});
	refType$1.default = void 0;

	var _propTypes$1q = _interopRequireDefault$2O(propTypes.exports);

	const refType = _propTypes$1q.default.oneOfType([_propTypes$1q.default.func, _propTypes$1q.default.object]);

	var _default$3y = refType;
	refType$1.default = _default$3y;

	var capitalize$2 = {};

	var _interopRequireDefault$2N = interopRequireDefault.exports;

	Object.defineProperty(capitalize$2, "__esModule", {
	  value: true
	});
	capitalize$2.default = capitalize$1;

	_interopRequireDefault$2N(formatMuiErrorMessage$1);

	// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
	//
	// A strict capitalization should uppercase the first letter of each word in the sentence.
	// We only handle the first word.
	function capitalize$1(string) {
	  if (typeof string !== 'string') {
	    throw new Error(`MUI: \`capitalize(string)\` expects a string argument.` );
	  }

	  return string.charAt(0).toUpperCase() + string.slice(1);
	}

	var createChainedFunction$3 = {};

	Object.defineProperty(createChainedFunction$3, "__esModule", {
	  value: true
	});
	createChainedFunction$3.default = createChainedFunction$2;

	/**
	 * Safe chained function.
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 */
	function createChainedFunction$2(...funcs) {
	  return funcs.reduce((acc, func) => {
	    if (func == null) {
	      return acc;
	    }

	    return function chainedFunction(...args) {
	      acc.apply(this, args);
	      func.apply(this, args);
	    };
	  }, () => {});
	}

	var debounce$3 = {};

	Object.defineProperty(debounce$3, "__esModule", {
	  value: true
	});
	debounce$3.default = debounce$2;

	// Corresponds to 10 frames at 60 Hz.
	// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
	function debounce$2(func, wait = 166) {
	  let timeout;

	  function debounced(...args) {
	    const later = () => {
	      func.apply(this, args);
	    };

	    clearTimeout(timeout);
	    timeout = setTimeout(later, wait);
	  }

	  debounced.clear = () => {
	    clearTimeout(timeout);
	  };

	  return debounced;
	}

	var deprecatedPropType$2 = {};

	Object.defineProperty(deprecatedPropType$2, "__esModule", {
	  value: true
	});
	deprecatedPropType$2.default = deprecatedPropType$1;

	function deprecatedPropType$1(validator, reason) {

	  return (props, propName, componentName, location, propFullName) => {
	    const componentNameSafe = componentName || '<<anonymous>>';
	    const propFullNameSafe = propFullName || propName;

	    if (typeof props[propName] !== 'undefined') {
	      return new Error(`The ${location} \`${propFullNameSafe}\` of ` + `\`${componentNameSafe}\` is deprecated. ${reason}`);
	    }

	    return null;
	  };
	}

	var isMuiElement$2 = {};

	Object.defineProperty(isMuiElement$2, "__esModule", {
	  value: true
	});
	isMuiElement$2.default = isMuiElement$1;

	var React$1Q = _interopRequireWildcard$1V(require$$3);

	function _getRequireWildcardCache$1V(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1V = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1V(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1V(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function isMuiElement$1(element, muiNames) {
	  return /*#__PURE__*/React$1Q.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
	}

	var ownerDocument$2 = {};

	Object.defineProperty(ownerDocument$2, "__esModule", {
	  value: true
	});
	ownerDocument$2.default = ownerDocument$1;

	function ownerDocument$1(node) {
	  return node && node.ownerDocument || document;
	}

	var ownerWindow$2 = {};

	var _interopRequireDefault$2M = interopRequireDefault.exports;

	Object.defineProperty(ownerWindow$2, "__esModule", {
	  value: true
	});
	ownerWindow$2.default = ownerWindow$1;

	var _ownerDocument$4 = _interopRequireDefault$2M(ownerDocument$2);

	function ownerWindow$1(node) {
	  const doc = (0, _ownerDocument$4.default)(node);
	  return doc.defaultView || window;
	}

	var requirePropFactory$2 = {};

	var _interopRequireDefault$2L = interopRequireDefault.exports;

	Object.defineProperty(requirePropFactory$2, "__esModule", {
	  value: true
	});
	requirePropFactory$2.default = requirePropFactory$1;

	var _extends2$1F = _interopRequireDefault$2L(_extends$5.exports);

	function requirePropFactory$1(componentNameInError, Component) {


	  const prevPropTypes = Component ? (0, _extends2$1F.default)({}, Component.propTypes) : null;

	  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {
	    const propFullNameSafe = propFullName || propName;
	    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];

	    if (defaultTypeChecker) {
	      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);

	      if (typeCheckerResult) {
	        return typeCheckerResult;
	      }
	    }

	    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {
	      return new Error(`The prop \`${propFullNameSafe}\` of ` + `\`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
	    }

	    return null;
	  };

	  return requireProp;
	}

	var setRef$2 = {};

	Object.defineProperty(setRef$2, "__esModule", {
	  value: true
	});
	setRef$2.default = setRef$1;

	/**
	 * TODO v5: consider making it private
	 *
	 * passes {value} to {ref}
	 *
	 * WARNING: Be sure to only call this inside a callback that is passed as a ref.
	 * Otherwise, make sure to cleanup the previous {ref} if it changes. See
	 * https://github.com/mui-org/material-ui/issues/13539
	 *
	 * Useful if you want to expose the ref of an inner component to the public API
	 * while still using it inside the component.
	 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
	 */
	function setRef$1(ref, value) {
	  if (typeof ref === 'function') {
	    ref(value);
	  } else if (ref) {
	    ref.current = value;
	  }
	}

	var useEnhancedEffect$3 = {};

	Object.defineProperty(useEnhancedEffect$3, "__esModule", {
	  value: true
	});
	useEnhancedEffect$3.default = void 0;

	var React$1P = _interopRequireWildcard$1U(require$$3);

	function _getRequireWildcardCache$1U(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1U = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1U(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1U(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useEnhancedEffect$2 = typeof window !== 'undefined' ? React$1P.useLayoutEffect : React$1P.useEffect;
	var _default$3x = useEnhancedEffect$2;
	useEnhancedEffect$3.default = _default$3x;

	var useId$2 = {};

	Object.defineProperty(useId$2, "__esModule", {
	  value: true
	});
	useId$2.default = useId$1;

	var React$1O = _interopRequireWildcard$1T(require$$3);

	function _getRequireWildcardCache$1T(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1T = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1T(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1T(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	let globalId = 0;

	function useId$1(idOverride) {
	  const [defaultId, setDefaultId] = React$1O.useState(idOverride);
	  const id = idOverride || defaultId;
	  React$1O.useEffect(() => {
	    if (defaultId == null) {
	      // Fallback to this default id when possible.
	      // Use the incrementing value for client-side rendering only.
	      // We can't use it server-side.
	      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
	      globalId += 1;
	      setDefaultId(`mui-${globalId}`);
	    }
	  }, [defaultId]);
	  return id;
	}

	var unsupportedProp$2 = {};

	Object.defineProperty(unsupportedProp$2, "__esModule", {
	  value: true
	});
	unsupportedProp$2.default = unsupportedProp$1;

	function unsupportedProp$1(props, propName, componentName, location, propFullName) {

	  const propFullNameSafe = propFullName || propName;

	  if (typeof props[propName] !== 'undefined') {
	    return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
	  }

	  return null;
	}

	var useControlled$2 = {};

	Object.defineProperty(useControlled$2, "__esModule", {
	  value: true
	});
	useControlled$2.default = useControlled$1;

	var React$1N = _interopRequireWildcard$1S(require$$3);

	function _getRequireWildcardCache$1S(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1S = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1S(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1S(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */
	function useControlled$1({
	  controlled,
	  default: defaultProp,
	  name,
	  state = 'value'
	}) {
	  // isControlled is ignored in the hook dependency lists as it should never change.
	  const {
	    current: isControlled
	  } = React$1N.useRef(controlled !== undefined);
	  const [valueState, setValue] = React$1N.useState(defaultProp);
	  const value = isControlled ? controlled : valueState;

	  {
	    React$1N.useEffect(() => {
	      if (isControlled !== (controlled !== undefined)) {
	        console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", 'More info: https://fb.me/react-controlled-components'].join('\n'));
	      }
	    }, [state, name, controlled]);
	    const {
	      current: defaultValue
	    } = React$1N.useRef(defaultProp);
	    React$1N.useEffect(() => {
	      if (!isControlled && defaultValue !== defaultProp) {
	        console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\n'));
	      }
	    }, [JSON.stringify(defaultProp)]);
	  }

	  const setValueIfUncontrolled = React$1N.useCallback(newValue => {
	    if (!isControlled) {
	      setValue(newValue);
	    }
	  }, []);
	  return [value, setValueIfUncontrolled];
	}

	var useEventCallback$3 = {};

	var _interopRequireDefault$2K = interopRequireDefault.exports;

	Object.defineProperty(useEventCallback$3, "__esModule", {
	  value: true
	});
	useEventCallback$3.default = useEventCallback$2;

	var React$1M = _interopRequireWildcard$1R(require$$3);

	var _useEnhancedEffect$4 = _interopRequireDefault$2K(useEnhancedEffect$3);

	function _getRequireWildcardCache$1R(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1R = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1R(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1R(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
	 */
	function useEventCallback$2(fn) {
	  const ref = React$1M.useRef(fn);
	  (0, _useEnhancedEffect$4.default)(() => {
	    ref.current = fn;
	  });
	  return React$1M.useCallback((...args) => // @ts-expect-error hide `this`
	  // tslint:disable-next-line:ban-comma-operator
	  (0, ref.current)(...args), []);
	}

	var useForkRef$2 = {};

	var _interopRequireDefault$2J = interopRequireDefault.exports;

	Object.defineProperty(useForkRef$2, "__esModule", {
	  value: true
	});
	useForkRef$2.default = useForkRef$1;

	var React$1L = _interopRequireWildcard$1Q(require$$3);

	var _setRef = _interopRequireDefault$2J(setRef$2);

	function _getRequireWildcardCache$1Q(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1Q = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1Q(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1Q(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function useForkRef$1(refA, refB) {
	  /**
	   * This will create a new function if the ref props change and are defined.
	   * This means react will call the old forkRef with `null` and the new forkRef
	   * with the ref. Cleanup naturally emerges from this behavior.
	   */
	  return React$1L.useMemo(() => {
	    if (refA == null && refB == null) {
	      return null;
	    }

	    return refValue => {
	      (0, _setRef.default)(refA, refValue);
	      (0, _setRef.default)(refB, refValue);
	    };
	  }, [refA, refB]);
	}

	var useIsFocusVisible$2 = {};

	Object.defineProperty(useIsFocusVisible$2, "__esModule", {
	  value: true
	});
	useIsFocusVisible$2.default = useIsFocusVisible$1;
	useIsFocusVisible$2.teardown = teardown;

	var React$1K = _interopRequireWildcard$1P(require$$3);

	function _getRequireWildcardCache$1P(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1P = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1P(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1P(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
	let hadKeyboardEvent = true;
	let hadFocusVisibleRecently = false;
	let hadFocusVisibleRecentlyTimeout;
	const inputTypesWhitelist = {
	  text: true,
	  search: true,
	  url: true,
	  tel: true,
	  email: true,
	  password: true,
	  number: true,
	  date: true,
	  month: true,
	  week: true,
	  time: true,
	  datetime: true,
	  'datetime-local': true
	};
	/**
	 * Computes whether the given element should automatically trigger the
	 * `focus-visible` class being added, i.e. whether it should always match
	 * `:focus-visible` when focused.
	 * @param {Element} node
	 * @returns {boolean}
	 */

	function focusTriggersKeyboardModality(node) {
	  const {
	    type,
	    tagName
	  } = node;

	  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
	    return true;
	  }

	  if (tagName === 'TEXTAREA' && !node.readOnly) {
	    return true;
	  }

	  if (node.isContentEditable) {
	    return true;
	  }

	  return false;
	}
	/**
	 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
	 * If the most recent user interaction was via the keyboard;
	 * and the key press did not include a meta, alt/option, or control key;
	 * then the modality is keyboard. Otherwise, the modality is not keyboard.
	 * @param {KeyboardEvent} event
	 */


	function handleKeyDown$1(event) {
	  if (event.metaKey || event.altKey || event.ctrlKey) {
	    return;
	  }

	  hadKeyboardEvent = true;
	}
	/**
	 * If at any point a user clicks with a pointing device, ensure that we change
	 * the modality away from keyboard.
	 * This avoids the situation where a user presses a key on an already focused
	 * element, and then clicks on a different element, focusing it with a
	 * pointing device, while we still think we're in keyboard modality.
	 */


	function handlePointerDown() {
	  hadKeyboardEvent = false;
	}

	function handleVisibilityChange() {
	  if (this.visibilityState === 'hidden') {
	    // If the tab becomes active again, the browser will handle calling focus
	    // on the element (Safari actually calls it twice).
	    // If this tab change caused a blur on an element with focus-visible,
	    // re-apply the class when the user switches back to the tab.
	    if (hadFocusVisibleRecently) {
	      hadKeyboardEvent = true;
	    }
	  }
	}

	function prepare(doc) {
	  doc.addEventListener('keydown', handleKeyDown$1, true);
	  doc.addEventListener('mousedown', handlePointerDown, true);
	  doc.addEventListener('pointerdown', handlePointerDown, true);
	  doc.addEventListener('touchstart', handlePointerDown, true);
	  doc.addEventListener('visibilitychange', handleVisibilityChange, true);
	}

	function teardown(doc) {
	  doc.removeEventListener('keydown', handleKeyDown$1, true);
	  doc.removeEventListener('mousedown', handlePointerDown, true);
	  doc.removeEventListener('pointerdown', handlePointerDown, true);
	  doc.removeEventListener('touchstart', handlePointerDown, true);
	  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);
	}

	function isFocusVisible(event) {
	  const {
	    target
	  } = event;

	  try {
	    return target.matches(':focus-visible');
	  } catch (error) {// Browsers not implementing :focus-visible will throw a SyntaxError.
	    // We use our own heuristic for those browsers.
	    // Rethrow might be better if it's not the expected error but do we really
	    // want to crash if focus-visible malfunctioned?
	  } // No need for validFocusTarget check. The user does that by attaching it to
	  // focusable events only.


	  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
	}

	function useIsFocusVisible$1() {
	  const ref = React$1K.useCallback(node => {
	    if (node != null) {
	      prepare(node.ownerDocument);
	    }
	  }, []);
	  const isFocusVisibleRef = React$1K.useRef(false);
	  /**
	   * Should be called if a blur event is fired
	   */

	  function handleBlurVisible() {
	    // checking against potential state variable does not suffice if we focus and blur synchronously.
	    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
	    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
	    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
	    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
	    if (isFocusVisibleRef.current) {
	      // To detect a tab/window switch, we look for a blur event followed
	      // rapidly by a visibility change.
	      // If we don't see a visibility change within 100ms, it's probably a
	      // regular focus change.
	      hadFocusVisibleRecently = true;
	      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
	      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
	        hadFocusVisibleRecently = false;
	      }, 100);
	      isFocusVisibleRef.current = false;
	      return true;
	    }

	    return false;
	  }
	  /**
	   * Should be called if a blur event is fired
	   */


	  function handleFocusVisible(event) {
	    if (isFocusVisible(event)) {
	      isFocusVisibleRef.current = true;
	      return true;
	    }

	    return false;
	  }

	  return {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref
	  };
	}

	var getScrollbarSize$2 = {};

	Object.defineProperty(getScrollbarSize$2, "__esModule", {
	  value: true
	});
	getScrollbarSize$2.default = getScrollbarSize$1;

	// A change of the browser zoom change the scrollbar size.
	// Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18
	function getScrollbarSize$1(doc) {
	  // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
	  const documentWidth = doc.documentElement.clientWidth;
	  return Math.abs(window.innerWidth - documentWidth);
	}

	var scrollLeft$1 = {};

	Object.defineProperty(scrollLeft$1, "__esModule", {
	  value: true
	});
	scrollLeft$1.detectScrollType = detectScrollType;
	scrollLeft$1.getNormalizedScrollLeft = getNormalizedScrollLeft;
	// Source from https://github.com/alitaheri/normalize-scroll-left
	let cachedType;
	/**
	 * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type
	 *
	 * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.
	 *
	 * Type             | <- Most Left | Most Right -> | Initial
	 * ---------------- | ------------ | ------------- | -------
	 * default          | 0            | 100           | 100
	 * negative (spec*) | -100         | 0             | 0
	 * reverse          | 100          | 0             | 0
	 *
	 * Edge 85: default
	 * Safari 14: negative
	 * Chrome 85: negative
	 * Firefox 81: negative
	 * IE11: reverse
	 *
	 * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll
	 */

	function detectScrollType() {
	  if (cachedType) {
	    return cachedType;
	  }

	  const dummy = document.createElement('div');
	  const container = document.createElement('div');
	  container.style.width = '10px';
	  container.style.height = '1px';
	  dummy.appendChild(container);
	  dummy.dir = 'rtl';
	  dummy.style.fontSize = '14px';
	  dummy.style.width = '4px';
	  dummy.style.height = '1px';
	  dummy.style.position = 'absolute';
	  dummy.style.top = '-1000px';
	  dummy.style.overflow = 'scroll';
	  document.body.appendChild(dummy);
	  cachedType = 'reverse';

	  if (dummy.scrollLeft > 0) {
	    cachedType = 'default';
	  } else {
	    dummy.scrollLeft = 1;

	    if (dummy.scrollLeft === 0) {
	      cachedType = 'negative';
	    }
	  }

	  document.body.removeChild(dummy);
	  return cachedType;
	} // Based on https://stackoverflow.com/a/24394376


	function getNormalizedScrollLeft(element, direction) {
	  const scrollLeft = element.scrollLeft; // Perform the calculations only when direction is rtl to avoid messing up the ltr behavior

	  if (direction !== 'rtl') {
	    return scrollLeft;
	  }

	  const type = detectScrollType();

	  switch (type) {
	    case 'negative':
	      return element.scrollWidth - element.clientWidth + scrollLeft;

	    case 'reverse':
	      return element.scrollWidth - element.clientWidth - scrollLeft;

	    default:
	      return scrollLeft;
	  }
	}

	var usePreviousProps$1 = {};

	Object.defineProperty(usePreviousProps$1, "__esModule", {
	  value: true
	});
	usePreviousProps$1.default = void 0;

	var React$1J = _interopRequireWildcard$1O(require$$3);

	function _getRequireWildcardCache$1O(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1O = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1O(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1O(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const usePreviousProps = value => {
	  const ref = React$1J.useRef({});
	  React$1J.useEffect(() => {
	    ref.current = value;
	  });
	  return ref.current;
	};

	var _default$3w = usePreviousProps;
	usePreviousProps$1.default = _default$3w;

	var visuallyHidden$1 = {};

	Object.defineProperty(visuallyHidden$1, "__esModule", {
	  value: true
	});
	visuallyHidden$1.default = void 0;
	const visuallyHidden = {
	  border: 0,
	  clip: 'rect(0 0 0 0)',
	  height: '1px',
	  margin: -1,
	  overflow: 'hidden',
	  padding: 0,
	  position: 'absolute',
	  whiteSpace: 'nowrap',
	  width: '1px'
	};
	var _default$3v = visuallyHidden;
	visuallyHidden$1.default = _default$3v;

	var integerPropType = {};

	Object.defineProperty(integerPropType, "__esModule", {
	  value: true
	});
	integerPropType.default = void 0;
	integerPropType.getTypeByValue = getTypeByValue;

	function getTypeByValue(value) {
	  const valueType = typeof value;

	  switch (valueType) {
	    case 'number':
	      if (Number.isNaN(value)) {
	        return 'NaN';
	      }

	      if (!Number.isFinite(value)) {
	        return 'Infinity';
	      }

	      if (value !== Math.floor(value)) {
	        return 'float';
	      }

	      return 'number';

	    case 'object':
	      if (value === null) {
	        return 'null';
	      }

	      return value.constructor.name;

	    default:
	      return valueType;
	  }
	} // IE 11 support


	function ponyfillIsInteger(x) {
	  // eslint-disable-next-line no-restricted-globals
	  return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;
	}

	const isInteger = Number.isInteger || ponyfillIsInteger;

	function requiredInteger(props, propName, componentName, location) {
	  const propValue = props[propName];

	  if (propValue == null || !isInteger(propValue)) {
	    const propType = getTypeByValue(propValue);
	    return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
	  }

	  return null;
	}

	function validator$2(props, propName, ...other) {
	  const propValue = props[propName];

	  if (propValue === undefined) {
	    return null;
	  }

	  return requiredInteger(props, propName, ...other);
	}

	validator$2.isRequired = requiredInteger;

	var _default$3u = validator$2;

	integerPropType.default = _default$3u;

	var resolveProps$1 = {};

	var _interopRequireDefault$2I = interopRequireDefault.exports;

	Object.defineProperty(resolveProps$1, "__esModule", {
	  value: true
	});
	resolveProps$1.default = resolveProps;

	var _extends2$1E = _interopRequireDefault$2I(_extends$5.exports);

	/**
	 * Add keys, values of `defaultProps` that does not exist in `props`
	 * @param {object} defaultProps
	 * @param {object} props
	 * @returns {object} resolved props
	 */
	function resolveProps(defaultProps, props) {
	  const output = (0, _extends2$1E.default)({}, props);
	  Object.keys(defaultProps).forEach(propName => {
	    if (output[propName] === undefined) {
	      output[propName] = defaultProps[propName];
	    }
	  });
	  return output;
	}

	/** @license MUI v5.3.0
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "HTMLElementType", {
		  enumerable: true,
		  get: function () {
		    return _HTMLElementType.default;
		  }
		});
		Object.defineProperty(exports, "chainPropTypes", {
		  enumerable: true,
		  get: function () {
		    return _chainPropTypes.default;
		  }
		});
		Object.defineProperty(exports, "deepmerge", {
		  enumerable: true,
		  get: function () {
		    return _deepmerge.default;
		  }
		});
		Object.defineProperty(exports, "elementAcceptingRef", {
		  enumerable: true,
		  get: function () {
		    return _elementAcceptingRef.default;
		  }
		});
		Object.defineProperty(exports, "elementTypeAcceptingRef", {
		  enumerable: true,
		  get: function () {
		    return _elementTypeAcceptingRef.default;
		  }
		});
		Object.defineProperty(exports, "exactProp", {
		  enumerable: true,
		  get: function () {
		    return _exactProp.default;
		  }
		});
		Object.defineProperty(exports, "formatMuiErrorMessage", {
		  enumerable: true,
		  get: function () {
		    return _formatMuiErrorMessage.default;
		  }
		});
		Object.defineProperty(exports, "getDisplayName", {
		  enumerable: true,
		  get: function () {
		    return _getDisplayName.default;
		  }
		});
		Object.defineProperty(exports, "integerPropType", {
		  enumerable: true,
		  get: function () {
		    return _integerPropType.default;
		  }
		});
		Object.defineProperty(exports, "internal_resolveProps", {
		  enumerable: true,
		  get: function () {
		    return _resolveProps.default;
		  }
		});
		Object.defineProperty(exports, "isPlainObject", {
		  enumerable: true,
		  get: function () {
		    return _deepmerge.isPlainObject;
		  }
		});
		Object.defineProperty(exports, "ponyfillGlobal", {
		  enumerable: true,
		  get: function () {
		    return _ponyfillGlobal.default;
		  }
		});
		Object.defineProperty(exports, "refType", {
		  enumerable: true,
		  get: function () {
		    return _refType.default;
		  }
		});
		Object.defineProperty(exports, "unstable_capitalize", {
		  enumerable: true,
		  get: function () {
		    return _capitalize.default;
		  }
		});
		Object.defineProperty(exports, "unstable_createChainedFunction", {
		  enumerable: true,
		  get: function () {
		    return _createChainedFunction.default;
		  }
		});
		Object.defineProperty(exports, "unstable_debounce", {
		  enumerable: true,
		  get: function () {
		    return _debounce.default;
		  }
		});
		Object.defineProperty(exports, "unstable_deprecatedPropType", {
		  enumerable: true,
		  get: function () {
		    return _deprecatedPropType.default;
		  }
		});
		Object.defineProperty(exports, "unstable_detectScrollType", {
		  enumerable: true,
		  get: function () {
		    return _scrollLeft.detectScrollType;
		  }
		});
		Object.defineProperty(exports, "unstable_getNormalizedScrollLeft", {
		  enumerable: true,
		  get: function () {
		    return _scrollLeft.getNormalizedScrollLeft;
		  }
		});
		Object.defineProperty(exports, "unstable_getScrollbarSize", {
		  enumerable: true,
		  get: function () {
		    return _getScrollbarSize.default;
		  }
		});
		Object.defineProperty(exports, "unstable_isMuiElement", {
		  enumerable: true,
		  get: function () {
		    return _isMuiElement.default;
		  }
		});
		Object.defineProperty(exports, "unstable_ownerDocument", {
		  enumerable: true,
		  get: function () {
		    return _ownerDocument.default;
		  }
		});
		Object.defineProperty(exports, "unstable_ownerWindow", {
		  enumerable: true,
		  get: function () {
		    return _ownerWindow.default;
		  }
		});
		Object.defineProperty(exports, "unstable_requirePropFactory", {
		  enumerable: true,
		  get: function () {
		    return _requirePropFactory.default;
		  }
		});
		Object.defineProperty(exports, "unstable_setRef", {
		  enumerable: true,
		  get: function () {
		    return _setRef.default;
		  }
		});
		Object.defineProperty(exports, "unstable_unsupportedProp", {
		  enumerable: true,
		  get: function () {
		    return _unsupportedProp.default;
		  }
		});
		Object.defineProperty(exports, "unstable_useControlled", {
		  enumerable: true,
		  get: function () {
		    return _useControlled.default;
		  }
		});
		Object.defineProperty(exports, "unstable_useEnhancedEffect", {
		  enumerable: true,
		  get: function () {
		    return _useEnhancedEffect.default;
		  }
		});
		Object.defineProperty(exports, "unstable_useEventCallback", {
		  enumerable: true,
		  get: function () {
		    return _useEventCallback.default;
		  }
		});
		Object.defineProperty(exports, "unstable_useForkRef", {
		  enumerable: true,
		  get: function () {
		    return _useForkRef.default;
		  }
		});
		Object.defineProperty(exports, "unstable_useId", {
		  enumerable: true,
		  get: function () {
		    return _useId.default;
		  }
		});
		Object.defineProperty(exports, "unstable_useIsFocusVisible", {
		  enumerable: true,
		  get: function () {
		    return _useIsFocusVisible.default;
		  }
		});
		Object.defineProperty(exports, "usePreviousProps", {
		  enumerable: true,
		  get: function () {
		    return _usePreviousProps.default;
		  }
		});
		Object.defineProperty(exports, "visuallyHidden", {
		  enumerable: true,
		  get: function () {
		    return _visuallyHidden.default;
		  }
		});

		var _chainPropTypes = _interopRequireDefault(chainPropTypes$1);

		var _deepmerge = _interopRequireWildcard(deepmerge$1);

		var _elementAcceptingRef = _interopRequireDefault(elementAcceptingRef$1);

		var _elementTypeAcceptingRef = _interopRequireDefault(elementTypeAcceptingRef$1);

		var _exactProp = _interopRequireDefault(exactProp$1);

		var _formatMuiErrorMessage = _interopRequireDefault(formatMuiErrorMessage$1);

		var _getDisplayName = _interopRequireDefault(getDisplayName$2);

		var _HTMLElementType = _interopRequireDefault(HTMLElementType$1);

		var _ponyfillGlobal = _interopRequireDefault(ponyfillGlobal);

		var _refType = _interopRequireDefault(refType$1);

		var _capitalize = _interopRequireDefault(capitalize$2);

		var _createChainedFunction = _interopRequireDefault(createChainedFunction$3);

		var _debounce = _interopRequireDefault(debounce$3);

		var _deprecatedPropType = _interopRequireDefault(deprecatedPropType$2);

		var _isMuiElement = _interopRequireDefault(isMuiElement$2);

		var _ownerDocument = _interopRequireDefault(ownerDocument$2);

		var _ownerWindow = _interopRequireDefault(ownerWindow$2);

		var _requirePropFactory = _interopRequireDefault(requirePropFactory$2);

		var _setRef = _interopRequireDefault(setRef$2);

		var _useEnhancedEffect = _interopRequireDefault(useEnhancedEffect$3);

		var _useId = _interopRequireDefault(useId$2);

		var _unsupportedProp = _interopRequireDefault(unsupportedProp$2);

		var _useControlled = _interopRequireDefault(useControlled$2);

		var _useEventCallback = _interopRequireDefault(useEventCallback$3);

		var _useForkRef = _interopRequireDefault(useForkRef$2);

		var _useIsFocusVisible = _interopRequireDefault(useIsFocusVisible$2);

		var _getScrollbarSize = _interopRequireDefault(getScrollbarSize$2);

		var _scrollLeft = scrollLeft$1;

		var _usePreviousProps = _interopRequireDefault(usePreviousProps$1);

		var _visuallyHidden = _interopRequireDefault(visuallyHidden$1);

		var _integerPropType = _interopRequireDefault(integerPropType);

		var _resolveProps = _interopRequireDefault(resolveProps$1);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (utils$h));

	var debounce$1 = {};

	Object.defineProperty(debounce$1, "__esModule", {
	  value: true
	});
	debounce$1.default = void 0;

	var _utils$1t = utils$h;

	var _default$3t = _utils$1t.unstable_debounce;
	debounce$1.default = _default$3t;

	var useForkRef = {};

	Object.defineProperty(useForkRef, "__esModule", {
	  value: true
	});
	useForkRef.default = void 0;

	var _utils$1s = utils$h;

	var _default$3s = _utils$1s.unstable_useForkRef;
	useForkRef.default = _default$3s;

	var useTheme$8 = {};

	var system = {};

	var node$3 = {};

	var emotionStyled_browser_cjs = {};

	var _extends$4 = {exports: {}};

	(function (module) {
		function _extends() {
		  module.exports = _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];

		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }

		    return target;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  return _extends.apply(this, arguments);
		}

		module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (_extends$4));

	var emotionIsPropValid_browser_cjs = {};

	var emotionMemoize_browser_cjs = {};

	Object.defineProperty(emotionMemoize_browser_cjs, '__esModule', { value: true });

	function memoize$4(fn) {
	  var cache = Object.create(null);
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	emotionMemoize_browser_cjs.default = memoize$4;

	Object.defineProperty(emotionIsPropValid_browser_cjs, '__esModule', { value: true });

	var memoize$3 = emotionMemoize_browser_cjs;

	function _interopDefault$6 (e) { return e && e.__esModule ? e : { 'default': e }; }

	var memoize__default$1 = /*#__PURE__*/_interopDefault$6(memoize$3);

	var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

	var isPropValid$1 = /* #__PURE__ */memoize__default$1['default'](function (prop) {
	  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
	  /* o */
	  && prop.charCodeAt(1) === 110
	  /* n */
	  && prop.charCodeAt(2) < 91;
	}
	/* Z+1 */
	);

	emotionIsPropValid_browser_cjs.default = isPropValid$1;

	var emotionStyledBase_browser_cjs = {};

	var emotionReact_browser_cjs = {};

	var emotionCache_browser_cjs = {};

	var emotionSheet_browser_cjs = {};

	Object.defineProperty(emotionSheet_browser_cjs, '__esModule', { value: true });

	/*

	Based off glamor's StyleSheet, thanks Sunil ❤️

	high performance StyleSheet for css-in-js systems

	- uses multiple style tags behind the scenes for millions of rules
	- uses `insertRule` for appending in production for *much* faster performance

	// usage

	import { StyleSheet } from '@emotion/sheet'

	let styleSheet = new StyleSheet({ key: '', container: document.head })

	styleSheet.insert('#box { border: 1px solid red; }')
	- appends a css rule into the stylesheet

	styleSheet.flush()
	- empties the stylesheet of all its contents

	*/
	// $FlowFixMe
	function sheetForTag(tag) {
	  if (tag.sheet) {
	    // $FlowFixMe
	    return tag.sheet;
	  } // this weirdness brought to you by firefox

	  /* istanbul ignore next */


	  for (var i = 0; i < document.styleSheets.length; i++) {
	    if (document.styleSheets[i].ownerNode === tag) {
	      // $FlowFixMe
	      return document.styleSheets[i];
	    }
	  }
	}

	function createStyleElement(options) {
	  var tag = document.createElement('style');
	  tag.setAttribute('data-emotion', options.key);

	  if (options.nonce !== undefined) {
	    tag.setAttribute('nonce', options.nonce);
	  }

	  tag.appendChild(document.createTextNode(''));
	  tag.setAttribute('data-s', '');
	  return tag;
	}

	var StyleSheet = /*#__PURE__*/function () {
	  function StyleSheet(options) {
	    var _this = this;

	    this._insertTag = function (tag) {
	      var before;

	      if (_this.tags.length === 0) {
	        if (_this.insertionPoint) {
	          before = _this.insertionPoint.nextSibling;
	        } else if (_this.prepend) {
	          before = _this.container.firstChild;
	        } else {
	          before = _this.before;
	        }
	      } else {
	        before = _this.tags[_this.tags.length - 1].nextSibling;
	      }

	      _this.container.insertBefore(tag, before);

	      _this.tags.push(tag);
	    };

	    this.isSpeedy = options.speedy === undefined ? "development" === 'production' : options.speedy;
	    this.tags = [];
	    this.ctr = 0;
	    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

	    this.key = options.key;
	    this.container = options.container;
	    this.prepend = options.prepend;
	    this.insertionPoint = options.insertionPoint;
	    this.before = null;
	  }

	  var _proto = StyleSheet.prototype;

	  _proto.hydrate = function hydrate(nodes) {
	    nodes.forEach(this._insertTag);
	  };

	  _proto.insert = function insert(rule) {
	    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
	    // it's 1 in dev because we insert source maps that map a single rule to a location
	    // and you can only have one source map per style tag
	    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
	      this._insertTag(createStyleElement(this));
	    }

	    var tag = this.tags[this.tags.length - 1];

	    {
	      var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;

	      if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
	        // this would only cause problem in speedy mode
	        // but we don't want enabling speedy to affect the observable behavior
	        // so we report this error at all times
	        console.error("You're attempting to insert the following rule:\n" + rule + '\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.');
	      }
	      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
	    }

	    if (this.isSpeedy) {
	      var sheet = sheetForTag(tag);

	      try {
	        // this is the ultrafast version, works across browsers
	        // the big drawback is that the css won't be editable in devtools
	        sheet.insertRule(rule, sheet.cssRules.length);
	      } catch (e) {
	        if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
	          console.error("There was a problem inserting the following rule: \"" + rule + "\"", e);
	        }
	      }
	    } else {
	      tag.appendChild(document.createTextNode(rule));
	    }

	    this.ctr++;
	  };

	  _proto.flush = function flush() {
	    // $FlowFixMe
	    this.tags.forEach(function (tag) {
	      return tag.parentNode && tag.parentNode.removeChild(tag);
	    });
	    this.tags = [];
	    this.ctr = 0;

	    {
	      this._alreadyInsertedOrderInsensitiveRule = false;
	    }
	  };

	  return StyleSheet;
	}();

	emotionSheet_browser_cjs.StyleSheet = StyleSheet;

	var stylis$1 = {exports: {}};

	(function (module, exports) {
		(function(e,r){r(exports);})(commonjsGlobal,(function(e){var r="-ms-";var a="-moz-";var c="-webkit-";var t="comm";var n="rule";var s="decl";var i="@page";var u="@media";var o="@import";var f="@charset";var l="@viewport";var h="@supports";var p="@document";var v="@namespace";var b="@keyframes";var d="@font-face";var m="@counter-style";var w="@font-feature-values";var k=Math.abs;var $=String.fromCharCode;var g=Object.assign;function x(e,r){return (((r<<2^O(e,0))<<2^O(e,1))<<2^O(e,2))<<2^O(e,3)}function E(e){return e.trim()}function y(e,r){return (e=r.exec(e))?e[0]:e}function T(e,r,a){return e.replace(r,a)}function A(e,r){return e.indexOf(r)}function O(e,r){return e.charCodeAt(r)|0}function C(e,r,a){return e.slice(r,a)}function M(e){return e.length}function S(e){return e.length}function R(e,r){return r.push(e),e}function z(e,r){return e.map(r).join("")}e.line=1;e.column=1;e.length=0;e.position=0;e.character=0;e.characters="";function N(r,a,c,t,n,s,i){return {value:r,root:a,parent:c,type:t,props:n,children:s,line:e.line,column:e.column,length:i,return:""}}function P(e,r){return g(N("",null,null,"",null,null,0),e,{length:-e.length},r)}function j(){return e.character}function U(){e.character=e.position>0?O(e.characters,--e.position):0;if(e.column--,e.character===10)e.column=1,e.line--;return e.character}function _(){e.character=e.position<e.length?O(e.characters,e.position++):0;if(e.column++,e.character===10)e.column=1,e.line++;return e.character}function F(){return O(e.characters,e.position)}function I(){return e.position}function L(r,a){return C(e.characters,r,a)}function D(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function K(r){return e.line=e.column=1,e.length=M(e.characters=r),e.position=0,[]}function V(r){return e.characters="",r}function W(r){return E(L(e.position-1,Z(r===91?r+2:r===40?r+1:r)))}function Y(e){return V(G(K(e)))}function B(r){while(e.character=F())if(e.character<33)_();else break;return D(r)>2||D(e.character)>3?"":" "}function G(r){while(_())switch(D(e.character)){case 0:R(J(e.position-1),r);break;case 2:R(W(e.character),r);break;default:R($(e.character),r);}return r}function H(r,a){while(--a&&_())if(e.character<48||e.character>102||e.character>57&&e.character<65||e.character>70&&e.character<97)break;return L(r,I()+(a<6&&F()==32&&_()==32))}function Z(r){while(_())switch(e.character){case r:return e.position;case 34:case 39:if(r!==34&&r!==39)Z(e.character);break;case 40:if(r===41)Z(r);break;case 92:_();break}return e.position}function q(r,a){while(_())if(r+e.character===47+10)break;else if(r+e.character===42+42&&F()===47)break;return "/*"+L(a,e.position-1)+"*"+$(r===47?r:_())}function J(r){while(!D(F()))_();return L(r,e.position)}function Q(e){return V(X("",null,null,null,[""],e=K(e),0,[0],e))}function X(e,r,a,c,t,n,s,i,u){var o=0;var f=0;var l=s;var h=0;var p=0;var v=0;var b=1;var d=1;var m=1;var w=0;var k="";var g=t;var x=n;var E=c;var y=k;while(d)switch(v=w,w=_()){case 40:if(v!=108&&y.charCodeAt(l-1)==58){if(A(y+=T(W(w),"&","&\f"),"&\f")!=-1)m=-1;break}case 34:case 39:case 91:y+=W(w);break;case 9:case 10:case 13:case 32:y+=B(v);break;case 92:y+=H(I()-1,7);continue;case 47:switch(F()){case 42:case 47:R(re(q(_(),I()),r,a),u);break;default:y+="/";}break;case 123*b:i[o++]=M(y)*m;case 125*b:case 59:case 0:switch(w){case 0:case 125:d=0;case 59+f:if(p>0&&M(y)-l)R(p>32?ae(y+";",c,a,l-1):ae(T(y," ","")+";",c,a,l-2),u);break;case 59:y+=";";default:R(E=ee(y,r,a,o,f,t,i,k,g=[],x=[],l),n);if(w===123)if(f===0)X(y,r,E,E,g,n,l,i,x);else switch(h){case 100:case 109:case 115:X(e,E,E,c&&R(ee(e,E,E,0,0,t,i,k,t,g=[],l),x),t,x,l,i,c?g:x);break;default:X(y,E,E,E,[""],x,0,i,x);}}o=f=p=0,b=m=1,k=y="",l=s;break;case 58:l=1+M(y),p=v;default:if(b<1)if(w==123)--b;else if(w==125&&b++==0&&U()==125)continue;switch(y+=$(w),w*b){case 38:m=f>0?1:(y+="\f",-1);break;case 44:i[o++]=(M(y)-1)*m,m=1;break;case 64:if(F()===45)y+=W(_());h=F(),f=l=M(k=y+=J(I())),w++;break;case 45:if(v===45&&M(y)==2)b=0;}}return n}function ee(e,r,a,c,t,s,i,u,o,f,l){var h=t-1;var p=t===0?s:[""];var v=S(p);for(var b=0,d=0,m=0;b<c;++b)for(var w=0,$=C(e,h+1,h=k(d=i[b])),g=e;w<v;++w)if(g=E(d>0?p[w]+" "+$:T($,/&\f/g,p[w])))o[m++]=g;return N(e,r,a,t===0?n:u,o,f,l)}function re(e,r,a){return N(e,r,a,t,$(j()),C(e,2,-2),0)}function ae(e,r,a,c){return N(e,r,a,s,C(e,0,c),C(e,c+1,-1),c)}function ce(e,t){switch(x(e,t)){case 5103:return c+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return c+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return c+e+a+e+r+e+e;case 6828:case 4268:return c+e+r+e+e;case 6165:return c+e+r+"flex-"+e+e;case 5187:return c+e+T(e,/(\w+).+(:[^]+)/,c+"box-$1$2"+r+"flex-$1$2")+e;case 5443:return c+e+r+"flex-item-"+T(e,/flex-|-self/,"")+e;case 4675:return c+e+r+"flex-line-pack"+T(e,/align-content|flex-|-self/,"")+e;case 5548:return c+e+r+T(e,"shrink","negative")+e;case 5292:return c+e+r+T(e,"basis","preferred-size")+e;case 6060:return c+"box-"+T(e,"-grow","")+c+e+r+T(e,"grow","positive")+e;case 4554:return c+T(e,/([^-])(transform)/g,"$1"+c+"$2")+e;case 6187:return T(T(T(e,/(zoom-|grab)/,c+"$1"),/(image-set)/,c+"$1"),e,"")+e;case 5495:case 3959:return T(e,/(image-set\([^]*)/,c+"$1"+"$`$1");case 4968:return T(T(e,/(.+:)(flex-)?(.*)/,c+"box-pack:$3"+r+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+c+e+e;case 4095:case 3583:case 4068:case 2532:return T(e,/(.+)-inline(.+)/,c+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(M(e)-1-t>6)switch(O(e,t+1)){case 109:if(O(e,t+4)!==45)break;case 102:return T(e,/(.+:)(.+)-([^]+)/,"$1"+c+"$2-$3"+"$1"+a+(O(e,t+3)==108?"$3":"$2-$3"))+e;case 115:return ~A(e,"stretch")?ce(T(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(O(e,t+1)!==115)break;case 6444:switch(O(e,M(e)-3-(~A(e,"!important")&&10))){case 107:return T(e,":",":"+c)+e;case 101:return T(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+c+(O(e,14)===45?"inline-":"")+"box$3"+"$1"+c+"$2$3"+"$1"+r+"$2box$3")+e}break;case 5936:switch(O(e,t+11)){case 114:return c+e+r+T(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return c+e+r+T(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return c+e+r+T(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return c+e+r+e+e}return e}function te(e,r){var a="";var c=S(e);for(var t=0;t<c;t++)a+=r(e[t],t,e,r)||"";return a}function ne(e,r,a,c){switch(e.type){case o:case s:return e.return=e.return||e.value;case t:return "";case b:return e.return=e.value+"{"+te(e.children,c)+"}";case n:e.value=e.props.join(",");}return M(a=te(e.children,c))?e.return=e.value+"{"+a+"}":""}function se(e){var r=S(e);return function(a,c,t,n){var s="";for(var i=0;i<r;i++)s+=e[i](a,c,t,n)||"";return s}}function ie(e){return function(r){if(!r.root)if(r=r.return)e(r);}}function ue(e,t,i,u){if(e.length>-1)if(!e.return)switch(e.type){case s:e.return=ce(e.value,e.length);break;case b:return te([P(e,{value:T(e.value,"@","@"+c)})],u);case n:if(e.length)return z(e.props,(function(t){switch(y(t,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return te([P(e,{props:[T(t,/:(read-\w+)/,":"+a+"$1")]})],u);case"::placeholder":return te([P(e,{props:[T(t,/:(plac\w+)/,":"+c+"input-$1")]}),P(e,{props:[T(t,/:(plac\w+)/,":"+a+"$1")]}),P(e,{props:[T(t,/:(plac\w+)/,r+"input-$1")]})],u)}return ""}))}}function oe(e){switch(e.type){case n:e.props=e.props.map((function(r){return z(Y(r),(function(r,a,c){switch(O(r,0)){case 12:return C(r,1,M(r));case 0:case 40:case 43:case 62:case 126:return r;case 58:if(c[++a]==="global")c[a]="",c[++a]="\f"+C(c[a],a=1,-1);case 32:return a===1?"":r;default:switch(a){case 0:e=r;return S(c)>1?"":r;case a=S(c)-1:case 2:return a===2?r+e+e:r+e;default:return r}}}))}));}}e.CHARSET=f;e.COMMENT=t;e.COUNTER_STYLE=m;e.DECLARATION=s;e.DOCUMENT=p;e.FONT_FACE=d;e.FONT_FEATURE_VALUES=w;e.IMPORT=o;e.KEYFRAMES=b;e.MEDIA=u;e.MOZ=a;e.MS=r;e.NAMESPACE=v;e.PAGE=i;e.RULESET=n;e.SUPPORTS=h;e.VIEWPORT=l;e.WEBKIT=c;e.abs=k;e.alloc=K;e.append=R;e.assign=g;e.caret=I;e.char=j;e.charat=O;e.combine=z;e.comment=re;e.commenter=q;e.compile=Q;e.copy=P;e.dealloc=V;e.declaration=ae;e.delimit=W;e.delimiter=Z;e.escaping=H;e.from=$;e.hash=x;e.identifier=J;e.indexof=A;e.match=y;e.middleware=se;e.namespace=oe;e.next=_;e.node=N;e.parse=X;e.peek=F;e.prefix=ce;e.prefixer=ue;e.prev=U;e.replace=T;e.ruleset=ee;e.rulesheet=ie;e.serialize=te;e.sizeof=S;e.slice=L;e.stringify=ne;e.strlen=M;e.substr=C;e.token=D;e.tokenize=Y;e.tokenizer=G;e.trim=E;e.whitespace=B;Object.defineProperty(e,"__esModule",{value:true});}));
		
	} (stylis$1, stylis$1.exports));

	var weakMemoize_browser_cjs = {};

	Object.defineProperty(weakMemoize_browser_cjs, '__esModule', { value: true });

	var weakMemoize$1 = function weakMemoize(func) {
	  // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
	  var cache = new WeakMap();
	  return function (arg) {
	    if (cache.has(arg)) {
	      // $FlowFixMe
	      return cache.get(arg);
	    }

	    var ret = func(arg);
	    cache.set(arg, ret);
	    return ret;
	  };
	};

	weakMemoize_browser_cjs.default = weakMemoize$1;

	Object.defineProperty(emotionCache_browser_cjs, '__esModule', { value: true });

	var sheet$1 = emotionSheet_browser_cjs;
	var stylis = stylis$1.exports;



	var last = function last(arr) {
	  return arr.length ? arr[arr.length - 1] : null;
	}; // based on https://github.com/thysultan/stylis.js/blob/e6843c373ebcbbfade25ebcc23f540ed8508da0a/src/Tokenizer.js#L239-L244


	var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
	  var previous = 0;
	  var character = 0;

	  while (true) {
	    previous = character;
	    character = stylis.peek(); // &\f

	    if (previous === 38 && character === 12) {
	      points[index] = 1;
	    }

	    if (stylis.token(character)) {
	      break;
	    }

	    stylis.next();
	  }

	  return stylis.slice(begin, stylis.position);
	};

	var toRules = function toRules(parsed, points) {
	  // pretend we've started with a comma
	  var index = -1;
	  var character = 44;

	  do {
	    switch (stylis.token(character)) {
	      case 0:
	        // &\f
	        if (character === 38 && stylis.peek() === 12) {
	          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
	          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
	          // and when it should just concatenate the outer and inner selectors
	          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
	          points[index] = 1;
	        }

	        parsed[index] += identifierWithPointTracking(stylis.position - 1, points, index);
	        break;

	      case 2:
	        parsed[index] += stylis.delimit(character);
	        break;

	      case 4:
	        // comma
	        if (character === 44) {
	          // colon
	          parsed[++index] = stylis.peek() === 58 ? '&\f' : '';
	          points[index] = parsed[index].length;
	          break;
	        }

	      // fallthrough

	      default:
	        parsed[index] += stylis.from(character);
	    }
	  } while (character = stylis.next());

	  return parsed;
	};

	var getRules = function getRules(value, points) {
	  return stylis.dealloc(toRules(stylis.alloc(value), points));
	}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


	var fixedElements = /* #__PURE__ */new WeakMap();
	var compat = function compat(element) {
	  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
	  // negative .length indicates that this rule has been already prefixed
	  element.length < 1) {
	    return;
	  }

	  var value = element.value,
	      parent = element.parent;
	  var isImplicitRule = element.column === parent.column && element.line === parent.line;

	  while (parent.type !== 'rule') {
	    parent = parent.parent;
	    if (!parent) return;
	  } // short-circuit for the simplest case


	  if (element.props.length === 1 && value.charCodeAt(0) !== 58
	  /* colon */
	  && !fixedElements.get(parent)) {
	    return;
	  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
	  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


	  if (isImplicitRule) {
	    return;
	  }

	  fixedElements.set(element, true);
	  var points = [];
	  var rules = getRules(value, points);
	  var parentRules = parent.props;

	  for (var i = 0, k = 0; i < rules.length; i++) {
	    for (var j = 0; j < parentRules.length; j++, k++) {
	      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
	    }
	  }
	};
	var removeLabel = function removeLabel(element) {
	  if (element.type === 'decl') {
	    var value = element.value;

	    if ( // charcode for l
	    value.charCodeAt(0) === 108 && // charcode for b
	    value.charCodeAt(2) === 98) {
	      // this ignores label
	      element["return"] = '';
	      element.value = '';
	    }
	  }
	};
	var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';

	var isIgnoringComment = function isIgnoringComment(element) {
	  return !!element && element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
	};

	var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
	  return function (element, index, children) {
	    if (element.type !== 'rule') return;
	    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);

	    if (unsafePseudoClasses && cache.compat !== true) {
	      var prevElement = index > 0 ? children[index - 1] : null;

	      if (prevElement && isIgnoringComment(last(prevElement.children))) {
	        return;
	      }

	      unsafePseudoClasses.forEach(function (unsafePseudoClass) {
	        console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
	      });
	    }
	  };
	};

	var isImportRule = function isImportRule(element) {
	  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
	};

	var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
	  for (var i = index - 1; i >= 0; i--) {
	    if (!isImportRule(children[i])) {
	      return true;
	    }
	  }

	  return false;
	}; // use this to remove incorrect elements from further processing
	// so they don't get handed to the `sheet` (or anything else)
	// as that could potentially lead to additional logs which in turn could be overhelming to the user


	var nullifyElement = function nullifyElement(element) {
	  element.type = '';
	  element.value = '';
	  element["return"] = '';
	  element.children = '';
	  element.props = '';
	};

	var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
	  if (!isImportRule(element)) {
	    return;
	  }

	  if (element.parent) {
	    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
	    nullifyElement(element);
	  } else if (isPrependedWithRegularRules(index, children)) {
	    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
	    nullifyElement(element);
	  }
	};

	var defaultStylisPlugins = [stylis.prefixer];

	var createCache$1 = function createCache(options) {
	  var key = options.key;

	  if (!key) {
	    throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\n" + "If multiple caches share the same key they might \"fight\" for each other's style elements.");
	  }

	  if ( key === 'css') {
	    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
	    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
	    // note this very very intentionally targets all style elements regardless of the key to ensure
	    // that creating a cache works inside of render of a React component

	    Array.prototype.forEach.call(ssrStyles, function (node) {
	      // we want to only move elements which have a space in the data-emotion attribute value
	      // because that indicates that it is an Emotion 11 server-side rendered style elements
	      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
	      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
	      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
	      // will not result in the Emotion 10 styles being destroyed
	      var dataEmotionAttribute = node.getAttribute('data-emotion');

	      if (dataEmotionAttribute.indexOf(' ') === -1) {
	        return;
	      }
	      document.head.appendChild(node);
	      node.setAttribute('data-s', '');
	    });
	  }

	  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

	  {
	    // $FlowFixMe
	    if (/[^a-z-]/.test(key)) {
	      throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
	    }
	  }

	  var inserted = {}; // $FlowFixMe

	  var container;
	  var nodesToHydrate = [];

	  {
	    container = options.container || document.head;
	    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
	    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
	    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
	      var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

	      for (var i = 1; i < attrib.length; i++) {
	        inserted[attrib[i]] = true;
	      }

	      nodesToHydrate.push(node);
	    });
	  }

	  var _insert;

	  var omnipresentPlugins = [compat, removeLabel];

	  {
	    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
	      get compat() {
	        return cache.compat;
	      }

	    }), incorrectImportAlarm);
	  }

	  {
	    var currentSheet;
	    var finalizingPlugins = [stylis.stringify, function (element) {
	      if (!element.root) {
	        if (element["return"]) {
	          currentSheet.insert(element["return"]);
	        } else if (element.value && element.type !== stylis.COMMENT) {
	          // insert empty rule in non-production environments
	          // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
	          currentSheet.insert(element.value + "{}");
	        }
	      }
	    } ];
	    var serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

	    var stylis$1 = function stylis$1(styles) {
	      return stylis.serialize(stylis.compile(styles), serializer);
	    };

	    _insert = function insert(selector, serialized, sheet, shouldCache) {
	      currentSheet = sheet;

	      if (serialized.map !== undefined) {
	        currentSheet = {
	          insert: function insert(rule) {
	            sheet.insert(rule + serialized.map);
	          }
	        };
	      }

	      stylis$1(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

	      if (shouldCache) {
	        cache.inserted[serialized.name] = true;
	      }
	    };
	  }

	  var cache = {
	    key: key,
	    sheet: new sheet$1.StyleSheet({
	      key: key,
	      container: container,
	      nonce: options.nonce,
	      speedy: options.speedy,
	      prepend: options.prepend,
	      insertionPoint: options.insertionPoint
	    }),
	    nonce: options.nonce,
	    inserted: inserted,
	    registered: {},
	    insert: _insert
	  };
	  cache.sheet.hydrate(nodesToHydrate);
	  return cache;
	};

	emotionCache_browser_cjs.default = createCache$1;

	var emotionElement075f6e74_browser_cjs = {};

	var _extends$3 = {exports: {}};

	(function (module) {
		function _extends() {
		  module.exports = _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];

		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }

		    return target;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  return _extends.apply(this, arguments);
		}

		module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (_extends$3));

	var emotionReact_isolatedHnrs_browser_cjs = {};

	Object.defineProperty(emotionReact_isolatedHnrs_browser_cjs, '__esModule', { value: true });

	var hoistNonReactStatics$1 = hoistNonReactStatics_cjs;

	function _interopDefault$5 (e) { return e && e.__esModule ? e : { 'default': e }; }

	var hoistNonReactStatics__default = /*#__PURE__*/_interopDefault$5(hoistNonReactStatics$1);

	// this file isolates this package that is not tree-shakeable
	// and if this module doesn't actually contain any logic of its own
	// then Rollup just use 'hoist-non-react-statics' directly in other chunks

	var hoistNonReactStatics$2 = (function (targetComponent, sourceComponent) {
	  return hoistNonReactStatics__default['default'](targetComponent, sourceComponent);
	});

	emotionReact_isolatedHnrs_browser_cjs.default = hoistNonReactStatics$2;

	var emotionUtils_browser_cjs = {};

	Object.defineProperty(emotionUtils_browser_cjs, '__esModule', { value: true });

	var isBrowser$1 = "object" !== 'undefined';
	function getRegisteredStyles(registered, registeredStyles, classNames) {
	  var rawClassName = '';
	  classNames.split(' ').forEach(function (className) {
	    if (registered[className] !== undefined) {
	      registeredStyles.push(registered[className] + ";");
	    } else {
	      rawClassName += className + " ";
	    }
	  });
	  return rawClassName;
	}
	var insertStyles = function insertStyles(cache, serialized, isStringTag) {
	  var className = cache.key + "-" + serialized.name;

	  if ( // we only need to add the styles to the registered cache if the
	  // class name could be used further down
	  // the tree but if it's a string tag, we know it won't
	  // so we don't have to add it to registered cache.
	  // this improves memory usage since we can avoid storing the whole style string
	  (isStringTag === false || // we need to always store it if we're in compat mode and
	  // in node since emotion-server relies on whether a style is in
	  // the registered cache to know whether a style is global or not
	  // also, note that this check will be dead code eliminated in the browser
	  isBrowser$1 === false ) && cache.registered[className] === undefined) {
	    cache.registered[className] = serialized.styles;
	  }

	  if (cache.inserted[serialized.name] === undefined) {
	    var current = serialized;

	    do {
	      cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

	      current = current.next;
	    } while (current !== undefined);
	  }
	};

	emotionUtils_browser_cjs.getRegisteredStyles = getRegisteredStyles;
	emotionUtils_browser_cjs.insertStyles = insertStyles;

	var emotionSerialize_browser_cjs = {};

	var hash_browser_cjs = {};

	Object.defineProperty(hash_browser_cjs, '__esModule', { value: true });

	/* eslint-disable */
	// Inspired by https://github.com/garycourt/murmurhash-js
	// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
	function murmur2(str) {
	  // 'm' and 'r' are mixing constants generated offline.
	  // They're not really 'magic', they just happen to work well.
	  // const m = 0x5bd1e995;
	  // const r = 24;
	  // Initialize the hash
	  var h = 0; // Mix 4 bytes at a time into the hash

	  var k,
	      i = 0,
	      len = str.length;

	  for (; len >= 4; ++i, len -= 4) {
	    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
	    k =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
	    k ^=
	    /* k >>> r: */
	    k >>> 24;
	    h =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
	    /* Math.imul(h, m): */
	    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Handle the last few bytes of the input array


	  switch (len) {
	    case 3:
	      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

	    case 2:
	      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

	    case 1:
	      h ^= str.charCodeAt(i) & 0xff;
	      h =
	      /* Math.imul(h, m): */
	      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Do a few final mixes of the hash to ensure the last few
	  // bytes are well-incorporated.


	  h ^= h >>> 13;
	  h =
	  /* Math.imul(h, m): */
	  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  return ((h ^ h >>> 15) >>> 0).toString(36);
	}

	hash_browser_cjs.default = murmur2;

	var unitless_browser_cjs = {};

	Object.defineProperty(unitless_browser_cjs, '__esModule', { value: true });

	var unitlessKeys = {
	  animationIterationCount: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	unitless_browser_cjs.default = unitlessKeys;

	Object.defineProperty(emotionSerialize_browser_cjs, '__esModule', { value: true });

	var hashString = hash_browser_cjs;
	var unitless = unitless_browser_cjs;
	var memoize$2 = emotionMemoize_browser_cjs;

	function _interopDefault$4 (e) { return e && e.__esModule ? e : { 'default': e }; }

	var hashString__default = /*#__PURE__*/_interopDefault$4(hashString);
	var unitless__default = /*#__PURE__*/_interopDefault$4(unitless);
	var memoize__default = /*#__PURE__*/_interopDefault$4(memoize$2);

	var ILLEGAL_ESCAPE_SEQUENCE_ERROR$1 = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
	var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
	var hyphenateRegex = /[A-Z]|^ms/g;
	var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

	var isCustomProperty = function isCustomProperty(property) {
	  return property.charCodeAt(1) === 45;
	};

	var isProcessableValue = function isProcessableValue(value) {
	  return value != null && typeof value !== 'boolean';
	};

	var processStyleName = /* #__PURE__ */memoize__default['default'](function (styleName) {
	  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
	});

	var processStyleValue = function processStyleValue(key, value) {
	  switch (key) {
	    case 'animation':
	    case 'animationName':
	      {
	        if (typeof value === 'string') {
	          return value.replace(animationRegex, function (match, p1, p2) {
	            cursor = {
	              name: p1,
	              styles: p2,
	              next: cursor
	            };
	            return p1;
	          });
	        }
	      }
	  }

	  if (unitless__default['default'][key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
	    return value + 'px';
	  }

	  return value;
	};

	{
	  var contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
	  var contentValues = ['normal', 'none', 'initial', 'inherit', 'unset'];
	  var oldProcessStyleValue = processStyleValue;
	  var msPattern = /^-ms-/;
	  var hyphenPattern = /-(.)/g;
	  var hyphenatedCache = {};

	  processStyleValue = function processStyleValue(key, value) {
	    if (key === 'content') {
	      if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
	        throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
	      }
	    }

	    var processed = oldProcessStyleValue(key, value);

	    if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
	      hyphenatedCache[key] = true;
	      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function (str, _char) {
	        return _char.toUpperCase();
	      }) + "?");
	    }

	    return processed;
	  };
	}

	function handleInterpolation(mergedProps, registered, interpolation) {
	  if (interpolation == null) {
	    return '';
	  }

	  if (interpolation.__emotion_styles !== undefined) {
	    if (interpolation.toString() === 'NO_COMPONENT_SELECTOR') {
	      throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
	    }

	    return interpolation;
	  }

	  switch (typeof interpolation) {
	    case 'boolean':
	      {
	        return '';
	      }

	    case 'object':
	      {
	        if (interpolation.anim === 1) {
	          cursor = {
	            name: interpolation.name,
	            styles: interpolation.styles,
	            next: cursor
	          };
	          return interpolation.name;
	        }

	        if (interpolation.styles !== undefined) {
	          var next = interpolation.next;

	          if (next !== undefined) {
	            // not the most efficient thing ever but this is a pretty rare case
	            // and there will be very few iterations of this generally
	            while (next !== undefined) {
	              cursor = {
	                name: next.name,
	                styles: next.styles,
	                next: cursor
	              };
	              next = next.next;
	            }
	          }

	          var styles = interpolation.styles + ";";

	          if (interpolation.map !== undefined) {
	            styles += interpolation.map;
	          }

	          return styles;
	        }

	        return createStringFromObject(mergedProps, registered, interpolation);
	      }

	    case 'function':
	      {
	        if (mergedProps !== undefined) {
	          var previousCursor = cursor;
	          var result = interpolation(mergedProps);
	          cursor = previousCursor;
	          return handleInterpolation(mergedProps, registered, result);
	        } else {
	          console.error('Functions that are interpolated in css calls will be stringified.\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\n' + 'It can be called directly with props or interpolated in a styled call like this\n' + "let SomeComponent = styled('div')`${dynamicStyle}`");
	        }

	        break;
	      }

	    case 'string':
	      {
	        var matched = [];
	        var replaced = interpolation.replace(animationRegex, function (match, p1, p2) {
	          var fakeVarName = "animation" + matched.length;
	          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
	          return "${" + fakeVarName + "}";
	        });

	        if (matched.length) {
	          console.error('`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\n' + 'Instead of doing this:\n\n' + [].concat(matched, ["`" + replaced + "`"]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
	        }
	      }

	      break;
	  } // finalize string values (regular strings and functions interpolated into css calls)


	  if (registered == null) {
	    return interpolation;
	  }

	  var cached = registered[interpolation];
	  return cached !== undefined ? cached : interpolation;
	}

	function createStringFromObject(mergedProps, registered, obj) {
	  var string = '';

	  if (Array.isArray(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
	    }
	  } else {
	    for (var _key in obj) {
	      var value = obj[_key];

	      if (typeof value !== 'object') {
	        if (registered != null && registered[value] !== undefined) {
	          string += _key + "{" + registered[value] + "}";
	        } else if (isProcessableValue(value)) {
	          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
	        }
	      } else {
	        if (_key === 'NO_COMPONENT_SELECTOR' && "development" !== 'production') {
	          throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
	        }

	        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
	          for (var _i = 0; _i < value.length; _i++) {
	            if (isProcessableValue(value[_i])) {
	              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
	            }
	          }
	        } else {
	          var interpolated = handleInterpolation(mergedProps, registered, value);

	          switch (_key) {
	            case 'animation':
	            case 'animationName':
	              {
	                string += processStyleName(_key) + ":" + interpolated + ";";
	                break;
	              }

	            default:
	              {
	                if (_key === 'undefined') {
	                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
	                }

	                string += _key + "{" + interpolated + "}";
	              }
	          }
	        }
	      }
	    }
	  }

	  return string;
	}

	var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
	var sourceMapPattern;

	{
	  sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
	} // this is the cursor for keyframes
	// keyframes are stored on the SerializedStyles object as a linked list


	var cursor;
	var serializeStyles = function serializeStyles(args, registered, mergedProps) {
	  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
	    return args[0];
	  }

	  var stringMode = true;
	  var styles = '';
	  cursor = undefined;
	  var strings = args[0];

	  if (strings == null || strings.raw === undefined) {
	    stringMode = false;
	    styles += handleInterpolation(mergedProps, registered, strings);
	  } else {
	    if (strings[0] === undefined) {
	      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
	    }

	    styles += strings[0];
	  } // we start at 1 since we've already handled the first arg


	  for (var i = 1; i < args.length; i++) {
	    styles += handleInterpolation(mergedProps, registered, args[i]);

	    if (stringMode) {
	      if (strings[i] === undefined) {
	        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
	      }

	      styles += strings[i];
	    }
	  }

	  var sourceMap;

	  {
	    styles = styles.replace(sourceMapPattern, function (match) {
	      sourceMap = match;
	      return '';
	    });
	  } // using a global regex with .exec is stateful so lastIndex has to be reset each time


	  labelPattern.lastIndex = 0;
	  var identifierName = '';
	  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

	  while ((match = labelPattern.exec(styles)) !== null) {
	    identifierName += '-' + // $FlowFixMe we know it's not null
	    match[1];
	  }

	  var name = hashString__default['default'](styles) + identifierName;

	  {
	    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
	    return {
	      name: name,
	      styles: styles,
	      map: sourceMap,
	      next: cursor,
	      toString: function toString() {
	        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
	      }
	    };
	  }
	};

	emotionSerialize_browser_cjs.serializeStyles = serializeStyles;

	var React$1I = require$$3;
	var createCache = emotionCache_browser_cjs;
	var _extends$2 = _extends$3.exports;
	var weakMemoize = weakMemoize_browser_cjs;
	var _isolatedHnrs_dist_emotionReact_isolatedHnrs = emotionReact_isolatedHnrs_browser_cjs;
	var utils$g = emotionUtils_browser_cjs;
	var serialize$2 = emotionSerialize_browser_cjs;

	function _interopDefault$3 (e) { return e && e.__esModule ? e : { 'default': e }; }

	var createCache__default = /*#__PURE__*/_interopDefault$3(createCache);
	var _extends__default$1 = /*#__PURE__*/_interopDefault$3(_extends$2);
	var weakMemoize__default = /*#__PURE__*/_interopDefault$3(weakMemoize);

	var hasOwnProperty = {}.hasOwnProperty;

	var EmotionCacheContext = /* #__PURE__ */React$1I.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
	// because this module is primarily intended for the browser and node
	// but it's also required in react native and similar environments sometimes
	// and we could have a special build just for that
	// but this is much easier and the native packages
	// might use a different theme context in the future anyway
	typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache__default['default']({
	  key: 'css'
	}) : null);

	{
	  EmotionCacheContext.displayName = 'EmotionCacheContext';
	}

	var CacheProvider = EmotionCacheContext.Provider;
	var __unsafe_useEmotionCache = function useEmotionCache() {
	  return React$1I.useContext(EmotionCacheContext);
	};

	var withEmotionCache = function withEmotionCache(func) {
	  // $FlowFixMe
	  return /*#__PURE__*/React$1I.forwardRef(function (props, ref) {
	    // the cache will never be null in the browser
	    var cache = React$1I.useContext(EmotionCacheContext);
	    return func(props, cache, ref);
	  });
	};

	var ThemeContext$2 = /* #__PURE__ */React$1I.createContext({});

	{
	  ThemeContext$2.displayName = 'EmotionThemeContext';
	}

	var useTheme$7 = function useTheme() {
	  return React$1I.useContext(ThemeContext$2);
	};

	var getTheme = function getTheme(outerTheme, theme) {
	  if (typeof theme === 'function') {
	    var mergedTheme = theme(outerTheme);

	    if ((mergedTheme == null || typeof mergedTheme !== 'object' || Array.isArray(mergedTheme))) {
	      throw new Error('[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!');
	    }

	    return mergedTheme;
	  }

	  if ((theme == null || typeof theme !== 'object' || Array.isArray(theme))) {
	    throw new Error('[ThemeProvider] Please make your theme prop a plain object');
	  }

	  return _extends__default$1['default']({}, outerTheme, theme);
	};

	var createCacheWithTheme = /* #__PURE__ */weakMemoize__default['default'](function (outerTheme) {
	  return weakMemoize__default['default'](function (theme) {
	    return getTheme(outerTheme, theme);
	  });
	});
	var ThemeProvider$7 = function ThemeProvider(props) {
	  var theme = React$1I.useContext(ThemeContext$2);

	  if (props.theme !== theme) {
	    theme = createCacheWithTheme(theme)(props.theme);
	  }

	  return /*#__PURE__*/React$1I.createElement(ThemeContext$2.Provider, {
	    value: theme
	  }, props.children);
	};
	function withTheme$2(Component) {
	  var componentName = Component.displayName || Component.name || 'Component';

	  var render = function render(props, ref) {
	    var theme = React$1I.useContext(ThemeContext$2);
	    return /*#__PURE__*/React$1I.createElement(Component, _extends__default$1['default']({
	      theme: theme,
	      ref: ref
	    }, props));
	  }; // $FlowFixMe


	  var WithTheme = /*#__PURE__*/React$1I.forwardRef(render);
	  WithTheme.displayName = "WithTheme(" + componentName + ")";
	  return _isolatedHnrs_dist_emotionReact_isolatedHnrs['default'](WithTheme, Component);
	}

	var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine(line) {
	  // V8
	  var match = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);

	  if (match) {
	    // The match may be something like 'Object.createEmotionProps'
	    var parts = match[1].split('.');
	    return parts[parts.length - 1];
	  } // Safari / Firefox


	  match = /^([A-Za-z0-9$.]+)@/.exec(line);
	  if (match) return match[1];
	  return undefined;
	};

	var internalReactFunctionNames = /* #__PURE__ */new Set(['renderWithHooks', 'processChild', 'finishClassComponent', 'renderToString']); // These identifiers come from error stacks, so they have to be valid JS
	// identifiers, thus we only need to replace what is a valid character for JS,
	// but not for CSS.

	var sanitizeIdentifier = function sanitizeIdentifier(identifier) {
	  return identifier.replace(/\$/g, '-');
	};

	var getLabelFromStackTrace = function getLabelFromStackTrace(stackTrace) {
	  if (!stackTrace) return undefined;
	  var lines = stackTrace.split('\n');

	  for (var i = 0; i < lines.length; i++) {
	    var functionName = getFunctionNameFromStackTraceLine(lines[i]); // The first line of V8 stack traces is just "Error"

	    if (!functionName) continue; // If we reach one of these, we have gone too far and should quit

	    if (internalReactFunctionNames.has(functionName)) break; // The component name is the first function in the stack that starts with an
	    // uppercase letter

	    if (/^[A-Z]/.test(functionName)) return sanitizeIdentifier(functionName);
	  }

	  return undefined;
	};

	var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
	var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';
	var createEmotionProps = function createEmotionProps(type, props) {
	  if (typeof props.css === 'string' && // check if there is a css declaration
	  props.css.indexOf(':') !== -1) {
	    throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
	  }

	  var newProps = {};

	  for (var key in props) {
	    if (hasOwnProperty.call(props, key)) {
	      newProps[key] = props[key];
	    }
	  }

	  newProps[typePropName] = type; // For performance, only call getLabelFromStackTrace in development and when
	  // the label hasn't already been computed

	  if (!!props.css && (typeof props.css !== 'object' || typeof props.css.name !== 'string' || props.css.name.indexOf('-') === -1)) {
	    var label = getLabelFromStackTrace(new Error().stack);
	    if (label) newProps[labelPropName] = label;
	  }

	  return newProps;
	};

	var Noop$2 = function Noop() {
	  return null;
	};

	var Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {
	  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
	  // not passing the registered cache to serializeStyles because it would
	  // make certain babel optimisations not possible

	  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
	    cssProp = cache.registered[cssProp];
	  }

	  var type = props[typePropName];
	  var registeredStyles = [cssProp];
	  var className = '';

	  if (typeof props.className === 'string') {
	    className = utils$g.getRegisteredStyles(cache.registered, registeredStyles, props.className);
	  } else if (props.className != null) {
	    className = props.className + " ";
	  }

	  var serialized = serialize$2.serializeStyles(registeredStyles, undefined, React$1I.useContext(ThemeContext$2));

	  if (serialized.name.indexOf('-') === -1) {
	    var labelFromStack = props[labelPropName];

	    if (labelFromStack) {
	      serialized = serialize$2.serializeStyles([serialized, 'label:' + labelFromStack + ';']);
	    }
	  }

	  utils$g.insertStyles(cache, serialized, typeof type === 'string');
	  className += cache.key + "-" + serialized.name;
	  var newProps = {};

	  for (var key in props) {
	    if (hasOwnProperty.call(props, key) && key !== 'css' && key !== typePropName && (key !== labelPropName)) {
	      newProps[key] = props[key];
	    }
	  }

	  newProps.ref = ref;
	  newProps.className = className;
	  var ele = /*#__PURE__*/React$1I.createElement(type, newProps);
	  var possiblyStyleElement = /*#__PURE__*/React$1I.createElement(Noop$2, null);


	  return /*#__PURE__*/React$1I.createElement(React$1I.Fragment, null, possiblyStyleElement, ele);
	});

	{
	  Emotion.displayName = 'EmotionCssPropInternal';
	}

	emotionElement075f6e74_browser_cjs.CacheProvider = CacheProvider;
	emotionElement075f6e74_browser_cjs.Emotion = Emotion;
	emotionElement075f6e74_browser_cjs.ThemeContext = ThemeContext$2;
	emotionElement075f6e74_browser_cjs.ThemeProvider = ThemeProvider$7;
	emotionElement075f6e74_browser_cjs.__unsafe_useEmotionCache = __unsafe_useEmotionCache;
	emotionElement075f6e74_browser_cjs.createEmotionProps = createEmotionProps;
	emotionElement075f6e74_browser_cjs.hasOwnProperty = hasOwnProperty;
	emotionElement075f6e74_browser_cjs.useTheme = useTheme$7;
	emotionElement075f6e74_browser_cjs.withEmotionCache = withEmotionCache;
	emotionElement075f6e74_browser_cjs.withTheme = withTheme$2;

	Object.defineProperty(emotionReact_browser_cjs, '__esModule', { value: true });

	var React$1H = require$$3;

	var emotionElement = emotionElement075f6e74_browser_cjs;




	var utils$f = emotionUtils_browser_cjs;
	var serialize$1 = emotionSerialize_browser_cjs;
	var sheet = emotionSheet_browser_cjs;

	var pkg = {
		name: "@emotion/react",
		version: "11.7.1",
		main: "dist/emotion-react.cjs.js",
		module: "dist/emotion-react.esm.js",
		browser: {
			"./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
			"./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
		},
		types: "types/index.d.ts",
		files: [
			"src",
			"dist",
			"jsx-runtime",
			"jsx-dev-runtime",
			"_isolated-hnrs",
			"types/*.d.ts",
			"macro.js",
			"macro.d.ts",
			"macro.js.flow"
		],
		sideEffects: false,
		author: "mitchellhamilton <mitchell@mitchellhamilton.me>",
		license: "MIT",
		scripts: {
			"test:typescript": "dtslint types"
		},
		dependencies: {
			"@babel/runtime": "^7.13.10",
			"@emotion/cache": "^11.7.1",
			"@emotion/serialize": "^1.0.2",
			"@emotion/sheet": "^1.1.0",
			"@emotion/utils": "^1.0.0",
			"@emotion/weak-memoize": "^0.2.5",
			"hoist-non-react-statics": "^3.3.1"
		},
		peerDependencies: {
			"@babel/core": "^7.0.0",
			react: ">=16.8.0"
		},
		peerDependenciesMeta: {
			"@babel/core": {
				optional: true
			},
			"@types/react": {
				optional: true
			}
		},
		devDependencies: {
			"@babel/core": "^7.13.10",
			"@emotion/css": "11.7.1",
			"@emotion/css-prettifier": "1.0.1",
			"@emotion/server": "11.4.0",
			"@emotion/styled": "11.6.0",
			"@types/react": "^16.9.11",
			dtslint: "^0.3.0",
			"html-tag-names": "^1.1.2",
			react: "16.14.0",
			"svg-tag-names": "^1.1.1"
		},
		repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
		publishConfig: {
			access: "public"
		},
		"umd:main": "dist/emotion-react.umd.min.js",
		preconstruct: {
			entrypoints: [
				"./index.js",
				"./jsx-runtime.js",
				"./jsx-dev-runtime.js",
				"./_isolated-hnrs.js"
			],
			umdName: "emotionReact"
		}
	};

	var jsx = function jsx(type, props) {
	  var args = arguments;

	  if (props == null || !emotionElement.hasOwnProperty.call(props, 'css')) {
	    // $FlowFixMe
	    return React$1H.createElement.apply(undefined, args);
	  }

	  var argsLength = args.length;
	  var createElementArgArray = new Array(argsLength);
	  createElementArgArray[0] = emotionElement.Emotion;
	  createElementArgArray[1] = emotionElement.createEmotionProps(type, props);

	  for (var i = 2; i < argsLength; i++) {
	    createElementArgArray[i] = args[i];
	  } // $FlowFixMe


	  return React$1H.createElement.apply(null, createElementArgArray);
	};

	var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
	// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
	// initial client-side render from SSR, use place of hydrating tag

	var Global = /* #__PURE__ */emotionElement.withEmotionCache(function (props, cache) {
	  if (!warnedAboutCssPropForGlobal && ( // check for className as well since the user is
	  // probably using the custom createElement which
	  // means it will be turned into a className prop
	  // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
	  props.className || props.css)) {
	    console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
	    warnedAboutCssPropForGlobal = true;
	  }

	  var styles = props.styles;
	  var serialized = serialize$1.serializeStyles([styles], undefined, React$1H.useContext(emotionElement.ThemeContext));
	  // but it is based on a constant that will never change at runtime
	  // it's effectively like having two implementations and switching them out
	  // so it's not actually breaking anything


	  var sheetRef = React$1H.useRef();
	  React$1H.useLayoutEffect(function () {
	    var key = cache.key + "-global";
	    var sheet$1 = new sheet.StyleSheet({
	      key: key,
	      nonce: cache.sheet.nonce,
	      container: cache.sheet.container,
	      speedy: cache.sheet.isSpeedy
	    });
	    var rehydrating = false; // $FlowFixMe

	    var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

	    if (cache.sheet.tags.length) {
	      sheet$1.before = cache.sheet.tags[0];
	    }

	    if (node !== null) {
	      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

	      node.setAttribute('data-emotion', key);
	      sheet$1.hydrate([node]);
	    }

	    sheetRef.current = [sheet$1, rehydrating];
	    return function () {
	      sheet$1.flush();
	    };
	  }, [cache]);
	  React$1H.useLayoutEffect(function () {
	    var sheetRefCurrent = sheetRef.current;
	    var sheet = sheetRefCurrent[0],
	        rehydrating = sheetRefCurrent[1];

	    if (rehydrating) {
	      sheetRefCurrent[1] = false;
	      return;
	    }

	    if (serialized.next !== undefined) {
	      // insert keyframes
	      utils$f.insertStyles(cache, serialized.next, true);
	    }

	    if (sheet.tags.length) {
	      // if this doesn't exist then it will be null so the style element will be appended
	      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
	      sheet.before = element;
	      sheet.flush();
	    }

	    cache.insert("", serialized, sheet, false);
	  }, [cache, serialized.name]);
	  return null;
	});

	{
	  Global.displayName = 'EmotionGlobal';
	}

	function css() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return serialize$1.serializeStyles(args);
	}

	var keyframes = function keyframes() {
	  var insertable = css.apply(void 0, arguments);
	  var name = "animation-" + insertable.name; // $FlowFixMe

	  return {
	    name: name,
	    styles: "@keyframes " + name + "{" + insertable.styles + "}",
	    anim: 1,
	    toString: function toString() {
	      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
	    }
	  };
	};

	var classnames = function classnames(args) {
	  var len = args.length;
	  var i = 0;
	  var cls = '';

	  for (; i < len; i++) {
	    var arg = args[i];
	    if (arg == null) continue;
	    var toAdd = void 0;

	    switch (typeof arg) {
	      case 'boolean':
	        break;

	      case 'object':
	        {
	          if (Array.isArray(arg)) {
	            toAdd = classnames(arg);
	          } else {
	            if (arg.styles !== undefined && arg.name !== undefined) {
	              console.error('You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n' + '`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.');
	            }

	            toAdd = '';

	            for (var k in arg) {
	              if (arg[k] && k) {
	                toAdd && (toAdd += ' ');
	                toAdd += k;
	              }
	            }
	          }

	          break;
	        }

	      default:
	        {
	          toAdd = arg;
	        }
	    }

	    if (toAdd) {
	      cls && (cls += ' ');
	      cls += toAdd;
	    }
	  }

	  return cls;
	};

	function merge$4(registered, css, className) {
	  var registeredStyles = [];
	  var rawClassName = utils$f.getRegisteredStyles(registered, registeredStyles, className);

	  if (registeredStyles.length < 2) {
	    return className;
	  }

	  return rawClassName + css(registeredStyles);
	}

	var Noop$1 = function Noop() {
	  return null;
	};

	var ClassNames = /* #__PURE__ */emotionElement.withEmotionCache(function (props, cache) {
	  var hasRendered = false;

	  var css = function css() {
	    if (hasRendered && "development" !== 'production') {
	      throw new Error('css can only be used during render');
	    }

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var serialized = serialize$1.serializeStyles(args, cache.registered);

	    {
	      utils$f.insertStyles(cache, serialized, false);
	    }

	    return cache.key + "-" + serialized.name;
	  };

	  var cx = function cx() {
	    if (hasRendered && "development" !== 'production') {
	      throw new Error('cx can only be used during render');
	    }

	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    return merge$4(cache.registered, css, classnames(args));
	  };

	  var content = {
	    css: css,
	    cx: cx,
	    theme: React$1H.useContext(emotionElement.ThemeContext)
	  };
	  var ele = props.children(content);
	  hasRendered = true;
	  var possiblyStyleElement = /*#__PURE__*/React$1H.createElement(Noop$1, null);


	  return /*#__PURE__*/React$1H.createElement(React$1H.Fragment, null, possiblyStyleElement, ele);
	});

	{
	  ClassNames.displayName = 'EmotionClassNames';
	}

	{
	  var isBrowser = "object" !== 'undefined'; // #1727 for some reason Jest evaluates modules twice if some consuming module gets mocked with jest.mock

	  var isJest = typeof jest !== 'undefined';

	  if (isBrowser && !isJest) {
	    // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
	    var globalContext = // $FlowIgnore
	    typeof globalThis !== 'undefined' ? globalThis // eslint-disable-line no-undef
	    : isBrowser ? window : commonjsGlobal;
	    var globalKey = "__EMOTION_REACT_" + pkg.version.split('.')[0] + "__";

	    if (globalContext[globalKey]) {
	      console.warn('You are loading @emotion/react when it is already loaded. Running ' + 'multiple instances may cause problems. This can happen if multiple ' + 'versions are used, or if multiple builds of the same version are ' + 'used.');
	    }

	    globalContext[globalKey] = true;
	  }
	}

	emotionReact_browser_cjs.CacheProvider = emotionElement.CacheProvider;
	emotionReact_browser_cjs.ThemeContext = emotionElement.ThemeContext;
	emotionReact_browser_cjs.ThemeProvider = emotionElement.ThemeProvider;
	emotionReact_browser_cjs.__unsafe_useEmotionCache = emotionElement.__unsafe_useEmotionCache;
	emotionReact_browser_cjs.useTheme = emotionElement.useTheme;
	emotionReact_browser_cjs.withEmotionCache = emotionElement.withEmotionCache;
	emotionReact_browser_cjs.withTheme = emotionElement.withTheme;
	emotionReact_browser_cjs.ClassNames = ClassNames;
	emotionReact_browser_cjs.Global = Global;
	emotionReact_browser_cjs.createElement = jsx;
	emotionReact_browser_cjs.css = css;
	emotionReact_browser_cjs.jsx = jsx;
	emotionReact_browser_cjs.keyframes = keyframes;

	Object.defineProperty(emotionStyledBase_browser_cjs, '__esModule', { value: true });

	var _extends$1 = _extends$4.exports;
	var React$1G = require$$3;
	var isPropValid = emotionIsPropValid_browser_cjs;
	var react = emotionReact_browser_cjs;
	var utils$e = emotionUtils_browser_cjs;
	var serialize = emotionSerialize_browser_cjs;

	function _interopDefault$2 (e) { return e && e.__esModule ? e : { 'default': e }; }

	var _extends__default = /*#__PURE__*/_interopDefault$2(_extends$1);
	var isPropValid__default = /*#__PURE__*/_interopDefault$2(isPropValid);

	var testOmitPropsOnStringTag = isPropValid__default['default'];

	var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
	  return key !== 'theme';
	};

	var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
	  return typeof tag === 'string' && // 96 is one less than the char code
	  // for "a" so this is checking that
	  // it's a lowercase character
	  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
	};
	var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
	  var shouldForwardProp;

	  if (options) {
	    var optionsShouldForwardProp = options.shouldForwardProp;
	    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
	      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
	    } : optionsShouldForwardProp;
	  }

	  if (typeof shouldForwardProp !== 'function' && isReal) {
	    shouldForwardProp = tag.__emotion_forwardProp;
	  }

	  return shouldForwardProp;
	};

	var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";

	var Noop = function Noop() {
	  return null;
	};

	var createStyled$2 = function createStyled(tag, options) {
	  {
	    if (tag === undefined) {
	      throw new Error('You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.');
	    }
	  }

	  var isReal = tag.__emotion_real === tag;
	  var baseTag = isReal && tag.__emotion_base || tag;
	  var identifierName;
	  var targetClassName;

	  if (options !== undefined) {
	    identifierName = options.label;
	    targetClassName = options.target;
	  }

	  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
	  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
	  var shouldUseAs = !defaultShouldForwardProp('as');
	  return function () {
	    var args = arguments;
	    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

	    if (identifierName !== undefined) {
	      styles.push("label:" + identifierName + ";");
	    }

	    if (args[0] == null || args[0].raw === undefined) {
	      styles.push.apply(styles, args);
	    } else {
	      if (args[0][0] === undefined) {
	        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
	      }

	      styles.push(args[0][0]);
	      var len = args.length;
	      var i = 1;

	      for (; i < len; i++) {
	        if (args[0][i] === undefined) {
	          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
	        }

	        styles.push(args[i], args[0][i]);
	      }
	    } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


	    var Styled = react.withEmotionCache(function (props, cache, ref) {
	      var finalTag = shouldUseAs && props.as || baseTag;
	      var className = '';
	      var classInterpolations = [];
	      var mergedProps = props;

	      if (props.theme == null) {
	        mergedProps = {};

	        for (var key in props) {
	          mergedProps[key] = props[key];
	        }

	        mergedProps.theme = React$1G.useContext(react.ThemeContext);
	      }

	      if (typeof props.className === 'string') {
	        className = utils$e.getRegisteredStyles(cache.registered, classInterpolations, props.className);
	      } else if (props.className != null) {
	        className = props.className + " ";
	      }

	      var serialized = serialize.serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
	      utils$e.insertStyles(cache, serialized, typeof finalTag === 'string');
	      className += cache.key + "-" + serialized.name;

	      if (targetClassName !== undefined) {
	        className += " " + targetClassName;
	      }

	      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(finalTag) : defaultShouldForwardProp;
	      var newProps = {};

	      for (var _key in props) {
	        if (shouldUseAs && _key === 'as') continue;

	        if ( // $FlowFixMe
	        finalShouldForwardProp(_key)) {
	          newProps[_key] = props[_key];
	        }
	      }

	      newProps.className = className;
	      newProps.ref = ref;
	      var ele = /*#__PURE__*/React$1G.createElement(finalTag, newProps);
	      var possiblyStyleElement = /*#__PURE__*/React$1G.createElement(Noop, null);


	      return /*#__PURE__*/React$1G.createElement(React$1G.Fragment, null, possiblyStyleElement, ele);
	    });
	    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
	    Styled.defaultProps = tag.defaultProps;
	    Styled.__emotion_real = Styled;
	    Styled.__emotion_base = baseTag;
	    Styled.__emotion_styles = styles;
	    Styled.__emotion_forwardProp = shouldForwardProp;
	    Object.defineProperty(Styled, 'toString', {
	      value: function value() {
	        if (targetClassName === undefined && "development" !== 'production') {
	          return 'NO_COMPONENT_SELECTOR';
	        } // $FlowFixMe: coerce undefined to string


	        return "." + targetClassName;
	      }
	    });

	    Styled.withComponent = function (nextTag, nextOptions) {
	      return createStyled(nextTag, _extends__default['default']({}, options, nextOptions, {
	        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
	      })).apply(void 0, styles);
	    };

	    return Styled;
	  };
	};

	emotionStyledBase_browser_cjs.default = createStyled$2;

	Object.defineProperty(emotionStyled_browser_cjs, '__esModule', { value: true });




	var base_dist_emotionStyledBase = emotionStyledBase_browser_cjs;




	var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
	'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

	var newStyled = base_dist_emotionStyledBase['default'].bind();
	tags.forEach(function (tagName) {
	  // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
	  newStyled[tagName] = newStyled(tagName);
	});

	emotionStyled_browser_cjs.default = newStyled;

	var StyledEngineProvider$2 = {};

	var StyledEngineProvider$1 = {};

	var o=0;function e(_,e,n,t,f){var l,s,u={};for(s in e)"ref"==s?l=e[s]:u[s]=e[s];var a={type:_,props:u,key:n,ref:l,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--o,__source:t,__self:f};if("function"==typeof _&&(l=_.defaultProps))for(s in l)void 0===u[s]&&(u[s]=l[s]);return l$1.vnode&&l$1.vnode(a),a}

	var jsxRuntime_module = /*#__PURE__*/Object.freeze({
		__proto__: null,
		jsx: e,
		jsxs: e,
		jsxDEV: e,
		Fragment: d$1
	});

	var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(jsxRuntime_module);

	var jsxRuntime = require$$0$1;

	var _interopRequireDefault$2H = interopRequireDefault.exports;

	Object.defineProperty(StyledEngineProvider$1, "__esModule", {
	  value: true
	});
	StyledEngineProvider$1.default = StyledEngineProvider;

	_interopRequireWildcard$1N(require$$3);

	var _propTypes$1p = _interopRequireDefault$2H(propTypes.exports);

	var _react2$1 = emotionReact_browser_cjs;

	var _cache = _interopRequireDefault$2H(emotionCache_browser_cjs);

	var _jsxRuntime$1y = jsxRuntime;

	function _getRequireWildcardCache$1N(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1N = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1N(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1N(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	// prepend: true moves MUI styles to the top of the <head> so they're loaded first.
	// It allows developers to easily override MUI styles with other styling solutions, like CSS modules.
	const cache = (0, _cache.default)({
	  key: 'css',
	  prepend: true
	});

	function StyledEngineProvider(props) {
	  const {
	    injectFirst,
	    children
	  } = props;
	  return injectFirst ? /*#__PURE__*/(0, _jsxRuntime$1y.jsx)(_react2$1.CacheProvider, {
	    value: cache,
	    children: children
	  }) : children;
	}

	StyledEngineProvider.propTypes = {
	  /**
	   * Your component tree.
	   */
	  children: _propTypes$1p.default.node,

	  /**
	   * By default, the styles are injected last in the <head> element of the page.
	   * As a result, they gain more specificity than any other style sheet.
	   * If you want to override MUI's styles, set this prop.
	   */
	  injectFirst: _propTypes$1p.default.bool
	} ;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _StyledEngineProvider.default;
		  }
		});

		var _StyledEngineProvider = _interopRequireDefault(StyledEngineProvider$1);
	} (StyledEngineProvider$2));

	var GlobalStyles$6 = {};

	var GlobalStyles$5 = {};

	var _interopRequireDefault$2G = interopRequireDefault.exports;

	Object.defineProperty(GlobalStyles$5, "__esModule", {
	  value: true
	});
	GlobalStyles$5.default = GlobalStyles$4;

	_interopRequireWildcard$1M(require$$3);

	var _propTypes$1o = _interopRequireDefault$2G(propTypes.exports);

	var _react2 = emotionReact_browser_cjs;

	var _jsxRuntime$1x = jsxRuntime;

	function _getRequireWildcardCache$1M(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1M = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1M(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1M(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function isEmpty$3(obj) {
	  return obj === undefined || obj === null || Object.keys(obj).length === 0;
	}

	function GlobalStyles$4(props) {
	  const {
	    styles,
	    defaultTheme = {}
	  } = props;
	  const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty$3(themeInput) ? defaultTheme : themeInput) : styles;
	  return /*#__PURE__*/(0, _jsxRuntime$1x.jsx)(_react2.Global, {
	    styles: globalStyles
	  });
	}

	GlobalStyles$4.propTypes = {
	  defaultTheme: _propTypes$1o.default.object,
	  styles: _propTypes$1o.default.oneOfType([_propTypes$1o.default.string, _propTypes$1o.default.object, _propTypes$1o.default.func])
	} ;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _GlobalStyles.default;
		  }
		});

		var _GlobalStyles = _interopRequireDefault(GlobalStyles$5);
	} (GlobalStyles$6));

	/** @license MUI v5.3.0
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "GlobalStyles", {
		  enumerable: true,
		  get: function () {
		    return _GlobalStyles.default;
		  }
		});
		Object.defineProperty(exports, "StyledEngineProvider", {
		  enumerable: true,
		  get: function () {
		    return _StyledEngineProvider.default;
		  }
		});
		Object.defineProperty(exports, "ThemeContext", {
		  enumerable: true,
		  get: function () {
		    return _react.ThemeContext;
		  }
		});
		Object.defineProperty(exports, "css", {
		  enumerable: true,
		  get: function () {
		    return _react.css;
		  }
		});
		exports.default = styled;
		Object.defineProperty(exports, "keyframes", {
		  enumerable: true,
		  get: function () {
		    return _react.keyframes;
		  }
		});

		var _styled = _interopRequireDefault(emotionStyled_browser_cjs);

		var _react = emotionReact_browser_cjs;

		var _StyledEngineProvider = _interopRequireDefault(StyledEngineProvider$2);

		var _GlobalStyles = _interopRequireDefault(GlobalStyles$6);

		function styled(tag, options) {
		  const stylesFactory = (0, _styled.default)(tag, options);

		  {
		    return (...styles) => {
		      const component = typeof tag === 'string' ? `"${tag}"` : 'component';

		      if (styles.length === 0) {
		        console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join('\n'));
		      } else if (styles.some(style => style === undefined)) {
		        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
		      }

		      return stylesFactory(...styles);
		    };
		  }
		}
	} (node$3));

	var borders$1 = {};

	var responsivePropType$1 = {};

	var _interopRequireDefault$2F = interopRequireDefault.exports;

	Object.defineProperty(responsivePropType$1, "__esModule", {
	  value: true
	});
	responsivePropType$1.default = void 0;

	var _propTypes$1n = _interopRequireDefault$2F(propTypes.exports);

	const responsivePropType = _propTypes$1n.default.oneOfType([_propTypes$1n.default.number, _propTypes$1n.default.string, _propTypes$1n.default.object, _propTypes$1n.default.array]) ;
	var _default$3r = responsivePropType;
	responsivePropType$1.default = _default$3r;

	var style$2 = {};

	var breakpoints$1 = {};

	var merge$3 = {};

	Object.defineProperty(merge$3, "__esModule", {
	  value: true
	});
	merge$3.default = void 0;

	var _utils$1r = utils$h;

	function merge$2(acc, item) {
	  if (!item) {
	    return acc;
	  }

	  return (0, _utils$1r.deepmerge)(acc, item, {
	    clone: false // No need to clone deep, it's way faster.

	  });
	}

	var _default$3q = merge$2;
	merge$3.default = _default$3q;

	var _interopRequireDefault$2E = interopRequireDefault.exports;

	Object.defineProperty(breakpoints$1, "__esModule", {
	  value: true
	});
	breakpoints$1.computeBreakpointsBase = computeBreakpointsBase;
	breakpoints$1.createEmptyBreakpointObject = createEmptyBreakpointObject;
	breakpoints$1.default = void 0;
	breakpoints$1.handleBreakpoints = handleBreakpoints;
	breakpoints$1.mergeBreakpointsInOrder = mergeBreakpointsInOrder;
	breakpoints$1.removeUnusedBreakpoints = removeUnusedBreakpoints;
	breakpoints$1.resolveBreakpointValues = resolveBreakpointValues;
	breakpoints$1.values = void 0;

	var _extends2$1D = _interopRequireDefault$2E(_extends$5.exports);

	var _propTypes$1m = _interopRequireDefault$2E(propTypes.exports);

	var _utils$1q = utils$h;

	var _merge$3 = _interopRequireDefault$2E(merge$3);

	// The breakpoint **start** at this value.
	// For instance with the first breakpoint xs: [xs, sm[.
	const values = {
	  xs: 0,
	  // phone
	  sm: 600,
	  // tablet
	  md: 900,
	  // small laptop
	  lg: 1200,
	  // desktop
	  xl: 1536 // large screen

	};
	breakpoints$1.values = values;
	const defaultBreakpoints = {
	  // Sorted ASC by size. That's important.
	  // It can't be configured as it's used statically for propTypes.
	  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
	  up: key => `@media (min-width:${values[key]}px)`
	};

	function handleBreakpoints(props, propValue, styleFromPropValue) {
	  const theme = props.theme || {};

	  if (Array.isArray(propValue)) {
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    return propValue.reduce((acc, item, index) => {
	      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
	      return acc;
	    }, {});
	  }

	  if (typeof propValue === 'object') {
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    return Object.keys(propValue).reduce((acc, breakpoint) => {
	      // key is breakpoint
	      if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
	        const mediaKey = themeBreakpoints.up(breakpoint);
	        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
	      } else {
	        const cssKey = breakpoint;
	        acc[cssKey] = propValue[cssKey];
	      }

	      return acc;
	    }, {});
	  }

	  const output = styleFromPropValue(propValue);
	  return output;
	}

	function breakpoints(styleFunction) {
	  const newStyleFunction = props => {
	    const theme = props.theme || {};
	    const base = styleFunction(props);
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    const extended = themeBreakpoints.keys.reduce((acc, key) => {
	      if (props[key]) {
	        acc = acc || {};
	        acc[themeBreakpoints.up(key)] = styleFunction((0, _extends2$1D.default)({
	          theme
	        }, props[key]));
	      }

	      return acc;
	    }, null);
	    return (0, _merge$3.default)(base, extended);
	  };

	  newStyleFunction.propTypes = (0, _extends2$1D.default)({}, styleFunction.propTypes, {
	    xs: _propTypes$1m.default.object,
	    sm: _propTypes$1m.default.object,
	    md: _propTypes$1m.default.object,
	    lg: _propTypes$1m.default.object,
	    xl: _propTypes$1m.default.object
	  }) ;
	  newStyleFunction.filterProps = ['xs', 'sm', 'md', 'lg', 'xl', ...styleFunction.filterProps];
	  return newStyleFunction;
	}

	function createEmptyBreakpointObject(breakpointsInput = {}) {
	  var _breakpointsInput$key;

	  const breakpointsInOrder = breakpointsInput == null ? void 0 : (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
	    const breakpointStyleKey = breakpointsInput.up(key);
	    acc[breakpointStyleKey] = {};
	    return acc;
	  }, {});
	  return breakpointsInOrder || {};
	}

	function removeUnusedBreakpoints(breakpointKeys, style) {
	  return breakpointKeys.reduce((acc, key) => {
	    const breakpointOutput = acc[key];
	    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;

	    if (isBreakpointUnused) {
	      delete acc[key];
	    }

	    return acc;
	  }, style);
	}

	function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
	  const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
	  const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev, next) => (0, _utils$1q.deepmerge)(prev, next), {});
	  return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
	} // compute base for responsive values; e.g.,
	// [1,2,3] => {xs: true, sm: true, md: true}
	// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}


	function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
	  // fixed value
	  if (typeof breakpointValues !== 'object') {
	    return {};
	  }

	  const base = {};
	  const breakpointsKeys = Object.keys(themeBreakpoints);

	  if (Array.isArray(breakpointValues)) {
	    breakpointsKeys.forEach((breakpoint, i) => {
	      if (i < breakpointValues.length) {
	        base[breakpoint] = true;
	      }
	    });
	  } else {
	    breakpointsKeys.forEach(breakpoint => {
	      if (breakpointValues[breakpoint] != null) {
	        base[breakpoint] = true;
	      }
	    });
	  }

	  return base;
	}

	function resolveBreakpointValues({
	  values: breakpointValues,
	  breakpoints: themeBreakpoints,
	  base: customBase
	}) {
	  const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
	  const keys = Object.keys(base);

	  if (keys.length === 0) {
	    return breakpointValues;
	  }

	  let previous;
	  return keys.reduce((acc, breakpoint, i) => {
	    if (Array.isArray(breakpointValues)) {
	      acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
	      previous = i;
	    } else {
	      acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous] || breakpointValues;
	      previous = breakpoint;
	    }

	    return acc;
	  }, {});
	}

	var _default$3p = breakpoints;
	breakpoints$1.default = _default$3p;

	var _interopRequireDefault$2D = interopRequireDefault.exports;

	Object.defineProperty(style$2, "__esModule", {
	  value: true
	});
	style$2.default = void 0;
	style$2.getPath = getPath;

	var _utils$1p = utils$h;

	var _responsivePropType$3 = _interopRequireDefault$2D(responsivePropType$1);

	var _breakpoints$5 = breakpoints$1;

	function getPath(obj, path) {
	  if (!path || typeof path !== 'string') {
	    return null;
	  }

	  return path.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
	}

	function getValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
	  let value;

	  if (typeof themeMapping === 'function') {
	    value = themeMapping(propValueFinal);
	  } else if (Array.isArray(themeMapping)) {
	    value = themeMapping[propValueFinal] || userValue;
	  } else {
	    value = getPath(themeMapping, propValueFinal) || userValue;
	  }

	  if (transform) {
	    value = transform(value);
	  }

	  return value;
	}

	function style$1(options) {
	  const {
	    prop,
	    cssProperty = options.prop,
	    themeKey,
	    transform
	  } = options;

	  const fn = props => {
	    if (props[prop] == null) {
	      return null;
	    }

	    const propValue = props[prop];
	    const theme = props.theme;
	    const themeMapping = getPath(theme, themeKey) || {};

	    const styleFromPropValue = propValueFinal => {
	      let value = getValue$1(themeMapping, transform, propValueFinal);

	      if (propValueFinal === value && typeof propValueFinal === 'string') {
	        // Haven't found value
	        value = getValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : (0, _utils$1p.unstable_capitalize)(propValueFinal)}`, propValueFinal);
	      }

	      if (cssProperty === false) {
	        return value;
	      }

	      return {
	        [cssProperty]: value
	      };
	    };

	    return (0, _breakpoints$5.handleBreakpoints)(props, propValue, styleFromPropValue);
	  };

	  fn.propTypes = {
	    [prop]: _responsivePropType$3.default
	  } ;
	  fn.filterProps = [prop];
	  return fn;
	}

	var _default$3o = style$1;
	style$2.default = _default$3o;

	var compose$2 = {};

	var _interopRequireDefault$2C = interopRequireDefault.exports;

	Object.defineProperty(compose$2, "__esModule", {
	  value: true
	});
	compose$2.default = void 0;

	var _merge$2 = _interopRequireDefault$2C(merge$3);

	function compose$1(...styles) {
	  const handlers = styles.reduce((acc, style) => {
	    style.filterProps.forEach(prop => {
	      acc[prop] = style;
	    });
	    return acc;
	  }, {});

	  const fn = props => {
	    return Object.keys(props).reduce((acc, prop) => {
	      if (handlers[prop]) {
	        return (0, _merge$2.default)(acc, handlers[prop](props));
	      }

	      return acc;
	    }, {});
	  };

	  fn.propTypes = styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) ;
	  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
	  return fn;
	}

	var _default$3n = compose$1;
	compose$2.default = _default$3n;

	var spacing$1 = {};

	var memoize$1 = {};

	Object.defineProperty(memoize$1, "__esModule", {
	  value: true
	});
	memoize$1.default = memoize;

	function memoize(fn) {
	  const cache = {};
	  return arg => {
	    if (cache[arg] === undefined) {
	      cache[arg] = fn(arg);
	    }

	    return cache[arg];
	  };
	}

	var _interopRequireDefault$2B = interopRequireDefault.exports;

	Object.defineProperty(spacing$1, "__esModule", {
	  value: true
	});
	spacing$1.createUnarySpacing = createUnarySpacing;
	spacing$1.createUnaryUnit = createUnaryUnit;
	spacing$1.default = void 0;
	spacing$1.getStyleFromPropValue = getStyleFromPropValue;
	spacing$1.getValue = getValue;
	spacing$1.margin = margin;
	spacing$1.padding = padding;

	var _responsivePropType$2 = _interopRequireDefault$2B(responsivePropType$1);

	var _breakpoints$4 = breakpoints$1;

	var _style$9 = style$2;

	var _merge$1 = _interopRequireDefault$2B(merge$3);

	var _memoize = _interopRequireDefault$2B(memoize$1);

	const properties = {
	  m: 'margin',
	  p: 'padding'
	};
	const directions = {
	  t: 'Top',
	  r: 'Right',
	  b: 'Bottom',
	  l: 'Left',
	  x: ['Left', 'Right'],
	  y: ['Top', 'Bottom']
	};
	const aliases = {
	  marginX: 'mx',
	  marginY: 'my',
	  paddingX: 'px',
	  paddingY: 'py'
	}; // memoize() impact:
	// From 300,000 ops/sec
	// To 350,000 ops/sec

	const getCssProperties = (0, _memoize.default)(prop => {
	  // It's not a shorthand notation.
	  if (prop.length > 2) {
	    if (aliases[prop]) {
	      prop = aliases[prop];
	    } else {
	      return [prop];
	    }
	  }

	  const [a, b] = prop.split('');
	  const property = properties[a];
	  const direction = directions[b] || '';
	  return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
	});
	const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
	const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
	const spacingKeys = [...marginKeys, ...paddingKeys];

	function createUnaryUnit(theme, themeKey, defaultValue, propName) {
	  const themeSpacing = (0, _style$9.getPath)(theme, themeKey) || defaultValue;

	  if (typeof themeSpacing === 'number') {
	    return abs => {
	      if (typeof abs === 'string') {
	        return abs;
	      }

	      {
	        if (typeof abs !== 'number') {
	          console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs}.`);
	        }
	      }

	      return themeSpacing * abs;
	    };
	  }

	  if (Array.isArray(themeSpacing)) {
	    return abs => {
	      if (typeof abs === 'string') {
	        return abs;
	      }

	      {
	        if (!Number.isInteger(abs)) {
	          console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join('\n'));
	        } else if (abs > themeSpacing.length - 1) {
	          console.error([`MUI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join('\n'));
	        }
	      }

	      return themeSpacing[abs];
	    };
	  }

	  if (typeof themeSpacing === 'function') {
	    return themeSpacing;
	  }

	  {
	    console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, 'It should be a number, an array or a function.'].join('\n'));
	  }

	  return () => undefined;
	}

	function createUnarySpacing(theme) {
	  return createUnaryUnit(theme, 'spacing', 8, 'spacing');
	}

	function getValue(transformer, propValue) {
	  if (typeof propValue === 'string' || propValue == null) {
	    return propValue;
	  }

	  const abs = Math.abs(propValue);
	  const transformed = transformer(abs);

	  if (propValue >= 0) {
	    return transformed;
	  }

	  if (typeof transformed === 'number') {
	    return -transformed;
	  }

	  return `-${transformed}`;
	}

	function getStyleFromPropValue(cssProperties, transformer) {
	  return propValue => cssProperties.reduce((acc, cssProperty) => {
	    acc[cssProperty] = getValue(transformer, propValue);
	    return acc;
	  }, {});
	}

	function resolveCssProperty(props, keys, prop, transformer) {
	  // Using a hash computation over an array iteration could be faster, but with only 28 items,
	  // it's doesn't worth the bundle size.
	  if (keys.indexOf(prop) === -1) {
	    return null;
	  }

	  const cssProperties = getCssProperties(prop);
	  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
	  const propValue = props[prop];
	  return (0, _breakpoints$4.handleBreakpoints)(props, propValue, styleFromPropValue);
	}

	function style(props, keys) {
	  const transformer = createUnarySpacing(props.theme);
	  return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(_merge$1.default, {});
	}

	function margin(props) {
	  return style(props, marginKeys);
	}

	margin.propTypes = marginKeys.reduce((obj, key) => {
	  obj[key] = _responsivePropType$2.default;
	  return obj;
	}, {}) ;
	margin.filterProps = marginKeys;

	function padding(props) {
	  return style(props, paddingKeys);
	}

	padding.propTypes = paddingKeys.reduce((obj, key) => {
	  obj[key] = _responsivePropType$2.default;
	  return obj;
	}, {}) ;
	padding.filterProps = paddingKeys;

	function spacing(props) {
	  return style(props, spacingKeys);
	}

	spacing.propTypes = spacingKeys.reduce((obj, key) => {
	  obj[key] = _responsivePropType$2.default;
	  return obj;
	}, {}) ;
	spacing.filterProps = spacingKeys;
	var _default$3m = spacing;
	spacing$1.default = _default$3m;

	var _interopRequireDefault$2A = interopRequireDefault.exports;

	Object.defineProperty(borders$1, "__esModule", {
	  value: true
	});
	borders$1.default = borders$1.borderTopColor = borders$1.borderTop = borders$1.borderRightColor = borders$1.borderRight = borders$1.borderRadius = borders$1.borderLeftColor = borders$1.borderLeft = borders$1.borderColor = borders$1.borderBottomColor = borders$1.borderBottom = borders$1.border = void 0;

	var _responsivePropType$1 = _interopRequireDefault$2A(responsivePropType$1);

	var _style$8 = _interopRequireDefault$2A(style$2);

	var _compose$7 = _interopRequireDefault$2A(compose$2);

	var _spacing$3 = spacing$1;

	var _breakpoints$3 = breakpoints$1;

	function getBorder(value) {
	  if (typeof value !== 'number') {
	    return value;
	  }

	  return `${value}px solid`;
	}

	const border = (0, _style$8.default)({
	  prop: 'border',
	  themeKey: 'borders',
	  transform: getBorder
	});
	borders$1.border = border;
	const borderTop = (0, _style$8.default)({
	  prop: 'borderTop',
	  themeKey: 'borders',
	  transform: getBorder
	});
	borders$1.borderTop = borderTop;
	const borderRight = (0, _style$8.default)({
	  prop: 'borderRight',
	  themeKey: 'borders',
	  transform: getBorder
	});
	borders$1.borderRight = borderRight;
	const borderBottom = (0, _style$8.default)({
	  prop: 'borderBottom',
	  themeKey: 'borders',
	  transform: getBorder
	});
	borders$1.borderBottom = borderBottom;
	const borderLeft = (0, _style$8.default)({
	  prop: 'borderLeft',
	  themeKey: 'borders',
	  transform: getBorder
	});
	borders$1.borderLeft = borderLeft;
	const borderColor = (0, _style$8.default)({
	  prop: 'borderColor',
	  themeKey: 'palette'
	});
	borders$1.borderColor = borderColor;
	const borderTopColor = (0, _style$8.default)({
	  prop: 'borderTopColor',
	  themeKey: 'palette'
	});
	borders$1.borderTopColor = borderTopColor;
	const borderRightColor = (0, _style$8.default)({
	  prop: 'borderRightColor',
	  themeKey: 'palette'
	});
	borders$1.borderRightColor = borderRightColor;
	const borderBottomColor = (0, _style$8.default)({
	  prop: 'borderBottomColor',
	  themeKey: 'palette'
	});
	borders$1.borderBottomColor = borderBottomColor;
	const borderLeftColor = (0, _style$8.default)({
	  prop: 'borderLeftColor',
	  themeKey: 'palette'
	});
	borders$1.borderLeftColor = borderLeftColor;

	const borderRadius = props => {
	  if (props.borderRadius !== undefined && props.borderRadius !== null) {
	    const transformer = (0, _spacing$3.createUnaryUnit)(props.theme, 'shape.borderRadius', 4, 'borderRadius');

	    const styleFromPropValue = propValue => ({
	      borderRadius: (0, _spacing$3.getValue)(transformer, propValue)
	    });

	    return (0, _breakpoints$3.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
	  }

	  return null;
	};

	borders$1.borderRadius = borderRadius;
	borderRadius.propTypes = {
	  borderRadius: _responsivePropType$1.default
	} ;
	borderRadius.filterProps = ['borderRadius'];
	const borders = (0, _compose$7.default)(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
	var _default$3l = borders;
	borders$1.default = _default$3l;

	var display = {};

	var _interopRequireDefault$2z = interopRequireDefault.exports;

	Object.defineProperty(display, "__esModule", {
	  value: true
	});
	display.whiteSpace = display.visibility = display.textOverflow = display.overflow = display.displayRaw = display.displayPrint = display.default = void 0;

	var _style$7 = _interopRequireDefault$2z(style$2);

	var _compose$6 = _interopRequireDefault$2z(compose$2);

	const displayPrint = (0, _style$7.default)({
	  prop: 'displayPrint',
	  cssProperty: false,
	  transform: value => ({
	    '@media print': {
	      display: value
	    }
	  })
	});
	display.displayPrint = displayPrint;
	const displayRaw = (0, _style$7.default)({
	  prop: 'display'
	});
	display.displayRaw = displayRaw;
	const overflow = (0, _style$7.default)({
	  prop: 'overflow'
	});
	display.overflow = overflow;
	const textOverflow = (0, _style$7.default)({
	  prop: 'textOverflow'
	});
	display.textOverflow = textOverflow;
	const visibility = (0, _style$7.default)({
	  prop: 'visibility'
	});
	display.visibility = visibility;
	const whiteSpace = (0, _style$7.default)({
	  prop: 'whiteSpace'
	});
	display.whiteSpace = whiteSpace;

	var _default$3k = (0, _compose$6.default)(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

	display.default = _default$3k;

	var flexbox$1 = {};

	var _interopRequireDefault$2y = interopRequireDefault.exports;

	Object.defineProperty(flexbox$1, "__esModule", {
	  value: true
	});
	flexbox$1.order = flexbox$1.justifySelf = flexbox$1.justifyItems = flexbox$1.justifyContent = flexbox$1.flexWrap = flexbox$1.flexShrink = flexbox$1.flexGrow = flexbox$1.flexDirection = flexbox$1.flexBasis = flexbox$1.flex = flexbox$1.default = flexbox$1.alignSelf = flexbox$1.alignItems = flexbox$1.alignContent = void 0;

	var _style$6 = _interopRequireDefault$2y(style$2);

	var _compose$5 = _interopRequireDefault$2y(compose$2);

	const flexBasis = (0, _style$6.default)({
	  prop: 'flexBasis'
	});
	flexbox$1.flexBasis = flexBasis;
	const flexDirection = (0, _style$6.default)({
	  prop: 'flexDirection'
	});
	flexbox$1.flexDirection = flexDirection;
	const flexWrap = (0, _style$6.default)({
	  prop: 'flexWrap'
	});
	flexbox$1.flexWrap = flexWrap;
	const justifyContent = (0, _style$6.default)({
	  prop: 'justifyContent'
	});
	flexbox$1.justifyContent = justifyContent;
	const alignItems = (0, _style$6.default)({
	  prop: 'alignItems'
	});
	flexbox$1.alignItems = alignItems;
	const alignContent = (0, _style$6.default)({
	  prop: 'alignContent'
	});
	flexbox$1.alignContent = alignContent;
	const order$1 = (0, _style$6.default)({
	  prop: 'order'
	});
	flexbox$1.order = order$1;
	const flex = (0, _style$6.default)({
	  prop: 'flex'
	});
	flexbox$1.flex = flex;
	const flexGrow = (0, _style$6.default)({
	  prop: 'flexGrow'
	});
	flexbox$1.flexGrow = flexGrow;
	const flexShrink = (0, _style$6.default)({
	  prop: 'flexShrink'
	});
	flexbox$1.flexShrink = flexShrink;
	const alignSelf = (0, _style$6.default)({
	  prop: 'alignSelf'
	});
	flexbox$1.alignSelf = alignSelf;
	const justifyItems = (0, _style$6.default)({
	  prop: 'justifyItems'
	});
	flexbox$1.justifyItems = justifyItems;
	const justifySelf = (0, _style$6.default)({
	  prop: 'justifySelf'
	});
	flexbox$1.justifySelf = justifySelf;
	const flexbox = (0, _compose$5.default)(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order$1, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
	var _default$3j = flexbox;
	flexbox$1.default = _default$3j;

	var grid$1 = {};

	var _interopRequireDefault$2x = interopRequireDefault.exports;

	Object.defineProperty(grid$1, "__esModule", {
	  value: true
	});
	grid$1.rowGap = grid$1.gridTemplateRows = grid$1.gridTemplateColumns = grid$1.gridTemplateAreas = grid$1.gridRow = grid$1.gridColumn = grid$1.gridAutoRows = grid$1.gridAutoFlow = grid$1.gridAutoColumns = grid$1.gridArea = grid$1.gap = grid$1.default = grid$1.columnGap = void 0;

	var _style$5 = _interopRequireDefault$2x(style$2);

	var _compose$4 = _interopRequireDefault$2x(compose$2);

	var _spacing$2 = spacing$1;

	var _breakpoints$2 = breakpoints$1;

	var _responsivePropType = _interopRequireDefault$2x(responsivePropType$1);

	const gap = props => {
	  if (props.gap !== undefined && props.gap !== null) {
	    const transformer = (0, _spacing$2.createUnaryUnit)(props.theme, 'spacing', 8, 'gap');

	    const styleFromPropValue = propValue => ({
	      gap: (0, _spacing$2.getValue)(transformer, propValue)
	    });

	    return (0, _breakpoints$2.handleBreakpoints)(props, props.gap, styleFromPropValue);
	  }

	  return null;
	};

	grid$1.gap = gap;
	gap.propTypes = {
	  gap: _responsivePropType.default
	} ;
	gap.filterProps = ['gap'];

	const columnGap = props => {
	  if (props.columnGap !== undefined && props.columnGap !== null) {
	    const transformer = (0, _spacing$2.createUnaryUnit)(props.theme, 'spacing', 8, 'columnGap');

	    const styleFromPropValue = propValue => ({
	      columnGap: (0, _spacing$2.getValue)(transformer, propValue)
	    });

	    return (0, _breakpoints$2.handleBreakpoints)(props, props.columnGap, styleFromPropValue);
	  }

	  return null;
	};

	grid$1.columnGap = columnGap;
	columnGap.propTypes = {
	  columnGap: _responsivePropType.default
	} ;
	columnGap.filterProps = ['columnGap'];

	const rowGap = props => {
	  if (props.rowGap !== undefined && props.rowGap !== null) {
	    const transformer = (0, _spacing$2.createUnaryUnit)(props.theme, 'spacing', 8, 'rowGap');

	    const styleFromPropValue = propValue => ({
	      rowGap: (0, _spacing$2.getValue)(transformer, propValue)
	    });

	    return (0, _breakpoints$2.handleBreakpoints)(props, props.rowGap, styleFromPropValue);
	  }

	  return null;
	};

	grid$1.rowGap = rowGap;
	rowGap.propTypes = {
	  rowGap: _responsivePropType.default
	} ;
	rowGap.filterProps = ['rowGap'];
	const gridColumn = (0, _style$5.default)({
	  prop: 'gridColumn'
	});
	grid$1.gridColumn = gridColumn;
	const gridRow = (0, _style$5.default)({
	  prop: 'gridRow'
	});
	grid$1.gridRow = gridRow;
	const gridAutoFlow = (0, _style$5.default)({
	  prop: 'gridAutoFlow'
	});
	grid$1.gridAutoFlow = gridAutoFlow;
	const gridAutoColumns = (0, _style$5.default)({
	  prop: 'gridAutoColumns'
	});
	grid$1.gridAutoColumns = gridAutoColumns;
	const gridAutoRows = (0, _style$5.default)({
	  prop: 'gridAutoRows'
	});
	grid$1.gridAutoRows = gridAutoRows;
	const gridTemplateColumns = (0, _style$5.default)({
	  prop: 'gridTemplateColumns'
	});
	grid$1.gridTemplateColumns = gridTemplateColumns;
	const gridTemplateRows = (0, _style$5.default)({
	  prop: 'gridTemplateRows'
	});
	grid$1.gridTemplateRows = gridTemplateRows;
	const gridTemplateAreas = (0, _style$5.default)({
	  prop: 'gridTemplateAreas'
	});
	grid$1.gridTemplateAreas = gridTemplateAreas;
	const gridArea = (0, _style$5.default)({
	  prop: 'gridArea'
	});
	grid$1.gridArea = gridArea;
	const grid = (0, _compose$4.default)(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
	var _default$3i = grid;
	grid$1.default = _default$3i;

	var palette$1 = {};

	var _interopRequireDefault$2w = interopRequireDefault.exports;

	Object.defineProperty(palette$1, "__esModule", {
	  value: true
	});
	palette$1.default = palette$1.color = palette$1.bgcolor = palette$1.backgroundColor = void 0;

	var _style$4 = _interopRequireDefault$2w(style$2);

	var _compose$3 = _interopRequireDefault$2w(compose$2);

	const color = (0, _style$4.default)({
	  prop: 'color',
	  themeKey: 'palette'
	});
	palette$1.color = color;
	const bgcolor = (0, _style$4.default)({
	  prop: 'bgcolor',
	  cssProperty: 'backgroundColor',
	  themeKey: 'palette'
	});
	palette$1.bgcolor = bgcolor;
	const backgroundColor = (0, _style$4.default)({
	  prop: 'backgroundColor',
	  themeKey: 'palette'
	});
	palette$1.backgroundColor = backgroundColor;
	const palette = (0, _compose$3.default)(color, bgcolor, backgroundColor);
	var _default$3h = palette;
	palette$1.default = _default$3h;

	var positions = {};

	var _interopRequireDefault$2v = interopRequireDefault.exports;

	Object.defineProperty(positions, "__esModule", {
	  value: true
	});
	positions.zIndex = positions.top = positions.right = positions.position = positions.left = positions.default = positions.bottom = void 0;

	var _style$3 = _interopRequireDefault$2v(style$2);

	var _compose$2 = _interopRequireDefault$2v(compose$2);

	const position = (0, _style$3.default)({
	  prop: 'position'
	});
	positions.position = position;
	const zIndex$2 = (0, _style$3.default)({
	  prop: 'zIndex',
	  themeKey: 'zIndex'
	});
	positions.zIndex = zIndex$2;
	const top$1 = (0, _style$3.default)({
	  prop: 'top'
	});
	positions.top = top$1;
	const right$1 = (0, _style$3.default)({
	  prop: 'right'
	});
	positions.right = right$1;
	const bottom$1 = (0, _style$3.default)({
	  prop: 'bottom'
	});
	positions.bottom = bottom$1;
	const left$1 = (0, _style$3.default)({
	  prop: 'left'
	});
	positions.left = left$1;

	var _default$3g = (0, _compose$2.default)(position, zIndex$2, top$1, right$1, bottom$1, left$1);

	positions.default = _default$3g;

	var shadows$2 = {};

	var _interopRequireDefault$2u = interopRequireDefault.exports;

	Object.defineProperty(shadows$2, "__esModule", {
	  value: true
	});
	shadows$2.default = void 0;

	var _style$2 = _interopRequireDefault$2u(style$2);

	const boxShadow = (0, _style$2.default)({
	  prop: 'boxShadow',
	  themeKey: 'shadows'
	});
	var _default$3f = boxShadow;
	shadows$2.default = _default$3f;

	var sizing$1 = {};

	var _interopRequireDefault$2t = interopRequireDefault.exports;

	Object.defineProperty(sizing$1, "__esModule", {
	  value: true
	});
	sizing$1.width = sizing$1.sizeWidth = sizing$1.sizeHeight = sizing$1.minWidth = sizing$1.minHeight = sizing$1.maxWidth = sizing$1.maxHeight = sizing$1.height = sizing$1.default = sizing$1.boxSizing = void 0;

	var _style$1 = _interopRequireDefault$2t(style$2);

	var _compose$1 = _interopRequireDefault$2t(compose$2);

	var _breakpoints$1 = breakpoints$1;

	function transform(value) {
	  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
	}

	const width = (0, _style$1.default)({
	  prop: 'width',
	  transform
	});
	sizing$1.width = width;

	const maxWidth = props => {
	  if (props.maxWidth !== undefined && props.maxWidth !== null) {
	    const styleFromPropValue = propValue => {
	      var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;

	      const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || _breakpoints$1.values[propValue];
	      return {
	        maxWidth: breakpoint || transform(propValue)
	      };
	    };

	    return (0, _breakpoints$1.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
	  }

	  return null;
	};

	sizing$1.maxWidth = maxWidth;
	maxWidth.filterProps = ['maxWidth'];
	const minWidth = (0, _style$1.default)({
	  prop: 'minWidth',
	  transform
	});
	sizing$1.minWidth = minWidth;
	const height = (0, _style$1.default)({
	  prop: 'height',
	  transform
	});
	sizing$1.height = height;
	const maxHeight = (0, _style$1.default)({
	  prop: 'maxHeight',
	  transform
	});
	sizing$1.maxHeight = maxHeight;
	const minHeight = (0, _style$1.default)({
	  prop: 'minHeight',
	  transform
	});
	sizing$1.minHeight = minHeight;
	const sizeWidth = (0, _style$1.default)({
	  prop: 'size',
	  cssProperty: 'width',
	  transform
	});
	sizing$1.sizeWidth = sizeWidth;
	const sizeHeight = (0, _style$1.default)({
	  prop: 'size',
	  cssProperty: 'height',
	  transform
	});
	sizing$1.sizeHeight = sizeHeight;
	const boxSizing = (0, _style$1.default)({
	  prop: 'boxSizing'
	});
	sizing$1.boxSizing = boxSizing;
	const sizing = (0, _compose$1.default)(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
	var _default$3e = sizing;
	sizing$1.default = _default$3e;

	var typography$1 = {};

	var _interopRequireDefault$2s = interopRequireDefault.exports;

	Object.defineProperty(typography$1, "__esModule", {
	  value: true
	});
	typography$1.typographyVariant = typography$1.textTransform = typography$1.textAlign = typography$1.lineHeight = typography$1.letterSpacing = typography$1.fontWeight = typography$1.fontStyle = typography$1.fontSize = typography$1.fontFamily = typography$1.default = void 0;

	var _style = _interopRequireDefault$2s(style$2);

	var _compose = _interopRequireDefault$2s(compose$2);

	const fontFamily = (0, _style.default)({
	  prop: 'fontFamily',
	  themeKey: 'typography'
	});
	typography$1.fontFamily = fontFamily;
	const fontSize = (0, _style.default)({
	  prop: 'fontSize',
	  themeKey: 'typography'
	});
	typography$1.fontSize = fontSize;
	const fontStyle = (0, _style.default)({
	  prop: 'fontStyle',
	  themeKey: 'typography'
	});
	typography$1.fontStyle = fontStyle;
	const fontWeight = (0, _style.default)({
	  prop: 'fontWeight',
	  themeKey: 'typography'
	});
	typography$1.fontWeight = fontWeight;
	const letterSpacing = (0, _style.default)({
	  prop: 'letterSpacing'
	});
	typography$1.letterSpacing = letterSpacing;
	const textTransform = (0, _style.default)({
	  prop: 'textTransform'
	});
	typography$1.textTransform = textTransform;
	const lineHeight = (0, _style.default)({
	  prop: 'lineHeight'
	});
	typography$1.lineHeight = lineHeight;
	const textAlign = (0, _style.default)({
	  prop: 'textAlign'
	});
	typography$1.textAlign = textAlign;
	const typographyVariant = (0, _style.default)({
	  prop: 'typography',
	  cssProperty: false,
	  themeKey: 'typography'
	});
	typography$1.typographyVariant = typographyVariant;
	const typography = (0, _compose.default)(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
	var _default$3d = typography;
	typography$1.default = _default$3d;

	var styleFunctionSx$2 = {};

	var styleFunctionSx$1 = {};

	var getThemeValue$1 = {};

	var _interopRequireDefault$2r = interopRequireDefault.exports;

	Object.defineProperty(getThemeValue$1, "__esModule", {
	  value: true
	});
	getThemeValue$1.propToStyleFunction = getThemeValue$1.default = void 0;

	var _borders = _interopRequireDefault$2r(borders$1);

	var _display = _interopRequireDefault$2r(display);

	var _flexbox = _interopRequireDefault$2r(flexbox$1);

	var _grid = _interopRequireDefault$2r(grid$1);

	var _positions = _interopRequireDefault$2r(positions);

	var _palette = _interopRequireDefault$2r(palette$1);

	var _shadows$1 = _interopRequireDefault$2r(shadows$2);

	var _sizing = _interopRequireDefault$2r(sizing$1);

	var _spacing$1 = _interopRequireDefault$2r(spacing$1);

	var _typography = _interopRequireDefault$2r(typography$1);

	const filterPropsMapping = {
	  borders: _borders.default.filterProps,
	  display: _display.default.filterProps,
	  flexbox: _flexbox.default.filterProps,
	  grid: _grid.default.filterProps,
	  positions: _positions.default.filterProps,
	  palette: _palette.default.filterProps,
	  shadows: _shadows$1.default.filterProps,
	  sizing: _sizing.default.filterProps,
	  spacing: _spacing$1.default.filterProps,
	  typography: _typography.default.filterProps
	};
	const styleFunctionMapping = {
	  borders: _borders.default,
	  display: _display.default,
	  flexbox: _flexbox.default,
	  grid: _grid.default,
	  positions: _positions.default,
	  palette: _palette.default,
	  shadows: _shadows$1.default,
	  sizing: _sizing.default,
	  spacing: _spacing$1.default,
	  typography: _typography.default
	};
	const propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
	  filterPropsMapping[styleFnName].forEach(propName => {
	    acc[propName] = styleFunctionMapping[styleFnName];
	  });
	  return acc;
	}, {});
	getThemeValue$1.propToStyleFunction = propToStyleFunction;

	function getThemeValue(prop, value, theme) {
	  const inputProps = {
	    [prop]: value,
	    theme
	  };
	  const styleFunction = propToStyleFunction[prop];
	  return styleFunction ? styleFunction(inputProps) : {
	    [prop]: value
	  };
	}

	var _default$3c = getThemeValue;
	getThemeValue$1.default = _default$3c;

	var _interopRequireDefault$2q = interopRequireDefault.exports;

	Object.defineProperty(styleFunctionSx$1, "__esModule", {
	  value: true
	});
	styleFunctionSx$1.default = void 0;

	var _merge = _interopRequireDefault$2q(merge$3);

	var _getThemeValue$1 = _interopRequireWildcard$1L(getThemeValue$1);

	var _breakpoints = breakpoints$1;

	function _getRequireWildcardCache$1L(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1L = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1L(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1L(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function objectsHaveSameKeys(...objects) {
	  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
	  const union = new Set(allKeys);
	  return objects.every(object => union.size === Object.keys(object).length);
	}

	function callIfFn(maybeFn, arg) {
	  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
	}

	function styleFunctionSx(props) {
	  const {
	    sx,
	    theme = {}
	  } = props || {};

	  if (!sx) {
	    return null; // emotion & styled-components will neglect null
	  }
	  /*
	   * Receive `sxInput` as object or callback
	   * and then recursively check keys & values to create media query object styles.
	   * (the result will be used in `styled`)
	   */


	  function traverse(sxInput) {
	    let sxObject = sxInput;

	    if (typeof sxInput === 'function') {
	      sxObject = sxInput(theme);
	    } else if (typeof sxInput !== 'object') {
	      // value
	      return sxInput;
	    }

	    const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme.breakpoints);
	    const breakpointsKeys = Object.keys(emptyBreakpoints);
	    let css = emptyBreakpoints;
	    Object.keys(sxObject).forEach(styleKey => {
	      const value = callIfFn(sxObject[styleKey], theme);

	      if (value !== null && value !== undefined) {
	        if (typeof value === 'object') {
	          if (_getThemeValue$1.propToStyleFunction[styleKey]) {
	            css = (0, _merge.default)(css, (0, _getThemeValue$1.default)(styleKey, value, theme));
	          } else {
	            const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
	              theme
	            }, value, x => ({
	              [styleKey]: x
	            }));

	            if (objectsHaveSameKeys(breakpointsValues, value)) {
	              css[styleKey] = styleFunctionSx({
	                sx: value,
	                theme
	              });
	            } else {
	              css = (0, _merge.default)(css, breakpointsValues);
	            }
	          }
	        } else {
	          css = (0, _merge.default)(css, (0, _getThemeValue$1.default)(styleKey, value, theme));
	        }
	      }
	    });
	    return (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css);
	  }

	  return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
	}

	styleFunctionSx.filterProps = ['sx'];
	var _default$3b = styleFunctionSx;
	styleFunctionSx$1.default = _default$3b;

	var extendSxProp$1 = {};

	var _interopRequireDefault$2p = interopRequireDefault.exports;

	Object.defineProperty(extendSxProp$1, "__esModule", {
	  value: true
	});
	extendSxProp$1.default = extendSxProp;

	var _extends2$1C = _interopRequireDefault$2p(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1m = _interopRequireDefault$2p(objectWithoutPropertiesLoose.exports);

	var _utils$1o = utils$h;

	var _getThemeValue = getThemeValue$1;

	const _excluded$1m = ["sx"];

	const splitProps = props => {
	  const result = {
	    systemProps: {},
	    otherProps: {}
	  };
	  Object.keys(props).forEach(prop => {
	    if (_getThemeValue.propToStyleFunction[prop]) {
	      result.systemProps[prop] = props[prop];
	    } else {
	      result.otherProps[prop] = props[prop];
	    }
	  });
	  return result;
	};

	function extendSxProp(props) {
	  const {
	    sx: inSx
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$1m.default)(props, _excluded$1m);
	  const {
	    systemProps,
	    otherProps
	  } = splitProps(other);
	  let finalSx;

	  if (Array.isArray(inSx)) {
	    finalSx = [systemProps, ...inSx];
	  } else if (typeof inSx === 'function') {
	    finalSx = (...args) => {
	      const result = inSx(...args);

	      if (!(0, _utils$1o.isPlainObject)(result)) {
	        return systemProps;
	      }

	      return (0, _extends2$1C.default)({}, systemProps, result);
	    };
	  } else {
	    finalSx = (0, _extends2$1C.default)({}, systemProps, inSx);
	  }

	  return (0, _extends2$1C.default)({}, otherProps, {
	    sx: finalSx
	  });
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _styleFunctionSx.default;
		  }
		});
		Object.defineProperty(exports, "extendSxProp", {
		  enumerable: true,
		  get: function () {
		    return _extendSxProp.default;
		  }
		});

		var _styleFunctionSx = _interopRequireDefault(styleFunctionSx$1);

		var _extendSxProp = _interopRequireDefault(extendSxProp$1);
	} (styleFunctionSx$2));

	var sx$2 = {};

	var sx$1 = {};

	var _interopRequireDefault$2o = interopRequireDefault.exports;

	Object.defineProperty(sx$1, "__esModule", {
	  value: true
	});
	sx$1.default = void 0;

	var _styleFunctionSx$2 = _interopRequireDefault$2o(styleFunctionSx$2);

	function sx(styles) {
	  return ({
	    theme
	  }) => (0, _styleFunctionSx$2.default)({
	    sx: styles,
	    theme
	  });
	}

	var _default$3a = sx;
	sx$1.default = _default$3a;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _sx.default;
		  }
		});

		var _sx = _interopRequireDefault(sx$1);
	} (sx$2));

	var Box$6 = {};

	var Box$5 = {};

	var createBox$1 = {};

	var useTheme$6 = {};

	var createTheme$4 = {};

	var createTheme$3 = {};

	var createBreakpoints$1 = {};

	var _interopRequireDefault$2n = interopRequireDefault.exports;

	Object.defineProperty(createBreakpoints$1, "__esModule", {
	  value: true
	});
	createBreakpoints$1.breakpointKeys = void 0;
	createBreakpoints$1.default = createBreakpoints;

	var _extends2$1B = _interopRequireDefault$2n(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1l = _interopRequireDefault$2n(objectWithoutPropertiesLoose.exports);

	const _excluded$1l = ["values", "unit", "step"];
	// Sorted ASC by size. That's important.
	// It can't be configured as it's used statically for propTypes.
	const breakpointKeys = ['xs', 'sm', 'md', 'lg', 'xl']; // Keep in mind that @media is inclusive by the CSS specification.

	createBreakpoints$1.breakpointKeys = breakpointKeys;

	function createBreakpoints(breakpoints) {
	  const {
	    // The breakpoint **start** at this value.
	    // For instance with the first breakpoint xs: [xs, sm).
	    values = {
	      xs: 0,
	      // phone
	      sm: 600,
	      // tablet
	      md: 900,
	      // small laptop
	      lg: 1200,
	      // desktop
	      xl: 1536 // large screen

	    },
	    unit = 'px',
	    step = 5
	  } = breakpoints,
	        other = (0, _objectWithoutPropertiesLoose2$1l.default)(breakpoints, _excluded$1l);
	  const keys = Object.keys(values);

	  function up(key) {
	    const value = typeof values[key] === 'number' ? values[key] : key;
	    return `@media (min-width:${value}${unit})`;
	  }

	  function down(key) {
	    const value = typeof values[key] === 'number' ? values[key] : key;
	    return `@media (max-width:${value - step / 100}${unit})`;
	  }

	  function between(start, end) {
	    const endIndex = keys.indexOf(end);
	    return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
	  }

	  function only(key) {
	    if (keys.indexOf(key) + 1 < keys.length) {
	      return between(key, keys[keys.indexOf(key) + 1]);
	    }

	    return up(key);
	  }

	  function not(key) {
	    // handle first and last key separately, for better readability
	    const keyIndex = keys.indexOf(key);

	    if (keyIndex === 0) {
	      return up(keys[1]);
	    }

	    if (keyIndex === keys.length - 1) {
	      return down(keys[keyIndex]);
	    }

	    return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
	  }

	  return (0, _extends2$1B.default)({
	    keys,
	    values,
	    up,
	    down,
	    between,
	    only,
	    not,
	    unit
	  }, other);
	}

	var shape$1 = {};

	Object.defineProperty(shape$1, "__esModule", {
	  value: true
	});
	shape$1.default = void 0;
	const shape = {
	  borderRadius: 4
	};
	var _default$39 = shape;
	shape$1.default = _default$39;

	var createSpacing$1 = {};

	Object.defineProperty(createSpacing$1, "__esModule", {
	  value: true
	});
	createSpacing$1.default = createSpacing;

	var _spacing = spacing$1;

	/* tslint:enable:unified-signatures */
	function createSpacing(spacingInput = 8) {
	  // Already transformed.
	  if (spacingInput.mui) {
	    return spacingInput;
	  } // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
	  // Smaller components, such as icons, can align to a 4dp grid.
	  // https://material.io/design/layout/understanding-layout.html#usage


	  const transform = (0, _spacing.createUnarySpacing)({
	    spacing: spacingInput
	  });

	  const spacing = (...argsInput) => {
	    {
	      if (!(argsInput.length <= 4)) {
	        console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
	      }
	    }

	    const args = argsInput.length === 0 ? [1] : argsInput;
	    return args.map(argument => {
	      const output = transform(argument);
	      return typeof output === 'number' ? `${output}px` : output;
	    }).join(' ');
	  };

	  spacing.mui = true;
	  return spacing;
	}

	var _interopRequireDefault$2m = interopRequireDefault.exports;

	Object.defineProperty(createTheme$3, "__esModule", {
	  value: true
	});
	createTheme$3.default = void 0;

	var _extends2$1A = _interopRequireDefault$2m(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1k = _interopRequireDefault$2m(objectWithoutPropertiesLoose.exports);

	var _utils$1n = utils$h;

	var _createBreakpoints$1 = _interopRequireDefault$2m(createBreakpoints$1);

	var _shape = _interopRequireDefault$2m(shape$1);

	var _createSpacing$1 = _interopRequireDefault$2m(createSpacing$1);

	const _excluded$1k = ["breakpoints", "palette", "spacing", "shape"];

	function createTheme$2(options = {}, ...args) {
	  const {
	    breakpoints: breakpointsInput = {},
	    palette: paletteInput = {},
	    spacing: spacingInput,
	    shape: shapeInput = {}
	  } = options,
	        other = (0, _objectWithoutPropertiesLoose2$1k.default)(options, _excluded$1k);
	  const breakpoints = (0, _createBreakpoints$1.default)(breakpointsInput);
	  const spacing = (0, _createSpacing$1.default)(spacingInput);
	  let muiTheme = (0, _utils$1n.deepmerge)({
	    breakpoints,
	    direction: 'ltr',
	    components: {},
	    // Inject component definitions.
	    palette: (0, _extends2$1A.default)({
	      mode: 'light'
	    }, paletteInput),
	    spacing,
	    shape: (0, _extends2$1A.default)({}, _shape.default, shapeInput)
	  }, other);
	  muiTheme = args.reduce((acc, argument) => (0, _utils$1n.deepmerge)(acc, argument), muiTheme);
	  return muiTheme;
	}

	var _default$38 = createTheme$2;
	createTheme$3.default = _default$38;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _createTheme.default;
		  }
		});

		var _createTheme = _interopRequireDefault(createTheme$3);
	} (createTheme$4));

	var useThemeWithoutDefault = {};

	var node$2 = {};

	var ThemeProvider$6 = {};

	var ThemeProvider$5 = {};

	var ThemeContext$1 = {};

	Object.defineProperty(ThemeContext$1, "__esModule", {
	  value: true
	});
	ThemeContext$1.default = void 0;

	var React$1F = _interopRequireWildcard$1K(require$$3);

	function _getRequireWildcardCache$1K(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1K = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1K(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1K(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const ThemeContext = /*#__PURE__*/React$1F.createContext(null);

	{
	  ThemeContext.displayName = 'ThemeContext';
	}

	var _default$37 = ThemeContext;
	ThemeContext$1.default = _default$37;

	var useTheme$5 = {};

	var useTheme$4 = {};

	var _interopRequireDefault$2l = interopRequireDefault.exports;

	Object.defineProperty(useTheme$4, "__esModule", {
	  value: true
	});
	useTheme$4.default = useTheme$3;

	var React$1E = _interopRequireWildcard$1J(require$$3);

	var _ThemeContext$1 = _interopRequireDefault$2l(ThemeContext$1);

	function _getRequireWildcardCache$1J(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1J = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1J(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1J(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function useTheme$3() {
	  const theme = React$1E.useContext(_ThemeContext$1.default);

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React$1E.useDebugValue(theme);
	  }

	  return theme;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _useTheme.default;
		  }
		});

		var _useTheme = _interopRequireDefault(useTheme$4);
	} (useTheme$5));

	var nested = {};

	Object.defineProperty(nested, "__esModule", {
	  value: true
	});
	nested.default = void 0;
	const hasSymbol = typeof Symbol === 'function' && Symbol.for;

	var _default$36 = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

	nested.default = _default$36;

	var _interopRequireDefault$2k = interopRequireDefault.exports;

	Object.defineProperty(ThemeProvider$5, "__esModule", {
	  value: true
	});
	ThemeProvider$5.default = void 0;

	var _extends2$1z = _interopRequireDefault$2k(_extends$5.exports);

	var React$1D = _interopRequireWildcard$1I(require$$3);

	var _propTypes$1l = _interopRequireDefault$2k(propTypes.exports);

	var _utils$1m = utils$h;

	var _ThemeContext = _interopRequireDefault$2k(ThemeContext$1);

	var _useTheme$d = _interopRequireDefault$2k(useTheme$5);

	var _nested = _interopRequireDefault$2k(nested);

	var _jsxRuntime$1w = jsxRuntime;

	function _getRequireWildcardCache$1I(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1I = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1I(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1I(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	// To support composition of theme.
	function mergeOuterLocalTheme(outerTheme, localTheme) {
	  if (typeof localTheme === 'function') {
	    const mergedTheme = localTheme(outerTheme);

	    {
	      if (!mergedTheme) {
	        console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\n'));
	      }
	    }

	    return mergedTheme;
	  }

	  return (0, _extends2$1z.default)({}, outerTheme, localTheme);
	}
	/**
	 * This component takes a `theme` prop.
	 * It makes the `theme` available down the React tree thanks to React context.
	 * This component should preferably be used at **the root of your component tree**.
	 */


	function ThemeProvider$4(props) {
	  const {
	    children,
	    theme: localTheme
	  } = props;
	  const outerTheme = (0, _useTheme$d.default)();

	  {
	    if (outerTheme === null && typeof localTheme === 'function') {
	      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
	    }
	  }

	  const theme = React$1D.useMemo(() => {
	    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);

	    if (output != null) {
	      output[_nested.default] = outerTheme !== null;
	    }

	    return output;
	  }, [localTheme, outerTheme]);
	  return /*#__PURE__*/(0, _jsxRuntime$1w.jsx)(_ThemeContext.default.Provider, {
	    value: theme,
	    children: children
	  });
	}

	ThemeProvider$4.propTypes = {
	  /**
	   * Your component tree.
	   */
	  children: _propTypes$1l.default.node,

	  /**
	   * A theme object. You can provide a function to extend the outer theme.
	   */
	  theme: _propTypes$1l.default.oneOfType([_propTypes$1l.default.object, _propTypes$1l.default.func]).isRequired
	} ;

	{
	  ThemeProvider$4.propTypes = (0, _utils$1m.exactProp)(ThemeProvider$4.propTypes) ;
	}

	var _default$35 = ThemeProvider$4;
	ThemeProvider$5.default = _default$35;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ThemeProvider.default;
		  }
		});
		Object.defineProperty(exports, "unstable_nested", {
		  enumerable: true,
		  get: function () {
		    return _nested.default;
		  }
		});

		var _ThemeProvider = _interopRequireDefault(ThemeProvider$5);

		var _nested = _interopRequireDefault(nested);
	} (ThemeProvider$6));

	/** @license MUI v5.3.0
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  ThemeProvider: true,
		  useTheme: true
		};
		Object.defineProperty(exports, "ThemeProvider", {
		  enumerable: true,
		  get: function () {
		    return _ThemeProvider.default;
		  }
		});
		Object.defineProperty(exports, "useTheme", {
		  enumerable: true,
		  get: function () {
		    return _useTheme.default;
		  }
		});

		var _ThemeProvider = _interopRequireWildcard(ThemeProvider$6);

		Object.keys(_ThemeProvider).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _ThemeProvider[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _ThemeProvider[key];
		    }
		  });
		});

		var _useTheme = _interopRequireDefault(useTheme$5);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (node$2));

	Object.defineProperty(useThemeWithoutDefault, "__esModule", {
	  value: true
	});
	useThemeWithoutDefault.default = void 0;

	var _privateTheming$1 = node$2;

	function isObjectEmpty(obj) {
	  return Object.keys(obj).length === 0;
	}

	function useTheme$2(defaultTheme = null) {
	  const contextTheme = (0, _privateTheming$1.useTheme)();
	  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
	}

	var _default$34 = useTheme$2;
	useThemeWithoutDefault.default = _default$34;

	var _interopRequireDefault$2j = interopRequireDefault.exports;

	Object.defineProperty(useTheme$6, "__esModule", {
	  value: true
	});
	useTheme$6.systemDefaultTheme = useTheme$6.default = void 0;

	var _createTheme$3 = _interopRequireDefault$2j(createTheme$4);

	var _useThemeWithoutDefault = _interopRequireDefault$2j(useThemeWithoutDefault);

	const systemDefaultTheme$1 = (0, _createTheme$3.default)();
	useTheme$6.systemDefaultTheme = systemDefaultTheme$1;

	function useTheme$1(defaultTheme = systemDefaultTheme$1) {
	  return (0, _useThemeWithoutDefault.default)(defaultTheme);
	}

	var _default$33 = useTheme$1;
	useTheme$6.default = _default$33;

	var _interopRequireDefault$2i = interopRequireDefault.exports;

	Object.defineProperty(createBox$1, "__esModule", {
	  value: true
	});
	createBox$1.default = createBox;

	var _extends2$1y = _interopRequireDefault$2i(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1j = _interopRequireDefault$2i(objectWithoutPropertiesLoose.exports);

	var React$1C = _interopRequireWildcard$1H(require$$3);

	var _propTypes$1k = _interopRequireDefault$2i(propTypes.exports);

	var _clsx$Y = _interopRequireDefault$2i(clsx$1);

	var _styledEngine$3 = _interopRequireDefault$2i(node$3);

	var _styleFunctionSx$1 = _interopRequireWildcard$1H(styleFunctionSx$2);

	var _useTheme$c = _interopRequireDefault$2i(useTheme$6);

	var _jsxRuntime$1v = jsxRuntime;

	const _excluded$1j = ["className", "component"];

	function _getRequireWildcardCache$1H(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1H = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1H(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1H(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function createBox(options = {}) {
	  const {
	    defaultTheme,
	    defaultClassName = 'MuiBox-root',
	    generateClassName
	  } = options;
	  const BoxRoot = (0, _styledEngine$3.default)('div')(_styleFunctionSx$1.default);
	  const Box = /*#__PURE__*/React$1C.forwardRef(function Box(inProps, ref) {
	    const theme = (0, _useTheme$c.default)(defaultTheme);

	    const _extendSxProp = (0, _styleFunctionSx$1.extendSxProp)(inProps),
	          {
	      className,
	      component = 'div'
	    } = _extendSxProp,
	          other = (0, _objectWithoutPropertiesLoose2$1j.default)(_extendSxProp, _excluded$1j);

	    return /*#__PURE__*/(0, _jsxRuntime$1v.jsx)(BoxRoot, (0, _extends2$1y.default)({
	      as: component,
	      ref: ref,
	      className: (0, _clsx$Y.default)(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
	      theme: theme
	    }, other));
	  });
	  Box.propTypes
	  /* remove-proptypes */
	  = {
	    // ----------------------------- Warning --------------------------------
	    // | These PropTypes are generated from the TypeScript type definitions |
	    // |     To update them edit the d.ts file and run "yarn proptypes"     |
	    // ----------------------------------------------------------------------

	    /**
	     * @ignore
	     */
	    children: _propTypes$1k.default.node,

	    /**
	     * The component used for the root node.
	     * Either a string to use a HTML element or a component.
	     */
	    component: _propTypes$1k.default.elementType,

	    /**
	     * @ignore
	     */
	    sx: _propTypes$1k.default.oneOfType([_propTypes$1k.default.object, _propTypes$1k.default.array, _propTypes$1k.default.func])
	  } ;
	  return Box;
	}

	var _interopRequireDefault$2h = interopRequireDefault.exports;

	Object.defineProperty(Box$5, "__esModule", {
	  value: true
	});
	Box$5.default = void 0;

	var _createBox = _interopRequireDefault$2h(createBox$1);

	const Box$4 = (0, _createBox.default)();
	var _default$32 = Box$4;
	Box$5.default = _default$32;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Box.default;
		  }
		});

		var _Box = _interopRequireDefault(Box$5);
	} (Box$6));

	var createStyled$1 = {};

	var propsToClassKey$1 = {};

	var _interopRequireDefault$2g = interopRequireDefault.exports;

	Object.defineProperty(propsToClassKey$1, "__esModule", {
	  value: true
	});
	propsToClassKey$1.default = propsToClassKey;

	var _objectWithoutPropertiesLoose2$1i = _interopRequireDefault$2g(objectWithoutPropertiesLoose.exports);

	var _utils$1l = utils$h;

	const _excluded$1i = ["variant"];

	function isEmpty$2(string) {
	  return string.length === 0;
	}
	/**
	 * Generates string classKey based on the properties provided. It starts with the
	 * variant if defined, and then it appends all other properties in alphabetical order.
	 * @param {object} props - the properties for which the classKey should be created.
	 */


	function propsToClassKey(props) {
	  const {
	    variant
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$1i.default)(props, _excluded$1i);
	  let classKey = variant || '';
	  Object.keys(other).sort().forEach(key => {
	    if (key === 'color') {
	      classKey += isEmpty$2(classKey) ? props[key] : (0, _utils$1l.unstable_capitalize)(props[key]);
	    } else {
	      classKey += `${isEmpty$2(classKey) ? key : (0, _utils$1l.unstable_capitalize)(key)}${(0, _utils$1l.unstable_capitalize)(props[key].toString())}`;
	    }
	  });
	  return classKey;
	}

	var _interopRequireDefault$2f = interopRequireDefault.exports;

	Object.defineProperty(createStyled$1, "__esModule", {
	  value: true
	});
	createStyled$1.default = createStyled;
	createStyled$1.shouldForwardProp = shouldForwardProp;
	createStyled$1.systemDefaultTheme = void 0;

	var _extends2$1x = _interopRequireDefault$2f(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1h = _interopRequireDefault$2f(objectWithoutPropertiesLoose.exports);

	var _styledEngine$2 = _interopRequireDefault$2f(node$3);

	var _utils$1k = utils$h;

	var _createTheme$2 = _interopRequireDefault$2f(createTheme$4);

	var _styleFunctionSx = _interopRequireDefault$2f(styleFunctionSx$2);

	var _propsToClassKey = _interopRequireDefault$2f(propsToClassKey$1);

	const _excluded$1h = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"],
	      _excluded2$7 = ["theme"],
	      _excluded3$1 = ["theme"];

	function isEmpty$1(obj) {
	  return Object.keys(obj).length === 0;
	}

	const getStyleOverrides = (name, theme) => {
	  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
	    return theme.components[name].styleOverrides;
	  }

	  return null;
	};

	const getVariantStyles = (name, theme) => {
	  let variants = [];

	  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
	    variants = theme.components[name].variants;
	  }

	  const variantsStyles = {};
	  variants.forEach(definition => {
	    const key = (0, _propsToClassKey.default)(definition.props);
	    variantsStyles[key] = definition.style;
	  });
	  return variantsStyles;
	};

	const variantsResolver = (props, styles, theme, name) => {
	  var _theme$components, _theme$components$nam;

	  const {
	    ownerState = {}
	  } = props;
	  const variantsStyles = [];
	  const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;

	  if (themeVariants) {
	    themeVariants.forEach(themeVariant => {
	      let isMatch = true;
	      Object.keys(themeVariant.props).forEach(key => {
	        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
	          isMatch = false;
	        }
	      });

	      if (isMatch) {
	        variantsStyles.push(styles[(0, _propsToClassKey.default)(themeVariant.props)]);
	      }
	    });
	  }

	  return variantsStyles;
	};

	function shouldForwardProp(prop) {
	  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
	}

	const systemDefaultTheme = (0, _createTheme$2.default)();
	createStyled$1.systemDefaultTheme = systemDefaultTheme;

	const lowercaseFirstLetter = string => {
	  return string.charAt(0).toLowerCase() + string.slice(1);
	};

	function createStyled(input = {}) {
	  const {
	    defaultTheme = systemDefaultTheme,
	    rootShouldForwardProp = shouldForwardProp,
	    slotShouldForwardProp = shouldForwardProp
	  } = input;
	  return (tag, inputOptions = {}) => {
	    const {
	      name: componentName,
	      slot: componentSlot,
	      skipVariantsResolver: inputSkipVariantsResolver,
	      skipSx: inputSkipSx,
	      overridesResolver
	    } = inputOptions,
	          options = (0, _objectWithoutPropertiesLoose2$1h.default)(inputOptions, _excluded$1h); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.

	    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
	    const skipSx = inputSkipSx || false;
	    let label;

	    {
	      if (componentName) {
	        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
	      }
	    }

	    let shouldForwardPropOption = shouldForwardProp;

	    if (componentSlot === 'Root') {
	      shouldForwardPropOption = rootShouldForwardProp;
	    } else if (componentSlot) {
	      // any other slot specified
	      shouldForwardPropOption = slotShouldForwardProp;
	    }

	    const defaultStyledResolver = (0, _styledEngine$2.default)(tag, (0, _extends2$1x.default)({
	      shouldForwardProp: shouldForwardPropOption,
	      label
	    }, options));

	    const muiStyledResolver = (styleArg, ...expressions) => {
	      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
	        // On the server emotion doesn't use React.forwardRef for creating components, so the created
	        // component stays as a function. This condition makes sure that we do not interpolate functions
	        // which are basically components used as a selectors.
	        // eslint-disable-next-line no-underscore-dangle
	        return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? _ref => {
	          let {
	            theme: themeInput
	          } = _ref,
	              other = (0, _objectWithoutPropertiesLoose2$1h.default)(_ref, _excluded2$7);
	          return stylesArg((0, _extends2$1x.default)({
	            theme: isEmpty$1(themeInput) ? defaultTheme : themeInput
	          }, other));
	        } : stylesArg;
	      }) : [];
	      let transformedStyleArg = styleArg;

	      if (componentName && overridesResolver) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = isEmpty$1(props.theme) ? defaultTheme : props.theme;
	          const styleOverrides = getStyleOverrides(componentName, theme);

	          if (styleOverrides) {
	            const resolvedStyleOverrides = {};
	            Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
	              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(props) : slotStyle;
	            });
	            return overridesResolver(props, resolvedStyleOverrides);
	          }

	          return null;
	        });
	      }

	      if (componentName && !skipVariantsResolver) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = isEmpty$1(props.theme) ? defaultTheme : props.theme;
	          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
	        });
	      }

	      if (!skipSx) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = isEmpty$1(props.theme) ? defaultTheme : props.theme;
	          return (0, _styleFunctionSx.default)((0, _extends2$1x.default)({}, props, {
	            theme
	          }));
	        });
	      }

	      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;

	      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
	        const placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.

	        transformedStyleArg = [...styleArg, ...placeholders];
	        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
	      } else if (typeof styleArg === 'function') {
	        // If the type is function, we need to define the default theme.
	        transformedStyleArg = _ref2 => {
	          let {
	            theme: themeInput
	          } = _ref2,
	              other = (0, _objectWithoutPropertiesLoose2$1h.default)(_ref2, _excluded3$1);
	          return styleArg((0, _extends2$1x.default)({
	            theme: isEmpty$1(themeInput) ? defaultTheme : themeInput
	          }, other));
	        };
	      }

	      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);

	      {
	        let displayName;

	        if (componentName) {
	          displayName = `${componentName}${componentSlot || ''}`;
	        }

	        if (displayName === undefined) {
	          displayName = `Styled(${(0, _utils$1k.getDisplayName)(tag)})`;
	        }

	        Component.displayName = displayName;
	      }

	      return Component;
	    };

	    if (defaultStyledResolver.withConfig) {
	      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
	    }

	    return muiStyledResolver;
	  };
	}

	var styled$3 = {};

	var _interopRequireDefault$2e = interopRequireDefault.exports;

	Object.defineProperty(styled$3, "__esModule", {
	  value: true
	});
	styled$3.default = void 0;

	var _createStyled = _interopRequireDefault$2e(createStyled$1);

	const styled$2 = (0, _createStyled.default)();
	var _default$31 = styled$2;
	styled$3.default = _default$31;

	var useThemeProps$4 = {};

	var useThemeProps$3 = {};

	var getThemeProps$1 = {};

	Object.defineProperty(getThemeProps$1, "__esModule", {
	  value: true
	});
	getThemeProps$1.default = getThemeProps;

	var _utils$1j = utils$h;

	function getThemeProps(params) {
	  const {
	    theme,
	    name,
	    props
	  } = params;

	  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
	    return props;
	  }

	  return (0, _utils$1j.internal_resolveProps)(theme.components[name].defaultProps, props);
	}

	var _interopRequireDefault$2d = interopRequireDefault.exports;

	Object.defineProperty(useThemeProps$3, "__esModule", {
	  value: true
	});
	useThemeProps$3.default = useThemeProps$2;

	var _getThemeProps = _interopRequireDefault$2d(getThemeProps$1);

	var _useTheme$b = _interopRequireDefault$2d(useTheme$6);

	function useThemeProps$2({
	  props,
	  name,
	  defaultTheme
	}) {
	  const theme = (0, _useTheme$b.default)(defaultTheme);
	  const mergedProps = (0, _getThemeProps.default)({
	    theme,
	    name,
	    props
	  });
	  return mergedProps;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _useThemeProps.default;
		  }
		});
		Object.defineProperty(exports, "getThemeProps", {
		  enumerable: true,
		  get: function () {
		    return _getThemeProps.default;
		  }
		});

		var _useThemeProps = _interopRequireDefault(useThemeProps$3);

		var _getThemeProps = _interopRequireDefault(getThemeProps$1);
	} (useThemeProps$4));

	var colorManipulator = {};

	Object.defineProperty(colorManipulator, "__esModule", {
	  value: true
	});
	colorManipulator.alpha = alpha;
	colorManipulator.darken = darken;
	colorManipulator.decomposeColor = decomposeColor;
	colorManipulator.emphasize = emphasize;
	colorManipulator.getContrastRatio = getContrastRatio;
	colorManipulator.getLuminance = getLuminance;
	colorManipulator.hexToRgb = hexToRgb;
	colorManipulator.hslToRgb = hslToRgb;
	colorManipulator.lighten = lighten;
	colorManipulator.recomposeColor = recomposeColor;
	colorManipulator.rgbToHex = rgbToHex;

	/**
	 * Returns a number whose value is limited to the given range.
	 * @param {number} value The value to be clamped
	 * @param {number} min The lower boundary of the output range
	 * @param {number} max The upper boundary of the output range
	 * @returns {number} A number in the range [min, max]
	 */
	function clamp$1(value, min = 0, max = 1) {
	  {
	    if (value < min || value > max) {
	      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
	    }
	  }

	  return Math.min(Math.max(min, value), max);
	}
	/**
	 * Converts a color from CSS hex format to CSS rgb format.
	 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
	 * @returns {string} A CSS rgb color string
	 */


	function hexToRgb(color) {
	  color = color.substr(1);
	  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
	  let colors = color.match(re);

	  if (colors && colors[0].length === 1) {
	    colors = colors.map(n => n + n);
	  }

	  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
	}

	function intToHex(int) {
	  const hex = int.toString(16);
	  return hex.length === 1 ? `0${hex}` : hex;
	}
	/**
	 * Returns an object with the type and values of a color.
	 *
	 * Note: Does not support rgb % values.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {object} - A MUI color object: {type: string, values: number[]}
	 */


	function decomposeColor(color) {
	  // Idempotent
	  if (color.type) {
	    return color;
	  }

	  if (color.charAt(0) === '#') {
	    return decomposeColor(hexToRgb(color));
	  }

	  const marker = color.indexOf('(');
	  const type = color.substring(0, marker);

	  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
	    throw new Error(`MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` );
	  }

	  let values = color.substring(marker + 1, color.length - 1);
	  let colorSpace;

	  if (type === 'color') {
	    values = values.split(' ');
	    colorSpace = values.shift();

	    if (values.length === 4 && values[3].charAt(0) === '/') {
	      values[3] = values[3].substr(1);
	    }

	    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
	      throw new Error(`MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` );
	    }
	  } else {
	    values = values.split(',');
	  }

	  values = values.map(value => parseFloat(value));
	  return {
	    type,
	    values,
	    colorSpace
	  };
	}
	/**
	 * Converts a color object with type and values to a string.
	 * @param {object} color - Decomposed color
	 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
	 * @param {array} color.values - [n,n,n] or [n,n,n,n]
	 * @returns {string} A CSS color string
	 */


	function recomposeColor(color) {
	  const {
	    type,
	    colorSpace
	  } = color;
	  let {
	    values
	  } = color;

	  if (type.indexOf('rgb') !== -1) {
	    // Only convert the first 3 values to int (i.e. not alpha)
	    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
	  } else if (type.indexOf('hsl') !== -1) {
	    values[1] = `${values[1]}%`;
	    values[2] = `${values[2]}%`;
	  }

	  if (type.indexOf('color') !== -1) {
	    values = `${colorSpace} ${values.join(' ')}`;
	  } else {
	    values = `${values.join(', ')}`;
	  }

	  return `${type}(${values})`;
	}
	/**
	 * Converts a color from CSS rgb format to CSS hex format.
	 * @param {string} color - RGB color, i.e. rgb(n, n, n)
	 * @returns {string} A CSS rgb color string, i.e. #nnnnnn
	 */


	function rgbToHex(color) {
	  // Idempotent
	  if (color.indexOf('#') === 0) {
	    return color;
	  }

	  const {
	    values
	  } = decomposeColor(color);
	  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;
	}
	/**
	 * Converts a color from hsl format to rgb format.
	 * @param {string} color - HSL color values
	 * @returns {string} rgb color values
	 */


	function hslToRgb(color) {
	  color = decomposeColor(color);
	  const {
	    values
	  } = color;
	  const h = values[0];
	  const s = values[1] / 100;
	  const l = values[2] / 100;
	  const a = s * Math.min(l, 1 - l);

	  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);

	  let type = 'rgb';
	  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];

	  if (color.type === 'hsla') {
	    type += 'a';
	    rgb.push(values[3]);
	  }

	  return recomposeColor({
	    type,
	    values: rgb
	  });
	}
	/**
	 * The relative brightness of any point in a color space,
	 * normalized to 0 for darkest black and 1 for lightest white.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @returns {number} The relative brightness of the color in the range 0 - 1
	 */


	function getLuminance(color) {
	  color = decomposeColor(color);
	  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
	  rgb = rgb.map(val => {
	    if (color.type !== 'color') {
	      val /= 255; // normalized
	    }

	    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
	  }); // Truncate at 3 digits

	  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
	}
	/**
	 * Calculates the contrast ratio between two colors.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} A contrast ratio value in the range 0 - 21.
	 */


	function getContrastRatio(foreground, background) {
	  const lumA = getLuminance(foreground);
	  const lumB = getLuminance(background);
	  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
	}
	/**
	 * Sets the absolute transparency of a color.
	 * Any existing alpha values are overwritten.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} value - value to set the alpha channel to in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */


	function alpha(color, value) {
	  color = decomposeColor(color);
	  value = clamp$1(value);

	  if (color.type === 'rgb' || color.type === 'hsl') {
	    color.type += 'a';
	  }

	  if (color.type === 'color') {
	    color.values[3] = `/${value}`;
	  } else {
	    color.values[3] = value;
	  }

	  return recomposeColor(color);
	}
	/**
	 * Darkens a color.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */


	function darken(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp$1(coefficient);

	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] *= 1 - coefficient;
	  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] *= 1 - coefficient;
	    }
	  }

	  return recomposeColor(color);
	}
	/**
	 * Lightens a color.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */


	function lighten(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp$1(coefficient);

	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] += (100 - color.values[2]) * coefficient;
	  } else if (color.type.indexOf('rgb') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] += (255 - color.values[i]) * coefficient;
	    }
	  } else if (color.type.indexOf('color') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] += (1 - color.values[i]) * coefficient;
	    }
	  }

	  return recomposeColor(color);
	}
	/**
	 * Darken or lighten a color, depending on its luminance.
	 * Light colors are darkened, dark colors are lightened.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */


	function emphasize(color, coefficient = 0.15) {
	  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
	}

	var ThemeProvider$3 = {};

	var ThemeProvider$2 = {};

	var _interopRequireDefault$2c = interopRequireDefault.exports;

	Object.defineProperty(ThemeProvider$2, "__esModule", {
	  value: true
	});
	ThemeProvider$2.default = void 0;

	_interopRequireWildcard$1G(require$$3);

	var _propTypes$1j = _interopRequireDefault$2c(propTypes.exports);

	var _privateTheming = node$2;

	var _utils$1i = utils$h;

	var _styledEngine$1 = node$3;

	var _useTheme$a = _interopRequireDefault$2c(useTheme$6);

	var _jsxRuntime$1u = jsxRuntime;

	function _getRequireWildcardCache$1G(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1G = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1G(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1G(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function InnerThemeProvider(props) {
	  const theme = (0, _useTheme$a.default)();
	  return /*#__PURE__*/(0, _jsxRuntime$1u.jsx)(_styledEngine$1.ThemeContext.Provider, {
	    value: typeof theme === 'object' ? theme : {},
	    children: props.children
	  });
	}

	InnerThemeProvider.propTypes = {
	  /**
	   * Your component tree.
	   */
	  children: _propTypes$1j.default.node
	} ;
	/**
	 * This component makes the `theme` available down the React tree.
	 * It should preferably be used at **the root of your component tree**.
	 */

	function ThemeProvider$1(props) {
	  const {
	    children,
	    theme: localTheme
	  } = props;
	  return /*#__PURE__*/(0, _jsxRuntime$1u.jsx)(_privateTheming.ThemeProvider, {
	    theme: localTheme,
	    children: /*#__PURE__*/(0, _jsxRuntime$1u.jsx)(InnerThemeProvider, {
	      children: children
	    })
	  });
	}

	ThemeProvider$1.propTypes = {
	  /**
	   * Your component tree.
	   */
	  children: _propTypes$1j.default.node,

	  /**
	   * A theme object. You can provide a function to extend the outer theme.
	   */
	  theme: _propTypes$1j.default.oneOfType([_propTypes$1j.default.object, _propTypes$1j.default.func]).isRequired
	} ;

	{
	  ThemeProvider$1.propTypes = (0, _utils$1i.exactProp)(ThemeProvider$1.propTypes) ;
	}

	var _default$30 = ThemeProvider$1;
	ThemeProvider$2.default = _default$30;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ThemeProvider.default;
		  }
		});

		var _ThemeProvider = _interopRequireDefault(ThemeProvider$2);
	} (ThemeProvider$3));

	var createCssVarsProvider$1 = {};

	var cssVarsParser$1 = {};

	Object.defineProperty(cssVarsParser$1, "__esModule", {
	  value: true
	});
	cssVarsParser$1.assignNestedKeys = void 0;
	cssVarsParser$1.default = cssVarsParser;
	cssVarsParser$1.walkObjectDeep = void 0;

	/**
	 * This function create an object from keys, value and then assign to target
	 *
	 * @param {Object} obj : the target object to be assigned
	 * @param {string[]} keys
	 * @param {string | number} value
	 *
	 * @example
	 * const source = {}
	 * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')
	 * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }
	 *
	 * @example
	 * const source = { palette: { primary: 'var(--palette-primary)' } }
	 * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')
	 * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }
	 */
	const assignNestedKeys = (obj, keys, value) => {
	  let temp = obj;
	  keys.forEach((k, index) => {
	    if (index === keys.length - 1) {
	      if (temp && typeof temp === 'object') {
	        temp[k] = value;
	      }
	    } else if (temp && typeof temp === 'object') {
	      if (!temp[k]) {
	        temp[k] = {};
	      }

	      temp = temp[k];
	    }
	  });
	};
	/**
	 *
	 * @param {Object} obj : source object
	 * @param {Function} callback : a function that will be called when
	 *                   - the deepest key in source object is reached
	 *                   - the value of the deepest key is NOT `undefined` | `null`
	 *
	 * @example
	 * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)
	 * // ['palette', 'primary', 'main'] '#000000'
	 */


	cssVarsParser$1.assignNestedKeys = assignNestedKeys;

	const walkObjectDeep = (obj, callback, shouldSkipPaths) => {
	  function recurse(object, parentKeys = []) {
	    Object.entries(object).forEach(([key, value]) => {
	      if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
	        if (value !== undefined && value !== null) {
	          if (typeof value === 'object' && Object.keys(value).length > 0) {
	            recurse(value, [...parentKeys, key]);
	          } else {
	            callback([...parentKeys, key], value, object);
	          }
	        }
	      }
	    });
	  }

	  recurse(obj);
	};

	cssVarsParser$1.walkObjectDeep = walkObjectDeep;

	const getCssValue = (keys, value) => {
	  if (typeof value === 'number') {
	    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(prop => keys.includes(prop))) {
	      // CSS property that are unitless
	      return value;
	    }

	    return `${value}px`;
	  }

	  return value;
	};
	/**
	 * a function that parse theme and return { css, vars }
	 *
	 * @param {Object} theme
	 * @param {{
	 *  prefix?: string,
	 *  basePrefix?: string,
	 *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean
	 * }} options.
	 *  `basePrefix`: defined by design system.
	 *  `prefix`: defined by application
	 *
	 *   This function also mutate the string value of theme input by replacing `basePrefix` (if existed) with `prefix`
	 *
	 * @returns {{ css: Object, vars: Object }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme)
	 *
	 * @example
	 * const { css, vars } = parser({
	 *   fontSize: 12,
	 *   lineHeight: 1.2,
	 *   palette: { primary: { 500: '#000000' } }
	 * })
	 *
	 * console.log(css) // { '--fontSize': '12px', '--lineHeight': 1.2, '--palette-primary-500': '#000000' }
	 * console.log(vars) // { fontSize: '--fontSize', lineHeight: '--lineHeight', palette: { primary: { 500: 'var(--palette-primary-500)' } } }
	 */


	function cssVarsParser(theme, options) {
	  const {
	    prefix,
	    basePrefix = '',
	    shouldSkipGeneratingVar
	  } = options || {};
	  const css = {};
	  const vars = {};
	  walkObjectDeep(theme, (keys, val, scope) => {
	    if (typeof val === 'string' || typeof val === 'number') {
	      let value = val;

	      if (typeof value === 'string' && value.startsWith('var')) {
	        // replace the value of the `scope` object with the prefix or remove basePrefix from the value
	        if (!basePrefix && prefix) {
	          value = value.replace(/var\(--/g, `var(--${prefix}-`);
	        } else {
	          value = prefix ? value.replace(new RegExp(basePrefix, 'g'), prefix) : value.replace(new RegExp(`${basePrefix}-`, 'g'), '');
	        } // scope is the deepest object in the tree, keys is the theme path keys


	        scope[keys.slice(-1)[0]] = value;
	      }

	      if (!shouldSkipGeneratingVar || shouldSkipGeneratingVar && !shouldSkipGeneratingVar(keys, value)) {
	        // only create css & var if `shouldSkipGeneratingVar` return false
	        const cssVar = `--${prefix ? `${prefix}-` : ''}${keys.join('-')}`;
	        Object.assign(css, {
	          [cssVar]: getCssValue(keys, value)
	        });
	        assignNestedKeys(vars, keys, `var(${cssVar})`);
	      }
	    }
	  }, keys => keys[0] === 'vars' // skip 'vars/*' paths
	  );
	  return {
	    css,
	    vars
	  };
	}

	var getInitColorSchemeScript$1 = {};

	Object.defineProperty(getInitColorSchemeScript$1, "__esModule", {
	  value: true
	});
	getInitColorSchemeScript$1.DEFAULT_MODE_STORAGE_KEY = getInitColorSchemeScript$1.DEFAULT_COLOR_SCHEME_STORAGE_KEY = getInitColorSchemeScript$1.DEFAULT_ATTRIBUTE = void 0;
	getInitColorSchemeScript$1.default = getInitColorSchemeScript;

	_interopRequireWildcard$1F(require$$3);

	var _jsxRuntime$1t = jsxRuntime;

	function _getRequireWildcardCache$1F(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1F = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1F(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1F(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const DEFAULT_MODE_STORAGE_KEY = 'mui-mode';
	getInitColorSchemeScript$1.DEFAULT_MODE_STORAGE_KEY = DEFAULT_MODE_STORAGE_KEY;
	const DEFAULT_COLOR_SCHEME_STORAGE_KEY = 'mui-color-scheme';
	getInitColorSchemeScript$1.DEFAULT_COLOR_SCHEME_STORAGE_KEY = DEFAULT_COLOR_SCHEME_STORAGE_KEY;
	const DEFAULT_ATTRIBUTE = 'data-mui-color-scheme';
	getInitColorSchemeScript$1.DEFAULT_ATTRIBUTE = DEFAULT_ATTRIBUTE;

	function getInitColorSchemeScript(options) {
	  const {
	    enableSystem,
	    defaultLightColorScheme = 'light',
	    defaultDarkColorScheme = 'dark',
	    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
	    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
	    attribute = DEFAULT_ATTRIBUTE
	  } = options || {};
	  return /*#__PURE__*/(0, _jsxRuntime$1t.jsx)("script", {
	    // eslint-disable-next-line react/no-danger
	    dangerouslySetInnerHTML: {
	      __html: `(function() { try {
        var mode = localStorage.getItem('${modeStorageKey}');
        var colorScheme = '';
        if (mode === 'system' || (!mode && !!${enableSystem})) {
          // handle system mode
          var mql = window.matchMedia('(prefers-color-scheme: dark)');
          if (mql.matches) {
            colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
          } else {
            colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
          }
        }
        if (mode === 'light') {
          colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
        }
        if (mode === 'dark') {
          colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
        }
        if (colorScheme) {
          document.documentElement.setAttribute('${attribute}', colorScheme);
        }
      } catch (e) {} })();`
	    }
	  });
	}

	var useCurrentColorScheme$1 = {};

	var _interopRequireDefault$2b = interopRequireDefault.exports;

	Object.defineProperty(useCurrentColorScheme$1, "__esModule", {
	  value: true
	});
	useCurrentColorScheme$1.default = useCurrentColorScheme;
	useCurrentColorScheme$1.getColorScheme = getColorScheme;
	useCurrentColorScheme$1.getSystemMode = getSystemMode;

	var _extends2$1w = _interopRequireDefault$2b(_extends$5.exports);

	var React$1B = _interopRequireWildcard$1E(require$$3);

	var _getInitColorSchemeScript$1 = getInitColorSchemeScript$1;

	function _getRequireWildcardCache$1E(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1E = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1E(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1E(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function getSystemMode(mode) {
	  if (typeof window !== 'undefined' && mode === 'system') {
	    const mql = window.matchMedia('(prefers-color-scheme: dark)');

	    if (mql.matches) {
	      return 'dark';
	    }

	    return 'light';
	  }

	  return undefined;
	}

	function processState(state, callback) {
	  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {
	    return callback('light');
	  }

	  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {
	    return callback('dark');
	  }

	  return undefined;
	}

	function getColorScheme(state) {
	  return processState(state, mode => {
	    if (mode === 'light') {
	      return state.lightColorScheme;
	    }

	    if (mode === 'dark') {
	      return state.darkColorScheme;
	    }

	    return undefined;
	  });
	}

	function resolveValue(key, defaultValue) {
	  if (typeof window === 'undefined') {
	    return undefined;
	  }

	  let value;

	  try {
	    value = localStorage.getItem(key) || undefined;
	  } catch (e) {// Unsupported
	  }

	  return value || defaultValue;
	}

	function useCurrentColorScheme(options) {
	  const {
	    defaultMode = 'light',
	    defaultLightColorScheme,
	    defaultDarkColorScheme,
	    supportedColorSchemes = [],
	    modeStorageKey = _getInitColorSchemeScript$1.DEFAULT_MODE_STORAGE_KEY,
	    colorSchemeStorageKey = _getInitColorSchemeScript$1.DEFAULT_COLOR_SCHEME_STORAGE_KEY
	  } = options;
	  const joinedColorSchemes = supportedColorSchemes.join(',');
	  const [state, setState] = React$1B.useState(() => {
	    const initialMode = resolveValue(modeStorageKey, defaultMode);
	    return {
	      mode: initialMode,
	      systemMode: getSystemMode(initialMode),
	      lightColorScheme: resolveValue(`${colorSchemeStorageKey}-light`) || defaultLightColorScheme,
	      darkColorScheme: resolveValue(`${colorSchemeStorageKey}-dark`) || defaultDarkColorScheme
	    };
	  });
	  const colorScheme = getColorScheme(state);
	  const setMode = React$1B.useCallback(mode => {
	    setState(currentState => {
	      const newMode = !mode ? defaultMode : mode;

	      if (typeof localStorage !== 'undefined') {
	        localStorage.setItem(modeStorageKey, newMode);
	      }

	      return (0, _extends2$1w.default)({}, currentState, {
	        mode: newMode,
	        systemMode: getSystemMode(newMode)
	      });
	    });
	  }, [modeStorageKey, defaultMode]);
	  const setColorScheme = React$1B.useCallback(value => {
	    if (!value || typeof value === 'string') {
	      if (value && !supportedColorSchemes.includes(value)) {
	        console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
	      } else {
	        setState(currentState => {
	          const newState = (0, _extends2$1w.default)({}, currentState);

	          if (!value) {
	            // reset to default color scheme
	            newState.lightColorScheme = defaultLightColorScheme;
	            newState.darkColorScheme = defaultDarkColorScheme;
	            return newState;
	          }

	          processState(currentState, mode => {
	            localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);

	            if (mode === 'light') {
	              newState.lightColorScheme = value;
	            }

	            if (mode === 'dark') {
	              newState.darkColorScheme = value;
	            }
	          });
	          return newState;
	        });
	      }
	    } else if (value.light && !supportedColorSchemes.includes(value.light) || value.dark && !supportedColorSchemes.includes(value.dark)) {
	      console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
	    } else {
	      setState(currentState => {
	        const newState = (0, _extends2$1w.default)({}, currentState);

	        if (value.light || value.light === null) {
	          newState.lightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
	        }

	        if (value.dark || value.dark === null) {
	          newState.darkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
	        }

	        return newState;
	      });

	      if (value.light) {
	        localStorage.setItem(`${colorSchemeStorageKey}-light`, value.light);
	      }

	      if (value.dark) {
	        localStorage.setItem(`${colorSchemeStorageKey}-dark`, value.dark);
	      }
	    }
	  }, [colorSchemeStorageKey, supportedColorSchemes, defaultLightColorScheme, defaultDarkColorScheme]);
	  const handleMediaQuery = React$1B.useCallback(e => {
	    if (state.mode === 'system') {
	      setState(currentState => (0, _extends2$1w.default)({}, currentState, {
	        systemMode: e.matches ? 'dark' : 'light'
	      }));
	    }
	  }, [state.mode]); // Ref hack to avoid adding handleMediaQuery as a dep

	  const mediaListener = React$1B.useRef(handleMediaQuery);
	  mediaListener.current = handleMediaQuery;
	  React$1B.useEffect(() => {
	    const handler = (...args) => mediaListener.current(...args); // Always listen to System preference


	    const media = window.matchMedia('(prefers-color-scheme: dark)'); // Intentionally use deprecated listener methods to support iOS & old browsers

	    media.addListener(handler);
	    handler(media);
	    return () => media.removeListener(handler);
	  }, []); // Save mode, lightColorScheme & darkColorScheme to localStorage

	  React$1B.useEffect(() => {
	    if (state.mode) {
	      localStorage.setItem(modeStorageKey, state.mode);
	    }

	    processState(state, mode => {
	      if (mode === 'light') {
	        localStorage.setItem(`${colorSchemeStorageKey}-light`, state.lightColorScheme);
	      }

	      if (mode === 'dark') {
	        localStorage.setItem(`${colorSchemeStorageKey}-dark`, state.darkColorScheme);
	      }
	    });
	  }, [state, colorSchemeStorageKey, modeStorageKey]); // Handle when localStorage has changed

	  React$1B.useEffect(() => {
	    const handleStorage = event => {
	      const value = event.newValue;

	      if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {
	        // If the key is deleted, value will be null then reset color scheme to the default one.
	        if (event.key.endsWith('light')) {
	          setColorScheme({
	            light: value
	          });
	        }

	        if (event.key.endsWith('dark')) {
	          setColorScheme({
	            dark: value
	          });
	        }
	      }

	      if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {
	        setMode(value || defaultMode);
	      }
	    };

	    window.addEventListener('storage', handleStorage);
	    return () => window.removeEventListener('storage', handleStorage);
	  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode]);
	  return (0, _extends2$1w.default)({}, state, {
	    colorScheme,
	    setMode,
	    setColorScheme
	  });
	}

	var createGetCssVar$1 = {};

	Object.defineProperty(createGetCssVar$1, "__esModule", {
	  value: true
	});
	createGetCssVar$1.default = createGetCssVar;

	/**
	 * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable
	 * and they does not need to remember the prefix (defined once).
	 */
	function createGetCssVar(prefix = '') {
	  function appendVar(...vars) {
	    if (!vars.length) {
	      return '';
	    }

	    return `, var(--${prefix ? `${prefix}-` : ''}${vars[0]}${appendVar(...vars.slice(1))})`;
	  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.


	  const getCssVar = (field, ...vars) => {
	    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...vars)})`;
	  };

	  return getCssVar;
	}

	var _interopRequireDefault$2a = interopRequireDefault.exports;

	Object.defineProperty(createCssVarsProvider$1, "__esModule", {
	  value: true
	});
	createCssVarsProvider$1.DISABLE_CSS_TRANSITION = void 0;
	createCssVarsProvider$1.default = createCssVarsProvider;

	var _extends2$1v = _interopRequireDefault$2a(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1g = _interopRequireDefault$2a(objectWithoutPropertiesLoose.exports);

	var _utils$1h = utils$h;

	var React$1A = _interopRequireWildcard$1D(require$$3);

	var _propTypes$1i = _interopRequireDefault$2a(propTypes.exports);

	var _styledEngine = node$3;

	var _createSpacing = _interopRequireDefault$2a(createSpacing$1);

	var _createBreakpoints = _interopRequireDefault$2a(createBreakpoints$1);

	var _cssVarsParser = _interopRequireDefault$2a(cssVarsParser$1);

	var _ThemeProvider = _interopRequireDefault$2a(ThemeProvider$3);

	var _getInitColorSchemeScript = _interopRequireWildcard$1D(getInitColorSchemeScript$1);

	var _useCurrentColorScheme = _interopRequireDefault$2a(useCurrentColorScheme$1);

	var _createGetCssVar = _interopRequireDefault$2a(createGetCssVar$1);

	var _jsxRuntime$1s = jsxRuntime;

	const _excluded$1g = ["colorSchemes"],
	      _excluded2$6 = ["colorSchemes"],
	      _excluded3 = ["components"];

	function _getRequireWildcardCache$1D(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1D = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1D(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1D(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';
	createCssVarsProvider$1.DISABLE_CSS_TRANSITION = DISABLE_CSS_TRANSITION;

	function createCssVarsProvider(options) {
	  var _baseTheme$breakpoint;

	  const {
	    theme: baseTheme = {},
	    defaultMode: desisgnSystemMode = 'light',
	    defaultColorScheme: designSystemColorScheme,
	    disableTransitionOnChange = false,
	    enableColorScheme = true,
	    prefix: designSystemPrefix = '',
	    shouldSkipGeneratingVar
	  } = options;
	  const systemSpacing = (0, _createSpacing.default)(baseTheme.spacing);
	  const systemBreakpoints = (0, _createBreakpoints.default)((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});

	  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {
	    console.error(`MUI: \`${designSystemColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
	  }

	  const ColorSchemeContext = /*#__PURE__*/React$1A.createContext(undefined);

	  const useColorScheme = () => {
	    const value = React$1A.useContext(ColorSchemeContext);

	    if (!value) {
	      throw new Error(`MUI: \`useColorScheme\` must be called under <CssVarsProvider />` );
	    }

	    return value;
	  };

	  function CssVarsProvider({
	    children,
	    theme: themeProp = {},
	    prefix = designSystemPrefix,
	    modeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
	    attribute = _getInitColorSchemeScript.DEFAULT_ATTRIBUTE,
	    defaultMode = desisgnSystemMode,
	    defaultColorScheme = designSystemColorScheme
	  }) {
	    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.
	    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.
	    const clonedBaseTheme = React$1A.useMemo(() => JSON.parse(JSON.stringify(baseTheme)), []);
	    const {
	      colorSchemes: baseColorSchemes = {}
	    } = clonedBaseTheme,
	          restBaseTheme = (0, _objectWithoutPropertiesLoose2$1g.default)(clonedBaseTheme, _excluded$1g);
	    const {
	      colorSchemes: colorSchemesProp = {}
	    } = themeProp,
	          restThemeProp = (0, _objectWithoutPropertiesLoose2$1g.default)(themeProp, _excluded2$6);
	    const hasMounted = React$1A.useRef(false); // eslint-disable-next-line prefer-const

	    let _deepmerge = (0, _utils$1h.deepmerge)(restBaseTheme, restThemeProp),
	        {
	      components = {}
	    } = _deepmerge,
	        mergedTheme = (0, _objectWithoutPropertiesLoose2$1g.default)(_deepmerge, _excluded3);

	    const colorSchemes = (0, _utils$1h.deepmerge)(baseColorSchemes, colorSchemesProp);
	    const allColorSchemes = Object.keys(colorSchemes);
	    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;
	    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;
	    const {
	      mode,
	      setMode,
	      systemMode,
	      lightColorScheme,
	      darkColorScheme,
	      colorScheme,
	      setColorScheme
	    } = (0, _useCurrentColorScheme.default)({
	      supportedColorSchemes: allColorSchemes,
	      defaultLightColorScheme,
	      defaultDarkColorScheme,
	      modeStorageKey,
	      defaultMode
	    });

	    const resolvedColorScheme = (() => {
	      if (!colorScheme) {
	        // This scope occurs on the server
	        if (defaultMode === 'dark') {
	          return defaultDarkColorScheme;
	        } // use light color scheme, if default mode is 'light' | 'auto'


	        return defaultLightColorScheme;
	      }

	      return colorScheme;
	    })();

	    const {
	      css: rootCss,
	      vars: rootVars
	    } = (0, _cssVarsParser.default)(mergedTheme, {
	      prefix,
	      basePrefix: designSystemPrefix,
	      shouldSkipGeneratingVar
	    });
	    mergedTheme = (0, _extends2$1v.default)({}, mergedTheme, colorSchemes[resolvedColorScheme], {
	      components,
	      colorSchemes,
	      vars: rootVars,
	      spacing: themeProp.spacing ? (0, _createSpacing.default)(themeProp.spacing) : systemSpacing,
	      breakpoints: themeProp.breakpoints ? (0, _createBreakpoints.default)(themeProp.breakpoints) : systemBreakpoints,
	      getCssVar: (0, _createGetCssVar.default)(prefix)
	    });
	    const styleSheet = {};
	    Object.entries(colorSchemes).forEach(([key, scheme]) => {
	      const {
	        css,
	        vars
	      } = (0, _cssVarsParser.default)(scheme, {
	        prefix,
	        basePrefix: designSystemPrefix,
	        shouldSkipGeneratingVar
	      });
	      mergedTheme.vars = (0, _utils$1h.deepmerge)(mergedTheme.vars, vars);

	      const resolvedDefaultColorScheme = (() => {
	        if (typeof defaultColorScheme === 'string') {
	          return defaultColorScheme;
	        }

	        if (defaultMode === 'dark') {
	          return defaultColorScheme.dark;
	        }

	        return defaultColorScheme.light;
	      })();

	      if (key === resolvedDefaultColorScheme) {
	        styleSheet[':root'] = css;
	      } else {
	        styleSheet[`[${attribute}="${key}"]`] = css;
	      }
	    });
	    React$1A.useEffect(() => {
	      if (colorScheme) {
	        // attaches attribute to <html> because the css variables are attached to :root (html)
	        document.documentElement.setAttribute(attribute, colorScheme);
	      }
	    }, [colorScheme, attribute]);
	    (0, _utils$1h.unstable_useEnhancedEffect)(() => {
	      if (!mode || !enableColorScheme) {
	        return undefined;
	      }

	      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`

	      if (mode === 'system') {
	        document.documentElement.style.setProperty('color-scheme', systemMode);
	      } else {
	        document.documentElement.style.setProperty('color-scheme', mode);
	      }

	      return () => {
	        document.documentElement.style.setProperty('color-scheme', priorColorScheme);
	      };
	    }, [mode, systemMode]);
	    React$1A.useEffect(() => {
	      let timer;

	      if (disableTransitionOnChange && hasMounted.current) {
	        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313
	        const css = document.createElement('style');
	        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));
	        document.head.appendChild(css); // Force browser repaint

	        (() => window.getComputedStyle(document.body))();

	        timer = setTimeout(() => {
	          document.head.removeChild(css);
	        }, 1);
	      }

	      return () => {
	        clearTimeout(timer);
	      };
	    }, [colorScheme]);
	    React$1A.useEffect(() => {
	      hasMounted.current = true;
	      return () => {
	        hasMounted.current = false;
	      };
	    }, []);
	    return /*#__PURE__*/(0, _jsxRuntime$1s.jsxs)(ColorSchemeContext.Provider, {
	      value: {
	        mode,
	        setMode,
	        lightColorScheme,
	        darkColorScheme,
	        colorScheme,
	        setColorScheme,
	        allColorSchemes
	      },
	      children: [/*#__PURE__*/(0, _jsxRuntime$1s.jsx)(_styledEngine.GlobalStyles, {
	        styles: {
	          ':root': rootCss
	        }
	      }), /*#__PURE__*/(0, _jsxRuntime$1s.jsx)(_styledEngine.GlobalStyles, {
	        styles: styleSheet
	      }), /*#__PURE__*/(0, _jsxRuntime$1s.jsx)(_ThemeProvider.default, {
	        theme: mergedTheme,
	        children: children
	      })]
	    });
	  }

	  CssVarsProvider.propTypes = {
	    /**
	     * The body attribute name to attach colorScheme.
	     */
	    attribute: _propTypes$1i.default.string,

	    /**
	     * The component tree.
	     */
	    children: _propTypes$1i.default.node,

	    /**
	     * The initial color scheme used.
	     */
	    defaultColorScheme: _propTypes$1i.default.oneOfType([_propTypes$1i.default.string, _propTypes$1i.default.object]),

	    /**
	     * The initial mode used.
	     */
	    defaultMode: _propTypes$1i.default.string,

	    /**
	     * The key in the local storage used to store current color scheme.
	     */
	    modeStorageKey: _propTypes$1i.default.string,

	    /**
	     * CSS variable prefix.
	     */
	    prefix: _propTypes$1i.default.string,

	    /**
	     * The calculated theme object that will be passed through context.
	     */
	    theme: _propTypes$1i.default.object
	  } ;
	  return {
	    CssVarsProvider,
	    useColorScheme,
	    getInitColorSchemeScript: _getInitColorSchemeScript.default
	  };
	}

	/** @license MUI v5.4.0
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  css: true,
		  keyframes: true,
		  GlobalStyles: true,
		  StyledEngineProvider: true,
		  borders: true,
		  breakpoints: true,
		  handleBreakpoints: true,
		  mergeBreakpointsInOrder: true,
		  unstable_resolveBreakpointValues: true,
		  compose: true,
		  display: true,
		  flexbox: true,
		  grid: true,
		  palette: true,
		  positions: true,
		  shadows: true,
		  sizing: true,
		  spacing: true,
		  style: true,
		  getPath: true,
		  typography: true,
		  unstable_styleFunctionSx: true,
		  unstable_extendSxProp: true,
		  experimental_sx: true,
		  unstable_getThemeValue: true,
		  Box: true,
		  createBox: true,
		  createStyled: true,
		  styled: true,
		  createTheme: true,
		  createBreakpoints: true,
		  createSpacing: true,
		  shape: true,
		  useThemeProps: true,
		  getThemeProps: true,
		  useTheme: true,
		  useThemeWithoutDefault: true,
		  ThemeProvider: true,
		  unstable_createCssVarsProvider: true,
		  unstable_createGetCssVar: true
		};
		Object.defineProperty(exports, "Box", {
		  enumerable: true,
		  get: function () {
		    return _Box.default;
		  }
		});
		Object.defineProperty(exports, "GlobalStyles", {
		  enumerable: true,
		  get: function () {
		    return _styledEngine.GlobalStyles;
		  }
		});
		Object.defineProperty(exports, "StyledEngineProvider", {
		  enumerable: true,
		  get: function () {
		    return _styledEngine.StyledEngineProvider;
		  }
		});
		Object.defineProperty(exports, "ThemeProvider", {
		  enumerable: true,
		  get: function () {
		    return _ThemeProvider.default;
		  }
		});
		Object.defineProperty(exports, "borders", {
		  enumerable: true,
		  get: function () {
		    return _borders.default;
		  }
		});
		Object.defineProperty(exports, "breakpoints", {
		  enumerable: true,
		  get: function () {
		    return _breakpoints.default;
		  }
		});
		Object.defineProperty(exports, "compose", {
		  enumerable: true,
		  get: function () {
		    return _compose.default;
		  }
		});
		Object.defineProperty(exports, "createBox", {
		  enumerable: true,
		  get: function () {
		    return _createBox.default;
		  }
		});
		Object.defineProperty(exports, "createBreakpoints", {
		  enumerable: true,
		  get: function () {
		    return _createBreakpoints.default;
		  }
		});
		Object.defineProperty(exports, "createSpacing", {
		  enumerable: true,
		  get: function () {
		    return _createSpacing.default;
		  }
		});
		Object.defineProperty(exports, "createStyled", {
		  enumerable: true,
		  get: function () {
		    return _createStyled.default;
		  }
		});
		Object.defineProperty(exports, "createTheme", {
		  enumerable: true,
		  get: function () {
		    return _createTheme.default;
		  }
		});
		Object.defineProperty(exports, "css", {
		  enumerable: true,
		  get: function () {
		    return _styledEngine.css;
		  }
		});
		Object.defineProperty(exports, "display", {
		  enumerable: true,
		  get: function () {
		    return _display.default;
		  }
		});
		Object.defineProperty(exports, "experimental_sx", {
		  enumerable: true,
		  get: function () {
		    return _sx.default;
		  }
		});
		Object.defineProperty(exports, "flexbox", {
		  enumerable: true,
		  get: function () {
		    return _flexbox.default;
		  }
		});
		Object.defineProperty(exports, "getPath", {
		  enumerable: true,
		  get: function () {
		    return _style.getPath;
		  }
		});
		Object.defineProperty(exports, "getThemeProps", {
		  enumerable: true,
		  get: function () {
		    return _useThemeProps.getThemeProps;
		  }
		});
		Object.defineProperty(exports, "grid", {
		  enumerable: true,
		  get: function () {
		    return _grid.default;
		  }
		});
		Object.defineProperty(exports, "handleBreakpoints", {
		  enumerable: true,
		  get: function () {
		    return _breakpoints.handleBreakpoints;
		  }
		});
		Object.defineProperty(exports, "keyframes", {
		  enumerable: true,
		  get: function () {
		    return _styledEngine.keyframes;
		  }
		});
		Object.defineProperty(exports, "mergeBreakpointsInOrder", {
		  enumerable: true,
		  get: function () {
		    return _breakpoints.mergeBreakpointsInOrder;
		  }
		});
		Object.defineProperty(exports, "palette", {
		  enumerable: true,
		  get: function () {
		    return _palette.default;
		  }
		});
		Object.defineProperty(exports, "positions", {
		  enumerable: true,
		  get: function () {
		    return _positions.default;
		  }
		});
		Object.defineProperty(exports, "shadows", {
		  enumerable: true,
		  get: function () {
		    return _shadows.default;
		  }
		});
		Object.defineProperty(exports, "shape", {
		  enumerable: true,
		  get: function () {
		    return _shape.default;
		  }
		});
		Object.defineProperty(exports, "sizing", {
		  enumerable: true,
		  get: function () {
		    return _sizing.default;
		  }
		});
		Object.defineProperty(exports, "spacing", {
		  enumerable: true,
		  get: function () {
		    return _spacing.default;
		  }
		});
		Object.defineProperty(exports, "style", {
		  enumerable: true,
		  get: function () {
		    return _style.default;
		  }
		});
		Object.defineProperty(exports, "styled", {
		  enumerable: true,
		  get: function () {
		    return _styled.default;
		  }
		});
		Object.defineProperty(exports, "typography", {
		  enumerable: true,
		  get: function () {
		    return _typography.default;
		  }
		});
		Object.defineProperty(exports, "unstable_createCssVarsProvider", {
		  enumerable: true,
		  get: function () {
		    return _createCssVarsProvider.default;
		  }
		});
		Object.defineProperty(exports, "unstable_createGetCssVar", {
		  enumerable: true,
		  get: function () {
		    return _createGetCssVar.default;
		  }
		});
		Object.defineProperty(exports, "unstable_extendSxProp", {
		  enumerable: true,
		  get: function () {
		    return _styleFunctionSx.extendSxProp;
		  }
		});
		Object.defineProperty(exports, "unstable_getThemeValue", {
		  enumerable: true,
		  get: function () {
		    return _getThemeValue.default;
		  }
		});
		Object.defineProperty(exports, "unstable_resolveBreakpointValues", {
		  enumerable: true,
		  get: function () {
		    return _breakpoints.resolveBreakpointValues;
		  }
		});
		Object.defineProperty(exports, "unstable_styleFunctionSx", {
		  enumerable: true,
		  get: function () {
		    return _styleFunctionSx.default;
		  }
		});
		Object.defineProperty(exports, "useTheme", {
		  enumerable: true,
		  get: function () {
		    return _useTheme.default;
		  }
		});
		Object.defineProperty(exports, "useThemeProps", {
		  enumerable: true,
		  get: function () {
		    return _useThemeProps.default;
		  }
		});
		Object.defineProperty(exports, "useThemeWithoutDefault", {
		  enumerable: true,
		  get: function () {
		    return _useThemeWithoutDefault.default;
		  }
		});

		var _styledEngine = node$3;

		var _borders = _interopRequireWildcard(borders$1);

		Object.keys(_borders).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _borders[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _borders[key];
		    }
		  });
		});

		var _breakpoints = _interopRequireWildcard(breakpoints$1);

		var _compose = _interopRequireDefault(compose$2);

		var _display = _interopRequireDefault(display);

		var _flexbox = _interopRequireWildcard(flexbox$1);

		Object.keys(_flexbox).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _flexbox[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _flexbox[key];
		    }
		  });
		});

		var _grid = _interopRequireWildcard(grid$1);

		Object.keys(_grid).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _grid[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _grid[key];
		    }
		  });
		});

		var _palette = _interopRequireWildcard(palette$1);

		Object.keys(_palette).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _palette[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _palette[key];
		    }
		  });
		});

		var _positions = _interopRequireWildcard(positions);

		Object.keys(_positions).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _positions[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _positions[key];
		    }
		  });
		});

		var _shadows = _interopRequireDefault(shadows$2);

		var _sizing = _interopRequireWildcard(sizing$1);

		Object.keys(_sizing).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _sizing[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _sizing[key];
		    }
		  });
		});

		var _spacing = _interopRequireWildcard(spacing$1);

		Object.keys(_spacing).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _spacing[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _spacing[key];
		    }
		  });
		});

		var _style = _interopRequireWildcard(style$2);

		var _typography = _interopRequireWildcard(typography$1);

		Object.keys(_typography).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _typography[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _typography[key];
		    }
		  });
		});

		var _styleFunctionSx = _interopRequireWildcard(styleFunctionSx$2);

		var _sx = _interopRequireDefault(sx$2);

		var _getThemeValue = _interopRequireDefault(getThemeValue$1);

		var _Box = _interopRequireDefault(Box$6);

		var _createBox = _interopRequireDefault(createBox$1);

		var _createStyled = _interopRequireWildcard(createStyled$1);

		Object.keys(_createStyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _createStyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _createStyled[key];
		    }
		  });
		});

		var _styled = _interopRequireDefault(styled$3);

		var _createTheme = _interopRequireDefault(createTheme$4);

		var _createBreakpoints = _interopRequireDefault(createBreakpoints$1);

		var _createSpacing = _interopRequireDefault(createSpacing$1);

		var _shape = _interopRequireDefault(shape$1);

		var _useThemeProps = _interopRequireWildcard(useThemeProps$4);

		var _useTheme = _interopRequireDefault(useTheme$6);

		var _useThemeWithoutDefault = _interopRequireDefault(useThemeWithoutDefault);

		var _colorManipulator = colorManipulator;

		Object.keys(_colorManipulator).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _colorManipulator[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _colorManipulator[key];
		    }
		  });
		});

		var _ThemeProvider = _interopRequireDefault(ThemeProvider$3);

		var _createCssVarsProvider = _interopRequireDefault(createCssVarsProvider$1);

		var _createGetCssVar = _interopRequireDefault(createGetCssVar$1);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (system));

	var defaultTheme$2 = {};

	var createTheme$1 = {};

	var node$1 = {};

	var utils$d = {};

	var appendOwnerState$1 = {};

	var isHostComponent$1 = {};

	Object.defineProperty(isHostComponent$1, "__esModule", {
	  value: true
	});
	isHostComponent$1.default = void 0;

	/**
	 * Determines if a given element is a DOM element name (i.e. not a React component).
	 */
	function isHostComponent(element) {
	  return typeof element === 'string';
	}

	var _default$2$ = isHostComponent;
	isHostComponent$1.default = _default$2$;

	var _interopRequireDefault$29 = interopRequireDefault.exports;

	Object.defineProperty(appendOwnerState$1, "__esModule", {
	  value: true
	});
	appendOwnerState$1.default = appendOwnerState;

	var _extends2$1u = _interopRequireDefault$29(_extends$5.exports);

	var _isHostComponent$4 = _interopRequireDefault$29(isHostComponent$1);

	/**
	 * Appends the ownerState object to the props, merging with the existing one if necessary.
	 *
	 * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node, `ownerState` are not applied.
	 * @param existingProps Props of the element.
	 * @param ownerState
	 */
	function appendOwnerState(elementType, existingProps = {}, ownerState) {
	  if ((0, _isHostComponent$4.default)(elementType)) {
	    return existingProps;
	  }

	  return (0, _extends2$1u.default)({}, existingProps, {
	    ownerState: (0, _extends2$1u.default)({}, existingProps.ownerState, ownerState)
	  });
	}

	var areArraysEqual$1 = {};

	Object.defineProperty(areArraysEqual$1, "__esModule", {
	  value: true
	});
	areArraysEqual$1.default = areArraysEqual;

	function areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {
	  return array1.length === array2.length && array1.every((value, index) => itemComparer(value, array2[index]));
	}

	var extractEventHandlers$1 = {};

	Object.defineProperty(extractEventHandlers$1, "__esModule", {
	  value: true
	});
	extractEventHandlers$1.default = extractEventHandlers;

	/**
	 * Extracts event handlers from a given object.
	 * A prop is considered an event handler if it is a function and its name starts with `on`.
	 *
	 * @param object An object to extract event handlers from.
	 */
	function extractEventHandlers(object, excludeKeys = []) {
	  if (object === undefined) {
	    return {};
	  }

	  const result = {};
	  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {
	    result[prop] = object[prop];
	  });
	  return result;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "appendOwnerState", {
		  enumerable: true,
		  get: function () {
		    return _appendOwnerState.default;
		  }
		});
		Object.defineProperty(exports, "areArraysEqual", {
		  enumerable: true,
		  get: function () {
		    return _areArraysEqual.default;
		  }
		});
		Object.defineProperty(exports, "extractEventHandlers", {
		  enumerable: true,
		  get: function () {
		    return _extractEventHandlers.default;
		  }
		});
		Object.defineProperty(exports, "isHostComponent", {
		  enumerable: true,
		  get: function () {
		    return _isHostComponent.default;
		  }
		});

		var _appendOwnerState = _interopRequireDefault(appendOwnerState$1);

		var _areArraysEqual = _interopRequireDefault(areArraysEqual$1);

		var _extractEventHandlers = _interopRequireDefault(extractEventHandlers$1);

		var _isHostComponent = _interopRequireDefault(isHostComponent$1);
	} (utils$d));

	var AutocompleteUnstyled = {};

	var useAutocomplete$1 = {};

	var _interopRequireDefault$28 = interopRequireDefault.exports;

	Object.defineProperty(useAutocomplete$1, "__esModule", {
	  value: true
	});
	useAutocomplete$1.createFilterOptions = createFilterOptions;
	useAutocomplete$1.default = useAutocomplete;

	var _extends2$1t = _interopRequireDefault$28(_extends$5.exports);

	var React$1z = _interopRequireWildcard$1C(require$$3);

	var _utils$1g = utils$h;

	function _getRequireWildcardCache$1C(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1C = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1C(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1C(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/* eslint-disable no-constant-condition */
	// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript
	// Give up on IE11 support for this feature
	function stripDiacritics(string) {
	  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : string;
	}

	function createFilterOptions(config = {}) {
	  const {
	    ignoreAccents = true,
	    ignoreCase = true,
	    limit,
	    matchFrom = 'any',
	    stringify,
	    trim = false
	  } = config;
	  return (options, {
	    inputValue,
	    getOptionLabel
	  }) => {
	    let input = trim ? inputValue.trim() : inputValue;

	    if (ignoreCase) {
	      input = input.toLowerCase();
	    }

	    if (ignoreAccents) {
	      input = stripDiacritics(input);
	    }

	    const filteredOptions = options.filter(option => {
	      let candidate = (stringify || getOptionLabel)(option);

	      if (ignoreCase) {
	        candidate = candidate.toLowerCase();
	      }

	      if (ignoreAccents) {
	        candidate = stripDiacritics(candidate);
	      }

	      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
	    });
	    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;
	  };
	} // To replace with .findIndex() once we stop IE11 support.


	function findIndex(array, comp) {
	  for (let i = 0; i < array.length; i += 1) {
	    if (comp(array[i])) {
	      return i;
	    }
	  }

	  return -1;
	}

	const defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when pageup and pagedown keys are used.

	const pageSize$1 = 5;

	function useAutocomplete(props) {
	  const {
	    autoComplete = false,
	    autoHighlight = false,
	    autoSelect = false,
	    blurOnSelect = false,
	    disabled: disabledProp,
	    clearOnBlur = !props.freeSolo,
	    clearOnEscape = false,
	    componentName = 'useAutocomplete',
	    defaultValue = props.multiple ? [] : null,
	    disableClearable = false,
	    disableCloseOnSelect = false,
	    disabledItemsFocusable = false,
	    disableListWrap = false,
	    filterOptions = defaultFilterOptions,
	    filterSelectedOptions = false,
	    freeSolo = false,
	    getOptionDisabled,
	    getOptionLabel: getOptionLabelProp = option => {
	      var _option$label;

	      return (_option$label = option.label) != null ? _option$label : option;
	    },
	    isOptionEqualToValue = (option, value) => option === value,
	    groupBy,
	    handleHomeEndKeys = !props.freeSolo,
	    id: idProp,
	    includeInputInList = false,
	    inputValue: inputValueProp,
	    multiple = false,
	    onChange,
	    onClose,
	    onHighlightChange,
	    onInputChange,
	    onOpen,
	    open: openProp,
	    openOnFocus = false,
	    options,
	    readOnly = false,
	    selectOnFocus = !props.freeSolo,
	    value: valueProp
	  } = props;
	  const id = (0, _utils$1g.unstable_useId)(idProp);
	  let getOptionLabel = getOptionLabelProp;

	  getOptionLabel = option => {
	    const optionLabel = getOptionLabelProp(option);

	    if (typeof optionLabel !== 'string') {
	      {
	        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;
	        console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
	      }

	      return String(optionLabel);
	    }

	    return optionLabel;
	  };

	  const ignoreFocus = React$1z.useRef(false);
	  const firstFocus = React$1z.useRef(true);
	  const inputRef = React$1z.useRef(null);
	  const listboxRef = React$1z.useRef(null);
	  const [anchorEl, setAnchorEl] = React$1z.useState(null);
	  const [focusedTag, setFocusedTag] = React$1z.useState(-1);
	  const defaultHighlighted = autoHighlight ? 0 : -1;
	  const highlightedIndexRef = React$1z.useRef(defaultHighlighted);
	  const [value, setValueState] = (0, _utils$1g.unstable_useControlled)({
	    controlled: valueProp,
	    default: defaultValue,
	    name: componentName
	  });
	  const [inputValue, setInputValueState] = (0, _utils$1g.unstable_useControlled)({
	    controlled: inputValueProp,
	    default: '',
	    name: componentName,
	    state: 'inputValue'
	  });
	  const [focused, setFocused] = React$1z.useState(false);
	  const resetInputValue = React$1z.useCallback((event, newValue) => {
	    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false
	    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item
	    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;

	    if (!isOptionSelected && !clearOnBlur) {
	      return;
	    }

	    let newInputValue;

	    if (multiple) {
	      newInputValue = '';
	    } else if (newValue == null) {
	      newInputValue = '';
	    } else {
	      const optionLabel = getOptionLabel(newValue);
	      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';
	    }

	    if (inputValue === newInputValue) {
	      return;
	    }

	    setInputValueState(newInputValue);

	    if (onInputChange) {
	      onInputChange(event, newInputValue, 'reset');
	    }
	  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
	  const prevValue = React$1z.useRef();
	  React$1z.useEffect(() => {
	    const valueChange = value !== prevValue.current;
	    prevValue.current = value;

	    if (focused && !valueChange) {
	      return;
	    } // Only reset the input's value when freeSolo if the component's value changes.


	    if (freeSolo && !valueChange) {
	      return;
	    }

	    resetInputValue(null, value);
	  }, [value, resetInputValue, focused, prevValue, freeSolo]);
	  const [open, setOpenState] = (0, _utils$1g.unstable_useControlled)({
	    controlled: openProp,
	    default: false,
	    name: componentName,
	    state: 'open'
	  });
	  const [inputPristine, setInputPristine] = React$1z.useState(true);
	  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
	  const popupOpen = open && !readOnly;
	  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {
	    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {
	      return false;
	    }

	    return true;
	  }), // we use the empty string to manipulate `filterOptions` to not filter any options
	  // i.e. the filter predicate always returns true
	  {
	    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,
	    getOptionLabel
	  }) : [];
	  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;

	  {
	    if (value !== null && !freeSolo && options.length > 0) {
	      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));

	      if (missingValue.length > 0) {
	        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\n'));
	      }
	    }
	  }

	  const focusTag = (0, _utils$1g.unstable_useEventCallback)(tagToFocus => {
	    if (tagToFocus === -1) {
	      inputRef.current.focus();
	    } else {
	      anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
	    }
	  }); // Ensure the focusedTag is never inconsistent

	  React$1z.useEffect(() => {
	    if (multiple && focusedTag > value.length - 1) {
	      setFocusedTag(-1);
	      focusTag(-1);
	    }
	  }, [value, multiple, focusedTag, focusTag]);

	  function validOptionIndex(index, direction) {
	    if (!listboxRef.current || index === -1) {
	      return -1;
	    }

	    let nextFocus = index;

	    while (true) {
	      // Out of range
	      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {
	        return -1;
	      }

	      const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`); // Same logic as MenuList.js

	      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';

	      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {
	        // Move to the next element.
	        nextFocus += direction === 'next' ? 1 : -1;
	      } else {
	        return nextFocus;
	      }
	    }
	  }

	  const setHighlightedIndex = (0, _utils$1g.unstable_useEventCallback)(({
	    event,
	    index,
	    reason = 'auto'
	  }) => {
	    highlightedIndexRef.current = index; // does the index exist?

	    if (index === -1) {
	      inputRef.current.removeAttribute('aria-activedescendant');
	    } else {
	      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);
	    }

	    if (onHighlightChange) {
	      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
	    }

	    if (!listboxRef.current) {
	      return;
	    }

	    const prev = listboxRef.current.querySelector('[role="option"].Mui-focused');

	    if (prev) {
	      prev.classList.remove('Mui-focused');
	      prev.classList.remove('Mui-focusVisible');
	    }

	    const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]'); // "No results"

	    if (!listboxNode) {
	      return;
	    }

	    if (index === -1) {
	      listboxNode.scrollTop = 0;
	      return;
	    }

	    const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);

	    if (!option) {
	      return;
	    }

	    option.classList.add('Mui-focused');

	    if (reason === 'keyboard') {
	      option.classList.add('Mui-focusVisible');
	    } // Scroll active descendant into view.
	    // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js
	    //
	    // Consider this API instead once it has a better browser support:
	    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });


	    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {
	      const element = option;
	      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
	      const elementBottom = element.offsetTop + element.offsetHeight;

	      if (elementBottom > scrollBottom) {
	        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
	      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
	        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
	      }
	    }
	  });
	  const changeHighlightedIndex = (0, _utils$1g.unstable_useEventCallback)(({
	    event,
	    diff,
	    direction = 'next',
	    reason = 'auto'
	  }) => {
	    if (!popupOpen) {
	      return;
	    }

	    const getNextIndex = () => {
	      const maxIndex = filteredOptions.length - 1;

	      if (diff === 'reset') {
	        return defaultHighlighted;
	      }

	      if (diff === 'start') {
	        return 0;
	      }

	      if (diff === 'end') {
	        return maxIndex;
	      }

	      const newIndex = highlightedIndexRef.current + diff;

	      if (newIndex < 0) {
	        if (newIndex === -1 && includeInputInList) {
	          return -1;
	        }

	        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
	          return 0;
	        }

	        return maxIndex;
	      }

	      if (newIndex > maxIndex) {
	        if (newIndex === maxIndex + 1 && includeInputInList) {
	          return -1;
	        }

	        if (disableListWrap || Math.abs(diff) > 1) {
	          return maxIndex;
	        }

	        return 0;
	      }

	      return newIndex;
	    };

	    const nextIndex = validOptionIndex(getNextIndex(), direction);
	    setHighlightedIndex({
	      index: nextIndex,
	      reason,
	      event
	    }); // Sync the content of the input with the highlighted option.

	    if (autoComplete && diff !== 'reset') {
	      if (nextIndex === -1) {
	        inputRef.current.value = inputValue;
	      } else {
	        const option = getOptionLabel(filteredOptions[nextIndex]);
	        inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,
	        // a completion string, appears inline after the input cursor in the textbox.

	        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());

	        if (index === 0 && inputValue.length > 0) {
	          inputRef.current.setSelectionRange(inputValue.length, option.length);
	        }
	      }
	    }
	  });
	  const syncHighlightedIndex = React$1z.useCallback(() => {
	    if (!popupOpen) {
	      return;
	    }

	    const valueItem = multiple ? value[0] : value; // The popup is empty, reset

	    if (filteredOptions.length === 0 || valueItem == null) {
	      changeHighlightedIndex({
	        diff: 'reset'
	      });
	      return;
	    }

	    if (!listboxRef.current) {
	      return;
	    } // Synchronize the value with the highlighted index


	    if (valueItem != null) {
	      const currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible

	      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {
	        return;
	      }

	      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));

	      if (itemIndex === -1) {
	        changeHighlightedIndex({
	          diff: 'reset'
	        });
	      } else {
	        setHighlightedIndex({
	          index: itemIndex
	        });
	      }

	      return;
	    } // Prevent the highlighted index to leak outside the boundaries.


	    if (highlightedIndexRef.current >= filteredOptions.length - 1) {
	      setHighlightedIndex({
	        index: filteredOptions.length - 1
	      });
	      return;
	    } // Restore the focus to the previous index.


	    setHighlightedIndex({
	      index: highlightedIndexRef.current
	    }); // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [// Only sync the highlighted index when the option switch between empty and not
	  filteredOptions.length, // Don't sync the highlighted index with the value when multiple
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);
	  const handleListboxRef = (0, _utils$1g.unstable_useEventCallback)(node => {
	    (0, _utils$1g.unstable_setRef)(listboxRef, node);

	    if (!node) {
	      return;
	    }

	    syncHighlightedIndex();
	  });

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React$1z.useEffect(() => {
	      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {
	        console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\n'));
	      }
	    }, [componentName]);
	  }

	  React$1z.useEffect(() => {
	    syncHighlightedIndex();
	  }, [syncHighlightedIndex]);

	  const handleOpen = event => {
	    if (open) {
	      return;
	    }

	    setOpenState(true);
	    setInputPristine(true);

	    if (onOpen) {
	      onOpen(event);
	    }
	  };

	  const handleClose = (event, reason) => {
	    if (!open) {
	      return;
	    }

	    setOpenState(false);

	    if (onClose) {
	      onClose(event, reason);
	    }
	  };

	  const handleValue = (event, newValue, reason, details) => {
	    if (Array.isArray(value)) {
	      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
	        return;
	      }
	    } else if (value === newValue) {
	      return;
	    }

	    if (onChange) {
	      onChange(event, newValue, reason, details);
	    }

	    setValueState(newValue);
	  };

	  const isTouch = React$1z.useRef(false);

	  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {
	    let reason = reasonProp;
	    let newValue = option;

	    if (multiple) {
	      newValue = Array.isArray(value) ? value.slice() : [];

	      {
	        const matches = newValue.filter(val => isOptionEqualToValue(option, val));

	        if (matches.length > 1) {
	          console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} do not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\n'));
	        }
	      }

	      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));

	      if (itemIndex === -1) {
	        newValue.push(option);
	      } else if (origin !== 'freeSolo') {
	        newValue.splice(itemIndex, 1);
	        reason = 'removeOption';
	      }
	    }

	    resetInputValue(event, newValue);
	    handleValue(event, newValue, reason, {
	      option
	    });

	    if (!disableCloseOnSelect && !event.ctrlKey && !event.metaKey) {
	      handleClose(event, reason);
	    }

	    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {
	      inputRef.current.blur();
	    }
	  };

	  function validTagIndex(index, direction) {
	    if (index === -1) {
	      return -1;
	    }

	    let nextFocus = index;

	    while (true) {
	      // Out of range
	      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {
	        return -1;
	      }

	      const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`); // Same logic as MenuList.js

	      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {
	        nextFocus += direction === 'next' ? 1 : -1;
	      } else {
	        return nextFocus;
	      }
	    }
	  }

	  const handleFocusTag = (event, direction) => {
	    if (!multiple) {
	      return;
	    }

	    handleClose(event, 'toggleInput');
	    let nextTag = focusedTag;

	    if (focusedTag === -1) {
	      if (inputValue === '' && direction === 'previous') {
	        nextTag = value.length - 1;
	      }
	    } else {
	      nextTag += direction === 'next' ? 1 : -1;

	      if (nextTag < 0) {
	        nextTag = 0;
	      }

	      if (nextTag === value.length) {
	        nextTag = -1;
	      }
	    }

	    nextTag = validTagIndex(nextTag, direction);
	    setFocusedTag(nextTag);
	    focusTag(nextTag);
	  };

	  const handleClear = event => {
	    ignoreFocus.current = true;
	    setInputValueState('');

	    if (onInputChange) {
	      onInputChange(event, '', 'clear');
	    }

	    handleValue(event, multiple ? [] : null, 'clear');
	  };

	  const handleKeyDown = other => event => {
	    if (other.onKeyDown) {
	      other.onKeyDown(event);
	    }

	    if (event.defaultMuiPrevented) {
	      return;
	    }

	    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {
	      setFocusedTag(-1);
	      focusTag(-1);
	    } // Wait until IME is settled.


	    if (event.which !== 229) {
	      switch (event.key) {
	        case 'Home':
	          if (popupOpen && handleHomeEndKeys) {
	            // Prevent scroll of the page
	            event.preventDefault();
	            changeHighlightedIndex({
	              diff: 'start',
	              direction: 'next',
	              reason: 'keyboard',
	              event
	            });
	          }

	          break;

	        case 'End':
	          if (popupOpen && handleHomeEndKeys) {
	            // Prevent scroll of the page
	            event.preventDefault();
	            changeHighlightedIndex({
	              diff: 'end',
	              direction: 'previous',
	              reason: 'keyboard',
	              event
	            });
	          }

	          break;

	        case 'PageUp':
	          // Prevent scroll of the page
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: -pageSize$1,
	            direction: 'previous',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;

	        case 'PageDown':
	          // Prevent scroll of the page
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: pageSize$1,
	            direction: 'next',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;

	        case 'ArrowDown':
	          // Prevent cursor move
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: 1,
	            direction: 'next',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;

	        case 'ArrowUp':
	          // Prevent cursor move
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: -1,
	            direction: 'previous',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;

	        case 'ArrowLeft':
	          handleFocusTag(event, 'previous');
	          break;

	        case 'ArrowRight':
	          handleFocusTag(event, 'next');
	          break;

	        case 'Enter':
	          if (highlightedIndexRef.current !== -1 && popupOpen) {
	            const option = filteredOptions[highlightedIndexRef.current];
	            const disabled = getOptionDisabled ? getOptionDisabled(option) : false; // Avoid early form validation, let the end-users continue filling the form.

	            event.preventDefault();

	            if (disabled) {
	              return;
	            }

	            selectNewValue(event, option, 'selectOption'); // Move the selection to the end.

	            if (autoComplete) {
	              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
	            }
	          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {
	            if (multiple) {
	              // Allow people to add new values before they submit the form.
	              event.preventDefault();
	            }

	            selectNewValue(event, inputValue, 'createOption', 'freeSolo');
	          }

	          break;

	        case 'Escape':
	          if (popupOpen) {
	            // Avoid Opera to exit fullscreen mode.
	            event.preventDefault(); // Avoid the Modal to handle the event.

	            event.stopPropagation();
	            handleClose(event, 'escape');
	          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {
	            // Avoid Opera to exit fullscreen mode.
	            event.preventDefault(); // Avoid the Modal to handle the event.

	            event.stopPropagation();
	            handleClear(event);
	          }

	          break;

	        case 'Backspace':
	          if (multiple && !readOnly && inputValue === '' && value.length > 0) {
	            const index = focusedTag === -1 ? value.length - 1 : focusedTag;
	            const newValue = value.slice();
	            newValue.splice(index, 1);
	            handleValue(event, newValue, 'removeOption', {
	              option: value[index]
	            });
	          }

	          break;
	      }
	    }
	  };

	  const handleFocus = event => {
	    setFocused(true);

	    if (openOnFocus && !ignoreFocus.current) {
	      handleOpen(event);
	    }
	  };

	  const handleBlur = event => {
	    // Ignore the event when using the scrollbar with IE11
	    if (listboxRef.current !== null && listboxRef.current.parentElement.contains(document.activeElement)) {
	      inputRef.current.focus();
	      return;
	    }

	    setFocused(false);
	    firstFocus.current = true;
	    ignoreFocus.current = false;

	    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
	      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');
	    } else if (autoSelect && freeSolo && inputValue !== '') {
	      selectNewValue(event, inputValue, 'blur', 'freeSolo');
	    } else if (clearOnBlur) {
	      resetInputValue(event, value);
	    }

	    handleClose(event, 'blur');
	  };

	  const handleInputChange = event => {
	    const newValue = event.target.value;

	    if (inputValue !== newValue) {
	      setInputValueState(newValue);
	      setInputPristine(false);

	      if (onInputChange) {
	        onInputChange(event, newValue, 'input');
	      }
	    }

	    if (newValue === '') {
	      if (!disableClearable && !multiple) {
	        handleValue(event, null, 'clear');
	      }
	    } else {
	      handleOpen(event);
	    }
	  };

	  const handleOptionMouseOver = event => {
	    setHighlightedIndex({
	      event,
	      index: Number(event.currentTarget.getAttribute('data-option-index')),
	      reason: 'mouse'
	    });
	  };

	  const handleOptionTouchStart = () => {
	    isTouch.current = true;
	  };

	  const handleOptionClick = event => {
	    const index = Number(event.currentTarget.getAttribute('data-option-index'));
	    selectNewValue(event, filteredOptions[index], 'selectOption');
	    isTouch.current = false;
	  };

	  const handleTagDelete = index => event => {
	    const newValue = value.slice();
	    newValue.splice(index, 1);
	    handleValue(event, newValue, 'removeOption', {
	      option: value[index]
	    });
	  };

	  const handlePopupIndicator = event => {
	    if (open) {
	      handleClose(event, 'toggleInput');
	    } else {
	      handleOpen(event);
	    }
	  }; // Prevent input blur when interacting with the combobox


	  const handleMouseDown = event => {
	    if (event.target.getAttribute('id') !== id) {
	      event.preventDefault();
	    }
	  }; // Focus the input when interacting with the combobox


	  const handleClick = () => {
	    inputRef.current.focus();

	    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
	      inputRef.current.select();
	    }

	    firstFocus.current = false;
	  };

	  const handleInputMouseDown = event => {
	    if (inputValue === '' || !open) {
	      handlePopupIndicator(event);
	    }
	  };

	  let dirty = freeSolo && inputValue.length > 0;
	  dirty = dirty || (multiple ? value.length > 0 : value !== null);
	  let groupedOptions = filteredOptions;

	  if (groupBy) {
	    // used to keep track of key and indexes in the result array
	    const indexBy = new Map();
	    let warn = false;
	    groupedOptions = filteredOptions.reduce((acc, option, index) => {
	      const group = groupBy(option);

	      if (acc.length > 0 && acc[acc.length - 1].group === group) {
	        acc[acc.length - 1].options.push(option);
	      } else {
	        {
	          if (indexBy.get(group) && !warn) {
	            console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');
	            warn = true;
	          }

	          indexBy.set(group, true);
	        }

	        acc.push({
	          key: index,
	          index,
	          group,
	          options: [option]
	        });
	      }

	      return acc;
	    }, []);
	  }

	  if (disabledProp && focused) {
	    handleBlur();
	  }

	  return {
	    getRootProps: (other = {}) => (0, _extends2$1t.default)({
	      'aria-owns': listboxAvailable ? `${id}-listbox` : null,
	      role: 'combobox',
	      'aria-expanded': listboxAvailable
	    }, other, {
	      onKeyDown: handleKeyDown(other),
	      onMouseDown: handleMouseDown,
	      onClick: handleClick
	    }),
	    getInputLabelProps: () => ({
	      id: `${id}-label`,
	      htmlFor: id
	    }),
	    getInputProps: () => ({
	      id,
	      value: inputValue,
	      onBlur: handleBlur,
	      onFocus: handleFocus,
	      onChange: handleInputChange,
	      onMouseDown: handleInputMouseDown,
	      // if open then this is handled imperativeley so don't let react override
	      // only have an opinion about this when closed
	      'aria-activedescendant': popupOpen ? '' : null,
	      'aria-autocomplete': autoComplete ? 'both' : 'list',
	      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,
	      // Disable browser's suggestion that might overlap with the popup.
	      // Handle autocomplete but not autofill.
	      autoComplete: 'off',
	      ref: inputRef,
	      autoCapitalize: 'none',
	      spellCheck: 'false'
	    }),
	    getClearProps: () => ({
	      tabIndex: -1,
	      onClick: handleClear
	    }),
	    getPopupIndicatorProps: () => ({
	      tabIndex: -1,
	      onClick: handlePopupIndicator
	    }),
	    getTagProps: ({
	      index
	    }) => (0, _extends2$1t.default)({
	      key: index,
	      'data-tag-index': index,
	      tabIndex: -1
	    }, !readOnly && {
	      onDelete: handleTagDelete(index)
	    }),
	    getListboxProps: () => ({
	      role: 'listbox',
	      id: `${id}-listbox`,
	      'aria-labelledby': `${id}-label`,
	      ref: handleListboxRef,
	      onMouseDown: event => {
	        // Prevent blur
	        event.preventDefault();
	      }
	    }),
	    getOptionProps: ({
	      index,
	      option
	    }) => {
	      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));
	      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
	      return {
	        key: getOptionLabel(option),
	        tabIndex: -1,
	        role: 'option',
	        id: `${id}-option-${index}`,
	        onMouseOver: handleOptionMouseOver,
	        onClick: handleOptionClick,
	        onTouchStart: handleOptionTouchStart,
	        'data-option-index': index,
	        'aria-disabled': disabled,
	        'aria-selected': selected
	      };
	    },
	    id,
	    inputValue,
	    value,
	    dirty,
	    popupOpen,
	    focused: focused || focusedTag !== -1,
	    anchorEl,
	    setAnchorEl,
	    focusedTag,
	    groupedOptions
	  };
	}

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "createFilterOptions", {
		  enumerable: true,
		  get: function () {
		    return _useAutocomplete.createFilterOptions;
		  }
		});
		Object.defineProperty(exports, "useAutocomplete", {
		  enumerable: true,
		  get: function () {
		    return _useAutocomplete.default;
		  }
		});

		var _useAutocomplete = _interopRequireWildcard(useAutocomplete$1);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (AutocompleteUnstyled));

	var BackdropUnstyled$2 = {};

	var BackdropUnstyled$1 = {};

	var composeClasses$2 = {};

	var composeClasses$1 = {};

	Object.defineProperty(composeClasses$1, "__esModule", {
	  value: true
	});
	composeClasses$1.default = composeClasses;

	function composeClasses(slots, getUtilityClass, classes) {
	  const output = {};
	  Object.keys(slots).forEach( // `Objet.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
	  // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
	  slot => {
	    output[slot] = slots[slot].reduce((acc, key) => {
	      if (key) {
	        if (classes && classes[key]) {
	          acc.push(classes[key]);
	        }

	        acc.push(getUtilityClass(key));
	      }

	      return acc;
	    }, []).join(' ');
	  });
	  return output;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _composeClasses.default;
		  }
		});

		var _composeClasses = _interopRequireDefault(composeClasses$1);
	} (composeClasses$2));

	var backdropUnstyledClasses$1 = {};

	var generateUtilityClasses$2 = {};

	var generateUtilityClasses$1 = {};

	var generateUtilityClass$2 = {};

	var generateUtilityClass$1 = {};

	var ClassNameGenerator$1 = {};

	Object.defineProperty(ClassNameGenerator$1, "__esModule", {
	  value: true
	});
	ClassNameGenerator$1.default = void 0;

	const defaultGenerator = componentName => componentName;

	const createClassNameGenerator = () => {
	  let generate = defaultGenerator;
	  return {
	    configure(generator) {
	      generate = generator;
	    },

	    generate(componentName) {
	      return generate(componentName);
	    },

	    reset() {
	      generate = defaultGenerator;
	    }

	  };
	};

	const ClassNameGenerator = createClassNameGenerator();
	var _default$2_ = ClassNameGenerator;
	ClassNameGenerator$1.default = _default$2_;

	var _interopRequireDefault$27 = interopRequireDefault.exports;

	Object.defineProperty(generateUtilityClass$1, "__esModule", {
	  value: true
	});
	generateUtilityClass$1.default = generateUtilityClass;

	var _ClassNameGenerator = _interopRequireDefault$27(ClassNameGenerator$1);

	const globalStateClassesMapping = {
	  active: 'Mui-active',
	  checked: 'Mui-checked',
	  completed: 'Mui-completed',
	  disabled: 'Mui-disabled',
	  error: 'Mui-error',
	  expanded: 'Mui-expanded',
	  focused: 'Mui-focused',
	  focusVisible: 'Mui-focusVisible',
	  required: 'Mui-required',
	  selected: 'Mui-selected'
	};

	function generateUtilityClass(componentName, slot) {
	  const globalStateClass = globalStateClassesMapping[slot];
	  return globalStateClass || `${_ClassNameGenerator.default.generate(componentName)}-${slot}`;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  unstable_ClassNameGenerator: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _generateUtilityClass.default;
		  }
		});
		Object.defineProperty(exports, "unstable_ClassNameGenerator", {
		  enumerable: true,
		  get: function () {
		    return _ClassNameGenerator.default;
		  }
		});

		var _generateUtilityClass = _interopRequireWildcard(generateUtilityClass$1);

		Object.keys(_generateUtilityClass).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _generateUtilityClass[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _generateUtilityClass[key];
		    }
		  });
		});

		var _ClassNameGenerator = _interopRequireDefault(ClassNameGenerator$1);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (generateUtilityClass$2));

	var _interopRequireDefault$26 = interopRequireDefault.exports;

	Object.defineProperty(generateUtilityClasses$1, "__esModule", {
	  value: true
	});
	generateUtilityClasses$1.default = generateUtilityClasses;

	var _generateUtilityClass$f = _interopRequireDefault$26(generateUtilityClass$2);

	function generateUtilityClasses(componentName, slots) {
	  const result = {};
	  slots.forEach(slot => {
	    result[slot] = (0, _generateUtilityClass$f.default)(componentName, slot);
	  });
	  return result;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _generateUtilityClasses.default;
		  }
		});

		var _generateUtilityClasses = _interopRequireDefault(generateUtilityClasses$1);
	} (generateUtilityClasses$2));

	var _interopRequireDefault$25 = interopRequireDefault.exports;

	Object.defineProperty(backdropUnstyledClasses$1, "__esModule", {
	  value: true
	});
	backdropUnstyledClasses$1.default = void 0;
	backdropUnstyledClasses$1.getBackdropUtilityClass = getBackdropUtilityClass;

	var _generateUtilityClasses$e = _interopRequireDefault$25(generateUtilityClasses$2);

	var _generateUtilityClass$e = _interopRequireDefault$25(generateUtilityClass$2);

	function getBackdropUtilityClass(slot) {
	  return (0, _generateUtilityClass$e.default)('MuiBackdrop', slot);
	}

	const backdropUnstyledClasses = (0, _generateUtilityClasses$e.default)('MuiBackdrop', ['root', 'invisible']);
	var _default$2Z = backdropUnstyledClasses;
	backdropUnstyledClasses$1.default = _default$2Z;

	var _interopRequireDefault$24 = interopRequireDefault.exports;

	Object.defineProperty(BackdropUnstyled$1, "__esModule", {
	  value: true
	});
	BackdropUnstyled$1.default = void 0;

	var _extends2$1s = _interopRequireDefault$24(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1f = _interopRequireDefault$24(objectWithoutPropertiesLoose.exports);

	var React$1y = _interopRequireWildcard$1B(require$$3);

	var _propTypes$1h = _interopRequireDefault$24(propTypes.exports);

	var _clsx$X = _interopRequireDefault$24(clsx$1);

	var _composeClasses$d = _interopRequireDefault$24(composeClasses$2);

	var _isHostComponent$3 = _interopRequireDefault$24(isHostComponent$1);

	var _backdropUnstyledClasses = backdropUnstyledClasses$1;

	var _jsxRuntime$1r = jsxRuntime;

	const _excluded$1f = ["classes", "className", "invisible", "component", "components", "componentsProps", "theme"];

	function _getRequireWildcardCache$1B(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1B = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1B(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1B(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$U = ownerState => {
	  const {
	    classes,
	    invisible
	  } = ownerState;
	  const slots = {
	    root: ['root', invisible && 'invisible']
	  };
	  return (0, _composeClasses$d.default)(slots, _backdropUnstyledClasses.getBackdropUtilityClass, classes);
	};

	const BackdropUnstyled = /*#__PURE__*/React$1y.forwardRef(function BackdropUnstyled(props, ref) {
	  const {
	    classes: classesProp,
	    className,
	    invisible = false,
	    component = 'div',
	    components = {},
	    componentsProps = {},

	    /* eslint-disable react/prop-types */
	    theme
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$1f.default)(props, _excluded$1f);
	  const ownerState = (0, _extends2$1s.default)({}, props, {
	    classes: classesProp,
	    invisible
	  });
	  const classes = useUtilityClasses$U(ownerState);
	  const Root = components.Root || component;
	  const rootProps = componentsProps.root || {};
	  return /*#__PURE__*/(0, _jsxRuntime$1r.jsx)(Root, (0, _extends2$1s.default)({
	    "aria-hidden": true
	  }, rootProps, !(0, _isHostComponent$3.default)(Root) && {
	    as: component,
	    ownerState: (0, _extends2$1s.default)({}, ownerState, rootProps.ownerState),
	    theme
	  }, {
	    ref: ref
	  }, other, {
	    className: (0, _clsx$X.default)(classes.root, rootProps.className, className)
	  }));
	});
	BackdropUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$1h.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$1h.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$1h.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$1h.default.elementType,

	  /**
	   * The components used for each slot inside the Backdrop.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$1h.default.shape({
	    Root: _propTypes$1h.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Backdrop.
	   * @default {}
	   */
	  componentsProps: _propTypes$1h.default.shape({
	    root: _propTypes$1h.default.object
	  }),

	  /**
	   * If `true`, the backdrop is invisible.
	   * It can be used when rendering a popover or a custom select component.
	   * @default false
	   */
	  invisible: _propTypes$1h.default.bool
	} ;
	var _default$2Y = BackdropUnstyled;
	BackdropUnstyled$1.default = _default$2Y;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "backdropUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _backdropUnstyledClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _BackdropUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "getBackdropUtilityClass", {
		  enumerable: true,
		  get: function () {
		    return _backdropUnstyledClasses.getBackdropUtilityClass;
		  }
		});

		var _BackdropUnstyled = _interopRequireDefault(BackdropUnstyled$1);

		var _backdropUnstyledClasses = _interopRequireWildcard(backdropUnstyledClasses$1);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (BackdropUnstyled$2));

	var BadgeUnstyled$2 = {};

	var BadgeUnstyled$1 = {};

	var useBadge$1 = {};

	Object.defineProperty(useBadge$1, "__esModule", {
	  value: true
	});
	useBadge$1.default = useBadge;

	var _utils$1f = utils$h;

	function useBadge(props) {
	  const {
	    anchorOrigin: anchorOriginProp = {
	      vertical: 'top',
	      horizontal: 'right'
	    },
	    badgeContent: badgeContentProp,
	    invisible: invisibleProp,
	    max: maxProp = 99,
	    showZero = false,
	    variant: variantProp = 'standard'
	  } = props;
	  const prevProps = (0, _utils$1f.usePreviousProps)({
	    anchorOrigin: anchorOriginProp,
	    badgeContent: badgeContentProp,
	    max: maxProp,
	    variant: variantProp
	  });
	  let invisible = invisibleProp;

	  if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {
	    invisible = true;
	  }

	  const {
	    anchorOrigin = anchorOriginProp,
	    badgeContent,
	    max = maxProp,
	    variant = variantProp
	  } = invisible ? prevProps : props;
	  let displayValue = '';

	  if (variant !== 'dot') {
	    displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;
	  }

	  return {
	    anchorOrigin,
	    badgeContent,
	    invisible,
	    max,
	    variant,
	    displayValue
	  };
	}

	var badgeUnstyledClasses$1 = {};

	var _interopRequireDefault$23 = interopRequireDefault.exports;

	Object.defineProperty(badgeUnstyledClasses$1, "__esModule", {
	  value: true
	});
	badgeUnstyledClasses$1.default = void 0;
	badgeUnstyledClasses$1.getBadgeUtilityClass = getBadgeUtilityClass;

	var _generateUtilityClasses$d = _interopRequireDefault$23(generateUtilityClasses$2);

	var _generateUtilityClass$d = _interopRequireDefault$23(generateUtilityClass$2);

	function getBadgeUtilityClass(slot) {
	  return (0, _generateUtilityClass$d.default)('MuiBadge', slot);
	}

	const badgeUnstyledClasses = (0, _generateUtilityClasses$d.default)('MuiBadge', ['root', 'badge', 'dot', 'standard', 'anchorOriginTopLeft', 'anchorOriginTopRight', 'anchorOriginBottomLeft', 'anchorOriginBottomRight', 'invisible']);
	var _default$2X = badgeUnstyledClasses;
	badgeUnstyledClasses$1.default = _default$2X;

	var _interopRequireDefault$22 = interopRequireDefault.exports;

	Object.defineProperty(BadgeUnstyled$1, "__esModule", {
	  value: true
	});
	BadgeUnstyled$1.default = void 0;

	var _extends2$1r = _interopRequireDefault$22(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1e = _interopRequireDefault$22(objectWithoutPropertiesLoose.exports);

	var React$1x = _interopRequireWildcard$1A(require$$3);

	var _propTypes$1g = _interopRequireDefault$22(propTypes.exports);

	var _clsx$W = _interopRequireDefault$22(clsx$1);

	var _utils$1e = utils$h;

	var _composeClasses$c = _interopRequireDefault$22(composeClasses$2);

	var _appendOwnerState$7 = _interopRequireDefault$22(appendOwnerState$1);

	var _useBadge = _interopRequireDefault$22(useBadge$1);

	var _badgeUnstyledClasses = badgeUnstyledClasses$1;

	var _jsxRuntime$1q = jsxRuntime;

	const _excluded$1e = ["anchorOrigin", "classes", "badgeContent", "component", "children", "className", "components", "componentsProps", "invisible", "max", "showZero", "variant"];

	function _getRequireWildcardCache$1A(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1A = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1A(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1A(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$T = ownerState => {
	  const {
	    variant,
	    anchorOrigin,
	    invisible,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    badge: ['badge', variant, `anchorOrigin${(0, _utils$1e.unstable_capitalize)(anchorOrigin.vertical)}${(0, _utils$1e.unstable_capitalize)(anchorOrigin.horizontal)}`, invisible && 'invisible']
	  };
	  return (0, _composeClasses$c.default)(slots, _badgeUnstyledClasses.getBadgeUtilityClass, classes);
	};

	const BadgeUnstyled = /*#__PURE__*/React$1x.forwardRef(function BadgeUnstyled(props, ref) {
	  const {
	    anchorOrigin: anchorOriginProp = {
	      vertical: 'top',
	      horizontal: 'right'
	    },
	    classes: classesProp,
	    component,
	    children,
	    className,
	    components = {},
	    componentsProps = {},
	    max: maxProp = 99,
	    showZero = false,
	    variant: variantProp = 'standard'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$1e.default)(props, _excluded$1e);
	  const {
	    anchorOrigin,
	    badgeContent,
	    max,
	    variant,
	    displayValue,
	    invisible
	  } = (0, _useBadge.default)((0, _extends2$1r.default)({}, props, {
	    anchorOrigin: anchorOriginProp,
	    max: maxProp,
	    variant: variantProp
	  }));
	  const ownerState = (0, _extends2$1r.default)({}, props, {
	    anchorOrigin,
	    badgeContent,
	    classes: classesProp,
	    invisible,
	    max,
	    variant,
	    showZero
	  });
	  const classes = useUtilityClasses$T(ownerState);
	  const Root = component || components.Root || 'span';
	  const rootProps = (0, _appendOwnerState$7.default)(Root, (0, _extends2$1r.default)({}, other, componentsProps.root), ownerState);
	  const Badge = components.Badge || 'span';
	  const badgeProps = (0, _appendOwnerState$7.default)(Badge, componentsProps.badge, ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$1q.jsxs)(Root, (0, _extends2$1r.default)({}, rootProps, {
	    ref: ref
	  }, other, {
	    className: (0, _clsx$W.default)(classes.root, rootProps.className, className),
	    children: [children, /*#__PURE__*/(0, _jsxRuntime$1q.jsx)(Badge, (0, _extends2$1r.default)({}, badgeProps, {
	      className: (0, _clsx$W.default)(classes.badge, badgeProps.className),
	      children: displayValue
	    }))]
	  }));
	});
	BadgeUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The anchor of the badge.
	   * @default {
	   *   vertical: 'top',
	   *   horizontal: 'right',
	   * }
	   */
	  anchorOrigin: _propTypes$1g.default.shape({
	    horizontal: _propTypes$1g.default.oneOf(['left', 'right']).isRequired,
	    vertical: _propTypes$1g.default.oneOf(['bottom', 'top']).isRequired
	  }),

	  /**
	   * The content rendered within the badge.
	   */
	  badgeContent: _propTypes$1g.default.node,

	  /**
	   * The badge will be added relative to this node.
	   */
	  children: _propTypes$1g.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$1g.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$1g.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$1g.default.elementType,

	  /**
	   * The components used for each slot inside the Badge.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$1g.default.shape({
	    Badge: _propTypes$1g.default.elementType,
	    Root: _propTypes$1g.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Badge.
	   * @default {}
	   */
	  componentsProps: _propTypes$1g.default.shape({
	    badge: _propTypes$1g.default.object,
	    root: _propTypes$1g.default.object
	  }),

	  /**
	   * If `true`, the badge is invisible.
	   */
	  invisible: _propTypes$1g.default.bool,

	  /**
	   * Max count to show.
	   * @default 99
	   */
	  max: _propTypes$1g.default.number,

	  /**
	   * Controls whether the badge is hidden when `badgeContent` is zero.
	   * @default false
	   */
	  showZero: _propTypes$1g.default.bool,

	  /**
	   * The variant to use.
	   * @default 'standard'
	   */
	  variant: _propTypes$1g.default.string
	} ;
	var _default$2W = BadgeUnstyled;
	BadgeUnstyled$1.default = _default$2W;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "badgeUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _badgeUnstyledClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _BadgeUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "getBadgeUtilityClass", {
		  enumerable: true,
		  get: function () {
		    return _badgeUnstyledClasses.getBadgeUtilityClass;
		  }
		});
		Object.defineProperty(exports, "useBadge", {
		  enumerable: true,
		  get: function () {
		    return _useBadge.default;
		  }
		});

		var _BadgeUnstyled = _interopRequireDefault(BadgeUnstyled$1);

		var _useBadge = _interopRequireDefault(useBadge$1);

		var _badgeUnstyledClasses = _interopRequireWildcard(badgeUnstyledClasses$1);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (BadgeUnstyled$2));

	var ButtonUnstyled$2 = {};

	var ButtonUnstyled$1 = {};

	var buttonUnstyledClasses$1 = {};

	var _interopRequireDefault$21 = interopRequireDefault.exports;

	Object.defineProperty(buttonUnstyledClasses$1, "__esModule", {
	  value: true
	});
	buttonUnstyledClasses$1.default = void 0;
	buttonUnstyledClasses$1.getButtonUnstyledUtilityClass = getButtonUnstyledUtilityClass;

	var _generateUtilityClass$c = _interopRequireDefault$21(generateUtilityClass$2);

	var _generateUtilityClasses$c = _interopRequireDefault$21(generateUtilityClasses$2);

	function getButtonUnstyledUtilityClass(slot) {
	  return (0, _generateUtilityClass$c.default)('ButtonUnstyled', slot);
	}

	const buttonUnstyledClasses = (0, _generateUtilityClasses$c.default)('ButtonUnstyled', ['root', 'active', 'disabled', 'focusVisible']);
	var _default$2V = buttonUnstyledClasses;
	buttonUnstyledClasses$1.default = _default$2V;

	var useButton$1 = {};

	var _interopRequireDefault$20 = interopRequireDefault.exports;

	Object.defineProperty(useButton$1, "__esModule", {
	  value: true
	});
	useButton$1.default = useButton;

	var _extends2$1q = _interopRequireDefault$20(_extends$5.exports);

	var React$1w = _interopRequireWildcard$1z(require$$3);

	var _utils$1d = utils$h;

	var _extractEventHandlers$2 = _interopRequireDefault$20(extractEventHandlers$1);

	function _getRequireWildcardCache$1z(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1z = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1z(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1z(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function useButton(props) {
	  var _ref;

	  const {
	    component,
	    components = {},
	    disabled = false,
	    href,
	    ref,
	    tabIndex = 0,
	    to,
	    type
	  } = props;
	  const buttonRef = React$1w.useRef();
	  const [active, setActive] = React$1w.useState(false);
	  const {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref: focusVisibleRef
	  } = (0, _utils$1d.unstable_useIsFocusVisible)();
	  const [focusVisible, setFocusVisible] = React$1w.useState(false);

	  if (disabled && focusVisible) {
	    setFocusVisible(false);
	  }

	  React$1w.useEffect(() => {
	    isFocusVisibleRef.current = focusVisible;
	  }, [focusVisible, isFocusVisibleRef]);

	  const createHandleMouseLeave = otherHandlers => event => {
	    var _otherHandlers$onMous;

	    if (focusVisible) {
	      event.preventDefault();
	    }

	    (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
	  };

	  const createHandleBlur = otherHandlers => event => {
	    var _otherHandlers$onBlur;

	    handleBlurVisible(event);

	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }

	    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
	  };

	  const createHandleFocus = otherHandlers => event => {
	    var _otherHandlers$onFocu2;

	    // Fix for https://github.com/facebook/react/issues/7769
	    if (!buttonRef.current) {
	      buttonRef.current = event.currentTarget;
	    }

	    handleFocusVisible(event);

	    if (isFocusVisibleRef.current === true) {
	      var _otherHandlers$onFocu;

	      setFocusVisible(true);
	      (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
	    }

	    (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu2.call(otherHandlers, event);
	  };

	  const elementType = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';

	  const isNonNativeButton = () => {
	    const button = buttonRef.current;
	    return elementType !== 'button' && !((button == null ? void 0 : button.tagName) === 'A' && button != null && button.href);
	  };

	  const createHandleMouseDown = otherHandlers => event => {
	    var _otherHandlers$onMous2;

	    if (event.target === event.currentTarget && !disabled) {
	      setActive(true);
	    }

	    (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
	  };

	  const createHandleMouseUp = otherHandlers => event => {
	    var _otherHandlers$onMous3;

	    if (event.target === event.currentTarget) {
	      setActive(false);
	    }

	    (_otherHandlers$onMous3 = otherHandlers.onMouseUp) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
	  };

	  const createHandleKeyDown = otherHandlers => event => {
	    var _otherHandlers$onKeyD;

	    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
	      event.preventDefault();
	    }

	    if (event.target === event.currentTarget && event.key === ' ' && !disabled) {
	      setActive(true);
	    } // Keyboard accessibility for non interactive elements


	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
	      var _otherHandlers$onClic;

	      (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
	      event.preventDefault();
	    }
	  };

	  const createHandleKeyUp = otherHandlers => event => {
	    var _otherHandlers$onKeyU;

	    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
	    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
	    if (event.target === event.currentTarget) {
	      setActive(false);
	    }

	    (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event); // Keyboard accessibility for non interactive elements

	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
	      var _otherHandlers$onClic2;

	      (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
	    }
	  };

	  const handleOwnRef = (0, _utils$1d.unstable_useForkRef)(focusVisibleRef, buttonRef);
	  const handleRef = (0, _utils$1d.unstable_useForkRef)(ref, handleOwnRef);
	  const [hostElementName, setHostElementName] = React$1w.useState('');

	  const updateRef = instance => {
	    var _instance$tagName;

	    setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : '');
	    (0, _utils$1d.unstable_setRef)(handleRef, instance);
	  };

	  const buttonProps = {};

	  if (hostElementName === 'BUTTON') {
	    buttonProps.type = type != null ? type : 'button';
	    buttonProps.disabled = disabled;
	  } else if (hostElementName !== '') {
	    if (!href && !to) {
	      buttonProps.role = 'button';
	    }

	    if (disabled) {
	      buttonProps['aria-disabled'] = disabled;
	    }
	  }

	  const getRootProps = otherHandlers => {
	    const propsEventHandlers = (0, _extractEventHandlers$2.default)(props);
	    const externalEventHandlers = (0, _extends2$1q.default)({}, propsEventHandlers, otherHandlers);
	    const ownEventHandlers = {
	      onBlur: createHandleBlur(externalEventHandlers),
	      onFocus: createHandleFocus(externalEventHandlers),
	      onKeyDown: createHandleKeyDown(externalEventHandlers),
	      onKeyUp: createHandleKeyUp(externalEventHandlers),
	      onMouseDown: createHandleMouseDown(externalEventHandlers),
	      onMouseLeave: createHandleMouseLeave(externalEventHandlers),
	      onMouseUp: createHandleMouseUp(externalEventHandlers)
	    };
	    const mergedEventHandlers = (0, _extends2$1q.default)({}, externalEventHandlers, ownEventHandlers); // onFocusVisible can be present on the props, but since it's not a valid React event handler,
	    // it must not be forwarded to the inner component.

	    delete mergedEventHandlers.onFocusVisible;
	    return (0, _extends2$1q.default)({
	      tabIndex: disabled ? -1 : tabIndex,
	      type
	    }, buttonProps, mergedEventHandlers, {
	      ref: updateRef
	    });
	  };

	  return {
	    getRootProps,
	    focusVisible,
	    setFocusVisible,
	    disabled,
	    active
	  };
	}

	var _interopRequireDefault$1$ = interopRequireDefault.exports;

	Object.defineProperty(ButtonUnstyled$1, "__esModule", {
	  value: true
	});
	ButtonUnstyled$1.default = void 0;

	var _extends2$1p = _interopRequireDefault$1$(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1d = _interopRequireDefault$1$(objectWithoutPropertiesLoose.exports);

	var React$1v = _interopRequireWildcard$1y(require$$3);

	var _propTypes$1f = _interopRequireDefault$1$(propTypes.exports);

	var _clsx$V = _interopRequireDefault$1$(clsx$1);

	var _utils$1c = utils$h;

	var _composeClasses$b = _interopRequireDefault$1$(composeClasses$2);

	var _buttonUnstyledClasses = buttonUnstyledClasses$1;

	var _useButton = _interopRequireDefault$1$(useButton$1);

	var _appendOwnerState$6 = _interopRequireDefault$1$(appendOwnerState$1);

	var _jsxRuntime$1p = jsxRuntime;

	const _excluded$1d = ["className", "component", "components", "componentsProps", "children", "disabled", "action", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseLeave"];

	function _getRequireWildcardCache$1y(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1y = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1y(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1y(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$S = ownerState => {
	  const {
	    active,
	    disabled,
	    focusVisible
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']
	  };
	  return (0, _composeClasses$b.default)(slots, _buttonUnstyledClasses.getButtonUnstyledUtilityClass, {});
	};
	/**
	 * The foundation for building custom-styled buttons.
	 *
	 * Demos:
	 *
	 * - [Buttons](https://mui.com/components/buttons/)
	 *
	 * API:
	 *
	 * - [ButtonUnstyled API](https://mui.com/api/button-unstyled/)
	 */


	const ButtonUnstyled = /*#__PURE__*/React$1v.forwardRef(function ButtonUnstyled(props, ref) {
	  var _ref;

	  const {
	    className,
	    component,
	    components = {},
	    componentsProps = {},
	    children,
	    action
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$1d.default)(props, _excluded$1d);
	  const buttonRef = React$1v.useRef();
	  const handleRef = (0, _utils$1c.unstable_useForkRef)(buttonRef, ref);
	  const {
	    active,
	    focusVisible,
	    setFocusVisible,
	    getRootProps
	  } = (0, _useButton.default)((0, _extends2$1p.default)({}, props, {
	    ref: handleRef
	  }));
	  React$1v.useImperativeHandle(action, () => ({
	    focusVisible: () => {
	      setFocusVisible(true);
	      buttonRef.current.focus();
	    }
	  }), [setFocusVisible]);
	  const ownerState = (0, _extends2$1p.default)({}, props, {
	    active,
	    focusVisible
	  });
	  const ButtonRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
	  const buttonRootProps = (0, _appendOwnerState$6.default)(ButtonRoot, (0, _extends2$1p.default)({}, other, componentsProps.root), ownerState);
	  const classes = useUtilityClasses$S(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$1p.jsx)(ButtonRoot, (0, _extends2$1p.default)({}, getRootProps(), buttonRootProps, {
	    className: (0, _clsx$V.default)(classes.root, className, buttonRootProps.className),
	    children: children
	  }));
	});
	ButtonUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * A ref for imperative actions. It currently only supports `focusVisible()` action.
	   */
	  action: _propTypes$1f.default.oneOfType([_propTypes$1f.default.func, _propTypes$1f.default.shape({
	    current: _propTypes$1f.default.shape({
	      focusVisible: _propTypes$1f.default.func.isRequired
	    })
	  })]),

	  /**
	   * @ignore
	   */
	  children: _propTypes$1f.default.node,

	  /**
	   * @ignore
	   */
	  className: _propTypes$1f.default.string,

	  /**
	   * The component used for the Root slot.
	   * Either a string to use a HTML element or a component.
	   * This is equivalent to `components.Root`. If both are provided, the `component` is used.
	   * @default 'button'
	   */
	  component: _propTypes$1f.default.elementType,

	  /**
	   * The components used for each slot inside the Button.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$1f.default.shape({
	    Root: _propTypes$1f.default.elementType
	  }),

	  /**
	   * @ignore
	   */
	  componentsProps: _propTypes$1f.default.shape({
	    root: _propTypes$1f.default.object
	  }),

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: _propTypes$1f.default.bool,

	  /**
	   * @ignore
	   */
	  onFocusVisible: _propTypes$1f.default.func
	} ;
	var _default$2U = ButtonUnstyled;
	ButtonUnstyled$1.default = _default$2U;

	var ButtonUnstyledProps = {};

	Object.defineProperty(ButtonUnstyledProps, "__esModule", {
	  value: true
	});

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  buttonUnstyledClasses: true,
		  getButtonUnstyledUtilityClass: true,
		  useButton: true
		};
		Object.defineProperty(exports, "buttonUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _buttonUnstyledClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ButtonUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "getButtonUnstyledUtilityClass", {
		  enumerable: true,
		  get: function () {
		    return _buttonUnstyledClasses.getButtonUnstyledUtilityClass;
		  }
		});
		Object.defineProperty(exports, "useButton", {
		  enumerable: true,
		  get: function () {
		    return _useButton.default;
		  }
		});

		var _ButtonUnstyled = _interopRequireDefault(ButtonUnstyled$1);

		var _buttonUnstyledClasses = _interopRequireWildcard(buttonUnstyledClasses$1);

		var _ButtonUnstyledProps = ButtonUnstyledProps;

		Object.keys(_ButtonUnstyledProps).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _ButtonUnstyledProps[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _ButtonUnstyledProps[key];
		    }
		  });
		});

		var _useButton = _interopRequireDefault(useButton$1);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ButtonUnstyled$2));

	var ClickAwayListener$4 = {};

	var ClickAwayListener$3 = {};

	var _interopRequireDefault$1_ = interopRequireDefault.exports;

	Object.defineProperty(ClickAwayListener$3, "__esModule", {
	  value: true
	});
	ClickAwayListener$3.default = void 0;

	var React$1u = _interopRequireWildcard$1x(require$$3);

	var _propTypes$1e = _interopRequireDefault$1_(propTypes.exports);

	var _utils$1b = utils$h;

	var _jsxRuntime$1o = jsxRuntime;

	function _getRequireWildcardCache$1x(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1x = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1x(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1x(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	// TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1
	function mapEventPropToEvent(eventProp) {
	  return eventProp.substring(2).toLowerCase();
	}

	function clickedRootScrollbar(event, doc) {
	  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
	}

	/**
	 * Listen for click events that occur somewhere in the document, outside of the element itself.
	 * For instance, if you need to hide a menu when people click anywhere else on your page.
	 *
	 * Demos:
	 *
	 * - [Click Away Listener](https://mui.com/components/click-away-listener/)
	 * - [Menus](https://mui.com/components/menus/)
	 *
	 * API:
	 *
	 * - [ClickAwayListener API](https://mui.com/api/click-away-listener/)
	 */
	function ClickAwayListener$2(props) {
	  const {
	    children,
	    disableReactTree = false,
	    mouseEvent = 'onClick',
	    onClickAway,
	    touchEvent = 'onTouchEnd'
	  } = props;
	  const movedRef = React$1u.useRef(false);
	  const nodeRef = React$1u.useRef(null);
	  const activatedRef = React$1u.useRef(false);
	  const syntheticEventRef = React$1u.useRef(false);
	  React$1u.useEffect(() => {
	    // Ensure that this component is not "activated" synchronously.
	    // https://github.com/facebook/react/issues/20074
	    setTimeout(() => {
	      activatedRef.current = true;
	    }, 0);
	    return () => {
	      activatedRef.current = false;
	    };
	  }, []);
	  const handleRef = (0, _utils$1b.unstable_useForkRef)( // @ts-expect-error TODO upstream fix
	  children.ref, nodeRef); // The handler doesn't take event.defaultPrevented into account:
	  //
	  // event.preventDefault() is meant to stop default behaviors like
	  // clicking a checkbox to check it, hitting a button to submit a form,
	  // and hitting left arrow to move the cursor in a text input etc.
	  // Only special HTML elements have these default behaviors.

	  const handleClickAway = (0, _utils$1b.unstable_useEventCallback)(event => {
	    // Given developers can stop the propagation of the synthetic event,
	    // we can only be confident with a positive value.
	    const insideReactTree = syntheticEventRef.current;
	    syntheticEventRef.current = false;
	    const doc = (0, _utils$1b.unstable_ownerDocument)(nodeRef.current); // 1. IE11 support, which trigger the handleClickAway even after the unbind
	    // 2. The child might render null.
	    // 3. Behave like a blur listener.

	    if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {
	      return;
	    } // Do not act if user performed touchmove


	    if (movedRef.current) {
	      movedRef.current = false;
	      return;
	    }

	    let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js

	    if (event.composedPath) {
	      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
	    } else {
	      insideDOM = !doc.documentElement.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node
	      event.target) || nodeRef.current.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node
	      event.target);
	    }

	    if (!insideDOM && (disableReactTree || !insideReactTree)) {
	      onClickAway(event);
	    }
	  }); // Keep track of mouse/touch events that bubbled up through the portal.

	  const createHandleSynthetic = handlerName => event => {
	    syntheticEventRef.current = true;
	    const childrenPropsHandler = children.props[handlerName];

	    if (childrenPropsHandler) {
	      childrenPropsHandler(event);
	    }
	  };

	  const childrenProps = {
	    ref: handleRef
	  };

	  if (touchEvent !== false) {
	    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
	  }

	  React$1u.useEffect(() => {
	    if (touchEvent !== false) {
	      const mappedTouchEvent = mapEventPropToEvent(touchEvent);
	      const doc = (0, _utils$1b.unstable_ownerDocument)(nodeRef.current);

	      const handleTouchMove = () => {
	        movedRef.current = true;
	      };

	      doc.addEventListener(mappedTouchEvent, handleClickAway);
	      doc.addEventListener('touchmove', handleTouchMove);
	      return () => {
	        doc.removeEventListener(mappedTouchEvent, handleClickAway);
	        doc.removeEventListener('touchmove', handleTouchMove);
	      };
	    }

	    return undefined;
	  }, [handleClickAway, touchEvent]);

	  if (mouseEvent !== false) {
	    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
	  }

	  React$1u.useEffect(() => {
	    if (mouseEvent !== false) {
	      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
	      const doc = (0, _utils$1b.unstable_ownerDocument)(nodeRef.current);
	      doc.addEventListener(mappedMouseEvent, handleClickAway);
	      return () => {
	        doc.removeEventListener(mappedMouseEvent, handleClickAway);
	      };
	    }

	    return undefined;
	  }, [handleClickAway, mouseEvent]);
	  return /*#__PURE__*/(0, _jsxRuntime$1o.jsx)(React$1u.Fragment, {
	    children: /*#__PURE__*/React$1u.cloneElement(children, childrenProps)
	  });
	}

	ClickAwayListener$2.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The wrapped element.
	   */
	  children: _utils$1b.elementAcceptingRef.isRequired,

	  /**
	   * If `true`, the React tree is ignored and only the DOM tree is considered.
	   * This prop changes how portaled elements are handled.
	   * @default false
	   */
	  disableReactTree: _propTypes$1e.default.bool,

	  /**
	   * The mouse event to listen to. You can disable the listener by providing `false`.
	   * @default 'onClick'
	   */
	  mouseEvent: _propTypes$1e.default.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),

	  /**
	   * Callback fired when a "click away" event is detected.
	   */
	  onClickAway: _propTypes$1e.default.func.isRequired,

	  /**
	   * The touch event to listen to. You can disable the listener by providing `false`.
	   * @default 'onTouchEnd'
	   */
	  touchEvent: _propTypes$1e.default.oneOf(['onTouchEnd', 'onTouchStart', false])
	} ;

	{
	  // eslint-disable-next-line
	  ClickAwayListener$2['propTypes' + ''] = (0, _utils$1b.exactProp)(ClickAwayListener$2.propTypes);
	}

	var _default$2T = ClickAwayListener$2;
	ClickAwayListener$3.default = _default$2T;

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ClickAwayListener.default;
		  }
		});

		var _ClickAwayListener = _interopRequireWildcard(ClickAwayListener$3);

		Object.keys(_ClickAwayListener).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _ClickAwayListener[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _ClickAwayListener[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ClickAwayListener$4));

	var FormControlUnstyled$2 = {};

	var FormControlUnstyled$1 = {};

	var FormControlContext$2 = {};

	Object.defineProperty(FormControlContext$2, "__esModule", {
	  value: true
	});
	FormControlContext$2.default = void 0;

	var React$1t = _interopRequireWildcard$1w(require$$3);

	function _getRequireWildcardCache$1w(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1w = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1w(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1w(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * @ignore - internal component.
	 */
	const FormControlUnstyledContext = /*#__PURE__*/React$1t.createContext(undefined);

	{
	  FormControlUnstyledContext.displayName = 'FormControlUnstyledContext';
	}

	var _default$2S = FormControlUnstyledContext;
	FormControlContext$2.default = _default$2S;

	var formControlUnstyledClasses$1 = {};

	var _interopRequireDefault$1Z = interopRequireDefault.exports;

	Object.defineProperty(formControlUnstyledClasses$1, "__esModule", {
	  value: true
	});
	formControlUnstyledClasses$1.default = void 0;
	formControlUnstyledClasses$1.getFormControlUnstyledUtilityClasses = getFormControlUnstyledUtilityClasses;

	var _generateUtilityClass$b = _interopRequireDefault$1Z(generateUtilityClass$2);

	var _generateUtilityClasses$b = _interopRequireDefault$1Z(generateUtilityClasses$2);

	function getFormControlUnstyledUtilityClasses(slot) {
	  return (0, _generateUtilityClass$b.default)('MuiFormControl', slot);
	}

	const formControlUnstyledClasses = (0, _generateUtilityClasses$b.default)('MuiFormControl', ['root', 'disabled']);
	var _default$2R = formControlUnstyledClasses;
	formControlUnstyledClasses$1.default = _default$2R;

	var _interopRequireDefault$1Y = interopRequireDefault.exports;

	Object.defineProperty(FormControlUnstyled$1, "__esModule", {
	  value: true
	});
	FormControlUnstyled$1.default = void 0;

	var _extends2$1o = _interopRequireDefault$1Y(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1c = _interopRequireDefault$1Y(objectWithoutPropertiesLoose.exports);

	var React$1s = _interopRequireWildcard$1v(require$$3);

	var _propTypes$1d = _interopRequireDefault$1Y(propTypes.exports);

	var _clsx$U = _interopRequireDefault$1Y(clsx$1);

	var _utils$1a = utils$h;

	var _FormControlContext$4 = _interopRequireDefault$1Y(FormControlContext$2);

	var _appendOwnerState$5 = _interopRequireDefault$1Y(appendOwnerState$1);

	var _formControlUnstyledClasses = _interopRequireDefault$1Y(formControlUnstyledClasses$1);

	var _jsxRuntime$1n = jsxRuntime;

	const _excluded$1c = ["defaultValue", "children", "className", "component", "components", "componentsProps", "disabled", "error", "focused", "onChange", "required", "value"];

	function _getRequireWildcardCache$1v(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1v = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1v(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1v(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function hasValue$1(value) {
	  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';
	}

	/**
	 * Provides context such as filled/focused/error/required for form inputs.
	 * Relying on the context provides high flexibility and ensures that the state always stays
	 * consistent across the children of the `FormControl`.
	 * This context is used by the following components:
	 *
	 * *   FormLabel
	 * *   FormHelperText
	 * *   Input
	 * *   InputLabel
	 *
	 * You can find one composition example below and more going to [the demos](https://mui.com/components/text-fields/#components).
	 *
	 * ```jsx
	 * <FormControl>
	 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
	 *   <Input id="my-input" aria-describedby="my-helper-text" />
	 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
	 * </FormControl>
	 * ```
	 *
	 * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.
	 * For instance, only one input can be focused at the same time, the state shouldn't be shared.
	 *
	 * Demos:
	 *
	 * - [Text Fields](https://mui.com/components/text-fields/)
	 *
	 * API:
	 *
	 * - [FormControlUnstyled API](https://mui.com/api/form-control-unstyled/)
	 */
	const FormControlUnstyled = /*#__PURE__*/React$1s.forwardRef(function FormControlUnstyled(props, ref) {
	  var _ref;

	  const {
	    defaultValue,
	    children,
	    className,
	    component,
	    components = {},
	    componentsProps = {},
	    disabled = false,
	    error = false,
	    focused: visuallyFocused,
	    onChange,
	    required = false,
	    value: incomingValue
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$1c.default)(props, _excluded$1c);
	  const [value, setValue] = (0, _utils$1a.unstable_useControlled)({
	    controlled: incomingValue,
	    default: defaultValue,
	    name: 'FormControl',
	    state: 'value'
	  });
	  const filled = hasValue$1(value);
	  const [focusedState, setFocused] = React$1s.useState(false);

	  if (disabled && focusedState) {
	    setFocused(false);
	  }

	  const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;
	  const ownerState = (0, _extends2$1o.default)({}, props, {
	    disabled,
	    error,
	    filled,
	    focused,
	    required
	  });

	  let registerEffect = () => {};

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    const registeredInput = React$1s.useRef(false);

	    registerEffect = () => {
	      if (registeredInput.current) {
	        console.error(['MUI: There are multiple `Input` components inside a FormControl.', 'This creates visual inconsistencies, only use one `Input`.'].join('\n'));
	      }

	      registeredInput.current = true;
	      return () => {
	        registeredInput.current = false;
	      };
	    };
	  }

	  const handleChange = event => {
	    setValue(event.target.value);
	    onChange == null ? void 0 : onChange(event);
	  };

	  const childContext = {
	    disabled,
	    error,
	    filled,
	    focused,
	    onBlur: () => {
	      setFocused(false);
	    },
	    onChange: handleChange,
	    onFocus: () => {
	      setFocused(true);
	    },
	    registerEffect,
	    required,
	    value: value != null ? value : ''
	  };
	  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
	  const rootProps = (0, _appendOwnerState$5.default)(Root, (0, _extends2$1o.default)({}, other, componentsProps.root), ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$1n.jsx)(_FormControlContext$4.default.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/(0, _jsxRuntime$1n.jsx)(Root, (0, _extends2$1o.default)({
	      ref: ref
	    }, rootProps, {
	      className: (0, _clsx$U.default)(_formControlUnstyledClasses.default.root, className, rootProps == null ? void 0 : rootProps.className, disabled && _formControlUnstyledClasses.default.disabled),
	      children: children
	    }))
	  });
	});
	FormControlUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$1d.default.node,

	  /**
	   * Class name applied to the root element.
	   */
	  className: _propTypes$1d.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$1d.default.elementType,

	  /**
	   * The components used for each slot inside the FormControl.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$1d.default.shape({
	    Root: _propTypes$1d.default.elementType
	  }),

	  /**
	   * @ignore
	   */
	  componentsProps: _propTypes$1d.default.shape({
	    root: _propTypes$1d.default.object
	  }),

	  /**
	   * @ignore
	   */
	  defaultValue: _propTypes$1d.default.any,

	  /**
	   * If `true`, the label, input and helper text should be displayed in a disabled state.
	   * @default false
	   */
	  disabled: _propTypes$1d.default.bool,

	  /**
	   * If `true`, the label is displayed in an error state.
	   * @default false
	   */
	  error: _propTypes$1d.default.bool,

	  /**
	   * If `true`, the component is displayed in focused state.
	   * @default false
	   */
	  focused: _propTypes$1d.default.bool,

	  /**
	   * @ignore
	   */
	  onChange: _propTypes$1d.default.func,

	  /**
	   * If `true`, the label will indicate that the `input` is required.
	   * @default false
	   */
	  required: _propTypes$1d.default.bool,

	  /**
	   * @ignore
	   */
	  value: _propTypes$1d.default.any
	} ;
	var _default$2Q = FormControlUnstyled;
	FormControlUnstyled$1.default = _default$2Q;

	var useFormControl$2 = {};

	var _interopRequireDefault$1X = interopRequireDefault.exports;

	Object.defineProperty(useFormControl$2, "__esModule", {
	  value: true
	});
	useFormControl$2.default = useFormControlUnstyled;

	var React$1r = _interopRequireWildcard$1u(require$$3);

	var _FormControlContext$3 = _interopRequireDefault$1X(FormControlContext$2);

	function _getRequireWildcardCache$1u(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1u = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1u(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1u(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function useFormControlUnstyled() {
	  return React$1r.useContext(_FormControlContext$3.default);
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  FormControlUnstyledContext: true,
		  formControlUnstyledClasses: true,
		  useFormControlUnstyled: true
		};
		Object.defineProperty(exports, "FormControlUnstyledContext", {
		  enumerable: true,
		  get: function () {
		    return _FormControlContext.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _FormControlUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "formControlUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _formControlUnstyledClasses.default;
		  }
		});
		Object.defineProperty(exports, "useFormControlUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _useFormControl.default;
		  }
		});

		var _FormControlUnstyled = _interopRequireDefault(FormControlUnstyled$1);

		var _FormControlContext = _interopRequireDefault(FormControlContext$2);

		var _formControlUnstyledClasses = _interopRequireWildcard(formControlUnstyledClasses$1);

		Object.keys(_formControlUnstyledClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _formControlUnstyledClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _formControlUnstyledClasses[key];
		    }
		  });
		});

		var _useFormControl = _interopRequireDefault(useFormControl$2);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (FormControlUnstyled$2));

	var InputUnstyled$2 = {};

	var InputUnstyled$1 = {};

	var inputUnstyledClasses = {};

	var _interopRequireDefault$1W = interopRequireDefault.exports;

	Object.defineProperty(inputUnstyledClasses, "__esModule", {
	  value: true
	});
	inputUnstyledClasses.default = void 0;
	inputUnstyledClasses.getInputUnstyledUtilityClass = getInputUnstyledUtilityClass;

	var _generateUtilityClass$a = _interopRequireDefault$1W(generateUtilityClass$2);

	var _generateUtilityClasses$a = _interopRequireDefault$1W(generateUtilityClasses$2);

	function getInputUnstyledUtilityClass(slot) {
	  return (0, _generateUtilityClass$a.default)('MuiInput', slot);
	}

	const inputBaseClasses$2 = (0, _generateUtilityClasses$a.default)('MuiInput', ['root', 'formControl', 'focused', 'disabled', 'error', 'multiline', 'input', 'inputMultiline', 'inputTypeSearch', 'adornedStart', 'adornedEnd']);
	var _default$2P = inputBaseClasses$2;
	inputUnstyledClasses.default = _default$2P;

	var useInput$1 = {};

	var _interopRequireDefault$1V = interopRequireDefault.exports;

	Object.defineProperty(useInput$1, "__esModule", {
	  value: true
	});
	useInput$1.default = useInput;

	var _extends2$1n = _interopRequireDefault$1V(_extends$5.exports);

	var _utils$19 = utils$h;

	var React$1q = _interopRequireWildcard$1t(require$$3);

	var _useFormControl$7 = _interopRequireDefault$1V(useFormControl$2);

	var _extractEventHandlers$1 = _interopRequireDefault$1V(extractEventHandlers$1);

	function _getRequireWildcardCache$1t(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1t = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1t(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1t(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function useInput(props, inputRef) {
	  const {
	    defaultValue,
	    disabled: disabledProp = false,
	    error: errorProp = false,
	    onBlur,
	    onChange,
	    onFocus,
	    required: requiredProp = false,
	    value: valueProp
	  } = props;
	  const formControlContext = (0, _useFormControl$7.default)();
	  let value;
	  let required;
	  let disabled;
	  let error;

	  if (formControlContext) {
	    var _formControlContext$d, _formControlContext$r, _formControlContext$e;

	    value = formControlContext.value;
	    disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
	    required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
	    error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
	  } else {
	    value = valueProp;
	    disabled = disabledProp;
	    required = requiredProp;
	    error = errorProp;
	  }

	  const {
	    current: isControlled
	  } = React$1q.useRef(value != null);
	  const handleInputRefWarning = React$1q.useCallback(instance => {
	    {
	      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
	        console.error(['MUI: You have provided a `components.Input` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\n'));
	      }
	    }
	  }, []);
	  const internalInputRef = React$1q.useRef(null);
	  const handleIncomingRef = (0, _utils$19.unstable_useForkRef)(inputRef, handleInputRefWarning);
	  const handleInputRef = (0, _utils$19.unstable_useForkRef)(internalInputRef, handleIncomingRef);
	  const [focused, setFocused] = React$1q.useState(false); // The blur won't fire when the disabled state is set on a focused input.
	  // We need to book keep the focused state manually.

	  React$1q.useEffect(() => {
	    if (!formControlContext && disabled && focused) {
	      setFocused(false); // @ts-ignore

	      onBlur == null ? void 0 : onBlur();
	    }
	  }, [formControlContext, disabled, focused, onBlur]);

	  const handleFocus = otherHandlers => event => {
	    var _otherHandlers$onFocu;

	    // Fix a bug with IE11 where the focus/blur events are triggered
	    // while the component is disabled.
	    if (formControlContext != null && formControlContext.disabled) {
	      event.stopPropagation();
	      return;
	    }

	    (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);

	    if (formControlContext && formControlContext.onFocus) {
	      var _formControlContext$o;

	      formControlContext == null ? void 0 : (_formControlContext$o = formControlContext.onFocus) == null ? void 0 : _formControlContext$o.call(formControlContext);
	    } else {
	      setFocused(true);
	    }
	  };

	  const handleBlur = otherHandlers => event => {
	    var _otherHandlers$onBlur;

	    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);

	    if (formControlContext && formControlContext.onBlur) {
	      formControlContext.onBlur();
	    } else {
	      setFocused(false);
	    }
	  };

	  const handleChange = otherHandlers => (event, ...args) => {
	    var _formControlContext$o2, _otherHandlers$onChan;

	    if (!isControlled) {
	      const element = event.target || internalInputRef.current;

	      if (element == null) {
	        throw new Error(`MUI: Expected valid input target. Did you use a custom \`components.Input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` );
	      }
	    }

	    formControlContext == null ? void 0 : (_formControlContext$o2 = formControlContext.onChange) == null ? void 0 : _formControlContext$o2.call(formControlContext, event); // @ts-ignore

	    (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event, ...args);
	  };

	  const handleClick = otherHandlers => event => {
	    var _otherHandlers$onClic;

	    if (internalInputRef.current && event.currentTarget === event.target) {
	      internalInputRef.current.focus();
	    }

	    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
	  };

	  const getRootProps = externalProps => {
	    // onBlur, onChange and onFocus are forwarded to the input slot.
	    const propsEventHandlers = (0, _extractEventHandlers$1.default)(props, ['onBlur', 'onChange', 'onFocus']);
	    const externalEventHandlers = (0, _extends2$1n.default)({}, propsEventHandlers, (0, _extractEventHandlers$1.default)(externalProps));
	    return (0, _extends2$1n.default)({}, externalProps, externalEventHandlers, {
	      onClick: handleClick(externalEventHandlers)
	    });
	  };

	  const getInputProps = externalProps => {
	    const propsEventHandlers = {
	      onBlur,
	      onChange,
	      onFocus
	    };
	    const externalEventHandlers = (0, _extends2$1n.default)({}, propsEventHandlers, (0, _extractEventHandlers$1.default)(externalProps));
	    const mergedEventHandlers = (0, _extends2$1n.default)({}, externalProps, externalEventHandlers, {
	      onBlur: handleBlur(externalEventHandlers),
	      onChange: handleChange(externalEventHandlers),
	      onFocus: handleFocus(externalEventHandlers)
	    });
	    return (0, _extends2$1n.default)({}, mergedEventHandlers, {
	      'aria-invalid': error || undefined,
	      defaultValue: defaultValue,
	      ref: handleInputRef,
	      value: value,
	      required,
	      disabled
	    });
	  };

	  return {
	    disabled,
	    error,
	    focused,
	    formControlContext,
	    getInputProps,
	    getRootProps,
	    required,
	    value
	  };
	}

	var _interopRequireDefault$1U = interopRequireDefault.exports;

	Object.defineProperty(InputUnstyled$1, "__esModule", {
	  value: true
	});
	InputUnstyled$1.default = void 0;

	var _extends2$1m = _interopRequireDefault$1U(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1b = _interopRequireDefault$1U(objectWithoutPropertiesLoose.exports);

	var React$1p = _interopRequireWildcard$1s(require$$3);

	var _clsx$T = _interopRequireDefault$1U(clsx$1);

	var _propTypes$1c = _interopRequireDefault$1U(propTypes.exports);

	var _appendOwnerState$4 = _interopRequireDefault$1U(appendOwnerState$1);

	var _isHostComponent$2 = _interopRequireDefault$1U(isHostComponent$1);

	var _inputUnstyledClasses = _interopRequireDefault$1U(inputUnstyledClasses);

	var _useInput = _interopRequireDefault$1U(useInput$1);

	var _jsxRuntime$1m = jsxRuntime;

	const _excluded$1b = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "component", "components", "componentsProps", "defaultValue", "disabled", "endAdornment", "error", "id", "maxRows", "minRows", "multiline", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "rows", "type", "startAdornment", "value"];

	function _getRequireWildcardCache$1s(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1s = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1s(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1s(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 *
	 * Demos:
	 *
	 * - [Text Fields](https://mui.com/components/text-fields/)
	 *
	 * API:
	 *
	 * - [InputUnstyled API](https://mui.com/api/input-unstyled/)
	 */
	const InputUnstyled = /*#__PURE__*/React$1p.forwardRef(function InputUnstyled(props, ref) {
	  var _componentsProps$inpu, _ref, _componentsProps$root, _components$Input, _componentsProps$inpu2;

	  const {
	    'aria-describedby': ariaDescribedby,
	    'aria-label': ariaLabel,
	    'aria-labelledby': ariaLabelledby,
	    autoComplete,
	    autoFocus,
	    className,
	    component,
	    components = {},
	    componentsProps = {},
	    defaultValue,
	    disabled,
	    endAdornment,
	    error,
	    id,
	    maxRows,
	    minRows,
	    multiline = false,
	    name,
	    onClick,
	    onChange,
	    onKeyDown,
	    onKeyUp,
	    onFocus,
	    onBlur,
	    placeholder,
	    readOnly,
	    required,
	    rows,
	    type = 'text',
	    startAdornment,
	    value
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$1b.default)(props, _excluded$1b);
	  const {
	    getRootProps,
	    getInputProps,
	    focused,
	    formControlContext,
	    error: errorState,
	    disabled: disabledState
	  } = (0, _useInput.default)({
	    disabled,
	    defaultValue,
	    error,
	    onBlur,
	    onClick,
	    onChange,
	    onFocus,
	    required,
	    value
	  }, (_componentsProps$inpu = componentsProps.input) == null ? void 0 : _componentsProps$inpu.ref);
	  const ownerState = (0, _extends2$1m.default)({}, props, {
	    disabled: disabledState,
	    error: errorState,
	    focused,
	    formControlContext,
	    multiline,
	    type
	  });
	  const rootStateClasses = (0, _clsx$T.default)(disabledState && _inputUnstyledClasses.default.disabled, errorState && _inputUnstyledClasses.default.error, focused && _inputUnstyledClasses.default.focused, Boolean(formControlContext) && _inputUnstyledClasses.default.formControl, multiline && _inputUnstyledClasses.default.multiline, Boolean(startAdornment) && _inputUnstyledClasses.default.adornedStart, Boolean(endAdornment) && _inputUnstyledClasses.default.adornedEnd);
	  const inputStateClasses = (0, _clsx$T.default)(disabledState && _inputUnstyledClasses.default.disabled, multiline && _inputUnstyledClasses.default.multiline);
	  const propsToForward = {
	    'aria-describedby': ariaDescribedby,
	    'aria-label': ariaLabel,
	    'aria-labelledby': ariaLabelledby,
	    autoComplete,
	    autoFocus,
	    id,
	    onKeyDown,
	    onKeyUp,
	    name,
	    placeholder,
	    readOnly,
	    type
	  };
	  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
	  const rootProps = (0, _appendOwnerState$4.default)(Root, (0, _extends2$1m.default)({}, getRootProps((0, _extends2$1m.default)({}, other, componentsProps.root)), {
	    className: (0, _clsx$T.default)(_inputUnstyledClasses.default.root, rootStateClasses, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
	  }), ownerState);
	  let Input = (_components$Input = components.Input) != null ? _components$Input : 'input';
	  let inputProps = (0, _appendOwnerState$4.default)(Input, (0, _extends2$1m.default)({}, getInputProps((0, _extends2$1m.default)({}, componentsProps.input, propsToForward)), {
	    className: (0, _clsx$T.default)(_inputUnstyledClasses.default.input, inputStateClasses, (_componentsProps$inpu2 = componentsProps.input) == null ? void 0 : _componentsProps$inpu2.className)
	  }), ownerState);

	  if (multiline) {
	    var _components$Textarea, _components$Textarea2;

	    const hasHostTexarea = (0, _isHostComponent$2.default)((_components$Textarea = components.Textarea) != null ? _components$Textarea : 'textarea');

	    if (rows) {
	      {
	        if (minRows || maxRows) {
	          console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
	        }
	      }

	      inputProps = (0, _extends2$1m.default)({
	        type: undefined,
	        minRows: hasHostTexarea ? undefined : rows,
	        maxRows: hasHostTexarea ? undefined : rows
	      }, inputProps);
	    } else {
	      inputProps = (0, _extends2$1m.default)({
	        type: undefined,
	        maxRows: hasHostTexarea ? undefined : maxRows,
	        minRows: hasHostTexarea ? undefined : minRows
	      }, inputProps);
	    }

	    Input = (_components$Textarea2 = components.Textarea) != null ? _components$Textarea2 : 'textarea';
	  }

	  return /*#__PURE__*/(0, _jsxRuntime$1m.jsxs)(Root, (0, _extends2$1m.default)({}, rootProps, {
	    ref: ref,
	    children: [startAdornment, /*#__PURE__*/(0, _jsxRuntime$1m.jsx)(Input, (0, _extends2$1m.default)({}, inputProps)), endAdornment]
	  }));
	});
	InputUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  'aria-describedby': _propTypes$1c.default.string,

	  /**
	   * @ignore
	   */
	  'aria-label': _propTypes$1c.default.string,

	  /**
	   * @ignore
	   */
	  'aria-labelledby': _propTypes$1c.default.string,

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: _propTypes$1c.default.string,

	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   */
	  autoFocus: _propTypes$1c.default.bool,

	  /**
	   * @ignore
	   */
	  children: _propTypes$1c.default.node,

	  /**
	   * Class name applied to the root element.
	   */
	  className: _propTypes$1c.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$1c.default.elementType,

	  /**
	   * The components used for each slot inside the InputBase.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$1c.default.shape({
	    Input: _propTypes$1c.default.elementType,
	    Root: _propTypes$1c.default.elementType,
	    Textarea: _propTypes$1c.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: _propTypes$1c.default.shape({
	    input: _propTypes$1c.default.object,
	    root: _propTypes$1c.default.object
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: _propTypes$1c.default.any,

	  /**
	   * If `true`, the component is disabled.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  disabled: _propTypes$1c.default.bool,

	  /**
	   * Trailing adornment for this input.
	   */
	  endAdornment: _propTypes$1c.default.node,

	  /**
	   * If `true`, the `input` will indicate an error.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  error: _propTypes$1c.default.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: _propTypes$1c.default.string,

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  maxRows: _propTypes$1c.default.number,

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  minRows: _propTypes$1c.default.number,

	  /**
	   * If `true`, a `textarea` element is rendered.
	   * @default false
	   */
	  multiline: _propTypes$1c.default.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: _propTypes$1c.default.string,

	  /**
	   * @ignore
	   */
	  onBlur: _propTypes$1c.default.func,

	  /**
	   * @ignore
	   */
	  onChange: _propTypes$1c.default.func,

	  /**
	   * @ignore
	   */
	  onClick: _propTypes$1c.default.func,

	  /**
	   * @ignore
	   */
	  onFocus: _propTypes$1c.default.func,

	  /**
	   * @ignore
	   */
	  onKeyDown: _propTypes$1c.default.func,

	  /**
	   * @ignore
	   */
	  onKeyUp: _propTypes$1c.default.func,

	  /**
	   * The short hint displayed in the `input` before the user enters a value.
	   */
	  placeholder: _propTypes$1c.default.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: _propTypes$1c.default.bool,

	  /**
	   * If `true`, the `input` element is required.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  required: _propTypes$1c.default.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: _propTypes$1c.default.number,

	  /**
	   * Leading adornment for this input.
	   */
	  startAdornment: _propTypes$1c.default.node,

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   * @default 'text'
	   */
	  type: _propTypes$1c.default.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: _propTypes$1c.default.any
	} ;
	var _default$2O = InputUnstyled;
	InputUnstyled$1.default = _default$2O;

	var InputUnstyledProps = {};

	Object.defineProperty(InputUnstyledProps, "__esModule", {
	  value: true
	});

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  useInput: true,
		  inputUnstyledClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _InputUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "inputUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _inputUnstyledClasses.default;
		  }
		});
		Object.defineProperty(exports, "useInput", {
		  enumerable: true,
		  get: function () {
		    return _useInput.default;
		  }
		});

		var _InputUnstyled = _interopRequireDefault(InputUnstyled$1);

		var _InputUnstyledProps = InputUnstyledProps;

		Object.keys(_InputUnstyledProps).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _InputUnstyledProps[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _InputUnstyledProps[key];
		    }
		  });
		});

		var _useInput = _interopRequireDefault(useInput$1);

		var _inputUnstyledClasses = _interopRequireWildcard(inputUnstyledClasses);

		Object.keys(_inputUnstyledClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _inputUnstyledClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _inputUnstyledClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (InputUnstyled$2));

	var ListboxUnstyled = {};

	var useListbox$1 = {};

	var types = {};

	Object.defineProperty(types, "__esModule", {
	  value: true
	});
	types.ActionTypes = void 0;
	let ActionTypes$1;
	types.ActionTypes = ActionTypes$1;

	(function (ActionTypes) {
	  ActionTypes["blur"] = "blur";
	  ActionTypes["focus"] = "focus";
	  ActionTypes["keyDown"] = "keyDown";
	  ActionTypes["optionClick"] = "optionClick";
	  ActionTypes["setControlledValue"] = "setControlledValue";
	  ActionTypes["optionsChange"] = "optionsChange";
	})(ActionTypes$1 || (types.ActionTypes = ActionTypes$1 = {}));

	var defaultListboxReducer$1 = {};

	var _interopRequireDefault$1T = interopRequireDefault.exports;

	Object.defineProperty(defaultListboxReducer$1, "__esModule", {
	  value: true
	});
	defaultListboxReducer$1.default = defaultListboxReducer;

	var _extends2$1l = _interopRequireDefault$1T(_extends$5.exports);

	var _types$2 = types;

	const pageSize = 5;

	function findValidOptionToHighlight(index, lookupDirection, options, focusDisabled, isOptionDisabled, wrapAround) {
	  if (options.length === 0 || options.every((o, i) => isOptionDisabled(o, i))) {
	    return -1;
	  }

	  let nextFocus = index;

	  for (;;) {
	    // No valid options found
	    if (!wrapAround && lookupDirection === 'next' && nextFocus === options.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) {
	      return -1;
	    }

	    const nextFocusDisabled = focusDisabled ? false : isOptionDisabled(options[nextFocus], nextFocus);

	    if (nextFocusDisabled) {
	      nextFocus += lookupDirection === 'next' ? 1 : -1;

	      if (wrapAround) {
	        nextFocus = (nextFocus + options.length) % options.length;
	      }
	    } else {
	      return nextFocus;
	    }
	  }
	}

	function getNewHighlightedIndex(options, previouslyHighlightedIndex, diff, lookupDirection, highlightDisabled, isOptionDisabled, wrapAround) {
	  const maxIndex = options.length - 1;
	  const defaultHighlightedIndex = -1;
	  let nextIndexCandidate;

	  if (diff === 'reset') {
	    return defaultHighlightedIndex;
	  }

	  if (diff === 'start') {
	    nextIndexCandidate = 0;
	  } else if (diff === 'end') {
	    nextIndexCandidate = maxIndex;
	  } else {
	    const newIndex = previouslyHighlightedIndex + diff;

	    if (newIndex < 0) {
	      if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(diff) > 1) {
	        nextIndexCandidate = 0;
	      } else {
	        nextIndexCandidate = maxIndex;
	      }
	    } else if (newIndex > maxIndex) {
	      if (!wrapAround || Math.abs(diff) > 1) {
	        nextIndexCandidate = maxIndex;
	      } else {
	        nextIndexCandidate = 0;
	      }
	    } else {
	      nextIndexCandidate = newIndex;
	    }
	  }

	  const nextIndex = findValidOptionToHighlight(nextIndexCandidate, lookupDirection, options, highlightDisabled, isOptionDisabled, wrapAround);
	  return nextIndex;
	}

	function handleOptionSelection(option, state, props) {
	  const {
	    multiple,
	    optionComparer = (o, v) => o === v,
	    isOptionDisabled = () => false
	  } = props;
	  const {
	    selectedValue
	  } = state;
	  const optionIndex = props.options.indexOf(option);

	  if (isOptionDisabled(option, optionIndex)) {
	    return state;
	  }

	  if (multiple) {
	    var _ref, _ref2;

	    const selectedValues = (_ref = selectedValue) != null ? _ref : []; // if the option is already selected, remove it from the selection, otherwise add it

	    const newSelectedValues = selectedValues.some(sv => optionComparer(sv, option)) ? selectedValue.filter(v => !optionComparer(v, option)) : [...((_ref2 = selectedValue) != null ? _ref2 : []), option];
	    return {
	      selectedValue: newSelectedValues,
	      highlightedIndex: optionIndex
	    };
	  }

	  if (selectedValue != null && optionComparer(option, selectedValue)) {
	    return state;
	  }

	  return {
	    selectedValue: option,
	    highlightedIndex: optionIndex
	  };
	}

	function handleKeyDown(event, state, props) {
	  const {
	    options,
	    isOptionDisabled,
	    disableListWrap,
	    disabledItemsFocusable
	  } = props;

	  const moveHighlight = (diff, direction, wrapAround) => {
	    return getNewHighlightedIndex(options, state.highlightedIndex, diff, direction, disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, wrapAround);
	  };

	  switch (event.key) {
	    case 'Home':
	      return (0, _extends2$1l.default)({}, state, {
	        highlightedIndex: moveHighlight('start', 'next', false)
	      });

	    case 'End':
	      return (0, _extends2$1l.default)({}, state, {
	        highlightedIndex: moveHighlight('end', 'previous', false)
	      });

	    case 'PageUp':
	      return (0, _extends2$1l.default)({}, state, {
	        highlightedIndex: moveHighlight(-pageSize, 'previous', false)
	      });

	    case 'PageDown':
	      return (0, _extends2$1l.default)({}, state, {
	        highlightedIndex: moveHighlight(pageSize, 'next', false)
	      });

	    case 'ArrowUp':
	      // TODO: extend current selection with Shift modifier
	      return (0, _extends2$1l.default)({}, state, {
	        highlightedIndex: moveHighlight(-1, 'previous', !(disableListWrap != null ? disableListWrap : false))
	      });

	    case 'ArrowDown':
	      // TODO: extend current selection with Shift modifier
	      return (0, _extends2$1l.default)({}, state, {
	        highlightedIndex: moveHighlight(1, 'next', !(disableListWrap != null ? disableListWrap : false))
	      });

	    case 'Enter':
	    case ' ':
	      if (state.highlightedIndex === -1 || options[state.highlightedIndex] === undefined) {
	        return state;
	      }

	      return handleOptionSelection(options[state.highlightedIndex], state, props);
	  }

	  return state;
	}

	function handleBlur(state) {
	  return (0, _extends2$1l.default)({}, state, {
	    highlightedIndex: -1
	  });
	}

	function handleOptionsChange(options, previousOptions, state, props) {
	  var _options$find;

	  const {
	    multiple,
	    optionComparer
	  } = props;
	  const highlightedOption = previousOptions[state.highlightedIndex];
	  const hightlightedOptionNewIndex = options.findIndex(option => optionComparer(option, highlightedOption));

	  if (multiple) {
	    var _ref3;

	    // exclude selected values that are no longer in the options
	    const selectedValues = (_ref3 = state.selectedValue) != null ? _ref3 : [];
	    const newSelectedValues = selectedValues.filter(selectedValue => options.some(option => optionComparer(option, selectedValue)));
	    return {
	      highlightedIndex: hightlightedOptionNewIndex,
	      selectedValue: newSelectedValues
	    };
	  }

	  const newSelectedValue = (_options$find = options.find(option => optionComparer(option, state.selectedValue))) != null ? _options$find : null;
	  return {
	    highlightedIndex: hightlightedOptionNewIndex,
	    selectedValue: newSelectedValue
	  };
	}

	function defaultListboxReducer(state, action) {
	  const {
	    type
	  } = action;

	  switch (type) {
	    case _types$2.ActionTypes.keyDown:
	      return handleKeyDown(action.event, state, action.props);

	    case _types$2.ActionTypes.optionClick:
	      return handleOptionSelection(action.option, state, action.props);

	    case _types$2.ActionTypes.blur:
	      return handleBlur(state);

	    case _types$2.ActionTypes.setControlledValue:
	      return (0, _extends2$1l.default)({}, state, {
	        selectedValue: action.value
	      });

	    case _types$2.ActionTypes.optionsChange:
	      return handleOptionsChange(action.options, action.previousOptions, state, action.props);

	    default:
	      return state;
	  }
	}

	var useControllableReducer$1 = {};

	var _interopRequireDefault$1S = interopRequireDefault.exports;

	Object.defineProperty(useControllableReducer$1, "__esModule", {
	  value: true
	});
	useControllableReducer$1.default = useControllableReducer;

	var React$1o = _interopRequireWildcard$1r(require$$3);

	var _utils$18 = utils$h;

	var _types$1 = types;

	var _areArraysEqual$1 = _interopRequireDefault$1S(areArraysEqual$1);

	function _getRequireWildcardCache$1r(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1r = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1r(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1r(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * Triggers change event handlers when reducer returns changed state.
	 */
	function useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {
	  const valueRef = React$1o.useRef(value);
	  valueRef.current = value;
	  const onValueChangeRef = React$1o.useRef(onValueChange);
	  onValueChangeRef.current = onValueChange;
	  const onHighlightChangeRef = React$1o.useRef(onHighlightChange);
	  onHighlightChangeRef.current = onHighlightChange;
	  React$1o.useEffect(() => {
	    if (Array.isArray(state.selectedValue)) {
	      if ((0, _areArraysEqual$1.default)(state.selectedValue, valueRef.current)) {
	        return;
	      }
	    } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) {
	      return;
	    }

	    setValueState(state.selectedValue);

	    if (state.selectedValue != null) {
	      var _onValueChangeRef$cur;

	      // @ts-ignore We know that selectedValue has the correct type depending on `selectMultiple` prop.
	      (_onValueChangeRef$cur = onValueChangeRef.current) == null ? void 0 : _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);
	    }
	  }, [state.selectedValue, setValueState, optionComparer]);
	  React$1o.useEffect(() => {
	    // Fire the highlightChange event when reducer returns changed `highlightedIndex`.
	    if (state.highlightedIndex === -1) {
	      var _onHighlightChangeRef;

	      (_onHighlightChangeRef = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef.call(onHighlightChangeRef, null);
	    } else {
	      var _onHighlightChangeRef2;

	      (_onHighlightChangeRef2 = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef2.call(onHighlightChangeRef, options[state.highlightedIndex]);
	    }
	  }, [state.highlightedIndex, options]);
	}

	function useControllableReducer(internalReducer, externalReducer, props) {
	  const {
	    value: controlledValue,
	    defaultValue,
	    onChange: onValueChange,
	    onHighlightChange,
	    options,
	    optionComparer
	  } = props;
	  const propsRef = React$1o.useRef(props);
	  propsRef.current = props;
	  const [value, setValueState] = (0, _utils$18.unstable_useControlled)({
	    controlled: controlledValue,
	    default: defaultValue,
	    name: 'useListbox'
	  });
	  const previousValueRef = React$1o.useRef(null);
	  const [state, dispatch] = React$1o.useReducer(externalReducer != null ? externalReducer : internalReducer, {
	    highlightedIndex: -1,
	    selectedValue: value
	  });
	  const optionComparerRef = React$1o.useRef(optionComparer);
	  optionComparerRef.current = optionComparer;
	  React$1o.useEffect(() => {
	    // Detect external changes to the controlled `value` prop and update the state.
	    if (controlledValue === undefined) {
	      return;
	    }

	    if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && (0, _areArraysEqual$1.default)(previousValueRef.current, controlledValue, optionComparerRef.current)) {
	      // `value` is an array and it did not change.
	      return;
	    }

	    if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) {
	      // `value` is a single option and it did not change.
	      return;
	    }

	    previousValueRef.current = controlledValue;
	    dispatch({
	      type: _types$1.ActionTypes.setControlledValue,
	      value: controlledValue,
	      props: propsRef.current
	    });
	  }, [controlledValue]);
	  useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);
	  return [state, dispatch];
	}

	var _interopRequireDefault$1R = interopRequireDefault.exports;

	Object.defineProperty(useListbox$1, "__esModule", {
	  value: true
	});
	useListbox$1.default = useListbox;

	var _extends2$1k = _interopRequireDefault$1R(_extends$5.exports);

	var React$1n = _interopRequireWildcard$1q(require$$3);

	var _utils$17 = utils$h;

	var _types = types;

	var _defaultListboxReducer = _interopRequireDefault$1R(defaultListboxReducer$1);

	var _useControllableReducer = _interopRequireDefault$1R(useControllableReducer$1);

	var _areArraysEqual = _interopRequireDefault$1R(areArraysEqual$1);

	function _getRequireWildcardCache$1q(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1q = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1q(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1q(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const defaultOptionComparer = (optionA, optionB) => optionA === optionB;

	function useListbox(props) {
	  var _props$optionIdGenera, _options$highlightedI;

	  const {
	    disableListWrap = false,
	    disabledItemsFocusable = false,
	    id,
	    options,
	    multiple = false,
	    isOptionDisabled = () => false,
	    optionComparer = defaultOptionComparer,
	    stateReducer: externalReducer,
	    listboxRef: externalListboxRef
	  } = props;

	  function defaultIdGenerator(_, index) {
	    return `${id}-option-${index}`;
	  }

	  const optionIdGenerator = (_props$optionIdGenera = props.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;
	  const propsWithDefaults = (0, _extends2$1k.default)({}, props, {
	    disableListWrap,
	    disabledItemsFocusable,
	    isOptionDisabled,
	    multiple,
	    optionComparer
	  });
	  const listboxRef = React$1n.useRef(null);
	  const handleRef = (0, _utils$17.unstable_useForkRef)(externalListboxRef, listboxRef);
	  const [{
	    highlightedIndex,
	    selectedValue
	  }, dispatch] = (0, _useControllableReducer.default)(_defaultListboxReducer.default, externalReducer, propsWithDefaults);
	  const previousOptions = React$1n.useRef([]);
	  React$1n.useEffect(() => {
	    if ((0, _areArraysEqual.default)(previousOptions.current, options, optionComparer)) {
	      return;
	    }

	    dispatch({
	      type: _types.ActionTypes.optionsChange,
	      options,
	      previousOptions: previousOptions.current,
	      props: propsWithDefaults
	    });
	    previousOptions.current = options; // No need to re-run this effect if props change
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [options, optionComparer, dispatch]);

	  const createHandleOptionClick = (option, other) => event => {
	    var _other$onClick;

	    (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    event.preventDefault();
	    dispatch({
	      type: _types.ActionTypes.optionClick,
	      option,
	      event,
	      props: propsWithDefaults
	    });
	  };

	  const createHandleKeyDown = other => event => {
	    var _other$onKeyDown;

	    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    const keysToPreventDefault = [' ', 'Enter', 'ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'];

	    if (keysToPreventDefault.includes(event.key)) {
	      event.preventDefault();
	    }

	    dispatch({
	      type: _types.ActionTypes.keyDown,
	      event,
	      props: propsWithDefaults
	    });
	  };

	  const createHandleBlur = other => event => {
	    var _other$onBlur, _listboxRef$current;

	    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) {
	      // focus is within the listbox
	      return;
	    }

	    dispatch({
	      type: _types.ActionTypes.blur,
	      event,
	      props: propsWithDefaults
	    });
	  };

	  const getRootProps = (other = {}) => {
	    return (0, _extends2$1k.default)({}, other, {
	      'aria-activedescendant': highlightedIndex >= 0 ? optionIdGenerator(options[highlightedIndex], highlightedIndex) : undefined,
	      id,
	      onBlur: createHandleBlur(other),
	      onKeyDown: createHandleKeyDown(other),
	      role: 'listbox',
	      tabIndex: 0,
	      ref: handleRef
	    });
	  };

	  const getOptionState = option => {
	    let selected;
	    const index = options.findIndex(opt => optionComparer(opt, option));

	    if (multiple) {
	      var _ref;

	      selected = ((_ref = selectedValue) != null ? _ref : []).some(value => value != null && optionComparer(option, value));
	    } else {
	      selected = optionComparer(option, selectedValue);
	    }

	    const disabled = isOptionDisabled(option, index);
	    return {
	      index,
	      option,
	      selected,
	      disabled,
	      highlighted: highlightedIndex === index
	    };
	  };

	  const getOptionProps = (option, other = {}) => {
	    const {
	      selected,
	      disabled
	    } = getOptionState(option);
	    const index = options.findIndex(opt => optionComparer(opt, option));
	    return {
	      'aria-disabled': disabled || undefined,
	      'aria-selected': selected,
	      id: optionIdGenerator(option, index),
	      onClick: createHandleOptionClick(option, other),
	      role: 'option'
	    };
	  };

	  return {
	    getRootProps,
	    getOptionProps,
	    getOptionState,
	    selectedOption: selectedValue,
	    highlightedOption: (_options$highlightedI = options[highlightedIndex]) != null ? _options$highlightedI : null
	  };
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  useListbox: true,
		  defaultListboxReducer: true
		};
		Object.defineProperty(exports, "defaultListboxReducer", {
		  enumerable: true,
		  get: function () {
		    return _defaultListboxReducer.default;
		  }
		});
		Object.defineProperty(exports, "useListbox", {
		  enumerable: true,
		  get: function () {
		    return _useListbox.default;
		  }
		});

		var _useListbox = _interopRequireDefault(useListbox$1);

		var _defaultListboxReducer = _interopRequireDefault(defaultListboxReducer$1);

		var _types = types;

		Object.keys(_types).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _types[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _types[key];
		    }
		  });
		});
	} (ListboxUnstyled));

	var ModalUnstyled$2 = {};

	var ModalUnstyled$1 = {};

	var Portal$2 = {};

	var Portal$1 = {};

	var _interopRequireDefault$1Q = interopRequireDefault.exports;

	Object.defineProperty(Portal$1, "__esModule", {
	  value: true
	});
	Portal$1.default = void 0;

	var React$1m = _interopRequireWildcard$1p(require$$3);

	var ReactDOM = _interopRequireWildcard$1p(require$$3);

	var _propTypes$1b = _interopRequireDefault$1Q(propTypes.exports);

	var _utils$16 = utils$h;

	function _getRequireWildcardCache$1p(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1p = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1p(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1p(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function getContainer$1(container) {
	  return typeof container === 'function' ? container() : container;
	}
	/**
	 * Portals provide a first-class way to render children into a DOM node
	 * that exists outside the DOM hierarchy of the parent component.
	 */


	const Portal = /*#__PURE__*/React$1m.forwardRef(function Portal(props, ref) {
	  const {
	    children,
	    container,
	    disablePortal = false
	  } = props;
	  const [mountNode, setMountNode] = React$1m.useState(null);
	  const handleRef = (0, _utils$16.unstable_useForkRef)( /*#__PURE__*/React$1m.isValidElement(children) ? children.ref : null, ref);
	  (0, _utils$16.unstable_useEnhancedEffect)(() => {
	    if (!disablePortal) {
	      setMountNode(getContainer$1(container) || document.body);
	    }
	  }, [container, disablePortal]);
	  (0, _utils$16.unstable_useEnhancedEffect)(() => {
	    if (mountNode && !disablePortal) {
	      (0, _utils$16.unstable_setRef)(ref, mountNode);
	      return () => {
	        (0, _utils$16.unstable_setRef)(ref, null);
	      };
	    }

	    return undefined;
	  }, [ref, mountNode, disablePortal]);

	  if (disablePortal) {
	    if ( /*#__PURE__*/React$1m.isValidElement(children)) {
	      return /*#__PURE__*/React$1m.cloneElement(children, {
	        ref: handleRef
	      });
	    }

	    return children;
	  }

	  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;
	});
	Portal.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The children to render into the `container`.
	   */
	  children: _propTypes$1b.default.node,

	  /**
	   * An HTML element or function that returns one.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: _propTypes$1b.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_utils$16.HTMLElementType, _propTypes$1b.default.func]),

	  /**
	   * The `children` will be under the DOM hierarchy of the parent component.
	   * @default false
	   */
	  disablePortal: _propTypes$1b.default.bool
	} ;

	{
	  // eslint-disable-next-line
	  Portal['propTypes' + ''] = (0, _utils$16.exactProp)(Portal.propTypes);
	}

	var _default$2N = Portal;
	Portal$1.default = _default$2N;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Portal.default;
		  }
		});

		var _Portal = _interopRequireDefault(Portal$1);
	} (Portal$2));

	var ModalManager$1 = {};

	Object.defineProperty(ModalManager$1, "__esModule", {
	  value: true
	});
	ModalManager$1.ariaHidden = ariaHidden;
	ModalManager$1.default = void 0;

	var _utils$15 = utils$h;

	// Is a vertical scrollbar displayed?
	function isOverflowing(container) {
	  const doc = (0, _utils$15.unstable_ownerDocument)(container);

	  if (doc.body === container) {
	    return (0, _utils$15.unstable_ownerWindow)(container).innerWidth > doc.documentElement.clientWidth;
	  }

	  return container.scrollHeight > container.clientHeight;
	}

	function ariaHidden(element, show) {
	  if (show) {
	    element.setAttribute('aria-hidden', 'true');
	  } else {
	    element.removeAttribute('aria-hidden');
	  }
	}

	function getPaddingRight(element) {
	  return parseInt((0, _utils$15.unstable_ownerWindow)(element).getComputedStyle(element).paddingRight, 10) || 0;
	}

	function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude = [], show) {
	  const blacklist = [mountElement, currentElement, ...elementsToExclude];
	  const blacklistTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE'];
	  [].forEach.call(container.children, element => {
	    if (blacklist.indexOf(element) === -1 && blacklistTagNames.indexOf(element.tagName) === -1) {
	      ariaHidden(element, show);
	    }
	  });
	}

	function findIndexOf(items, callback) {
	  let idx = -1;
	  items.some((item, index) => {
	    if (callback(item)) {
	      idx = index;
	      return true;
	    }

	    return false;
	  });
	  return idx;
	}

	function handleContainer(containerInfo, props) {
	  const restoreStyle = [];
	  const container = containerInfo.container;

	  if (!props.disableScrollLock) {
	    if (isOverflowing(container)) {
	      // Compute the size before applying overflow hidden to avoid any scroll jumps.
	      const scrollbarSize = (0, _utils$15.unstable_getScrollbarSize)((0, _utils$15.unstable_ownerDocument)(container));
	      restoreStyle.push({
	        value: container.style.paddingRight,
	        property: 'padding-right',
	        el: container
	      }); // Use computed style, here to get the real padding to add our scrollbar width.

	      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`; // .mui-fixed is a global helper.

	      const fixedElements = (0, _utils$15.unstable_ownerDocument)(container).querySelectorAll('.mui-fixed');
	      [].forEach.call(fixedElements, element => {
	        restoreStyle.push({
	          value: element.style.paddingRight,
	          property: 'padding-right',
	          el: element
	        });
	        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
	      });
	    } // Improve Gatsby support
	    // https://css-tricks.com/snippets/css/force-vertical-scrollbar/


	    const parent = container.parentElement;
	    const containerWindow = (0, _utils$15.unstable_ownerWindow)(container);
	    const scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container; // Block the scroll even if no scrollbar is visible to account for mobile keyboard
	    // screensize shrink.

	    restoreStyle.push({
	      value: scrollContainer.style.overflow,
	      property: 'overflow',
	      el: scrollContainer
	    }, {
	      value: scrollContainer.style.overflowX,
	      property: 'overflow-x',
	      el: scrollContainer
	    }, {
	      value: scrollContainer.style.overflowY,
	      property: 'overflow-y',
	      el: scrollContainer
	    });
	    scrollContainer.style.overflow = 'hidden';
	  }

	  const restore = () => {
	    restoreStyle.forEach(({
	      value,
	      el,
	      property
	    }) => {
	      if (value) {
	        el.style.setProperty(property, value);
	      } else {
	        el.style.removeProperty(property);
	      }
	    });
	  };

	  return restore;
	}

	function getHiddenSiblings(container) {
	  const hiddenSiblings = [];
	  [].forEach.call(container.children, element => {
	    if (element.getAttribute('aria-hidden') === 'true') {
	      hiddenSiblings.push(element);
	    }
	  });
	  return hiddenSiblings;
	}

	/**
	 * @ignore - do not document.
	 *
	 * Proper state management for containers and the modals in those containers.
	 * Simplified, but inspired by react-overlay's ModalManager class.
	 * Used by the Modal to ensure proper styling of containers.
	 */
	class ModalManager {
	  constructor() {
	    this.containers = void 0;
	    this.modals = void 0;
	    this.modals = [];
	    this.containers = [];
	  }

	  add(modal, container) {
	    let modalIndex = this.modals.indexOf(modal);

	    if (modalIndex !== -1) {
	      return modalIndex;
	    }

	    modalIndex = this.modals.length;
	    this.modals.push(modal); // If the modal we are adding is already in the DOM.

	    if (modal.modalRef) {
	      ariaHidden(modal.modalRef, false);
	    }

	    const hiddenSiblings = getHiddenSiblings(container);
	    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
	    const containerIndex = findIndexOf(this.containers, item => item.container === container);

	    if (containerIndex !== -1) {
	      this.containers[containerIndex].modals.push(modal);
	      return modalIndex;
	    }

	    this.containers.push({
	      modals: [modal],
	      container,
	      restore: null,
	      hiddenSiblings
	    });
	    return modalIndex;
	  }

	  mount(modal, props) {
	    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
	    const containerInfo = this.containers[containerIndex];

	    if (!containerInfo.restore) {
	      containerInfo.restore = handleContainer(containerInfo, props);
	    }
	  }

	  remove(modal) {
	    const modalIndex = this.modals.indexOf(modal);

	    if (modalIndex === -1) {
	      return modalIndex;
	    }

	    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
	    const containerInfo = this.containers[containerIndex];
	    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
	    this.modals.splice(modalIndex, 1); // If that was the last modal in a container, clean up the container.

	    if (containerInfo.modals.length === 0) {
	      // The modal might be closed before it had the chance to be mounted in the DOM.
	      if (containerInfo.restore) {
	        containerInfo.restore();
	      }

	      if (modal.modalRef) {
	        // In case the modal wasn't in the DOM yet.
	        ariaHidden(modal.modalRef, true);
	      }

	      ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
	      this.containers.splice(containerIndex, 1);
	    } else {
	      // Otherwise make sure the next top modal is visible to a screen reader.
	      const nextTop = containerInfo.modals[containerInfo.modals.length - 1]; // as soon as a modal is adding its modalRef is undefined. it can't set
	      // aria-hidden because the dom element doesn't exist either
	      // when modal was unmounted before modalRef gets null

	      if (nextTop.modalRef) {
	        ariaHidden(nextTop.modalRef, false);
	      }
	    }

	    return modalIndex;
	  }

	  isTopModal(modal) {
	    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
	  }

	}

	ModalManager$1.default = ModalManager;

	var Unstable_TrapFocus$2 = {};

	var Unstable_TrapFocus$1 = {};

	var _interopRequireDefault$1P = interopRequireDefault.exports;

	Object.defineProperty(Unstable_TrapFocus$1, "__esModule", {
	  value: true
	});
	Unstable_TrapFocus$1.default = void 0;

	var React$1l = _interopRequireWildcard$1o(require$$3);

	var _propTypes$1a = _interopRequireDefault$1P(propTypes.exports);

	var _utils$14 = utils$h;

	var _jsxRuntime$1l = jsxRuntime;

	function _getRequireWildcardCache$1o(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1o = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1o(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1o(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/* eslint-disable @typescript-eslint/naming-convention, consistent-return, jsx-a11y/no-noninteractive-tabindex */
	// Inspired by https://github.com/focus-trap/tabbable
	const candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'].join(',');

	function getTabIndex(node) {
	  const tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);

	  if (!Number.isNaN(tabindexAttr)) {
	    return tabindexAttr;
	  } // Browsers do not return `tabIndex` correctly for contentEditable nodes;
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
	  // so if they don't have a tabindex attribute specifically set, assume it's 0.
	  // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
	  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
	  //  yet they are still part of the regular tab order; in FF, they get a default
	  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
	  //  order, consider their tab index to be 0.


	  if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {
	    return 0;
	  }

	  return node.tabIndex;
	}

	function isNonTabbableRadio(node) {
	  if (node.tagName !== 'INPUT' || node.type !== 'radio') {
	    return false;
	  }

	  if (!node.name) {
	    return false;
	  }

	  const getRadio = selector => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);

	  let roving = getRadio(`[name="${node.name}"]:checked`);

	  if (!roving) {
	    roving = getRadio(`[name="${node.name}"]`);
	  }

	  return roving !== node;
	}

	function isNodeMatchingSelectorFocusable(node) {
	  if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {
	    return false;
	  }

	  return true;
	}

	function defaultGetTabbable(root) {
	  const regularTabNodes = [];
	  const orderedTabNodes = [];
	  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
	    const nodeTabIndex = getTabIndex(node);

	    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
	      return;
	    }

	    if (nodeTabIndex === 0) {
	      regularTabNodes.push(node);
	    } else {
	      orderedTabNodes.push({
	        documentOrder: i,
	        tabIndex: nodeTabIndex,
	        node
	      });
	    }
	  });
	  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);
	}

	function defaultIsEnabled() {
	  return true;
	}
	/**
	 * Utility component that locks focus inside the component.
	 */


	function Unstable_TrapFocus(props) {
	  const {
	    children,
	    disableAutoFocus = false,
	    disableEnforceFocus = false,
	    disableRestoreFocus = false,
	    getTabbable = defaultGetTabbable,
	    isEnabled = defaultIsEnabled,
	    open
	  } = props;
	  const ignoreNextEnforceFocus = React$1l.useRef();
	  const sentinelStart = React$1l.useRef(null);
	  const sentinelEnd = React$1l.useRef(null);
	  const nodeToRestore = React$1l.useRef(null);
	  const reactFocusEventTarget = React$1l.useRef(null); // This variable is useful when disableAutoFocus is true.
	  // It waits for the active element to move into the component to activate.

	  const activated = React$1l.useRef(false);
	  const rootRef = React$1l.useRef(null);
	  const handleRef = (0, _utils$14.unstable_useForkRef)(children.ref, rootRef);
	  const lastKeydown = React$1l.useRef(null);
	  React$1l.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }

	    activated.current = !disableAutoFocus;
	  }, [disableAutoFocus, open]);
	  React$1l.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }

	    const doc = (0, _utils$14.unstable_ownerDocument)(rootRef.current);

	    if (!rootRef.current.contains(doc.activeElement)) {
	      if (!rootRef.current.hasAttribute('tabIndex')) {
	        {
	          console.error(['MUI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
	        }

	        rootRef.current.setAttribute('tabIndex', -1);
	      }

	      if (activated.current) {
	        rootRef.current.focus();
	      }
	    }

	    return () => {
	      // restoreLastFocus()
	      if (!disableRestoreFocus) {
	        // In IE11 it is possible for document.activeElement to be null resulting
	        // in nodeToRestore.current being null.
	        // Not all elements in IE11 have a focus method.
	        // Once IE11 support is dropped the focus() call can be unconditional.
	        if (nodeToRestore.current && nodeToRestore.current.focus) {
	          ignoreNextEnforceFocus.current = true;
	          nodeToRestore.current.focus();
	        }

	        nodeToRestore.current = null;
	      }
	    }; // Missing `disableRestoreFocus` which is fine.
	    // We don't support changing that prop on an open TrapFocus
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [open]);
	  React$1l.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }

	    const doc = (0, _utils$14.unstable_ownerDocument)(rootRef.current);

	    const contain = nativeEvent => {
	      const {
	        current: rootElement
	      } = rootRef; // Cleanup functions are executed lazily in React 17.
	      // Contain can be called between the component being unmounted and its cleanup function being run.

	      if (rootElement === null) {
	        return;
	      }

	      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
	        ignoreNextEnforceFocus.current = false;
	        return;
	      }

	      if (!rootElement.contains(doc.activeElement)) {
	        // if the focus event is not coming from inside the children's react tree, reset the refs
	        if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
	          reactFocusEventTarget.current = null;
	        } else if (reactFocusEventTarget.current !== null) {
	          return;
	        }

	        if (!activated.current) {
	          return;
	        }

	        let tabbable = [];

	        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
	          tabbable = getTabbable(rootRef.current);
	        }

	        if (tabbable.length > 0) {
	          var _lastKeydown$current, _lastKeydown$current2;

	          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
	          const focusNext = tabbable[0];
	          const focusPrevious = tabbable[tabbable.length - 1];

	          if (isShiftTab) {
	            focusPrevious.focus();
	          } else {
	            focusNext.focus();
	          }
	        } else {
	          rootElement.focus();
	        }
	      }
	    };

	    const loopFocus = nativeEvent => {
	      lastKeydown.current = nativeEvent;

	      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {
	        return;
	      } // Make sure the next tab starts from the right place.
	      // doc.activeElement referes to the origin.


	      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
	        // We need to ignore the next contain as
	        // it will try to move the focus back to the rootRef element.
	        ignoreNextEnforceFocus.current = true;
	        sentinelEnd.current.focus();
	      }
	    };

	    doc.addEventListener('focusin', contain);
	    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
	    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
	    // Instead, we can look if the active element was restored on the BODY element.
	    //
	    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
	    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.

	    const interval = setInterval(() => {
	      if (doc.activeElement.tagName === 'BODY') {
	        contain();
	      }
	    }, 50);
	    return () => {
	      clearInterval(interval);
	      doc.removeEventListener('focusin', contain);
	      doc.removeEventListener('keydown', loopFocus, true);
	    };
	  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);

	  const onFocus = event => {
	    if (nodeToRestore.current === null) {
	      nodeToRestore.current = event.relatedTarget;
	    }

	    activated.current = true;
	    reactFocusEventTarget.current = event.target;
	    const childrenPropsHandler = children.props.onFocus;

	    if (childrenPropsHandler) {
	      childrenPropsHandler(event);
	    }
	  };

	  const handleFocusSentinel = event => {
	    if (nodeToRestore.current === null) {
	      nodeToRestore.current = event.relatedTarget;
	    }

	    activated.current = true;
	  };

	  return /*#__PURE__*/(0, _jsxRuntime$1l.jsxs)(React$1l.Fragment, {
	    children: [/*#__PURE__*/(0, _jsxRuntime$1l.jsx)("div", {
	      tabIndex: 0,
	      onFocus: handleFocusSentinel,
	      ref: sentinelStart,
	      "data-test": "sentinelStart"
	    }), /*#__PURE__*/React$1l.cloneElement(children, {
	      ref: handleRef,
	      onFocus
	    }), /*#__PURE__*/(0, _jsxRuntime$1l.jsx)("div", {
	      tabIndex: 0,
	      onFocus: handleFocusSentinel,
	      ref: sentinelEnd,
	      "data-test": "sentinelEnd"
	    })]
	  });
	}

	Unstable_TrapFocus.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A single child content element.
	   */
	  children: _utils$14.elementAcceptingRef,

	  /**
	   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and
	   * replace it to the last focused element when it closes.
	   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.
	   *
	   * Generally this should never be set to `true` as it makes the trap focus less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableAutoFocus: _propTypes$1a.default.bool,

	  /**
	   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.
	   *
	   * Generally this should never be set to `true` as it makes the trap focus less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableEnforceFocus: _propTypes$1a.default.bool,

	  /**
	   * If `true`, the trap focus will not restore focus to previously focused element once
	   * trap focus is hidden.
	   * @default false
	   */
	  disableRestoreFocus: _propTypes$1a.default.bool,

	  /**
	   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
	   * For instance, you can provide the "tabbable" npm dependency.
	   * @param {HTMLElement} root
	   */
	  getTabbable: _propTypes$1a.default.func,

	  /**
	   * This prop extends the `open` prop.
	   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
	   * This prop should be memoized.
	   * It can be used to support multiple trap focus mounted at the same time.
	   * @default function defaultIsEnabled() {
	   *   return true;
	   * }
	   */
	  isEnabled: _propTypes$1a.default.func,

	  /**
	   * If `true`, focus is locked.
	   */
	  open: _propTypes$1a.default.bool.isRequired
	} ;

	{
	  // eslint-disable-next-line
	  Unstable_TrapFocus['propTypes' + ''] = (0, _utils$14.exactProp)(Unstable_TrapFocus.propTypes);
	}

	var _default$2M = Unstable_TrapFocus;
	Unstable_TrapFocus$1.default = _default$2M;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Unstable_TrapFocus.default;
		  }
		});

		var _Unstable_TrapFocus = _interopRequireDefault(Unstable_TrapFocus$1);
	} (Unstable_TrapFocus$2));

	var modalUnstyledClasses$1 = {};

	var _interopRequireDefault$1O = interopRequireDefault.exports;

	Object.defineProperty(modalUnstyledClasses$1, "__esModule", {
	  value: true
	});
	modalUnstyledClasses$1.default = void 0;
	modalUnstyledClasses$1.getModalUtilityClass = getModalUtilityClass;

	var _generateUtilityClasses$9 = _interopRequireDefault$1O(generateUtilityClasses$2);

	var _generateUtilityClass$9 = _interopRequireDefault$1O(generateUtilityClass$2);

	function getModalUtilityClass(slot) {
	  return (0, _generateUtilityClass$9.default)('MuiModal', slot);
	}

	const modalUnstyledClasses = (0, _generateUtilityClasses$9.default)('MuiModal', ['root', 'hidden']);
	var _default$2L = modalUnstyledClasses;
	modalUnstyledClasses$1.default = _default$2L;

	var _interopRequireDefault$1N = interopRequireDefault.exports;

	Object.defineProperty(ModalUnstyled$1, "__esModule", {
	  value: true
	});
	ModalUnstyled$1.default = void 0;

	var _extends2$1j = _interopRequireDefault$1N(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1a = _interopRequireDefault$1N(objectWithoutPropertiesLoose.exports);

	var React$1k = _interopRequireWildcard$1n(require$$3);

	var _propTypes$19 = _interopRequireDefault$1N(propTypes.exports);

	var _clsx$S = _interopRequireDefault$1N(clsx$1);

	var _utils$13 = utils$h;

	var _composeClasses$a = _interopRequireDefault$1N(composeClasses$2);

	var _isHostComponent$1 = _interopRequireDefault$1N(isHostComponent$1);

	var _Portal$1 = _interopRequireDefault$1N(Portal$2);

	var _ModalManager = _interopRequireWildcard$1n(ModalManager$1);

	var _Unstable_TrapFocus = _interopRequireDefault$1N(Unstable_TrapFocus$2);

	var _modalUnstyledClasses = modalUnstyledClasses$1;

	var _jsxRuntime$1k = jsxRuntime;

	const _excluded$1a = ["BackdropComponent", "BackdropProps", "children", "classes", "className", "closeAfterTransition", "component", "components", "componentsProps", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "theme", "onTransitionEnter", "onTransitionExited"];

	function _getRequireWildcardCache$1n(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1n = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1n(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1n(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$R = ownerState => {
	  const {
	    open,
	    exited,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', !open && exited && 'hidden']
	  };
	  return (0, _composeClasses$a.default)(slots, _modalUnstyledClasses.getModalUtilityClass, classes);
	};

	function getContainer(container) {
	  return typeof container === 'function' ? container() : container;
	}

	function getHasTransition(props) {
	  return props.children ? props.children.props.hasOwnProperty('in') : false;
	} // A modal manager used to track and manage the state of open Modals.
	// Modals don't open on the server so this won't conflict with concurrent requests.


	const defaultManager = new _ModalManager.default();
	/**
	 * Modal is a lower-level construct that is leveraged by the following components:
	 *
	 * - [Dialog](/api/dialog/)
	 * - [Drawer](/api/drawer/)
	 * - [Menu](/api/menu/)
	 * - [Popover](/api/popover/)
	 *
	 * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
	 * rather than directly using Modal.
	 *
	 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
	 */

	const ModalUnstyled = /*#__PURE__*/React$1k.forwardRef(function ModalUnstyled(props, ref) {
	  const {
	    BackdropComponent,
	    BackdropProps,
	    children,
	    classes: classesProp,
	    className,
	    closeAfterTransition = false,
	    component = 'div',
	    components = {},
	    componentsProps = {},
	    container,
	    disableAutoFocus = false,
	    disableEnforceFocus = false,
	    disableEscapeKeyDown = false,
	    disablePortal = false,
	    disableRestoreFocus = false,
	    disableScrollLock = false,
	    hideBackdrop = false,
	    keepMounted = false,
	    // private
	    // eslint-disable-next-line react/prop-types
	    manager = defaultManager,
	    onBackdropClick,
	    onClose,
	    onKeyDown,
	    open,

	    /* eslint-disable react/prop-types */
	    theme,
	    onTransitionEnter,
	    onTransitionExited
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$1a.default)(props, _excluded$1a);
	  const [exited, setExited] = React$1k.useState(true);
	  const modal = React$1k.useRef({});
	  const mountNodeRef = React$1k.useRef(null);
	  const modalRef = React$1k.useRef(null);
	  const handleRef = (0, _utils$13.unstable_useForkRef)(modalRef, ref);
	  const hasTransition = getHasTransition(props);

	  const getDoc = () => (0, _utils$13.unstable_ownerDocument)(mountNodeRef.current);

	  const getModal = () => {
	    modal.current.modalRef = modalRef.current;
	    modal.current.mountNode = mountNodeRef.current;
	    return modal.current;
	  };

	  const handleMounted = () => {
	    manager.mount(getModal(), {
	      disableScrollLock
	    }); // Fix a bug on Chrome where the scroll isn't initially 0.

	    modalRef.current.scrollTop = 0;
	  };

	  const handleOpen = (0, _utils$13.unstable_useEventCallback)(() => {
	    const resolvedContainer = getContainer(container) || getDoc().body;
	    manager.add(getModal(), resolvedContainer); // The element was already mounted.

	    if (modalRef.current) {
	      handleMounted();
	    }
	  });
	  const isTopModal = React$1k.useCallback(() => manager.isTopModal(getModal()), [manager]);
	  const handlePortalRef = (0, _utils$13.unstable_useEventCallback)(node => {
	    mountNodeRef.current = node;

	    if (!node) {
	      return;
	    }

	    if (open && isTopModal()) {
	      handleMounted();
	    } else {
	      (0, _ModalManager.ariaHidden)(modalRef.current, true);
	    }
	  });
	  const handleClose = React$1k.useCallback(() => {
	    manager.remove(getModal());
	  }, [manager]);
	  React$1k.useEffect(() => {
	    return () => {
	      handleClose();
	    };
	  }, [handleClose]);
	  React$1k.useEffect(() => {
	    if (open) {
	      handleOpen();
	    } else if (!hasTransition || !closeAfterTransition) {
	      handleClose();
	    }
	  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
	  const ownerState = (0, _extends2$1j.default)({}, props, {
	    classes: classesProp,
	    closeAfterTransition,
	    disableAutoFocus,
	    disableEnforceFocus,
	    disableEscapeKeyDown,
	    disablePortal,
	    disableRestoreFocus,
	    disableScrollLock,
	    exited,
	    hideBackdrop,
	    keepMounted
	  });
	  const classes = useUtilityClasses$R(ownerState);

	  if (!keepMounted && !open && (!hasTransition || exited)) {
	    return null;
	  }

	  const handleEnter = () => {
	    setExited(false);

	    if (onTransitionEnter) {
	      onTransitionEnter();
	    }
	  };

	  const handleExited = () => {
	    setExited(true);

	    if (onTransitionExited) {
	      onTransitionExited();
	    }

	    if (closeAfterTransition) {
	      handleClose();
	    }
	  };

	  const handleBackdropClick = event => {
	    if (event.target !== event.currentTarget) {
	      return;
	    }

	    if (onBackdropClick) {
	      onBackdropClick(event);
	    }

	    if (onClose) {
	      onClose(event, 'backdropClick');
	    }
	  };

	  const handleKeyDown = event => {
	    if (onKeyDown) {
	      onKeyDown(event);
	    } // The handler doesn't take event.defaultPrevented into account:
	    //
	    // event.preventDefault() is meant to stop default behaviors like
	    // clicking a checkbox to check it, hitting a button to submit a form,
	    // and hitting left arrow to move the cursor in a text input etc.
	    // Only special HTML elements have these default behaviors.


	    if (event.key !== 'Escape' || !isTopModal()) {
	      return;
	    }

	    if (!disableEscapeKeyDown) {
	      // Swallow the event, in case someone is listening for the escape key on the body.
	      event.stopPropagation();

	      if (onClose) {
	        onClose(event, 'escapeKeyDown');
	      }
	    }
	  };

	  const childProps = {};

	  if (children.props.tabIndex === undefined) {
	    childProps.tabIndex = '-1';
	  } // It's a Transition like component


	  if (hasTransition) {
	    childProps.onEnter = (0, _utils$13.unstable_createChainedFunction)(handleEnter, children.props.onEnter);
	    childProps.onExited = (0, _utils$13.unstable_createChainedFunction)(handleExited, children.props.onExited);
	  }

	  const Root = components.Root || component;
	  const rootProps = componentsProps.root || {};
	  return /*#__PURE__*/(0, _jsxRuntime$1k.jsx)(_Portal$1.default, {
	    ref: handlePortalRef,
	    container: container,
	    disablePortal: disablePortal,
	    children: /*#__PURE__*/(0, _jsxRuntime$1k.jsxs)(Root, (0, _extends2$1j.default)({
	      role: "presentation"
	    }, rootProps, !(0, _isHostComponent$1.default)(Root) && {
	      as: component,
	      ownerState: (0, _extends2$1j.default)({}, ownerState, rootProps.ownerState),
	      theme
	    }, other, {
	      ref: handleRef,
	      onKeyDown: handleKeyDown,
	      className: (0, _clsx$S.default)(classes.root, rootProps.className, className),
	      children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/(0, _jsxRuntime$1k.jsx)(BackdropComponent, (0, _extends2$1j.default)({
	        open: open,
	        onClick: handleBackdropClick
	      }, BackdropProps)) : null, /*#__PURE__*/(0, _jsxRuntime$1k.jsx)(_Unstable_TrapFocus.default, {
	        disableEnforceFocus: disableEnforceFocus,
	        disableAutoFocus: disableAutoFocus,
	        disableRestoreFocus: disableRestoreFocus,
	        isEnabled: isTopModal,
	        open: open,
	        children: /*#__PURE__*/React$1k.cloneElement(children, childProps)
	      })]
	    }))
	  });
	});
	ModalUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A backdrop component. This prop enables custom backdrop rendering.
	   */
	  BackdropComponent: _propTypes$19.default.elementType,

	  /**
	   * Props applied to the [`BackdropUnstyled`](/api/backdrop-unstyled/) element.
	   */
	  BackdropProps: _propTypes$19.default.object,

	  /**
	   * A single child content element.
	   */
	  children: _utils$13.elementAcceptingRef.isRequired,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$19.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$19.default.string,

	  /**
	   * When set to true the Modal waits until a nested Transition is completed before closing.
	   * @default false
	   */
	  closeAfterTransition: _propTypes$19.default.bool,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$19.default.elementType,

	  /**
	   * The components used for each slot inside the Modal.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$19.default.shape({
	    Root: _propTypes$19.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Modal.
	   * @default {}
	   */
	  componentsProps: _propTypes$19.default.shape({
	    root: _propTypes$19.default.object
	  }),

	  /**
	   * An HTML element or function that returns one.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: _propTypes$19.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_utils$13.HTMLElementType, _propTypes$19.default.func]),

	  /**
	   * If `true`, the modal will not automatically shift focus to itself when it opens, and
	   * replace it to the last focused element when it closes.
	   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableAutoFocus: _propTypes$19.default.bool,

	  /**
	   * If `true`, the modal will not prevent focus from leaving the modal while open.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableEnforceFocus: _propTypes$19.default.bool,

	  /**
	   * If `true`, hitting escape will not fire the `onClose` callback.
	   * @default false
	   */
	  disableEscapeKeyDown: _propTypes$19.default.bool,

	  /**
	   * The `children` will be under the DOM hierarchy of the parent component.
	   * @default false
	   */
	  disablePortal: _propTypes$19.default.bool,

	  /**
	   * If `true`, the modal will not restore focus to previously focused element once
	   * modal is hidden.
	   * @default false
	   */
	  disableRestoreFocus: _propTypes$19.default.bool,

	  /**
	   * Disable the scroll lock behavior.
	   * @default false
	   */
	  disableScrollLock: _propTypes$19.default.bool,

	  /**
	   * If `true`, the backdrop is not rendered.
	   * @default false
	   */
	  hideBackdrop: _propTypes$19.default.bool,

	  /**
	   * Always keep the children in the DOM.
	   * This prop can be useful in SEO situation or
	   * when you want to maximize the responsiveness of the Modal.
	   * @default false
	   */
	  keepMounted: _propTypes$19.default.bool,

	  /**
	   * Callback fired when the backdrop is clicked.
	   */
	  onBackdropClick: _propTypes$19.default.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   * The `reason` parameter can optionally be used to control the response to `onClose`.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
	   */
	  onClose: _propTypes$19.default.func,

	  /**
	   * @ignore
	   */
	  onKeyDown: _propTypes$19.default.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: _propTypes$19.default.bool.isRequired
	} ;
	var _default$2K = ModalUnstyled;
	ModalUnstyled$1.default = _default$2K;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "ModalManager", {
		  enumerable: true,
		  get: function () {
		    return _ModalManager.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ModalUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "getModalUtilityClass", {
		  enumerable: true,
		  get: function () {
		    return _modalUnstyledClasses.getModalUtilityClass;
		  }
		});
		Object.defineProperty(exports, "modalUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _modalUnstyledClasses.default;
		  }
		});

		var _ModalUnstyled = _interopRequireDefault(ModalUnstyled$1);

		var _ModalManager = _interopRequireDefault(ModalManager$1);

		var _modalUnstyledClasses = _interopRequireWildcard(modalUnstyledClasses$1);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ModalUnstyled$2));

	var MultiSelectUnstyled$2 = {};

	var MultiSelectUnstyled$1 = {};

	var utils$c = {};

	var useSelectProps = {};

	Object.defineProperty(useSelectProps, "__esModule", {
	  value: true
	});
	useSelectProps.isOptionGroup = isOptionGroup;

	function isOptionGroup(child) {
	  return !!child.options;
	}

	var _interopRequireDefault$1M = interopRequireDefault.exports;

	Object.defineProperty(utils$c, "__esModule", {
	  value: true
	});
	utils$c.areOptionsEqual = areOptionsEqual;
	utils$c.flattenOptionGroups = flattenOptionGroups;
	utils$c.getOptionsFromChildren = getOptionsFromChildren;

	var _extends2$1i = _interopRequireDefault$1M(_extends$5.exports);

	var _react$4 = _interopRequireDefault$1M(require$$3);

	var _useSelectProps = useSelectProps;

	function areOptionsEqual(option1, option2) {
	  return option1.label === option2.label && option1.value === option2.value && option1.disabled === option2.disabled;
	}

	function getOptionsFromChildren(children) {
	  if (children == null) {
	    return [];
	  }

	  const selectChildren = [];

	  _react$4.default.Children.forEach(children, node => {
	    var _props, _props2, _element$props$disabl2;

	    const nodeChildren = node == null ? void 0 : (_props = node.props) == null ? void 0 : _props.children;

	    if ((node == null ? void 0 : (_props2 = node.props) == null ? void 0 : _props2.value) === undefined) {
	      if (nodeChildren != null) {
	        var _element$props$disabl;

	        const element = node;
	        const group = {
	          options: getOptionsFromChildren(nodeChildren),
	          label: element.props.label,
	          disabled: (_element$props$disabl = element.props.disabled) != null ? _element$props$disabl : false
	        };
	        selectChildren.push(group);
	      }

	      return;
	    }

	    const element = node;
	    const option = {
	      value: element.props.value,
	      label: element.props.children,
	      disabled: (_element$props$disabl2 = element.props.disabled) != null ? _element$props$disabl2 : false
	    };
	    selectChildren.push(option);
	  });

	  return selectChildren != null ? selectChildren : [];
	}

	function flattenOptionGroups(groupedOptions, isGroupDisabled = false) {
	  let flatOptions = [];
	  groupedOptions.forEach(optionOrGroup => {
	    if ((0, _useSelectProps.isOptionGroup)(optionOrGroup)) {
	      flatOptions = flatOptions.concat(flattenOptionGroups(optionOrGroup.options, optionOrGroup.disabled));
	    } else {
	      flatOptions.push((0, _extends2$1i.default)({}, optionOrGroup, {
	        disabled: isGroupDisabled || optionOrGroup.disabled
	      }));
	    }
	  });
	  return flatOptions;
	}

	var useSelect$1 = {};

	var _interopRequireDefault$1L = interopRequireDefault.exports;

	Object.defineProperty(useSelect$1, "__esModule", {
	  value: true
	});
	useSelect$1.default = void 0;

	var _extends2$1h = _interopRequireDefault$1L(_extends$5.exports);

	var React$1j = _interopRequireWildcard$1m(require$$3);

	var _utils$12 = utils$h;

	var _ButtonUnstyled$1 = ButtonUnstyled$2;

	var _ListboxUnstyled = ListboxUnstyled;

	function _getRequireWildcardCache$1m(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1m = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1m(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1m(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function useSelect(props) {
	  const {
	    buttonComponent,
	    buttonRef: buttonRefProp,
	    defaultValue,
	    disabled = false,
	    listboxId,
	    listboxRef: listboxRefProp,
	    multiple = false,
	    onChange,
	    onOpenChange,
	    open,
	    options,
	    value: valueProp
	  } = props;
	  const buttonRef = React$1j.useRef(null);
	  const handleButtonRef = (0, _utils$12.unstable_useForkRef)(buttonRefProp, buttonRef);
	  const listboxRef = React$1j.useRef(null);
	  const intermediaryListboxRef = (0, _utils$12.unstable_useForkRef)(listboxRefProp, listboxRef);
	  const [value, setValue] = (0, _utils$12.unstable_useControlled)({
	    controlled: valueProp,
	    default: defaultValue,
	    name: 'SelectUnstyled',
	    state: 'value'
	  }); // prevents closing the listbox on keyUp right after opening it

	  const ignoreEnterKeyUp = React$1j.useRef(false); // prevents reopening the listbox when button is clicked
	  // (listbox closes on lost focus, then immediately reopens on click)

	  const ignoreClick = React$1j.useRef(false); // Ensure the listbox is focused after opening

	  const [listboxFocusRequested, requestListboxFocus] = React$1j.useState(false);
	  const focusListboxIfRequested = React$1j.useCallback(() => {
	    if (listboxFocusRequested && listboxRef.current != null) {
	      listboxRef.current.focus();
	      requestListboxFocus(false);
	    }
	  }, [listboxFocusRequested]);

	  const updateListboxRef = listboxElement => {
	    listboxRef.current = listboxElement;
	    focusListboxIfRequested();
	  };

	  const handleListboxRef = (0, _utils$12.unstable_useForkRef)(intermediaryListboxRef, updateListboxRef);
	  React$1j.useEffect(() => {
	    focusListboxIfRequested();
	  }, [focusListboxIfRequested]);
	  React$1j.useEffect(() => {
	    requestListboxFocus(open != null ? open : false);
	  }, [open]);

	  const createHandleMouseDown = otherHandlers => event => {
	    var _otherHandlers$onMous;

	    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);

	    if (!event.defaultPrevented && open) {
	      ignoreClick.current = true;
	    }
	  };

	  const createHandleButtonClick = otherHandlers => event => {
	    var _otherHandlers$onClic;

	    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);

	    if (!event.defaultPrevented && !ignoreClick.current) {
	      onOpenChange == null ? void 0 : onOpenChange(!open);
	    }

	    ignoreClick.current = false;
	  };

	  const createHandleButtonKeyDown = otherHandlers => event => {
	    var _otherHandlers$onKeyD;

	    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    if (event.key === 'Enter') {
	      ignoreEnterKeyUp.current = true;
	    }

	    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
	      event.preventDefault();
	      onOpenChange == null ? void 0 : onOpenChange(true);
	    }
	  };

	  const createHandleListboxKeyUp = otherHandlers => event => {
	    var _otherHandlers$onKeyU;

	    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];

	    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {
	      var _buttonRef$current;

	      buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
	    }

	    ignoreEnterKeyUp.current = false;
	  };

	  const createHandleListboxItemClick = otherHandlers => event => {
	    var _otherHandlers$onClic2;

	    otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);

	    if (event.defaultPrevented) {
	      return;
	    }

	    if (!multiple) {
	      onOpenChange == null ? void 0 : onOpenChange(false);
	    }
	  };

	  const createHandleListboxBlur = otherHandlers => event => {
	    var _otherHandlers$blur;

	    otherHandlers == null ? void 0 : (_otherHandlers$blur = otherHandlers.blur) == null ? void 0 : _otherHandlers$blur.call(otherHandlers, event);

	    if (!event.defaultPrevented) {
	      onOpenChange == null ? void 0 : onOpenChange(false);
	    }
	  };

	  const listboxReducer = (state, action) => {
	    const newState = (0, _ListboxUnstyled.defaultListboxReducer)(state, action); // change selection when listbox is closed

	    if (action.type === _ListboxUnstyled.ActionTypes.keyDown && !open && (action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown')) {
	      const optionToSelect = action.props.options[newState.highlightedIndex];
	      return (0, _extends2$1h.default)({}, newState, {
	        selectedValue: optionToSelect
	      });
	    }

	    if (action.type === _ListboxUnstyled.ActionTypes.blur || action.type === _ListboxUnstyled.ActionTypes.setControlledValue || action.type === _ListboxUnstyled.ActionTypes.optionsChange) {
	      const selectedOptionIndex = action.props.options.findIndex(o => action.props.optionComparer(o, newState.selectedValue));
	      return (0, _extends2$1h.default)({}, newState, {
	        highlightedIndex: selectedOptionIndex
	      });
	    }

	    return newState;
	  };

	  const {
	    getRootProps: getButtonProps,
	    active: buttonActive,
	    focusVisible: buttonFocusVisible
	  } = (0, _ButtonUnstyled$1.useButton)({
	    component: buttonComponent,
	    disabled,
	    ref: handleButtonRef
	  });
	  const selectedOption = React$1j.useMemo(() => {
	    var _props$options$find;

	    return props.multiple ? props.options.filter(o => value.includes(o.value)) : (_props$options$find = props.options.find(o => o.value === value)) != null ? _props$options$find : null;
	  }, [props.multiple, props.options, value]);
	  let useListboxParameters;

	  if (props.multiple) {
	    useListboxParameters = {
	      id: listboxId,
	      isOptionDisabled: o => {
	        var _o$disabled;

	        return (_o$disabled = o == null ? void 0 : o.disabled) != null ? _o$disabled : false;
	      },
	      optionComparer: (o, v) => (o == null ? void 0 : o.value) === (v == null ? void 0 : v.value),
	      listboxRef: handleListboxRef,
	      multiple: true,
	      onChange: newOptions => {
	        setValue(newOptions.map(o => o.value));
	        onChange == null ? void 0 : onChange(newOptions.map(o => o.value));
	      },
	      options,
	      value: selectedOption
	    };
	  } else {
	    useListboxParameters = {
	      id: listboxId,
	      isOptionDisabled: o => {
	        var _o$disabled2;

	        return (_o$disabled2 = o == null ? void 0 : o.disabled) != null ? _o$disabled2 : false;
	      },
	      optionComparer: (o, v) => (o == null ? void 0 : o.value) === (v == null ? void 0 : v.value),
	      listboxRef: handleListboxRef,
	      multiple: false,
	      onChange: option => {
	        var _option$value, _option$value2;

	        setValue((_option$value = option == null ? void 0 : option.value) != null ? _option$value : null);
	        onChange == null ? void 0 : onChange((_option$value2 = option == null ? void 0 : option.value) != null ? _option$value2 : null);
	      },
	      options,
	      stateReducer: listboxReducer,
	      value: selectedOption
	    };
	  }

	  const {
	    getRootProps: getListboxProps,
	    getOptionProps,
	    getOptionState,
	    highlightedOption
	  } = (0, _ListboxUnstyled.useListbox)(useListboxParameters);
	  React$1j.useDebugValue({
	    value,
	    open,
	    highlightedOption
	  });
	  return {
	    buttonActive,
	    buttonFocusVisible,
	    disabled,
	    getButtonProps: otherHandlers => {
	      return (0, _extends2$1h.default)({}, getButtonProps((0, _extends2$1h.default)({}, otherHandlers, {
	        onClick: createHandleButtonClick(otherHandlers),
	        onMouseDown: createHandleMouseDown(otherHandlers),
	        onKeyDown: createHandleButtonKeyDown(otherHandlers)
	      })), {
	        'aria-expanded': open,
	        'aria-haspopup': 'listbox'
	      });
	    },
	    getListboxProps: otherHandlers => getListboxProps((0, _extends2$1h.default)({}, otherHandlers, {
	      onBlur: createHandleListboxBlur(otherHandlers),
	      onKeyUp: createHandleListboxKeyUp(otherHandlers)
	    })),
	    getOptionProps: (option, otherHandlers) => {
	      return getOptionProps(option, (0, _extends2$1h.default)({}, otherHandlers, {
	        onClick: createHandleListboxItemClick(otherHandlers)
	      }));
	    },
	    getOptionState,
	    open,
	    value
	  };
	}

	var _default$2J = useSelect;
	useSelect$1.default = _default$2J;

	var PopperUnstyled$2 = {};

	var PopperUnstyled$1 = {};

	var popper$1 = {};

	/**
	 * @popperjs/core v2.11.2 - MIT License
	 */

	Object.defineProperty(popper$1, '__esModule', { value: true });

	function getWindow(node) {
	  if (node == null) {
	    return window;
	  }

	  if (node.toString() !== '[object Window]') {
	    var ownerDocument = node.ownerDocument;
	    return ownerDocument ? ownerDocument.defaultView || window : window;
	  }

	  return node;
	}

	function isElement$1(node) {
	  var OwnElement = getWindow(node).Element;
	  return node instanceof OwnElement || node instanceof Element;
	}

	function isHTMLElement(node) {
	  var OwnElement = getWindow(node).HTMLElement;
	  return node instanceof OwnElement || node instanceof HTMLElement;
	}

	function isShadowRoot(node) {
	  // IE 11 has no ShadowRoot
	  if (typeof ShadowRoot === 'undefined') {
	    return false;
	  }

	  var OwnElement = getWindow(node).ShadowRoot;
	  return node instanceof OwnElement || node instanceof ShadowRoot;
	}

	var max = Math.max;
	var min = Math.min;
	var round$1 = Math.round;

	function getBoundingClientRect(element, includeScale) {
	  if (includeScale === void 0) {
	    includeScale = false;
	  }

	  var rect = element.getBoundingClientRect();
	  var scaleX = 1;
	  var scaleY = 1;

	  if (isHTMLElement(element) && includeScale) {
	    var offsetHeight = element.offsetHeight;
	    var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
	    // Fallback to 1 in case both values are `0`

	    if (offsetWidth > 0) {
	      scaleX = round$1(rect.width) / offsetWidth || 1;
	    }

	    if (offsetHeight > 0) {
	      scaleY = round$1(rect.height) / offsetHeight || 1;
	    }
	  }

	  return {
	    width: rect.width / scaleX,
	    height: rect.height / scaleY,
	    top: rect.top / scaleY,
	    right: rect.right / scaleX,
	    bottom: rect.bottom / scaleY,
	    left: rect.left / scaleX,
	    x: rect.left / scaleX,
	    y: rect.top / scaleY
	  };
	}

	function getWindowScroll(node) {
	  var win = getWindow(node);
	  var scrollLeft = win.pageXOffset;
	  var scrollTop = win.pageYOffset;
	  return {
	    scrollLeft: scrollLeft,
	    scrollTop: scrollTop
	  };
	}

	function getHTMLElementScroll(element) {
	  return {
	    scrollLeft: element.scrollLeft,
	    scrollTop: element.scrollTop
	  };
	}

	function getNodeScroll(node) {
	  if (node === getWindow(node) || !isHTMLElement(node)) {
	    return getWindowScroll(node);
	  } else {
	    return getHTMLElementScroll(node);
	  }
	}

	function getNodeName(element) {
	  return element ? (element.nodeName || '').toLowerCase() : null;
	}

	function getDocumentElement(element) {
	  // $FlowFixMe[incompatible-return]: assume body is always available
	  return ((isElement$1(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
	  element.document) || window.document).documentElement;
	}

	function getWindowScrollBarX(element) {
	  // If <html> has a CSS width greater than the viewport, then this will be
	  // incorrect for RTL.
	  // Popper 1 is broken in this case and never had a bug report so let's assume
	  // it's not an issue. I don't think anyone ever specifies width on <html>
	  // anyway.
	  // Browsers where the left scrollbar doesn't cause an issue report `0` for
	  // this (e.g. Edge 2019, IE11, Safari)
	  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
	}

	function getComputedStyle(element) {
	  return getWindow(element).getComputedStyle(element);
	}

	function isScrollParent(element) {
	  // Firefox wants us to check `-x` and `-y` variations as well
	  var _getComputedStyle = getComputedStyle(element),
	      overflow = _getComputedStyle.overflow,
	      overflowX = _getComputedStyle.overflowX,
	      overflowY = _getComputedStyle.overflowY;

	  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
	}

	function isElementScaled(element) {
	  var rect = element.getBoundingClientRect();
	  var scaleX = round$1(rect.width) / element.offsetWidth || 1;
	  var scaleY = round$1(rect.height) / element.offsetHeight || 1;
	  return scaleX !== 1 || scaleY !== 1;
	} // Returns the composite rect of an element relative to its offsetParent.
	// Composite means it takes into account transforms as well as layout.


	function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
	  if (isFixed === void 0) {
	    isFixed = false;
	  }

	  var isOffsetParentAnElement = isHTMLElement(offsetParent);
	  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
	  var documentElement = getDocumentElement(offsetParent);
	  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
	  var scroll = {
	    scrollLeft: 0,
	    scrollTop: 0
	  };
	  var offsets = {
	    x: 0,
	    y: 0
	  };

	  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
	    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
	    isScrollParent(documentElement)) {
	      scroll = getNodeScroll(offsetParent);
	    }

	    if (isHTMLElement(offsetParent)) {
	      offsets = getBoundingClientRect(offsetParent, true);
	      offsets.x += offsetParent.clientLeft;
	      offsets.y += offsetParent.clientTop;
	    } else if (documentElement) {
	      offsets.x = getWindowScrollBarX(documentElement);
	    }
	  }

	  return {
	    x: rect.left + scroll.scrollLeft - offsets.x,
	    y: rect.top + scroll.scrollTop - offsets.y,
	    width: rect.width,
	    height: rect.height
	  };
	}

	// means it doesn't take into account transforms.

	function getLayoutRect(element) {
	  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
	  // Fixes https://github.com/popperjs/popper-core/issues/1223

	  var width = element.offsetWidth;
	  var height = element.offsetHeight;

	  if (Math.abs(clientRect.width - width) <= 1) {
	    width = clientRect.width;
	  }

	  if (Math.abs(clientRect.height - height) <= 1) {
	    height = clientRect.height;
	  }

	  return {
	    x: element.offsetLeft,
	    y: element.offsetTop,
	    width: width,
	    height: height
	  };
	}

	function getParentNode(element) {
	  if (getNodeName(element) === 'html') {
	    return element;
	  }

	  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
	    // $FlowFixMe[incompatible-return]
	    // $FlowFixMe[prop-missing]
	    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
	    element.parentNode || ( // DOM Element detected
	    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
	    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
	    getDocumentElement(element) // fallback

	  );
	}

	function getScrollParent(node) {
	  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
	    // $FlowFixMe[incompatible-return]: assume body is always available
	    return node.ownerDocument.body;
	  }

	  if (isHTMLElement(node) && isScrollParent(node)) {
	    return node;
	  }

	  return getScrollParent(getParentNode(node));
	}

	/*
	given a DOM element, return the list of all scroll parents, up the list of ancesors
	until we get to the top window object. This list is what we attach scroll listeners
	to, because if any of these parent elements scroll, we'll need to re-calculate the
	reference element's position.
	*/

	function listScrollParents(element, list) {
	  var _element$ownerDocumen;

	  if (list === void 0) {
	    list = [];
	  }

	  var scrollParent = getScrollParent(element);
	  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
	  var win = getWindow(scrollParent);
	  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
	  var updatedList = list.concat(target);
	  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
	  updatedList.concat(listScrollParents(getParentNode(target)));
	}

	function isTableElement(element) {
	  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
	}

	function getTrueOffsetParent(element) {
	  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
	  getComputedStyle(element).position === 'fixed') {
	    return null;
	  }

	  return element.offsetParent;
	} // `.offsetParent` reports `null` for fixed elements, while absolute elements
	// return the containing block


	function getContainingBlock(element) {
	  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
	  var isIE = navigator.userAgent.indexOf('Trident') !== -1;

	  if (isIE && isHTMLElement(element)) {
	    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
	    var elementCss = getComputedStyle(element);

	    if (elementCss.position === 'fixed') {
	      return null;
	    }
	  }

	  var currentNode = getParentNode(element);

	  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
	    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
	    // create a containing block.
	    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

	    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
	      return currentNode;
	    } else {
	      currentNode = currentNode.parentNode;
	    }
	  }

	  return null;
	} // Gets the closest ancestor positioned element. Handles some edge cases,
	// such as table ancestors and cross browser bugs.


	function getOffsetParent(element) {
	  var window = getWindow(element);
	  var offsetParent = getTrueOffsetParent(element);

	  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
	    offsetParent = getTrueOffsetParent(offsetParent);
	  }

	  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
	    return window;
	  }

	  return offsetParent || getContainingBlock(element) || window;
	}

	var top = 'top';
	var bottom = 'bottom';
	var right = 'right';
	var left = 'left';
	var auto = 'auto';
	var basePlacements = [top, bottom, right, left];
	var start = 'start';
	var end = 'end';
	var clippingParents = 'clippingParents';
	var viewport = 'viewport';
	var popper = 'popper';
	var reference = 'reference';
	var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
	  return acc.concat([placement + "-" + start, placement + "-" + end]);
	}, []);
	var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
	  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
	}, []); // modifiers that need to read the DOM

	var beforeRead = 'beforeRead';
	var read = 'read';
	var afterRead = 'afterRead'; // pure-logic modifiers

	var beforeMain = 'beforeMain';
	var main = 'main';
	var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

	var beforeWrite = 'beforeWrite';
	var write = 'write';
	var afterWrite = 'afterWrite';
	var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

	function order(modifiers) {
	  var map = new Map();
	  var visited = new Set();
	  var result = [];
	  modifiers.forEach(function (modifier) {
	    map.set(modifier.name, modifier);
	  }); // On visiting object, check for its dependencies and visit them recursively

	  function sort(modifier) {
	    visited.add(modifier.name);
	    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
	    requires.forEach(function (dep) {
	      if (!visited.has(dep)) {
	        var depModifier = map.get(dep);

	        if (depModifier) {
	          sort(depModifier);
	        }
	      }
	    });
	    result.push(modifier);
	  }

	  modifiers.forEach(function (modifier) {
	    if (!visited.has(modifier.name)) {
	      // check for visited object
	      sort(modifier);
	    }
	  });
	  return result;
	}

	function orderModifiers(modifiers) {
	  // order based on dependencies
	  var orderedModifiers = order(modifiers); // order based on phase

	  return modifierPhases.reduce(function (acc, phase) {
	    return acc.concat(orderedModifiers.filter(function (modifier) {
	      return modifier.phase === phase;
	    }));
	  }, []);
	}

	function debounce(fn) {
	  var pending;
	  return function () {
	    if (!pending) {
	      pending = new Promise(function (resolve) {
	        Promise.resolve().then(function () {
	          pending = undefined;
	          resolve(fn());
	        });
	      });
	    }

	    return pending;
	  };
	}

	function format$1(str) {
	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  return [].concat(args).reduce(function (p, c) {
	    return p.replace(/%s/, c);
	  }, str);
	}

	var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
	var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
	var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
	function validateModifiers(modifiers) {
	  modifiers.forEach(function (modifier) {
	    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
	    .filter(function (value, index, self) {
	      return self.indexOf(value) === index;
	    }).forEach(function (key) {
	      switch (key) {
	        case 'name':
	          if (typeof modifier.name !== 'string') {
	            console.error(format$1(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
	          }

	          break;

	        case 'enabled':
	          if (typeof modifier.enabled !== 'boolean') {
	            console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
	          }

	          break;

	        case 'phase':
	          if (modifierPhases.indexOf(modifier.phase) < 0) {
	            console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
	          }

	          break;

	        case 'fn':
	          if (typeof modifier.fn !== 'function') {
	            console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
	          }

	          break;

	        case 'effect':
	          if (modifier.effect != null && typeof modifier.effect !== 'function') {
	            console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
	          }

	          break;

	        case 'requires':
	          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
	            console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
	          }

	          break;

	        case 'requiresIfExists':
	          if (!Array.isArray(modifier.requiresIfExists)) {
	            console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
	          }

	          break;

	        case 'options':
	        case 'data':
	          break;

	        default:
	          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
	            return "\"" + s + "\"";
	          }).join(', ') + "; but \"" + key + "\" was provided.");
	      }

	      modifier.requires && modifier.requires.forEach(function (requirement) {
	        if (modifiers.find(function (mod) {
	          return mod.name === requirement;
	        }) == null) {
	          console.error(format$1(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
	        }
	      });
	    });
	  });
	}

	function uniqueBy(arr, fn) {
	  var identifiers = new Set();
	  return arr.filter(function (item) {
	    var identifier = fn(item);

	    if (!identifiers.has(identifier)) {
	      identifiers.add(identifier);
	      return true;
	    }
	  });
	}

	function getBasePlacement(placement) {
	  return placement.split('-')[0];
	}

	function mergeByName(modifiers) {
	  var merged = modifiers.reduce(function (merged, current) {
	    var existing = merged[current.name];
	    merged[current.name] = existing ? Object.assign({}, existing, current, {
	      options: Object.assign({}, existing.options, current.options),
	      data: Object.assign({}, existing.data, current.data)
	    }) : current;
	    return merged;
	  }, {}); // IE11 does not support Object.values

	  return Object.keys(merged).map(function (key) {
	    return merged[key];
	  });
	}

	function getViewportRect(element) {
	  var win = getWindow(element);
	  var html = getDocumentElement(element);
	  var visualViewport = win.visualViewport;
	  var width = html.clientWidth;
	  var height = html.clientHeight;
	  var x = 0;
	  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
	  // can be obscured underneath it.
	  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
	  // if it isn't open, so if this isn't available, the popper will be detected
	  // to overflow the bottom of the screen too early.

	  if (visualViewport) {
	    width = visualViewport.width;
	    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
	    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
	    // errors due to floating point numbers, so we need to check precision.
	    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
	    // Feature detection fails in mobile emulation mode in Chrome.
	    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
	    // 0.001
	    // Fallback here: "Not Safari" userAgent

	    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
	      x = visualViewport.offsetLeft;
	      y = visualViewport.offsetTop;
	    }
	  }

	  return {
	    width: width,
	    height: height,
	    x: x + getWindowScrollBarX(element),
	    y: y
	  };
	}

	// of the `<html>` and `<body>` rect bounds if horizontally scrollable

	function getDocumentRect(element) {
	  var _element$ownerDocumen;

	  var html = getDocumentElement(element);
	  var winScroll = getWindowScroll(element);
	  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
	  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
	  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
	  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
	  var y = -winScroll.scrollTop;

	  if (getComputedStyle(body || html).direction === 'rtl') {
	    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
	  }

	  return {
	    width: width,
	    height: height,
	    x: x,
	    y: y
	  };
	}

	function contains(parent, child) {
	  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

	  if (parent.contains(child)) {
	    return true;
	  } // then fallback to custom implementation with Shadow DOM support
	  else if (rootNode && isShadowRoot(rootNode)) {
	      var next = child;

	      do {
	        if (next && parent.isSameNode(next)) {
	          return true;
	        } // $FlowFixMe[prop-missing]: need a better way to handle this...


	        next = next.parentNode || next.host;
	      } while (next);
	    } // Give up, the result is false


	  return false;
	}

	function rectToClientRect(rect) {
	  return Object.assign({}, rect, {
	    left: rect.x,
	    top: rect.y,
	    right: rect.x + rect.width,
	    bottom: rect.y + rect.height
	  });
	}

	function getInnerBoundingClientRect(element) {
	  var rect = getBoundingClientRect(element);
	  rect.top = rect.top + element.clientTop;
	  rect.left = rect.left + element.clientLeft;
	  rect.bottom = rect.top + element.clientHeight;
	  rect.right = rect.left + element.clientWidth;
	  rect.width = element.clientWidth;
	  rect.height = element.clientHeight;
	  rect.x = rect.left;
	  rect.y = rect.top;
	  return rect;
	}

	function getClientRectFromMixedType(element, clippingParent) {
	  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement$1(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
	} // A "clipping parent" is an overflowable container with the characteristic of
	// clipping (or hiding) overflowing elements with a position different from
	// `initial`


	function getClippingParents(element) {
	  var clippingParents = listScrollParents(getParentNode(element));
	  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
	  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

	  if (!isElement$1(clipperElement)) {
	    return [];
	  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


	  return clippingParents.filter(function (clippingParent) {
	    return isElement$1(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
	  });
	} // Gets the maximum area that the element is visible in due to any number of
	// clipping parents


	function getClippingRect(element, boundary, rootBoundary) {
	  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
	  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
	  var firstClippingParent = clippingParents[0];
	  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
	    var rect = getClientRectFromMixedType(element, clippingParent);
	    accRect.top = max(rect.top, accRect.top);
	    accRect.right = min(rect.right, accRect.right);
	    accRect.bottom = min(rect.bottom, accRect.bottom);
	    accRect.left = max(rect.left, accRect.left);
	    return accRect;
	  }, getClientRectFromMixedType(element, firstClippingParent));
	  clippingRect.width = clippingRect.right - clippingRect.left;
	  clippingRect.height = clippingRect.bottom - clippingRect.top;
	  clippingRect.x = clippingRect.left;
	  clippingRect.y = clippingRect.top;
	  return clippingRect;
	}

	function getVariation(placement) {
	  return placement.split('-')[1];
	}

	function getMainAxisFromPlacement(placement) {
	  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
	}

	function computeOffsets(_ref) {
	  var reference = _ref.reference,
	      element = _ref.element,
	      placement = _ref.placement;
	  var basePlacement = placement ? getBasePlacement(placement) : null;
	  var variation = placement ? getVariation(placement) : null;
	  var commonX = reference.x + reference.width / 2 - element.width / 2;
	  var commonY = reference.y + reference.height / 2 - element.height / 2;
	  var offsets;

	  switch (basePlacement) {
	    case top:
	      offsets = {
	        x: commonX,
	        y: reference.y - element.height
	      };
	      break;

	    case bottom:
	      offsets = {
	        x: commonX,
	        y: reference.y + reference.height
	      };
	      break;

	    case right:
	      offsets = {
	        x: reference.x + reference.width,
	        y: commonY
	      };
	      break;

	    case left:
	      offsets = {
	        x: reference.x - element.width,
	        y: commonY
	      };
	      break;

	    default:
	      offsets = {
	        x: reference.x,
	        y: reference.y
	      };
	  }

	  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

	  if (mainAxis != null) {
	    var len = mainAxis === 'y' ? 'height' : 'width';

	    switch (variation) {
	      case start:
	        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
	        break;

	      case end:
	        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
	        break;
	    }
	  }

	  return offsets;
	}

	function getFreshSideObject() {
	  return {
	    top: 0,
	    right: 0,
	    bottom: 0,
	    left: 0
	  };
	}

	function mergePaddingObject(paddingObject) {
	  return Object.assign({}, getFreshSideObject(), paddingObject);
	}

	function expandToHashMap(value, keys) {
	  return keys.reduce(function (hashMap, key) {
	    hashMap[key] = value;
	    return hashMap;
	  }, {});
	}

	function detectOverflow(state, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var _options = options,
	      _options$placement = _options.placement,
	      placement = _options$placement === void 0 ? state.placement : _options$placement,
	      _options$boundary = _options.boundary,
	      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
	      _options$rootBoundary = _options.rootBoundary,
	      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
	      _options$elementConte = _options.elementContext,
	      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
	      _options$altBoundary = _options.altBoundary,
	      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
	      _options$padding = _options.padding,
	      padding = _options$padding === void 0 ? 0 : _options$padding;
	  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
	  var altContext = elementContext === popper ? reference : popper;
	  var popperRect = state.rects.popper;
	  var element = state.elements[altBoundary ? altContext : elementContext];
	  var clippingClientRect = getClippingRect(isElement$1(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
	  var referenceClientRect = getBoundingClientRect(state.elements.reference);
	  var popperOffsets = computeOffsets({
	    reference: referenceClientRect,
	    element: popperRect,
	    strategy: 'absolute',
	    placement: placement
	  });
	  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
	  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
	  // 0 or negative = within the clipping rect

	  var overflowOffsets = {
	    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
	    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
	    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
	    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
	  };
	  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

	  if (elementContext === popper && offsetData) {
	    var offset = offsetData[placement];
	    Object.keys(overflowOffsets).forEach(function (key) {
	      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
	      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
	      overflowOffsets[key] += offset[axis] * multiply;
	    });
	  }

	  return overflowOffsets;
	}

	var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
	var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
	var DEFAULT_OPTIONS = {
	  placement: 'bottom',
	  modifiers: [],
	  strategy: 'absolute'
	};

	function areValidElements() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return !args.some(function (element) {
	    return !(element && typeof element.getBoundingClientRect === 'function');
	  });
	}

	function popperGenerator(generatorOptions) {
	  if (generatorOptions === void 0) {
	    generatorOptions = {};
	  }

	  var _generatorOptions = generatorOptions,
	      _generatorOptions$def = _generatorOptions.defaultModifiers,
	      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
	      _generatorOptions$def2 = _generatorOptions.defaultOptions,
	      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
	  return function createPopper(reference, popper, options) {
	    if (options === void 0) {
	      options = defaultOptions;
	    }

	    var state = {
	      placement: 'bottom',
	      orderedModifiers: [],
	      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
	      modifiersData: {},
	      elements: {
	        reference: reference,
	        popper: popper
	      },
	      attributes: {},
	      styles: {}
	    };
	    var effectCleanupFns = [];
	    var isDestroyed = false;
	    var instance = {
	      state: state,
	      setOptions: function setOptions(setOptionsAction) {
	        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
	        cleanupModifierEffects();
	        state.options = Object.assign({}, defaultOptions, state.options, options);
	        state.scrollParents = {
	          reference: isElement$1(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
	          popper: listScrollParents(popper)
	        }; // Orders the modifiers based on their dependencies and `phase`
	        // properties

	        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

	        state.orderedModifiers = orderedModifiers.filter(function (m) {
	          return m.enabled;
	        }); // Validate the provided modifiers so that the consumer will get warned
	        // if one of the modifiers is invalid for any reason

	        {
	          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
	            var name = _ref.name;
	            return name;
	          });
	          validateModifiers(modifiers);

	          if (getBasePlacement(state.options.placement) === auto) {
	            var flipModifier = state.orderedModifiers.find(function (_ref2) {
	              var name = _ref2.name;
	              return name === 'flip';
	            });

	            if (!flipModifier) {
	              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
	            }
	          }

	          var _getComputedStyle = getComputedStyle(popper),
	              marginTop = _getComputedStyle.marginTop,
	              marginRight = _getComputedStyle.marginRight,
	              marginBottom = _getComputedStyle.marginBottom,
	              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
	          // cause bugs with positioning, so we'll warn the consumer


	          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
	            return parseFloat(margin);
	          })) {
	            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
	          }
	        }

	        runModifierEffects();
	        return instance.update();
	      },
	      // Sync update – it will always be executed, even if not necessary. This
	      // is useful for low frequency updates where sync behavior simplifies the
	      // logic.
	      // For high frequency updates (e.g. `resize` and `scroll` events), always
	      // prefer the async Popper#update method
	      forceUpdate: function forceUpdate() {
	        if (isDestroyed) {
	          return;
	        }

	        var _state$elements = state.elements,
	            reference = _state$elements.reference,
	            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
	        // anymore

	        if (!areValidElements(reference, popper)) {
	          {
	            console.error(INVALID_ELEMENT_ERROR);
	          }

	          return;
	        } // Store the reference and popper rects to be read by modifiers


	        state.rects = {
	          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
	          popper: getLayoutRect(popper)
	        }; // Modifiers have the ability to reset the current update cycle. The
	        // most common use case for this is the `flip` modifier changing the
	        // placement, which then needs to re-run all the modifiers, because the
	        // logic was previously ran for the previous placement and is therefore
	        // stale/incorrect

	        state.reset = false;
	        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
	        // is filled with the initial data specified by the modifier. This means
	        // it doesn't persist and is fresh on each update.
	        // To ensure persistent data, use `${name}#persistent`

	        state.orderedModifiers.forEach(function (modifier) {
	          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
	        });
	        var __debug_loops__ = 0;

	        for (var index = 0; index < state.orderedModifiers.length; index++) {
	          {
	            __debug_loops__ += 1;

	            if (__debug_loops__ > 100) {
	              console.error(INFINITE_LOOP_ERROR);
	              break;
	            }
	          }

	          if (state.reset === true) {
	            state.reset = false;
	            index = -1;
	            continue;
	          }

	          var _state$orderedModifie = state.orderedModifiers[index],
	              fn = _state$orderedModifie.fn,
	              _state$orderedModifie2 = _state$orderedModifie.options,
	              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
	              name = _state$orderedModifie.name;

	          if (typeof fn === 'function') {
	            state = fn({
	              state: state,
	              options: _options,
	              name: name,
	              instance: instance
	            }) || state;
	          }
	        }
	      },
	      // Async and optimistically optimized update – it will not be executed if
	      // not necessary (debounced to run at most once-per-tick)
	      update: debounce(function () {
	        return new Promise(function (resolve) {
	          instance.forceUpdate();
	          resolve(state);
	        });
	      }),
	      destroy: function destroy() {
	        cleanupModifierEffects();
	        isDestroyed = true;
	      }
	    };

	    if (!areValidElements(reference, popper)) {
	      {
	        console.error(INVALID_ELEMENT_ERROR);
	      }

	      return instance;
	    }

	    instance.setOptions(options).then(function (state) {
	      if (!isDestroyed && options.onFirstUpdate) {
	        options.onFirstUpdate(state);
	      }
	    }); // Modifiers have the ability to execute arbitrary code before the first
	    // update cycle runs. They will be executed in the same order as the update
	    // cycle. This is useful when a modifier adds some persistent data that
	    // other modifiers need to use, but the modifier is run after the dependent
	    // one.

	    function runModifierEffects() {
	      state.orderedModifiers.forEach(function (_ref3) {
	        var name = _ref3.name,
	            _ref3$options = _ref3.options,
	            options = _ref3$options === void 0 ? {} : _ref3$options,
	            effect = _ref3.effect;

	        if (typeof effect === 'function') {
	          var cleanupFn = effect({
	            state: state,
	            name: name,
	            instance: instance,
	            options: options
	          });

	          var noopFn = function noopFn() {};

	          effectCleanupFns.push(cleanupFn || noopFn);
	        }
	      });
	    }

	    function cleanupModifierEffects() {
	      effectCleanupFns.forEach(function (fn) {
	        return fn();
	      });
	      effectCleanupFns = [];
	    }

	    return instance;
	  };
	}

	var passive = {
	  passive: true
	};

	function effect$2(_ref) {
	  var state = _ref.state,
	      instance = _ref.instance,
	      options = _ref.options;
	  var _options$scroll = options.scroll,
	      scroll = _options$scroll === void 0 ? true : _options$scroll,
	      _options$resize = options.resize,
	      resize = _options$resize === void 0 ? true : _options$resize;
	  var window = getWindow(state.elements.popper);
	  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

	  if (scroll) {
	    scrollParents.forEach(function (scrollParent) {
	      scrollParent.addEventListener('scroll', instance.update, passive);
	    });
	  }

	  if (resize) {
	    window.addEventListener('resize', instance.update, passive);
	  }

	  return function () {
	    if (scroll) {
	      scrollParents.forEach(function (scrollParent) {
	        scrollParent.removeEventListener('scroll', instance.update, passive);
	      });
	    }

	    if (resize) {
	      window.removeEventListener('resize', instance.update, passive);
	    }
	  };
	} // eslint-disable-next-line import/no-unused-modules


	var eventListeners = {
	  name: 'eventListeners',
	  enabled: true,
	  phase: 'write',
	  fn: function fn() {},
	  effect: effect$2,
	  data: {}
	};

	function popperOffsets(_ref) {
	  var state = _ref.state,
	      name = _ref.name;
	  // Offsets are the actual position the popper needs to have to be
	  // properly positioned near its reference element
	  // This is the most basic placement, and will be adjusted by
	  // the modifiers in the next step
	  state.modifiersData[name] = computeOffsets({
	    reference: state.rects.reference,
	    element: state.rects.popper,
	    strategy: 'absolute',
	    placement: state.placement
	  });
	} // eslint-disable-next-line import/no-unused-modules


	var popperOffsets$1 = {
	  name: 'popperOffsets',
	  enabled: true,
	  phase: 'read',
	  fn: popperOffsets,
	  data: {}
	};

	var unsetSides = {
	  top: 'auto',
	  right: 'auto',
	  bottom: 'auto',
	  left: 'auto'
	}; // Round the offsets to the nearest suitable subpixel based on the DPR.
	// Zooming can change the DPR, but it seems to report a value that will
	// cleanly divide the values into the appropriate subpixels.

	function roundOffsetsByDPR(_ref) {
	  var x = _ref.x,
	      y = _ref.y;
	  var win = window;
	  var dpr = win.devicePixelRatio || 1;
	  return {
	    x: round$1(x * dpr) / dpr || 0,
	    y: round$1(y * dpr) / dpr || 0
	  };
	}

	function mapToStyles(_ref2) {
	  var _Object$assign2;

	  var popper = _ref2.popper,
	      popperRect = _ref2.popperRect,
	      placement = _ref2.placement,
	      variation = _ref2.variation,
	      offsets = _ref2.offsets,
	      position = _ref2.position,
	      gpuAcceleration = _ref2.gpuAcceleration,
	      adaptive = _ref2.adaptive,
	      roundOffsets = _ref2.roundOffsets,
	      isFixed = _ref2.isFixed;
	  var _offsets$x = offsets.x,
	      x = _offsets$x === void 0 ? 0 : _offsets$x,
	      _offsets$y = offsets.y,
	      y = _offsets$y === void 0 ? 0 : _offsets$y;

	  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
	    x: x,
	    y: y
	  }) : {
	    x: x,
	    y: y
	  };

	  x = _ref3.x;
	  y = _ref3.y;
	  var hasX = offsets.hasOwnProperty('x');
	  var hasY = offsets.hasOwnProperty('y');
	  var sideX = left;
	  var sideY = top;
	  var win = window;

	  if (adaptive) {
	    var offsetParent = getOffsetParent(popper);
	    var heightProp = 'clientHeight';
	    var widthProp = 'clientWidth';

	    if (offsetParent === getWindow(popper)) {
	      offsetParent = getDocumentElement(popper);

	      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
	        heightProp = 'scrollHeight';
	        widthProp = 'scrollWidth';
	      }
	    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


	    offsetParent = offsetParent;

	    if (placement === top || (placement === left || placement === right) && variation === end) {
	      sideY = bottom;
	      var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
	      offsetParent[heightProp];
	      y -= offsetY - popperRect.height;
	      y *= gpuAcceleration ? 1 : -1;
	    }

	    if (placement === left || (placement === top || placement === bottom) && variation === end) {
	      sideX = right;
	      var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
	      offsetParent[widthProp];
	      x -= offsetX - popperRect.width;
	      x *= gpuAcceleration ? 1 : -1;
	    }
	  }

	  var commonStyles = Object.assign({
	    position: position
	  }, adaptive && unsetSides);

	  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
	    x: x,
	    y: y
	  }) : {
	    x: x,
	    y: y
	  };

	  x = _ref4.x;
	  y = _ref4.y;

	  if (gpuAcceleration) {
	    var _Object$assign;

	    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
	  }

	  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
	}

	function computeStyles(_ref5) {
	  var state = _ref5.state,
	      options = _ref5.options;
	  var _options$gpuAccelerat = options.gpuAcceleration,
	      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
	      _options$adaptive = options.adaptive,
	      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
	      _options$roundOffsets = options.roundOffsets,
	      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

	  {
	    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

	    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
	      return transitionProperty.indexOf(property) >= 0;
	    })) {
	      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
	    }
	  }

	  var commonStyles = {
	    placement: getBasePlacement(state.placement),
	    variation: getVariation(state.placement),
	    popper: state.elements.popper,
	    popperRect: state.rects.popper,
	    gpuAcceleration: gpuAcceleration,
	    isFixed: state.options.strategy === 'fixed'
	  };

	  if (state.modifiersData.popperOffsets != null) {
	    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
	      offsets: state.modifiersData.popperOffsets,
	      position: state.options.strategy,
	      adaptive: adaptive,
	      roundOffsets: roundOffsets
	    })));
	  }

	  if (state.modifiersData.arrow != null) {
	    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
	      offsets: state.modifiersData.arrow,
	      position: 'absolute',
	      adaptive: false,
	      roundOffsets: roundOffsets
	    })));
	  }

	  state.attributes.popper = Object.assign({}, state.attributes.popper, {
	    'data-popper-placement': state.placement
	  });
	} // eslint-disable-next-line import/no-unused-modules


	var computeStyles$1 = {
	  name: 'computeStyles',
	  enabled: true,
	  phase: 'beforeWrite',
	  fn: computeStyles,
	  data: {}
	};

	// and applies them to the HTMLElements such as popper and arrow

	function applyStyles(_ref) {
	  var state = _ref.state;
	  Object.keys(state.elements).forEach(function (name) {
	    var style = state.styles[name] || {};
	    var attributes = state.attributes[name] || {};
	    var element = state.elements[name]; // arrow is optional + virtual elements

	    if (!isHTMLElement(element) || !getNodeName(element)) {
	      return;
	    } // Flow doesn't support to extend this property, but it's the most
	    // effective way to apply styles to an HTMLElement
	    // $FlowFixMe[cannot-write]


	    Object.assign(element.style, style);
	    Object.keys(attributes).forEach(function (name) {
	      var value = attributes[name];

	      if (value === false) {
	        element.removeAttribute(name);
	      } else {
	        element.setAttribute(name, value === true ? '' : value);
	      }
	    });
	  });
	}

	function effect$1(_ref2) {
	  var state = _ref2.state;
	  var initialStyles = {
	    popper: {
	      position: state.options.strategy,
	      left: '0',
	      top: '0',
	      margin: '0'
	    },
	    arrow: {
	      position: 'absolute'
	    },
	    reference: {}
	  };
	  Object.assign(state.elements.popper.style, initialStyles.popper);
	  state.styles = initialStyles;

	  if (state.elements.arrow) {
	    Object.assign(state.elements.arrow.style, initialStyles.arrow);
	  }

	  return function () {
	    Object.keys(state.elements).forEach(function (name) {
	      var element = state.elements[name];
	      var attributes = state.attributes[name] || {};
	      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

	      var style = styleProperties.reduce(function (style, property) {
	        style[property] = '';
	        return style;
	      }, {}); // arrow is optional + virtual elements

	      if (!isHTMLElement(element) || !getNodeName(element)) {
	        return;
	      }

	      Object.assign(element.style, style);
	      Object.keys(attributes).forEach(function (attribute) {
	        element.removeAttribute(attribute);
	      });
	    });
	  };
	} // eslint-disable-next-line import/no-unused-modules


	var applyStyles$1 = {
	  name: 'applyStyles',
	  enabled: true,
	  phase: 'write',
	  fn: applyStyles,
	  effect: effect$1,
	  requires: ['computeStyles']
	};

	function distanceAndSkiddingToXY(placement, rects, offset) {
	  var basePlacement = getBasePlacement(placement);
	  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

	  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
	    placement: placement
	  })) : offset,
	      skidding = _ref[0],
	      distance = _ref[1];

	  skidding = skidding || 0;
	  distance = (distance || 0) * invertDistance;
	  return [left, right].indexOf(basePlacement) >= 0 ? {
	    x: distance,
	    y: skidding
	  } : {
	    x: skidding,
	    y: distance
	  };
	}

	function offset(_ref2) {
	  var state = _ref2.state,
	      options = _ref2.options,
	      name = _ref2.name;
	  var _options$offset = options.offset,
	      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
	  var data = placements.reduce(function (acc, placement) {
	    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
	    return acc;
	  }, {});
	  var _data$state$placement = data[state.placement],
	      x = _data$state$placement.x,
	      y = _data$state$placement.y;

	  if (state.modifiersData.popperOffsets != null) {
	    state.modifiersData.popperOffsets.x += x;
	    state.modifiersData.popperOffsets.y += y;
	  }

	  state.modifiersData[name] = data;
	} // eslint-disable-next-line import/no-unused-modules


	var offset$1 = {
	  name: 'offset',
	  enabled: true,
	  phase: 'main',
	  requires: ['popperOffsets'],
	  fn: offset
	};

	var hash$1 = {
	  left: 'right',
	  right: 'left',
	  bottom: 'top',
	  top: 'bottom'
	};
	function getOppositePlacement(placement) {
	  return placement.replace(/left|right|bottom|top/g, function (matched) {
	    return hash$1[matched];
	  });
	}

	var hash = {
	  start: 'end',
	  end: 'start'
	};
	function getOppositeVariationPlacement(placement) {
	  return placement.replace(/start|end/g, function (matched) {
	    return hash[matched];
	  });
	}

	function computeAutoPlacement(state, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var _options = options,
	      placement = _options.placement,
	      boundary = _options.boundary,
	      rootBoundary = _options.rootBoundary,
	      padding = _options.padding,
	      flipVariations = _options.flipVariations,
	      _options$allowedAutoP = _options.allowedAutoPlacements,
	      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
	  var variation = getVariation(placement);
	  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
	    return getVariation(placement) === variation;
	  }) : basePlacements;
	  var allowedPlacements = placements$1.filter(function (placement) {
	    return allowedAutoPlacements.indexOf(placement) >= 0;
	  });

	  if (allowedPlacements.length === 0) {
	    allowedPlacements = placements$1;

	    {
	      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
	    }
	  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


	  var overflows = allowedPlacements.reduce(function (acc, placement) {
	    acc[placement] = detectOverflow(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      padding: padding
	    })[getBasePlacement(placement)];
	    return acc;
	  }, {});
	  return Object.keys(overflows).sort(function (a, b) {
	    return overflows[a] - overflows[b];
	  });
	}

	function getExpandedFallbackPlacements(placement) {
	  if (getBasePlacement(placement) === auto) {
	    return [];
	  }

	  var oppositePlacement = getOppositePlacement(placement);
	  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
	}

	function flip(_ref) {
	  var state = _ref.state,
	      options = _ref.options,
	      name = _ref.name;

	  if (state.modifiersData[name]._skip) {
	    return;
	  }

	  var _options$mainAxis = options.mainAxis,
	      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
	      _options$altAxis = options.altAxis,
	      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
	      specifiedFallbackPlacements = options.fallbackPlacements,
	      padding = options.padding,
	      boundary = options.boundary,
	      rootBoundary = options.rootBoundary,
	      altBoundary = options.altBoundary,
	      _options$flipVariatio = options.flipVariations,
	      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
	      allowedAutoPlacements = options.allowedAutoPlacements;
	  var preferredPlacement = state.options.placement;
	  var basePlacement = getBasePlacement(preferredPlacement);
	  var isBasePlacement = basePlacement === preferredPlacement;
	  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
	  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
	    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      padding: padding,
	      flipVariations: flipVariations,
	      allowedAutoPlacements: allowedAutoPlacements
	    }) : placement);
	  }, []);
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var checksMap = new Map();
	  var makeFallbackChecks = true;
	  var firstFittingPlacement = placements[0];

	  for (var i = 0; i < placements.length; i++) {
	    var placement = placements[i];

	    var _basePlacement = getBasePlacement(placement);

	    var isStartVariation = getVariation(placement) === start;
	    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
	    var len = isVertical ? 'width' : 'height';
	    var overflow = detectOverflow(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      altBoundary: altBoundary,
	      padding: padding
	    });
	    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

	    if (referenceRect[len] > popperRect[len]) {
	      mainVariationSide = getOppositePlacement(mainVariationSide);
	    }

	    var altVariationSide = getOppositePlacement(mainVariationSide);
	    var checks = [];

	    if (checkMainAxis) {
	      checks.push(overflow[_basePlacement] <= 0);
	    }

	    if (checkAltAxis) {
	      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
	    }

	    if (checks.every(function (check) {
	      return check;
	    })) {
	      firstFittingPlacement = placement;
	      makeFallbackChecks = false;
	      break;
	    }

	    checksMap.set(placement, checks);
	  }

	  if (makeFallbackChecks) {
	    // `2` may be desired in some cases – research later
	    var numberOfChecks = flipVariations ? 3 : 1;

	    var _loop = function _loop(_i) {
	      var fittingPlacement = placements.find(function (placement) {
	        var checks = checksMap.get(placement);

	        if (checks) {
	          return checks.slice(0, _i).every(function (check) {
	            return check;
	          });
	        }
	      });

	      if (fittingPlacement) {
	        firstFittingPlacement = fittingPlacement;
	        return "break";
	      }
	    };

	    for (var _i = numberOfChecks; _i > 0; _i--) {
	      var _ret = _loop(_i);

	      if (_ret === "break") break;
	    }
	  }

	  if (state.placement !== firstFittingPlacement) {
	    state.modifiersData[name]._skip = true;
	    state.placement = firstFittingPlacement;
	    state.reset = true;
	  }
	} // eslint-disable-next-line import/no-unused-modules


	var flip$1 = {
	  name: 'flip',
	  enabled: true,
	  phase: 'main',
	  fn: flip,
	  requiresIfExists: ['offset'],
	  data: {
	    _skip: false
	  }
	};

	function getAltAxis(axis) {
	  return axis === 'x' ? 'y' : 'x';
	}

	function within(min$1, value, max$1) {
	  return max(min$1, min(value, max$1));
	}
	function withinMaxClamp(min, value, max) {
	  var v = within(min, value, max);
	  return v > max ? max : v;
	}

	function preventOverflow(_ref) {
	  var state = _ref.state,
	      options = _ref.options,
	      name = _ref.name;
	  var _options$mainAxis = options.mainAxis,
	      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
	      _options$altAxis = options.altAxis,
	      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
	      boundary = options.boundary,
	      rootBoundary = options.rootBoundary,
	      altBoundary = options.altBoundary,
	      padding = options.padding,
	      _options$tether = options.tether,
	      tether = _options$tether === void 0 ? true : _options$tether,
	      _options$tetherOffset = options.tetherOffset,
	      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
	  var overflow = detectOverflow(state, {
	    boundary: boundary,
	    rootBoundary: rootBoundary,
	    padding: padding,
	    altBoundary: altBoundary
	  });
	  var basePlacement = getBasePlacement(state.placement);
	  var variation = getVariation(state.placement);
	  var isBasePlacement = !variation;
	  var mainAxis = getMainAxisFromPlacement(basePlacement);
	  var altAxis = getAltAxis(mainAxis);
	  var popperOffsets = state.modifiersData.popperOffsets;
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
	    placement: state.placement
	  })) : tetherOffset;
	  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
	    mainAxis: tetherOffsetValue,
	    altAxis: tetherOffsetValue
	  } : Object.assign({
	    mainAxis: 0,
	    altAxis: 0
	  }, tetherOffsetValue);
	  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
	  var data = {
	    x: 0,
	    y: 0
	  };

	  if (!popperOffsets) {
	    return;
	  }

	  if (checkMainAxis) {
	    var _offsetModifierState$;

	    var mainSide = mainAxis === 'y' ? top : left;
	    var altSide = mainAxis === 'y' ? bottom : right;
	    var len = mainAxis === 'y' ? 'height' : 'width';
	    var offset = popperOffsets[mainAxis];
	    var min$1 = offset + overflow[mainSide];
	    var max$1 = offset - overflow[altSide];
	    var additive = tether ? -popperRect[len] / 2 : 0;
	    var minLen = variation === start ? referenceRect[len] : popperRect[len];
	    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
	    // outside the reference bounds

	    var arrowElement = state.elements.arrow;
	    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
	      width: 0,
	      height: 0
	    };
	    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
	    var arrowPaddingMin = arrowPaddingObject[mainSide];
	    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
	    // to include its full size in the calculation. If the reference is small
	    // and near the edge of a boundary, the popper can overflow even if the
	    // reference is not overflowing as well (e.g. virtual elements with no
	    // width or height)

	    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
	    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
	    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
	    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
	    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
	    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
	    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
	    var tetherMax = offset + maxOffset - offsetModifierValue;
	    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
	    popperOffsets[mainAxis] = preventedOffset;
	    data[mainAxis] = preventedOffset - offset;
	  }

	  if (checkAltAxis) {
	    var _offsetModifierState$2;

	    var _mainSide = mainAxis === 'x' ? top : left;

	    var _altSide = mainAxis === 'x' ? bottom : right;

	    var _offset = popperOffsets[altAxis];

	    var _len = altAxis === 'y' ? 'height' : 'width';

	    var _min = _offset + overflow[_mainSide];

	    var _max = _offset - overflow[_altSide];

	    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

	    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

	    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

	    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

	    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

	    popperOffsets[altAxis] = _preventedOffset;
	    data[altAxis] = _preventedOffset - _offset;
	  }

	  state.modifiersData[name] = data;
	} // eslint-disable-next-line import/no-unused-modules


	var preventOverflow$1 = {
	  name: 'preventOverflow',
	  enabled: true,
	  phase: 'main',
	  fn: preventOverflow,
	  requiresIfExists: ['offset']
	};

	var toPaddingObject = function toPaddingObject(padding, state) {
	  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
	    placement: state.placement
	  })) : padding;
	  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
	};

	function arrow(_ref) {
	  var _state$modifiersData$;

	  var state = _ref.state,
	      name = _ref.name,
	      options = _ref.options;
	  var arrowElement = state.elements.arrow;
	  var popperOffsets = state.modifiersData.popperOffsets;
	  var basePlacement = getBasePlacement(state.placement);
	  var axis = getMainAxisFromPlacement(basePlacement);
	  var isVertical = [left, right].indexOf(basePlacement) >= 0;
	  var len = isVertical ? 'height' : 'width';

	  if (!arrowElement || !popperOffsets) {
	    return;
	  }

	  var paddingObject = toPaddingObject(options.padding, state);
	  var arrowRect = getLayoutRect(arrowElement);
	  var minProp = axis === 'y' ? top : left;
	  var maxProp = axis === 'y' ? bottom : right;
	  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
	  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
	  var arrowOffsetParent = getOffsetParent(arrowElement);
	  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
	  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
	  // outside of the popper bounds

	  var min = paddingObject[minProp];
	  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
	  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
	  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

	  var axisProp = axis;
	  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
	}

	function effect(_ref2) {
	  var state = _ref2.state,
	      options = _ref2.options;
	  var _options$element = options.element,
	      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

	  if (arrowElement == null) {
	    return;
	  } // CSS selector


	  if (typeof arrowElement === 'string') {
	    arrowElement = state.elements.popper.querySelector(arrowElement);

	    if (!arrowElement) {
	      return;
	    }
	  }

	  {
	    if (!isHTMLElement(arrowElement)) {
	      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
	    }
	  }

	  if (!contains(state.elements.popper, arrowElement)) {
	    {
	      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
	    }

	    return;
	  }

	  state.elements.arrow = arrowElement;
	} // eslint-disable-next-line import/no-unused-modules


	var arrow$1 = {
	  name: 'arrow',
	  enabled: true,
	  phase: 'main',
	  fn: arrow,
	  effect: effect,
	  requires: ['popperOffsets'],
	  requiresIfExists: ['preventOverflow']
	};

	function getSideOffsets(overflow, rect, preventedOffsets) {
	  if (preventedOffsets === void 0) {
	    preventedOffsets = {
	      x: 0,
	      y: 0
	    };
	  }

	  return {
	    top: overflow.top - rect.height - preventedOffsets.y,
	    right: overflow.right - rect.width + preventedOffsets.x,
	    bottom: overflow.bottom - rect.height + preventedOffsets.y,
	    left: overflow.left - rect.width - preventedOffsets.x
	  };
	}

	function isAnySideFullyClipped(overflow) {
	  return [top, right, bottom, left].some(function (side) {
	    return overflow[side] >= 0;
	  });
	}

	function hide(_ref) {
	  var state = _ref.state,
	      name = _ref.name;
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var preventedOffsets = state.modifiersData.preventOverflow;
	  var referenceOverflow = detectOverflow(state, {
	    elementContext: 'reference'
	  });
	  var popperAltOverflow = detectOverflow(state, {
	    altBoundary: true
	  });
	  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
	  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
	  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
	  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
	  state.modifiersData[name] = {
	    referenceClippingOffsets: referenceClippingOffsets,
	    popperEscapeOffsets: popperEscapeOffsets,
	    isReferenceHidden: isReferenceHidden,
	    hasPopperEscaped: hasPopperEscaped
	  };
	  state.attributes.popper = Object.assign({}, state.attributes.popper, {
	    'data-popper-reference-hidden': isReferenceHidden,
	    'data-popper-escaped': hasPopperEscaped
	  });
	} // eslint-disable-next-line import/no-unused-modules


	var hide$1 = {
	  name: 'hide',
	  enabled: true,
	  phase: 'main',
	  requiresIfExists: ['preventOverflow'],
	  fn: hide
	};

	var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
	var createPopper$1 = /*#__PURE__*/popperGenerator({
	  defaultModifiers: defaultModifiers$1
	}); // eslint-disable-next-line import/no-unused-modules

	var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
	var createPopper = /*#__PURE__*/popperGenerator({
	  defaultModifiers: defaultModifiers
	}); // eslint-disable-next-line import/no-unused-modules

	popper$1.applyStyles = applyStyles$1;
	popper$1.arrow = arrow$1;
	popper$1.computeStyles = computeStyles$1;
	popper$1.createPopper = createPopper;
	popper$1.createPopperLite = createPopper$1;
	popper$1.defaultModifiers = defaultModifiers;
	popper$1.detectOverflow = detectOverflow;
	popper$1.eventListeners = eventListeners;
	popper$1.flip = flip$1;
	popper$1.hide = hide$1;
	popper$1.offset = offset$1;
	popper$1.popperGenerator = popperGenerator;
	popper$1.popperOffsets = popperOffsets$1;
	popper$1.preventOverflow = preventOverflow$1;

	var _interopRequireDefault$1K = interopRequireDefault.exports;

	Object.defineProperty(PopperUnstyled$1, "__esModule", {
	  value: true
	});
	PopperUnstyled$1.default = void 0;

	var _extends2$1g = _interopRequireDefault$1K(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$19 = _interopRequireDefault$1K(objectWithoutPropertiesLoose.exports);

	var _utils$11 = utils$h;

	var _core = popper$1;

	var _propTypes$18 = _interopRequireDefault$1K(propTypes.exports);

	var React$1i = _interopRequireWildcard$1l(require$$3);

	var _Portal = _interopRequireDefault$1K(Portal$2);

	var _jsxRuntime$1j = jsxRuntime;

	const _excluded$19 = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "ownerState", "placement", "popperOptions", "popperRef", "TransitionProps"],
	      _excluded2$5 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"];

	function _getRequireWildcardCache$1l(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1l = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1l(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1l(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function flipPlacement(placement, direction) {
	  if (direction === 'ltr') {
	    return placement;
	  }

	  switch (placement) {
	    case 'bottom-end':
	      return 'bottom-start';

	    case 'bottom-start':
	      return 'bottom-end';

	    case 'top-end':
	      return 'top-start';

	    case 'top-start':
	      return 'top-end';

	    default:
	      return placement;
	  }
	}

	function resolveAnchorEl$1(anchorEl) {
	  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
	}

	const defaultPopperOptions = {};
	/* eslint-disable react/prop-types */

	const PopperTooltip = /*#__PURE__*/React$1i.forwardRef(function PopperTooltip(props, ref) {
	  const {
	    anchorEl,
	    children,
	    direction,
	    disablePortal,
	    modifiers,
	    open,
	    placement: initialPlacement,
	    popperOptions,
	    popperRef: popperRefProp,
	    TransitionProps
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$19.default)(props, _excluded$19);
	  const tooltipRef = React$1i.useRef(null);
	  const ownRef = (0, _utils$11.unstable_useForkRef)(tooltipRef, ref);
	  const popperRef = React$1i.useRef(null);
	  const handlePopperRef = (0, _utils$11.unstable_useForkRef)(popperRef, popperRefProp);
	  const handlePopperRefRef = React$1i.useRef(handlePopperRef);
	  (0, _utils$11.unstable_useEnhancedEffect)(() => {
	    handlePopperRefRef.current = handlePopperRef;
	  }, [handlePopperRef]);
	  React$1i.useImperativeHandle(popperRefProp, () => popperRef.current, []);
	  const rtlPlacement = flipPlacement(initialPlacement, direction);
	  /**
	   * placement initialized from prop but can change during lifetime if modifiers.flip.
	   * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
	   */

	  const [placement, setPlacement] = React$1i.useState(rtlPlacement);
	  React$1i.useEffect(() => {
	    if (popperRef.current) {
	      popperRef.current.forceUpdate();
	    }
	  });
	  (0, _utils$11.unstable_useEnhancedEffect)(() => {
	    if (!anchorEl || !open) {
	      return undefined;
	    }

	    const handlePopperUpdate = data => {
	      setPlacement(data.placement);
	    };

	    const resolvedAnchorEl = resolveAnchorEl$1(anchorEl);

	    {
	      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
	        const box = resolvedAnchorEl.getBoundingClientRect();

	        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	          console.warn(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	        }
	      }
	    }

	    let popperModifiers = [{
	      name: 'preventOverflow',
	      options: {
	        altBoundary: disablePortal
	      }
	    }, {
	      name: 'flip',
	      options: {
	        altBoundary: disablePortal
	      }
	    }, {
	      name: 'onUpdate',
	      enabled: true,
	      phase: 'afterWrite',
	      fn: ({
	        state
	      }) => {
	        handlePopperUpdate(state);
	      }
	    }];

	    if (modifiers != null) {
	      popperModifiers = popperModifiers.concat(modifiers);
	    }

	    if (popperOptions && popperOptions.modifiers != null) {
	      popperModifiers = popperModifiers.concat(popperOptions.modifiers);
	    }

	    const popper = (0, _core.createPopper)(resolveAnchorEl$1(anchorEl), tooltipRef.current, (0, _extends2$1g.default)({
	      placement: rtlPlacement
	    }, popperOptions, {
	      modifiers: popperModifiers
	    }));
	    handlePopperRefRef.current(popper);
	    return () => {
	      popper.destroy();
	      handlePopperRefRef.current(null);
	    };
	  }, [anchorEl, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
	  const childProps = {
	    placement
	  };

	  if (TransitionProps !== null) {
	    childProps.TransitionProps = TransitionProps;
	  }

	  return /*#__PURE__*/(0, _jsxRuntime$1j.jsx)("div", (0, _extends2$1g.default)({
	    ref: ownRef,
	    role: "tooltip"
	  }, other, {
	    children: typeof children === 'function' ? children(childProps) : children
	  }));
	});
	/* eslint-enable react/prop-types */

	/**
	 * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.
	 */

	const PopperUnstyled = /*#__PURE__*/React$1i.forwardRef(function PopperUnstyled(props, ref) {
	  const {
	    anchorEl,
	    children,
	    container: containerProp,
	    direction = 'ltr',
	    disablePortal = false,
	    keepMounted = false,
	    modifiers,
	    open,
	    placement = 'bottom',
	    popperOptions = defaultPopperOptions,
	    popperRef,
	    style,
	    transition = false
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$19.default)(props, _excluded2$5);
	  const [exited, setExited] = React$1i.useState(true);

	  const handleEnter = () => {
	    setExited(false);
	  };

	  const handleExited = () => {
	    setExited(true);
	  };

	  if (!keepMounted && !open && (!transition || exited)) {
	    return null;
	  } // If the container prop is provided, use that
	  // If the anchorEl prop is provided, use its parent body element as the container
	  // If neither are provided let the Modal take care of choosing the container


	  const container = containerProp || (anchorEl ? (0, _utils$11.unstable_ownerDocument)(resolveAnchorEl$1(anchorEl)).body : undefined);
	  return /*#__PURE__*/(0, _jsxRuntime$1j.jsx)(_Portal.default, {
	    disablePortal: disablePortal,
	    container: container,
	    children: /*#__PURE__*/(0, _jsxRuntime$1j.jsx)(PopperTooltip, (0, _extends2$1g.default)({
	      anchorEl: anchorEl,
	      direction: direction,
	      disablePortal: disablePortal,
	      modifiers: modifiers,
	      ref: ref,
	      open: transition ? !exited : open,
	      placement: placement,
	      popperOptions: popperOptions,
	      popperRef: popperRef
	    }, other, {
	      style: (0, _extends2$1g.default)({
	        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
	        position: 'fixed',
	        // Fix Popper.js display issue
	        top: 0,
	        left: 0,
	        display: !open && keepMounted && (!transition || exited) ? 'none' : null
	      }, style),
	      TransitionProps: transition ? {
	        in: open,
	        onEnter: handleEnter,
	        onExited: handleExited
	      } : null,
	      children: children
	    }))
	  });
	});
	PopperUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
	   * or a function that returns either.
	   * It's used to set the position of the popper.
	   * The return value will passed as the reference object of the Popper instance.
	   */
	  anchorEl: (0, _utils$11.chainPropTypes)(_propTypes$18.default.oneOfType([_utils$11.HTMLElementType, _propTypes$18.default.object, _propTypes$18.default.func]), props => {
	    if (props.open) {
	      const resolvedAnchorEl = resolveAnchorEl$1(props.anchorEl);

	      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
	        const box = resolvedAnchorEl.getBoundingClientRect();

	        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	          return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	        }
	      } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== 'function' || resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
	        return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'It should be an HTML element instance or a virtualElement ', '(https://popper.js.org/docs/v2/virtual-elements/).'].join('\n'));
	      }
	    }

	    return null;
	  }),

	  /**
	   * Popper render function or node.
	   */
	  children: _propTypes$18.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$18.default.node, _propTypes$18.default.func]),

	  /**
	   * An HTML element or function that returns one.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: _propTypes$18.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_utils$11.HTMLElementType, _propTypes$18.default.func]),

	  /**
	   * Direction of the text.
	   * @default 'ltr'
	   */
	  direction: _propTypes$18.default.oneOf(['ltr', 'rtl']),

	  /**
	   * The `children` will be under the DOM hierarchy of the parent component.
	   * @default false
	   */
	  disablePortal: _propTypes$18.default.bool,

	  /**
	   * Always keep the children in the DOM.
	   * This prop can be useful in SEO situation or
	   * when you want to maximize the responsiveness of the Popper.
	   * @default false
	   */
	  keepMounted: _propTypes$18.default.bool,

	  /**
	   * Popper.js is based on a "plugin-like" architecture,
	   * most of its features are fully encapsulated "modifiers".
	   *
	   * A modifier is a function that is called each time Popper.js needs to
	   * compute the position of the popper.
	   * For this reason, modifiers should be very performant to avoid bottlenecks.
	   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
	   */
	  modifiers: _propTypes$18.default.arrayOf(_propTypes$18.default.shape({
	    data: _propTypes$18.default.object,
	    effect: _propTypes$18.default.func,
	    enabled: _propTypes$18.default.bool,
	    fn: _propTypes$18.default.func,
	    name: _propTypes$18.default.any.isRequired,
	    options: _propTypes$18.default.object,
	    phase: _propTypes$18.default.oneOf(['afterMain', 'afterRead', 'afterWrite', 'beforeMain', 'beforeRead', 'beforeWrite', 'main', 'read', 'write']),
	    requires: _propTypes$18.default.arrayOf(_propTypes$18.default.string),
	    requiresIfExists: _propTypes$18.default.arrayOf(_propTypes$18.default.string)
	  })),

	  /**
	   * If `true`, the component is shown.
	   */
	  open: _propTypes$18.default.bool.isRequired,

	  /**
	   * Popper placement.
	   * @default 'bottom'
	   */
	  placement: _propTypes$18.default.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

	  /**
	   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
	   * @default {}
	   */
	  popperOptions: _propTypes$18.default.shape({
	    modifiers: _propTypes$18.default.array,
	    onFirstUpdate: _propTypes$18.default.func,
	    placement: _propTypes$18.default.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
	    strategy: _propTypes$18.default.oneOf(['absolute', 'fixed'])
	  }),

	  /**
	   * A ref that points to the used popper instance.
	   */
	  popperRef: _utils$11.refType,

	  /**
	   * @ignore
	   */
	  style: _propTypes$18.default.object,

	  /**
	   * Help supporting a react-transition-group/Transition component.
	   * @default false
	   */
	  transition: _propTypes$18.default.bool
	} ;
	var _default$2I = PopperUnstyled;
	PopperUnstyled$1.default = _default$2I;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _PopperUnstyled.default;
		  }
		});

		var _PopperUnstyled = _interopRequireDefault(PopperUnstyled$1);
	} (PopperUnstyled$2));

	var SelectUnstyledContext$1 = {};

	var _interopRequireDefault$1J = interopRequireDefault.exports;

	Object.defineProperty(SelectUnstyledContext$1, "__esModule", {
	  value: true
	});
	SelectUnstyledContext$1.SelectUnstyledContext = void 0;

	var _react$3 = _interopRequireDefault$1J(require$$3);

	const SelectUnstyledContext = /*#__PURE__*/_react$3.default.createContext(undefined);

	SelectUnstyledContext$1.SelectUnstyledContext = SelectUnstyledContext;

	var selectUnstyledClasses$1 = {};

	var _interopRequireDefault$1I = interopRequireDefault.exports;

	Object.defineProperty(selectUnstyledClasses$1, "__esModule", {
	  value: true
	});
	selectUnstyledClasses$1.default = void 0;
	selectUnstyledClasses$1.getSelectUnstyledUtilityClass = getSelectUnstyledUtilityClass;

	var _generateUtilityClass$8 = _interopRequireDefault$1I(generateUtilityClass$2);

	var _generateUtilityClasses$8 = _interopRequireDefault$1I(generateUtilityClasses$2);

	function getSelectUnstyledUtilityClass(slot) {
	  return (0, _generateUtilityClass$8.default)('MuiSelectUnstyled', slot);
	}

	const selectUnstyledClasses = (0, _generateUtilityClasses$8.default)('MuiSelectUnstyled', ['root', 'button', 'listbox', 'popper', 'active', 'expanded', 'disabled', 'focusVisible']);
	var _default$2H = selectUnstyledClasses;
	selectUnstyledClasses$1.default = _default$2H;

	var _interopRequireDefault$1H = interopRequireDefault.exports;

	Object.defineProperty(MultiSelectUnstyled$1, "__esModule", {
	  value: true
	});
	MultiSelectUnstyled$1.default = void 0;

	var _extends2$1f = _interopRequireDefault$1H(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$18 = _interopRequireDefault$1H(objectWithoutPropertiesLoose.exports);

	var React$1h = _interopRequireWildcard$1k(require$$3);

	var _propTypes$17 = _interopRequireDefault$1H(propTypes.exports);

	var _clsx$R = _interopRequireDefault$1H(clsx$1);

	var _utils$10 = utils$h;

	var _utils2$7 = utils$c;

	var _useSelect$1 = _interopRequireDefault$1H(useSelect$1);

	var _utils3$3 = utils$d;

	var _PopperUnstyled$1 = _interopRequireDefault$1H(PopperUnstyled$2);

	var _SelectUnstyledContext$2 = SelectUnstyledContext$1;

	var _composeClasses$9 = _interopRequireDefault$1H(composeClasses$2);

	var _selectUnstyledClasses$1 = selectUnstyledClasses$1;

	var _jsxRuntime$1i = jsxRuntime;

	const _excluded$18 = ["autoFocus", "children", "className", "component", "components", "componentsProps", "defaultListboxOpen", "defaultValue", "disabled", "listboxOpen", "onChange", "onListboxOpenChange", "value"];

	function _getRequireWildcardCache$1k(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1k = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1k(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1k(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function defaultRenderMultipleValues(selectedOptions) {
	  return /*#__PURE__*/(0, _jsxRuntime$1i.jsx)(React$1h.Fragment, {
	    children: selectedOptions.map(o => o.label).join(', ')
	  });
	}

	function useUtilityClasses$Q(ownerState) {
	  const {
	    active,
	    disabled,
	    open,
	    focusVisible
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],
	    listbox: ['listbox', disabled && 'disabled'],
	    popper: ['popper']
	  };
	  return (0, _composeClasses$9.default)(slots, _selectUnstyledClasses$1.getSelectUnstyledUtilityClass, {});
	}
	/**
	 * The foundation for building custom-styled multi-selection select components.
	 */


	const MultiSelectUnstyled = /*#__PURE__*/React$1h.forwardRef(function MultiSelectUnstyled(props, ref) {
	  var _props$renderValue, _ref, _components$Listbox, _components$Popper, _componentsProps$list, _componentsProps$list2, _componentsProps$root, _componentsProps$list3, _componentsProps$popp;

	  const {
	    autoFocus,
	    children,
	    className,
	    component,
	    components = {},
	    componentsProps = {},
	    defaultListboxOpen = false,
	    defaultValue = [],
	    disabled: disabledProp,
	    listboxOpen: listboxOpenProp,
	    onChange,
	    onListboxOpenChange,
	    value: valueProp
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$18.default)(props, _excluded$18);
	  const renderValue = (_props$renderValue = props.renderValue) != null ? _props$renderValue : defaultRenderMultipleValues;
	  const [groupedOptions, setGroupedOptions] = React$1h.useState([]);
	  const options = React$1h.useMemo(() => (0, _utils2$7.flattenOptionGroups)(groupedOptions), [groupedOptions]);
	  const [listboxOpen, setListboxOpen] = (0, _utils$10.unstable_useControlled)({
	    controlled: listboxOpenProp,
	    default: defaultListboxOpen,
	    name: 'MultiSelectUnstyled',
	    state: 'listboxOpen'
	  });
	  React$1h.useEffect(() => {
	    setGroupedOptions((0, _utils2$7.getOptionsFromChildren)(children));
	  }, [children]);
	  const [buttonDefined, setButtonDefined] = React$1h.useState(false);
	  const buttonRef = React$1h.useRef(null);
	  const Button = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
	  const ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : 'ul';
	  const Popper = (_components$Popper = components.Popper) != null ? _components$Popper : _PopperUnstyled$1.default;

	  const handleButtonRefChange = element => {
	    buttonRef.current = element;

	    if (element != null) {
	      setButtonDefined(true);
	    }
	  };

	  const handleButtonRef = (0, _utils$10.unstable_useForkRef)(ref, handleButtonRefChange);
	  React$1h.useEffect(() => {
	    if (autoFocus) {
	      buttonRef.current.focus();
	    }
	  }, [autoFocus]);

	  const handleOpenChange = isOpen => {
	    setListboxOpen(isOpen);
	    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
	  };

	  const {
	    buttonActive,
	    buttonFocusVisible,
	    disabled,
	    getButtonProps,
	    getListboxProps,
	    getOptionProps,
	    getOptionState,
	    value
	  } = (0, _useSelect$1.default)({
	    buttonComponent: Button,
	    buttonRef: handleButtonRef,
	    defaultValue,
	    disabled: disabledProp,
	    listboxId: (_componentsProps$list = componentsProps.listbox) == null ? void 0 : _componentsProps$list.id,
	    listboxRef: (_componentsProps$list2 = componentsProps.listbox) == null ? void 0 : _componentsProps$list2.ref,
	    multiple: true,
	    onChange,
	    onOpenChange: handleOpenChange,
	    open: listboxOpen,
	    options,
	    value: valueProp
	  });
	  const ownerState = (0, _extends2$1f.default)({}, props, {
	    active: buttonActive,
	    defaultListboxOpen,
	    disabled,
	    focusVisible: buttonFocusVisible,
	    open: listboxOpen,
	    renderValue,
	    value
	  });
	  const classes = useUtilityClasses$Q(ownerState);
	  const selectedOptions = React$1h.useMemo(() => {
	    if (value == null) {
	      return [];
	    }

	    return options.filter(o => value.includes(o.value));
	  }, [options, value]);
	  const buttonProps = (0, _utils3$3.appendOwnerState)(Button, (0, _extends2$1f.default)({}, other, componentsProps.root, getButtonProps(), {
	    className: (0, _clsx$R.default)(className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, classes.root)
	  }), ownerState);
	  const listboxProps = (0, _utils3$3.appendOwnerState)(ListboxRoot, (0, _extends2$1f.default)({}, componentsProps.listbox, getListboxProps(), {
	    className: (0, _clsx$R.default)((_componentsProps$list3 = componentsProps.listbox) == null ? void 0 : _componentsProps$list3.className, classes.listbox)
	  }), ownerState);
	  const popperProps = (0, _utils3$3.appendOwnerState)(Popper, (0, _extends2$1f.default)({
	    open: listboxOpen,
	    anchorEl: buttonRef.current,
	    placement: 'bottom-start',
	    disablePortal: true,
	    role: undefined
	  }, componentsProps.popper, {
	    className: (0, _clsx$R.default)((_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className, classes.popper)
	  }), ownerState);
	  const context = {
	    getOptionProps,
	    getOptionState
	  };
	  return /*#__PURE__*/(0, _jsxRuntime$1i.jsxs)(React$1h.Fragment, {
	    children: [/*#__PURE__*/(0, _jsxRuntime$1i.jsx)(Button, (0, _extends2$1f.default)({}, buttonProps, {
	      children: renderValue(selectedOptions)
	    })), buttonDefined && /*#__PURE__*/(0, _jsxRuntime$1i.jsx)(Popper, (0, _extends2$1f.default)({}, popperProps, {
	      children: /*#__PURE__*/(0, _jsxRuntime$1i.jsx)(ListboxRoot, (0, _extends2$1f.default)({}, listboxProps, {
	        children: /*#__PURE__*/(0, _jsxRuntime$1i.jsx)(_SelectUnstyledContext$2.SelectUnstyledContext.Provider, {
	          value: context,
	          children: children
	        })
	      }))
	    }))]
	  });
	});
	MultiSelectUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the select element is focused during the first mount
	   * @default false
	   */
	  autoFocus: _propTypes$17.default.bool,

	  /**
	   * @ignore
	   */
	  children: _propTypes$17.default.node,

	  /**
	   * @ignore
	   */
	  className: _propTypes$17.default.string,

	  /**
	   * @ignore
	   */
	  component: _propTypes$17.default.elementType,

	  /**
	   * The components used for each slot inside the Select.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$17.default.shape({
	    Listbox: _propTypes$17.default.elementType,
	    Popper: _propTypes$17.default.elementType,
	    Root: _propTypes$17.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: _propTypes$17.default.shape({
	    listbox: _propTypes$17.default.object,
	    popper: _propTypes$17.default.object,
	    root: _propTypes$17.default.object
	  }),

	  /**
	   * If `true`, the select will be initially open.
	   * @default false
	   */
	  defaultListboxOpen: _propTypes$17.default.bool,

	  /**
	   * The default selected values. Use when the component is not controlled.
	   * @default []
	   */
	  defaultValue: _propTypes$17.default.array,

	  /**
	   * If `true`, the select is disabled.
	   * @default false
	   */
	  disabled: _propTypes$17.default.bool,

	  /**
	   * Controls the open state of the select's listbox.
	   * @default undefined
	   */
	  listboxOpen: _propTypes$17.default.bool,

	  /**
	   * Callback fired when an option is selected.
	   */
	  onChange: _propTypes$17.default.func,

	  /**
	   * Callback fired when the component requests to be opened.
	   * Use in controlled mode (see listboxOpen).
	   */
	  onListboxOpenChange: _propTypes$17.default.func,

	  /**
	   * Function that customizes the rendering of the selected values.
	   */
	  renderValue: _propTypes$17.default.func,

	  /**
	   * The selected values.
	   * Set to an empty array to deselect all options.
	   */
	  value: _propTypes$17.default.array
	} ;
	/**
	 * The foundation for building custom-styled multi-selection select components.
	 *
	 * Demos:
	 *
	 * - [Selects](https://mui.com/components/selects/)
	 *
	 * API:
	 *
	 * - [MultiSelectUnstyled API](https://mui.com/api/multi-select-unstyled/)
	 */

	var _default$2G = MultiSelectUnstyled;
	MultiSelectUnstyled$1.default = _default$2G;

	var MultiSelectUnstyledProps = {};

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _MultiSelectUnstyled.default;
		  }
		});

		var _MultiSelectUnstyled = _interopRequireDefault(MultiSelectUnstyled$1);

		var _MultiSelectUnstyledProps = MultiSelectUnstyledProps;

		Object.keys(_MultiSelectUnstyledProps).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _MultiSelectUnstyledProps[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _MultiSelectUnstyledProps[key];
		    }
		  });
		});
	} (MultiSelectUnstyled$2));

	var NoSsr$2 = {};

	var NoSsr$1 = {};

	var _interopRequireDefault$1G = interopRequireDefault.exports;

	Object.defineProperty(NoSsr$1, "__esModule", {
	  value: true
	});
	NoSsr$1.default = void 0;

	var React$1g = _interopRequireWildcard$1j(require$$3);

	var _propTypes$16 = _interopRequireDefault$1G(propTypes.exports);

	var _utils$$ = utils$h;

	var _jsxRuntime$1h = jsxRuntime;

	function _getRequireWildcardCache$1j(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1j = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1j(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1j(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).
	 *
	 * This component can be useful in a variety of situations:
	 * - Escape hatch for broken dependencies not supporting SSR.
	 * - Improve the time-to-first paint on the client by only rendering above the fold.
	 * - Reduce the rendering time on the server.
	 * - Under too heavy server load, you can turn on service degradation.
	 */
	function NoSsr(props) {
	  const {
	    children,
	    defer = false,
	    fallback = null
	  } = props;
	  const [mountedState, setMountedState] = React$1g.useState(false);
	  (0, _utils$$.unstable_useEnhancedEffect)(() => {
	    if (!defer) {
	      setMountedState(true);
	    }
	  }, [defer]);
	  React$1g.useEffect(() => {
	    if (defer) {
	      setMountedState(true);
	    }
	  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.

	  return /*#__PURE__*/(0, _jsxRuntime$1h.jsx)(React$1g.Fragment, {
	    children: mountedState ? children : fallback
	  });
	}

	NoSsr.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * You can wrap a node.
	   */
	  children: _propTypes$16.default.node,

	  /**
	   * If `true`, the component will not only prevent server-side rendering.
	   * It will also defer the rendering of the children into a different screen frame.
	   * @default false
	   */
	  defer: _propTypes$16.default.bool,

	  /**
	   * The fallback content to display.
	   * @default null
	   */
	  fallback: _propTypes$16.default.node
	} ;

	{
	  // eslint-disable-next-line
	  NoSsr['propTypes' + ''] = (0, _utils$$.exactProp)(NoSsr.propTypes);
	}

	var _default$2F = NoSsr;
	NoSsr$1.default = _default$2F;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _NoSsr.default;
		  }
		});

		var _NoSsr = _interopRequireDefault(NoSsr$1);
	} (NoSsr$2));

	var OptionGroupUnstyled$2 = {};

	var OptionGroupUnstyled$1 = {};

	var optionGroupUnstyledClasses$1 = {};

	var _interopRequireDefault$1F = interopRequireDefault.exports;

	Object.defineProperty(optionGroupUnstyledClasses$1, "__esModule", {
	  value: true
	});
	optionGroupUnstyledClasses$1.default = void 0;
	optionGroupUnstyledClasses$1.getOptionGroupUnstyledUtilityClass = getOptionGroupUnstyledUtilityClass;

	var _generateUtilityClass$7 = _interopRequireDefault$1F(generateUtilityClass$2);

	var _generateUtilityClasses$7 = _interopRequireDefault$1F(generateUtilityClasses$2);

	function getOptionGroupUnstyledUtilityClass(slot) {
	  return (0, _generateUtilityClass$7.default)('MuiOptionGroupUnstyled', slot);
	}

	const optionGroupUnstyledClasses = (0, _generateUtilityClasses$7.default)('MuiOptionGroupUnstyled', ['root', 'label', 'list']);
	var _default$2E = optionGroupUnstyledClasses;
	optionGroupUnstyledClasses$1.default = _default$2E;

	var _interopRequireDefault$1E = interopRequireDefault.exports;

	Object.defineProperty(OptionGroupUnstyled$1, "__esModule", {
	  value: true
	});
	OptionGroupUnstyled$1.default = void 0;

	var _extends2$1e = _interopRequireDefault$1E(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$17 = _interopRequireDefault$1E(objectWithoutPropertiesLoose.exports);

	var _clsx$Q = _interopRequireDefault$1E(clsx$1);

	var _propTypes$15 = _interopRequireDefault$1E(propTypes.exports);

	var _react$2 = _interopRequireDefault$1E(require$$3);

	var _composeClasses$8 = _interopRequireDefault$1E(composeClasses$2);

	var _optionGroupUnstyledClasses = optionGroupUnstyledClasses$1;

	var _jsxRuntime$1g = jsxRuntime;

	const _excluded$17 = ["className", "component", "components", "disabled", "componentsProps"];

	function useUtilityClasses$P(disabled) {
	  const slots = {
	    root: ['root', disabled && 'disabled'],
	    label: ['label'],
	    list: ['list']
	  };
	  return (0, _composeClasses$8.default)(slots, _optionGroupUnstyledClasses.getOptionGroupUnstyledUtilityClass, {});
	}
	/**
	 * An unstyled option group to be used within a SelectUnstyled.
	 *
	 * Demos:
	 *
	 * - [Selects](https://mui.com/components/selects/)
	 *
	 * API:
	 *
	 * - [OptionGroupUnstyled API](https://mui.com/api/option-group-unstyled/)
	 */


	const OptionGroupUnstyled = /*#__PURE__*/_react$2.default.forwardRef(function OptionGroupUnstyled(props, ref) {
	  var _componentsProps$root, _componentsProps$labe, _componentsProps$list;

	  const {
	    className,
	    component,
	    components = {},
	    disabled = false,
	    componentsProps = {}
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$17.default)(props, _excluded$17);
	  const Root = component || (components == null ? void 0 : components.Root) || 'li';
	  const Label = (components == null ? void 0 : components.Label) || 'span';
	  const List = (components == null ? void 0 : components.List) || 'ul';
	  const classes = useUtilityClasses$P(disabled);
	  const rootProps = (0, _extends2$1e.default)({}, other, {
	    ref
	  }, componentsProps.root, {
	    className: (0, _clsx$Q.default)(classes.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
	  });
	  const labelProps = (0, _extends2$1e.default)({}, componentsProps.label, {
	    className: (0, _clsx$Q.default)(classes.label, (_componentsProps$labe = componentsProps.label) == null ? void 0 : _componentsProps$labe.className)
	  });
	  const listProps = (0, _extends2$1e.default)({}, componentsProps.list, {
	    className: (0, _clsx$Q.default)(classes.list, (_componentsProps$list = componentsProps.list) == null ? void 0 : _componentsProps$list.className)
	  });
	  return /*#__PURE__*/(0, _jsxRuntime$1g.jsxs)(Root, (0, _extends2$1e.default)({}, rootProps, {
	    children: [/*#__PURE__*/(0, _jsxRuntime$1g.jsx)(Label, (0, _extends2$1e.default)({}, labelProps, {
	      children: props.label
	    })), /*#__PURE__*/(0, _jsxRuntime$1g.jsx)(List, (0, _extends2$1e.default)({}, listProps, {
	      children: props.children
	    }))]
	  }));
	});

	OptionGroupUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: _propTypes$15.default.node,

	  /**
	   * @ignore
	   */
	  className: _propTypes$15.default.string,

	  /**
	   * The component used for the Root slot.
	   * Either a string to use a HTML element or a component.
	   * This is equivalent to components.Root.
	   * If both are provided, the component is used.
	   */
	  component: _propTypes$15.default.elementType,

	  /**
	   * The components used for each slot inside the OptionGroupUnstyled.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$15.default.shape({
	    Label: _propTypes$15.default.elementType,
	    List: _propTypes$15.default.elementType,
	    Root: _propTypes$15.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: _propTypes$15.default.shape({
	    label: _propTypes$15.default.object,
	    list: _propTypes$15.default.object,
	    root: _propTypes$15.default.object
	  }),

	  /**
	   * If `true` all the options in the group will be disabled.
	   * @default false
	   */
	  disabled: _propTypes$15.default.bool,

	  /**
	   * The human-readable description of the group.
	   */
	  label: _propTypes$15.default.node
	} ;
	var _default$2D = OptionGroupUnstyled;
	OptionGroupUnstyled$1.default = _default$2D;

	var OptionGroupUnstyledProps = {};

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  optionGroupUnstyledClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _OptionGroupUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "optionGroupUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _optionGroupUnstyledClasses.default;
		  }
		});

		var _OptionGroupUnstyled = _interopRequireDefault(OptionGroupUnstyled$1);

		var _OptionGroupUnstyledProps = OptionGroupUnstyledProps;

		Object.keys(_OptionGroupUnstyledProps).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _OptionGroupUnstyledProps[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _OptionGroupUnstyledProps[key];
		    }
		  });
		});

		var _optionGroupUnstyledClasses = _interopRequireWildcard(optionGroupUnstyledClasses$1);

		Object.keys(_optionGroupUnstyledClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _optionGroupUnstyledClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _optionGroupUnstyledClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (OptionGroupUnstyled$2));

	var OptionUnstyled$2 = {};

	var OptionUnstyled$1 = {};

	var optionUnstyledClasses$1 = {};

	var _interopRequireDefault$1D = interopRequireDefault.exports;

	Object.defineProperty(optionUnstyledClasses$1, "__esModule", {
	  value: true
	});
	optionUnstyledClasses$1.default = void 0;
	optionUnstyledClasses$1.getOptionUnstyledUtilityClass = getOptionUnstyledUtilityClass;

	var _generateUtilityClass$6 = _interopRequireDefault$1D(generateUtilityClass$2);

	var _generateUtilityClasses$6 = _interopRequireDefault$1D(generateUtilityClasses$2);

	function getOptionUnstyledUtilityClass(slot) {
	  return (0, _generateUtilityClass$6.default)('MuiOptionUnstyled', slot);
	}

	const optionUnstyledClasses = (0, _generateUtilityClasses$6.default)('MuiOptionUnstyled', ['root', 'disabled', 'selected', 'highlighted']);
	var _default$2C = optionUnstyledClasses;
	optionUnstyledClasses$1.default = _default$2C;

	var _interopRequireDefault$1C = interopRequireDefault.exports;

	Object.defineProperty(OptionUnstyled$1, "__esModule", {
	  value: true
	});
	OptionUnstyled$1.default = void 0;

	var _extends2$1d = _interopRequireDefault$1C(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$16 = _interopRequireDefault$1C(objectWithoutPropertiesLoose.exports);

	var _react$1 = _interopRequireDefault$1C(require$$3);

	var _clsx$P = _interopRequireDefault$1C(clsx$1);

	var _propTypes$14 = _interopRequireDefault$1C(propTypes.exports);

	var _utils$_ = utils$h;

	var _composeClasses$7 = _interopRequireDefault$1C(composeClasses$2);

	var _SelectUnstyledContext$1 = SelectUnstyledContext$1;

	var _optionUnstyledClasses = optionUnstyledClasses$1;

	var _appendOwnerState$3 = _interopRequireDefault$1C(appendOwnerState$1);

	var _jsxRuntime$1f = jsxRuntime;

	const _excluded$16 = ["children", "className", "component", "components", "componentsProps", "disabled", "value"];

	function useUtilityClasses$O(ownerState) {
	  const {
	    disabled,
	    highlighted,
	    selected
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', highlighted && 'highlighted', selected && 'selected']
	  };
	  return (0, _composeClasses$7.default)(slots, _optionUnstyledClasses.getOptionUnstyledUtilityClass, {});
	}
	/**
	 * An unstyled option to be used within a SelectUnstyled.
	 */


	const OptionUnstyled = /*#__PURE__*/_react$1.default.forwardRef(function OptionUnstyled(props, ref) {
	  var _componentsProps$root;

	  const {
	    children,
	    className,
	    component,
	    components = {},
	    componentsProps = {},
	    disabled,
	    value
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$16.default)(props, _excluded$16);

	  const selectContext = _react$1.default.useContext(_SelectUnstyledContext$1.SelectUnstyledContext);

	  if (!selectContext) {
	    throw new Error('OptionUnstyled must be used within a SelectUnstyled');
	  }

	  const Root = component || components.Root || 'li';
	  const selectOption = {
	    value,
	    label: children,
	    disabled
	  };
	  const optionState = selectContext.getOptionState(selectOption);
	  const optionProps = selectContext.getOptionProps(selectOption);
	  const ownerState = (0, _extends2$1d.default)({}, props, optionState);

	  const optionRef = _react$1.default.useRef(null);

	  const handleRef = (0, _utils$_.unstable_useForkRef)(ref, optionRef);

	  _react$1.default.useEffect(() => {
	    if (optionState.highlighted) {
	      var _optionRef$current, _optionRef$current$sc;

	      (_optionRef$current = optionRef.current) == null ? void 0 : (_optionRef$current$sc = _optionRef$current.scrollIntoView) == null ? void 0 : _optionRef$current$sc.call(_optionRef$current, {
	        block: 'nearest'
	      });
	    }
	  }, [optionState.highlighted]);

	  const classes = useUtilityClasses$O(ownerState);
	  const rootProps = (0, _appendOwnerState$3.default)(Root, (0, _extends2$1d.default)({}, other, {
	    ref: handleRef
	  }, optionProps, componentsProps.root, {
	    className: (0, _clsx$P.default)(classes.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
	  }), ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$1f.jsx)(Root, (0, _extends2$1d.default)({}, rootProps, {
	    children: children
	  }));
	});

	OptionUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: _propTypes$14.default.node,

	  /**
	   * @ignore
	   */
	  className: _propTypes$14.default.string,

	  /**
	   * The component used for the Root slot.
	   * Either a string to use a HTML element or a component.
	   * This is equivalent to components.Root.
	   * If both are provided, the component is used.
	   */
	  component: _propTypes$14.default.elementType,

	  /**
	   * The components used for each slot inside the OptionUnstyled.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$14.default.shape({
	    Root: _propTypes$14.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: _propTypes$14.default.shape({
	    root: _propTypes$14.default.object
	  }),

	  /**
	   * If `true`, the option will be disabled.
	   * @default false
	   */
	  disabled: _propTypes$14.default.bool,

	  /**
	   * The value of the option.
	   */
	  value: _propTypes$14.default.any.isRequired
	} ;
	/**
	 * An unstyled option to be used within a SelectUnstyled.
	 *
	 * Demos:
	 *
	 * - [Selects](https://mui.com/components/selects/)
	 *
	 * API:
	 *
	 * - [OptionUnstyled API](https://mui.com/api/option-unstyled/)
	 */

	var _default$2B = /*#__PURE__*/_react$1.default.memo(OptionUnstyled);

	OptionUnstyled$1.default = _default$2B;

	var OptionUnstyledProps = {};

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  optionUnstyledClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _OptionUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "optionUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _optionUnstyledClasses.default;
		  }
		});

		var _OptionUnstyled = _interopRequireDefault(OptionUnstyled$1);

		var _OptionUnstyledProps = OptionUnstyledProps;

		Object.keys(_OptionUnstyledProps).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _OptionUnstyledProps[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _OptionUnstyledProps[key];
		    }
		  });
		});

		var _optionUnstyledClasses = _interopRequireWildcard(optionUnstyledClasses$1);

		Object.keys(_optionUnstyledClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _optionUnstyledClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _optionUnstyledClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (OptionUnstyled$2));

	var SelectUnstyled$2 = {};

	var SelectUnstyled$1 = {};

	var _interopRequireDefault$1B = interopRequireDefault.exports;

	Object.defineProperty(SelectUnstyled$1, "__esModule", {
	  value: true
	});
	SelectUnstyled$1.default = void 0;

	var _extends2$1c = _interopRequireDefault$1B(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$15 = _interopRequireDefault$1B(objectWithoutPropertiesLoose.exports);

	var React$1f = _interopRequireWildcard$1i(require$$3);

	var _propTypes$13 = _interopRequireDefault$1B(propTypes.exports);

	var _clsx$O = _interopRequireDefault$1B(clsx$1);

	var _utils$Z = utils$h;

	var _utils2$6 = utils$c;

	var _useSelect = _interopRequireDefault$1B(useSelect$1);

	var _utils3$2 = utils$d;

	var _PopperUnstyled = _interopRequireDefault$1B(PopperUnstyled$2);

	var _SelectUnstyledContext = SelectUnstyledContext$1;

	var _composeClasses$6 = _interopRequireDefault$1B(composeClasses$2);

	var _selectUnstyledClasses = selectUnstyledClasses$1;

	var _jsxRuntime$1e = jsxRuntime;

	const _excluded$15 = ["autoFocus", "children", "className", "component", "components", "componentsProps", "defaultValue", "defaultListboxOpen", "disabled", "listboxOpen", "onChange", "onListboxOpenChange", "renderValue", "value"];

	function _getRequireWildcardCache$1i(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1i = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1i(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1i(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function defaultRenderSingleValue(selectedOption) {
	  var _selectedOption$label;

	  return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : '';
	}

	function useUtilityClasses$N(ownerState) {
	  const {
	    active,
	    disabled,
	    open,
	    focusVisible
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],
	    listbox: ['listbox', disabled && 'disabled'],
	    popper: ['popper']
	  };
	  return (0, _composeClasses$6.default)(slots, _selectUnstyledClasses.getSelectUnstyledUtilityClass, {});
	}
	/**
	 * The foundation for building custom-styled select components.
	 */


	const SelectUnstyled = /*#__PURE__*/React$1f.forwardRef(function SelectUnstyled(props, ref) {
	  var _ref, _components$Listbox, _components$Popper, _componentsProps$list, _componentsProps$list2, _componentsProps$root, _componentsProps$list3, _componentsProps$popp;

	  const {
	    autoFocus,
	    children,
	    className,
	    component,
	    components = {},
	    componentsProps = {},
	    defaultValue,
	    defaultListboxOpen = false,
	    disabled: disabledProp,
	    listboxOpen: listboxOpenProp,
	    onChange,
	    onListboxOpenChange,
	    renderValue: renderValueProp,
	    value: valueProp
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$15.default)(props, _excluded$15);
	  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;
	  const [groupedOptions, setGroupedOptions] = React$1f.useState([]);
	  const options = React$1f.useMemo(() => (0, _utils2$6.flattenOptionGroups)(groupedOptions), [groupedOptions]);
	  const [listboxOpen, setListboxOpen] = (0, _utils$Z.unstable_useControlled)({
	    controlled: listboxOpenProp,
	    default: defaultListboxOpen,
	    name: 'SelectUnstyled',
	    state: 'listboxOpen'
	  });
	  React$1f.useEffect(() => {
	    setGroupedOptions((0, _utils2$6.getOptionsFromChildren)(children));
	  }, [children]);
	  const [buttonDefined, setButtonDefined] = React$1f.useState(false);
	  const buttonRef = React$1f.useRef(null);
	  const Button = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
	  const ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : 'ul';
	  const Popper = (_components$Popper = components.Popper) != null ? _components$Popper : _PopperUnstyled.default;

	  const handleButtonRefChange = element => {
	    buttonRef.current = element;

	    if (element != null) {
	      setButtonDefined(true);
	    }
	  };

	  const handleButtonRef = (0, _utils$Z.unstable_useForkRef)(ref, handleButtonRefChange);
	  React$1f.useEffect(() => {
	    if (autoFocus) {
	      buttonRef.current.focus();
	    }
	  }, [autoFocus]);

	  const handleOpenChange = isOpen => {
	    setListboxOpen(isOpen);
	    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
	  };

	  const {
	    buttonActive,
	    buttonFocusVisible,
	    disabled,
	    getButtonProps,
	    getListboxProps,
	    getOptionProps,
	    getOptionState,
	    value
	  } = (0, _useSelect.default)({
	    buttonComponent: Button,
	    buttonRef: handleButtonRef,
	    defaultValue,
	    disabled: disabledProp,
	    listboxId: (_componentsProps$list = componentsProps.listbox) == null ? void 0 : _componentsProps$list.id,
	    listboxRef: (_componentsProps$list2 = componentsProps.listbox) == null ? void 0 : _componentsProps$list2.ref,
	    multiple: false,
	    onChange,
	    onOpenChange: handleOpenChange,
	    open: listboxOpen,
	    options,
	    value: valueProp
	  });
	  const ownerState = (0, _extends2$1c.default)({}, props, {
	    active: buttonActive,
	    defaultListboxOpen,
	    disabled,
	    focusVisible: buttonFocusVisible,
	    open: listboxOpen,
	    renderValue,
	    value
	  });
	  const classes = useUtilityClasses$N(ownerState);
	  const selectedOptions = React$1f.useMemo(() => {
	    return options.find(o => value === o.value);
	  }, [options, value]);
	  const buttonProps = (0, _utils3$2.appendOwnerState)(Button, (0, _extends2$1c.default)({}, other, componentsProps.root, getButtonProps(), {
	    className: (0, _clsx$O.default)(className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, classes.root)
	  }), ownerState);
	  const listboxProps = (0, _utils3$2.appendOwnerState)(ListboxRoot, (0, _extends2$1c.default)({}, componentsProps.listbox, getListboxProps(), {
	    className: (0, _clsx$O.default)((_componentsProps$list3 = componentsProps.listbox) == null ? void 0 : _componentsProps$list3.className, classes.listbox)
	  }), ownerState);
	  const popperProps = (0, _utils3$2.appendOwnerState)(Popper, (0, _extends2$1c.default)({
	    open: listboxOpen,
	    anchorEl: buttonRef.current,
	    placement: 'bottom-start',
	    disablePortal: true,
	    role: undefined
	  }, componentsProps.popper, {
	    className: (0, _clsx$O.default)((_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className, classes.popper)
	  }), ownerState);
	  const context = {
	    getOptionProps,
	    getOptionState
	  };
	  return /*#__PURE__*/(0, _jsxRuntime$1e.jsxs)(React$1f.Fragment, {
	    children: [/*#__PURE__*/(0, _jsxRuntime$1e.jsx)(Button, (0, _extends2$1c.default)({}, buttonProps, {
	      children: renderValue(selectedOptions)
	    })), buttonDefined && /*#__PURE__*/(0, _jsxRuntime$1e.jsx)(Popper, (0, _extends2$1c.default)({}, popperProps, {
	      children: /*#__PURE__*/(0, _jsxRuntime$1e.jsx)(ListboxRoot, (0, _extends2$1c.default)({}, listboxProps, {
	        children: /*#__PURE__*/(0, _jsxRuntime$1e.jsx)(_SelectUnstyledContext.SelectUnstyledContext.Provider, {
	          value: context,
	          children: children
	        })
	      }))
	    }))]
	  });
	});
	SelectUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the select element is focused during the first mount
	   * @default false
	   */
	  autoFocus: _propTypes$13.default.bool,

	  /**
	   * @ignore
	   */
	  children: _propTypes$13.default.node,

	  /**
	   * @ignore
	   */
	  className: _propTypes$13.default.string,

	  /**
	   * @ignore
	   */
	  component: _propTypes$13.default.elementType,

	  /**
	   * The components used for each slot inside the Select.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$13.default.shape({
	    Listbox: _propTypes$13.default.elementType,
	    Popper: _propTypes$13.default.elementType,
	    Root: _propTypes$13.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: _propTypes$13.default.shape({
	    listbox: _propTypes$13.default.object,
	    popper: _propTypes$13.default.object,
	    root: _propTypes$13.default.object
	  }),

	  /**
	   * If `true`, the select will be initially open.
	   * @default false
	   */
	  defaultListboxOpen: _propTypes$13.default.bool,

	  /**
	   * The default selected value. Use when the component is not controlled.
	   */
	  defaultValue: _propTypes$13.default
	  /* @typescript-to-proptypes-ignore */
	  .any,

	  /**
	   * If `true`, the select is disabled.
	   * @default false
	   */
	  disabled: _propTypes$13.default.bool,

	  /**
	   * Controls the open state of the select's listbox.
	   * @default undefined
	   */
	  listboxOpen: _propTypes$13.default.bool,

	  /**
	   * Callback fired when an option is selected.
	   */
	  onChange: _propTypes$13.default.func,

	  /**
	   * Callback fired when the component requests to be opened.
	   * Use in controlled mode (see listboxOpen).
	   */
	  onListboxOpenChange: _propTypes$13.default.func,

	  /**
	   * Function that customizes the rendering of the selected value.
	   */
	  renderValue: _propTypes$13.default.func,

	  /**
	   * The selected value.
	   * Set to `null` to deselect all options.
	   */
	  value: _propTypes$13.default
	  /* @typescript-to-proptypes-ignore */
	  .any
	} ;
	/**
	 * The foundation for building custom-styled select components.
	 *
	 * Demos:
	 *
	 * - [Selects](https://mui.com/components/selects/)
	 *
	 * API:
	 *
	 * - [SelectUnstyled API](https://mui.com/api/select-unstyled/)
	 */

	var _default$2A = SelectUnstyled;
	SelectUnstyled$1.default = _default$2A;

	var SelectUnstyledProps = {};

	Object.defineProperty(SelectUnstyledProps, "__esModule", {
	  value: true
	});

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  selectUnstyledClasses: true,
		  useSelect: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _SelectUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "selectUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _selectUnstyledClasses.default;
		  }
		});
		Object.defineProperty(exports, "useSelect", {
		  enumerable: true,
		  get: function () {
		    return _useSelect.default;
		  }
		});

		var _SelectUnstyled = _interopRequireDefault(SelectUnstyled$1);

		var _SelectUnstyledContext = SelectUnstyledContext$1;

		Object.keys(_SelectUnstyledContext).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _SelectUnstyledContext[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _SelectUnstyledContext[key];
		    }
		  });
		});

		var _selectUnstyledClasses = _interopRequireWildcard(selectUnstyledClasses$1);

		Object.keys(_selectUnstyledClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _selectUnstyledClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _selectUnstyledClasses[key];
		    }
		  });
		});

		var _SelectUnstyledProps = SelectUnstyledProps;

		Object.keys(_SelectUnstyledProps).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _SelectUnstyledProps[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _SelectUnstyledProps[key];
		    }
		  });
		});

		var _useSelect = _interopRequireDefault(useSelect$1);

		var _useSelectProps = useSelectProps;

		Object.keys(_useSelectProps).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _useSelectProps[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _useSelectProps[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (SelectUnstyled$2));

	var SliderUnstyled$2 = {};

	var SliderUnstyled$1 = {};

	var sliderUnstyledClasses$1 = {};

	var _interopRequireDefault$1A = interopRequireDefault.exports;

	Object.defineProperty(sliderUnstyledClasses$1, "__esModule", {
	  value: true
	});
	sliderUnstyledClasses$1.default = void 0;
	sliderUnstyledClasses$1.getSliderUtilityClass = getSliderUtilityClass;

	var _generateUtilityClasses$5 = _interopRequireDefault$1A(generateUtilityClasses$2);

	var _generateUtilityClass$5 = _interopRequireDefault$1A(generateUtilityClass$2);

	function getSliderUtilityClass(slot) {
	  return (0, _generateUtilityClass$5.default)('MuiSlider', slot);
	}

	const sliderUnstyledClasses = (0, _generateUtilityClasses$5.default)('MuiSlider', ['root', 'active', 'focusVisible', 'disabled', 'dragging', 'marked', 'vertical', 'trackInverted', 'trackFalse', 'rail', 'track', 'mark', 'markActive', 'markLabel', 'markLabelActive', 'thumb', 'valueLabel', 'valueLabelOpen', 'valueLabelCircle', 'valueLabelLabel']);
	var _default$2z = sliderUnstyledClasses;
	sliderUnstyledClasses$1.default = _default$2z;

	var SliderValueLabelUnstyled$1 = {};

	var _interopRequireDefault$1z = interopRequireDefault.exports;

	Object.defineProperty(SliderValueLabelUnstyled$1, "__esModule", {
	  value: true
	});
	SliderValueLabelUnstyled$1.default = void 0;

	var React$1e = _interopRequireWildcard$1h(require$$3);

	var _propTypes$12 = _interopRequireDefault$1z(propTypes.exports);

	var _clsx$N = _interopRequireDefault$1z(clsx$1);

	var _sliderUnstyledClasses$1 = _interopRequireDefault$1z(sliderUnstyledClasses$1);

	var _jsxRuntime$1d = jsxRuntime;

	function _getRequireWildcardCache$1h(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1h = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1h(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1h(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useValueLabelClasses = props => {
	  const {
	    open
	  } = props;
	  const utilityClasses = {
	    offset: (0, _clsx$N.default)(open && _sliderUnstyledClasses$1.default.valueLabelOpen),
	    circle: _sliderUnstyledClasses$1.default.valueLabelCircle,
	    label: _sliderUnstyledClasses$1.default.valueLabelLabel
	  };
	  return utilityClasses;
	};
	/**
	 * @ignore - internal component.
	 */


	function SliderValueLabelUnstyled(props) {
	  const {
	    children,
	    className,
	    value,
	    theme
	  } = props;
	  const classes = useValueLabelClasses(props);
	  return /*#__PURE__*/React$1e.cloneElement(children, {
	    className: (0, _clsx$N.default)(children.props.className)
	  }, /*#__PURE__*/(0, _jsxRuntime$1d.jsxs)(React$1e.Fragment, {
	    children: [children.props.children, /*#__PURE__*/(0, _jsxRuntime$1d.jsx)("span", {
	      className: (0, _clsx$N.default)(classes.offset, className),
	      theme: theme,
	      "aria-hidden": true,
	      children: /*#__PURE__*/(0, _jsxRuntime$1d.jsx)("span", {
	        className: classes.circle,
	        children: /*#__PURE__*/(0, _jsxRuntime$1d.jsx)("span", {
	          className: classes.label,
	          children: value
	        })
	      })
	    })]
	  }));
	}

	SliderValueLabelUnstyled.propTypes = {
	  children: _propTypes$12.default.element.isRequired,
	  className: _propTypes$12.default.string,
	  theme: _propTypes$12.default.any,
	  value: _propTypes$12.default.node
	} ;
	var _default$2y = SliderValueLabelUnstyled;
	SliderValueLabelUnstyled$1.default = _default$2y;

	var useSlider$1 = {};

	var _interopRequireDefault$1y = interopRequireDefault.exports;

	Object.defineProperty(useSlider$1, "__esModule", {
	  value: true
	});
	useSlider$1.Identity = void 0;
	useSlider$1.default = useSlider;
	useSlider$1.valueToPercent = valueToPercent;

	var _extends2$1b = _interopRequireDefault$1y(_extends$5.exports);

	var React$1d = _interopRequireWildcard$1g(require$$3);

	var _utils$Y = utils$h;

	function _getRequireWildcardCache$1g(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1g = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1g(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1g(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;

	function asc(a, b) {
	  return a - b;
	}

	function clamp(value, min, max) {
	  if (value == null) {
	    return min;
	  }

	  return Math.min(Math.max(min, value), max);
	}

	function findClosest(values, currentValue) {
	  var _values$reduce;

	  const {
	    index: closestIndex
	  } = (_values$reduce = values.reduce((acc, value, index) => {
	    const distance = Math.abs(currentValue - value);

	    if (acc === null || distance < acc.distance || distance === acc.distance) {
	      return {
	        distance,
	        index
	      };
	    }

	    return acc;
	  }, null)) != null ? _values$reduce : {};
	  return closestIndex;
	}

	function trackFinger(event, touchId) {
	  // The event is TouchEvent
	  if (touchId.current !== undefined && event.changedTouches) {
	    const touchEvent = event;

	    for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
	      const touch = touchEvent.changedTouches[i];

	      if (touch.identifier === touchId.current) {
	        return {
	          x: touch.clientX,
	          y: touch.clientY
	        };
	      }
	    }

	    return false;
	  } // The event is MouseEvent


	  return {
	    x: event.clientX,
	    y: event.clientY
	  };
	}

	function valueToPercent(value, min, max) {
	  return (value - min) * 100 / (max - min);
	}

	function percentToValue(percent, min, max) {
	  return (max - min) * percent + min;
	}

	function getDecimalPrecision(num) {
	  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.
	  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.
	  if (Math.abs(num) < 1) {
	    const parts = num.toExponential().split('e-');
	    const matissaDecimalPart = parts[0].split('.')[1];
	    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
	  }

	  const decimalPart = num.toString().split('.')[1];
	  return decimalPart ? decimalPart.length : 0;
	}

	function roundValueToStep(value, step, min) {
	  const nearest = Math.round((value - min) / step) * step + min;
	  return Number(nearest.toFixed(getDecimalPrecision(step)));
	}

	function setValueIndex({
	  values,
	  newValue,
	  index
	}) {
	  const output = values.slice();
	  output[index] = newValue;
	  return output.sort(asc);
	}

	function focusThumb({
	  sliderRef,
	  activeIndex,
	  setActive
	}) {
	  var _sliderRef$current, _doc$activeElement;

	  const doc = (0, _utils$Y.unstable_ownerDocument)(sliderRef.current);

	  if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null ? void 0 : (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute('data-index')) !== activeIndex) {
	    var _sliderRef$current2;

	    (_sliderRef$current2 = sliderRef.current) == null ? void 0 : _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
	  }

	  if (setActive) {
	    setActive(activeIndex);
	  }
	}

	const axisProps = {
	  horizontal: {
	    offset: percent => ({
	      left: `${percent}%`
	    }),
	    leap: percent => ({
	      width: `${percent}%`
	    })
	  },
	  'horizontal-reverse': {
	    offset: percent => ({
	      right: `${percent}%`
	    }),
	    leap: percent => ({
	      width: `${percent}%`
	    })
	  },
	  vertical: {
	    offset: percent => ({
	      bottom: `${percent}%`
	    }),
	    leap: percent => ({
	      height: `${percent}%`
	    })
	  }
	};

	const Identity$1 = x => x; // TODO: remove support for Safari < 13.
	// https://caniuse.com/#search=touch-action
	//
	// Safari, on iOS, supports touch action since v13.
	// Over 80% of the iOS phones are compatible
	// in August 2020.
	// Utilizing the CSS.supports method to check if touch-action is supported.
	// Since CSS.supports is supported on all but Edge@12 and IE and touch-action
	// is supported on both Edge@12 and IE if CSS.supports is not available that means that
	// touch-action will be supported


	useSlider$1.Identity = Identity$1;
	let cachedSupportsTouchActionNone;

	function doesSupportTouchActionNone() {
	  if (cachedSupportsTouchActionNone === undefined) {
	    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {
	      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');
	    } else {
	      cachedSupportsTouchActionNone = true;
	    }
	  }

	  return cachedSupportsTouchActionNone;
	}

	function useSlider(props) {
	  const {
	    ref,
	    'aria-labelledby': ariaLabelledby,
	    defaultValue,
	    disableSwap = false,
	    disabled = false,
	    marks: marksProp = false,
	    max = 100,
	    min = 0,
	    name,
	    onChange,
	    onChangeCommitted,
	    orientation = 'horizontal',
	    scale = Identity$1,
	    step = 1,
	    tabIndex,
	    value: valueProp,
	    isRtl = false
	  } = props;
	  const touchId = React$1d.useRef(); // We can't use the :active browser pseudo-classes.
	  // - The active state isn't triggered when clicking on the rail.
	  // - The active state isn't transferred when inversing a range slider.

	  const [active, setActive] = React$1d.useState(-1);
	  const [open, setOpen] = React$1d.useState(-1);
	  const [dragging, setDragging] = React$1d.useState(false);
	  const moveCount = React$1d.useRef(0);
	  const [valueDerived, setValueState] = (0, _utils$Y.unstable_useControlled)({
	    controlled: valueProp,
	    default: defaultValue != null ? defaultValue : min,
	    name: 'Slider'
	  });

	  const handleChange = onChange && ((event, value, thumbIndex) => {
	    // Redefine target to allow name and value to be read.
	    // This allows seamless integration with the most popular form libraries.
	    // https://github.com/mui-org/material-ui/issues/13485#issuecomment-676048492
	    // Clone the event to not override `target` of the original event.
	    const nativeEvent = event.nativeEvent || event; // @ts-ignore The nativeEvent is function, not object

	    const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
	    Object.defineProperty(clonedEvent, 'target', {
	      writable: true,
	      value: {
	        value,
	        name
	      }
	    });
	    onChange(clonedEvent, value, thumbIndex);
	  });

	  const range = Array.isArray(valueDerived);
	  let values = range ? valueDerived.slice().sort(asc) : [valueDerived];
	  values = values.map(value => clamp(value, min, max));
	  const marks = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_, index) => ({
	    value: min + step * index
	  })) : marksProp || [];
	  const marksValues = marks.map(mark => mark.value);
	  const {
	    isFocusVisibleRef,
	    onBlur: handleBlurVisible,
	    onFocus: handleFocusVisible,
	    ref: focusVisibleRef
	  } = (0, _utils$Y.unstable_useIsFocusVisible)();
	  const [focusVisible, setFocusVisible] = React$1d.useState(-1);
	  const sliderRef = React$1d.useRef();
	  const handleFocusRef = (0, _utils$Y.unstable_useForkRef)(focusVisibleRef, sliderRef);
	  const handleRef = (0, _utils$Y.unstable_useForkRef)(ref, handleFocusRef);

	  const createHandleHiddenInputFocus = otherHandlers => event => {
	    var _otherHandlers$onFocu;

	    const index = Number(event.currentTarget.getAttribute('data-index'));
	    handleFocusVisible(event);

	    if (isFocusVisibleRef.current === true) {
	      setFocusVisible(index);
	    }

	    setOpen(index);
	    otherHandlers == null ? void 0 : (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
	  };

	  const createHandleHidenInputBlur = otherHandlers => event => {
	    var _otherHandlers$onBlur;

	    handleBlurVisible(event);

	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(-1);
	    }

	    setOpen(-1);
	    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
	  };

	  (0, _utils$Y.unstable_useEnhancedEffect)(() => {
	    if (disabled && sliderRef.current.contains(document.activeElement)) {
	      var _document$activeEleme;

	      // This is necessary because Firefox and Safari will keep focus
	      // on a disabled element:
	      // https://codesandbox.io/s/mui-pr-22247-forked-h151h?file=/src/App.js
	      // @ts-ignore
	      (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.blur();
	    }
	  }, [disabled]);

	  if (disabled && active !== -1) {
	    setActive(-1);
	  }

	  if (disabled && focusVisible !== -1) {
	    setFocusVisible(-1);
	  }

	  const createHandleHiddenInputChange = otherHandlers => event => {
	    var _otherHandlers$onChan;

	    (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event);
	    const index = Number(event.currentTarget.getAttribute('data-index'));
	    const value = values[index];
	    const marksIndex = marksValues.indexOf(value); // @ts-ignore

	    let newValue = event.target.valueAsNumber;

	    if (marks && step == null) {
	      newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
	    }

	    newValue = clamp(newValue, min, max);

	    if (marks && step == null) {
	      const currentMarkIndex = marksValues.indexOf(values[index]);
	      newValue = newValue < values[index] ? marksValues[currentMarkIndex - 1] : marksValues[currentMarkIndex + 1];
	    }

	    if (range) {
	      // Bound the new value to the thumb's neighbours.
	      if (disableSwap) {
	        newValue = clamp(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);
	      }

	      const previousValue = newValue;
	      newValue = setValueIndex({
	        values,
	        newValue,
	        index
	      });
	      let activeIndex = index; // Potentially swap the index if needed.

	      if (!disableSwap) {
	        activeIndex = newValue.indexOf(previousValue);
	      }

	      focusThumb({
	        sliderRef,
	        activeIndex
	      });
	    }

	    setValueState(newValue);
	    setFocusVisible(index);

	    if (handleChange) {
	      handleChange(event, newValue, index);
	    }

	    if (onChangeCommitted) {
	      onChangeCommitted(event, newValue);
	    }
	  };

	  const previousIndex = React$1d.useRef();
	  let axis = orientation;

	  if (isRtl && orientation === 'horizontal') {
	    axis += '-reverse';
	  }

	  const getFingerNewValue = ({
	    finger,
	    move = false,
	    values: values2
	  }) => {
	    const {
	      current: slider
	    } = sliderRef;
	    const {
	      width,
	      height,
	      bottom,
	      left
	    } = slider.getBoundingClientRect();
	    let percent;

	    if (axis.indexOf('vertical') === 0) {
	      percent = (bottom - finger.y) / height;
	    } else {
	      percent = (finger.x - left) / width;
	    }

	    if (axis.indexOf('-reverse') !== -1) {
	      percent = 1 - percent;
	    }

	    let newValue;
	    newValue = percentToValue(percent, min, max);

	    if (step) {
	      newValue = roundValueToStep(newValue, step, min);
	    } else {
	      const closestIndex = findClosest(marksValues, newValue);
	      newValue = marksValues[closestIndex];
	    }

	    newValue = clamp(newValue, min, max);
	    let activeIndex = 0;

	    if (range) {
	      if (!move) {
	        activeIndex = findClosest(values2, newValue);
	      } else {
	        activeIndex = previousIndex.current;
	      } // Bound the new value to the thumb's neighbours.


	      if (disableSwap) {
	        newValue = clamp(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
	      }

	      const previousValue = newValue;
	      newValue = setValueIndex({
	        values: values2,
	        newValue,
	        index: activeIndex
	      }); // Potentially swap the index if needed.

	      if (!(disableSwap && move)) {
	        activeIndex = newValue.indexOf(previousValue);
	        previousIndex.current = activeIndex;
	      }
	    }

	    return {
	      newValue,
	      activeIndex
	    };
	  };

	  const handleTouchMove = (0, _utils$Y.unstable_useEventCallback)(nativeEvent => {
	    const finger = trackFinger(nativeEvent, touchId);

	    if (!finger) {
	      return;
	    }

	    moveCount.current += 1; // Cancel move in case some other element consumed a mouseup event and it was not fired.
	    // @ts-ignore buttons doesn't not exists on touch event

	    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {
	      // eslint-disable-next-line @typescript-eslint/no-use-before-define
	      handleTouchEnd(nativeEvent);
	      return;
	    }

	    const {
	      newValue,
	      activeIndex
	    } = getFingerNewValue({
	      finger,
	      move: true,
	      values
	    });
	    focusThumb({
	      sliderRef,
	      activeIndex,
	      setActive
	    });
	    setValueState(newValue);

	    if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
	      setDragging(true);
	    }

	    if (handleChange) {
	      handleChange(nativeEvent, newValue, activeIndex);
	    }
	  });
	  const handleTouchEnd = (0, _utils$Y.unstable_useEventCallback)(nativeEvent => {
	    const finger = trackFinger(nativeEvent, touchId);
	    setDragging(false);

	    if (!finger) {
	      return;
	    }

	    const {
	      newValue
	    } = getFingerNewValue({
	      finger,
	      values
	    });
	    setActive(-1);

	    if (nativeEvent.type === 'touchend') {
	      setOpen(-1);
	    }

	    if (onChangeCommitted) {
	      onChangeCommitted(nativeEvent, newValue);
	    }

	    touchId.current = undefined; // eslint-disable-next-line @typescript-eslint/no-use-before-define

	    stopListening();
	  });
	  const handleTouchStart = (0, _utils$Y.unstable_useEventCallback)(nativeEvent => {
	    // If touch-action: none; is not supported we need to prevent the scroll manually.
	    if (!doesSupportTouchActionNone()) {
	      nativeEvent.preventDefault();
	    }

	    const touch = nativeEvent.changedTouches[0];

	    if (touch != null) {
	      // A number that uniquely identifies the current finger in the touch session.
	      touchId.current = touch.identifier;
	    }

	    const finger = trackFinger(nativeEvent, touchId);

	    if (finger !== false) {
	      const {
	        newValue,
	        activeIndex
	      } = getFingerNewValue({
	        finger,
	        values
	      });
	      focusThumb({
	        sliderRef,
	        activeIndex,
	        setActive
	      });
	      setValueState(newValue);

	      if (handleChange) {
	        handleChange(nativeEvent, newValue, activeIndex);
	      }
	    }

	    moveCount.current = 0;
	    const doc = (0, _utils$Y.unstable_ownerDocument)(sliderRef.current);
	    doc.addEventListener('touchmove', handleTouchMove);
	    doc.addEventListener('touchend', handleTouchEnd);
	  });
	  const stopListening = React$1d.useCallback(() => {
	    const doc = (0, _utils$Y.unstable_ownerDocument)(sliderRef.current);
	    doc.removeEventListener('mousemove', handleTouchMove);
	    doc.removeEventListener('mouseup', handleTouchEnd);
	    doc.removeEventListener('touchmove', handleTouchMove);
	    doc.removeEventListener('touchend', handleTouchEnd);
	  }, [handleTouchEnd, handleTouchMove]);
	  React$1d.useEffect(() => {
	    const {
	      current: slider
	    } = sliderRef;
	    slider.addEventListener('touchstart', handleTouchStart, {
	      passive: doesSupportTouchActionNone()
	    });
	    return () => {
	      // @ts-ignore
	      slider.removeEventListener('touchstart', handleTouchStart, {
	        passive: doesSupportTouchActionNone()
	      });
	      stopListening();
	    };
	  }, [stopListening, handleTouchStart]);
	  React$1d.useEffect(() => {
	    if (disabled) {
	      stopListening();
	    }
	  }, [disabled, stopListening]);

	  const createHandleMouseDown = otherHandlers => event => {
	    var _otherHandlers$onMous;

	    (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);

	    if (event.defaultPrevented) {
	      return;
	    } // Only handle left clicks


	    if (event.button !== 0) {
	      return;
	    } // Avoid text selection


	    event.preventDefault();
	    const finger = trackFinger(event, touchId);

	    if (finger !== false) {
	      const {
	        newValue,
	        activeIndex
	      } = getFingerNewValue({
	        finger,
	        values
	      });
	      focusThumb({
	        sliderRef,
	        activeIndex,
	        setActive
	      });
	      setValueState(newValue);

	      if (handleChange) {
	        handleChange(event, newValue, activeIndex);
	      }
	    }

	    moveCount.current = 0;
	    const doc = (0, _utils$Y.unstable_ownerDocument)(sliderRef.current);
	    doc.addEventListener('mousemove', handleTouchMove);
	    doc.addEventListener('mouseup', handleTouchEnd);
	  };

	  const trackOffset = valueToPercent(range ? values[0] : min, min, max);
	  const trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;

	  const getRootProps = otherHandlers => {
	    const ownEventHandlers = {
	      onMouseDown: createHandleMouseDown(otherHandlers || {})
	    };
	    const mergedEventHandlers = (0, _extends2$1b.default)({}, otherHandlers, ownEventHandlers);
	    return (0, _extends2$1b.default)({
	      ref: handleRef
	    }, mergedEventHandlers);
	  };

	  const createHandleMouseOver = otherHandlers => event => {
	    var _otherHandlers$onMous2;

	    (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
	    const index = Number(event.currentTarget.getAttribute('data-index'));
	    setOpen(index);
	  };

	  const createHandleMouseLeave = otherHandlers => event => {
	    var _otherHandlers$onMous3;

	    (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
	    setOpen(-1);
	  };

	  const getThumbProps = otherHandlers => {
	    const ownEventHandlers = {
	      onMouseOver: createHandleMouseOver(otherHandlers || {}),
	      onMouseLeave: createHandleMouseLeave(otherHandlers || {})
	    };
	    const mergedEventHandlers = (0, _extends2$1b.default)({}, otherHandlers, ownEventHandlers);
	    return (0, _extends2$1b.default)({}, mergedEventHandlers);
	  };

	  const getHiddenInputProps = otherHandlers => {
	    const ownEventHandlers = {
	      onChange: createHandleHiddenInputChange(otherHandlers || {}),
	      onFocus: createHandleHiddenInputFocus(otherHandlers || {}),
	      onBlur: createHandleHidenInputBlur(otherHandlers || {})
	    };
	    const mergedEventHandlers = (0, _extends2$1b.default)({}, otherHandlers, ownEventHandlers);
	    return (0, _extends2$1b.default)({
	      tabIndex,
	      'aria-labelledby': ariaLabelledby,
	      'aria-orientation': orientation,
	      'aria-valuemax': scale(max),
	      'aria-valuemin': scale(min),
	      name,
	      type: 'range',
	      min: props.min,
	      max: props.max,
	      step: props.step,
	      disabled
	    }, mergedEventHandlers, {
	      style: (0, _extends2$1b.default)({}, _utils$Y.visuallyHidden, {
	        direction: isRtl ? 'rtl' : 'ltr',
	        // So that VoiceOver's focus indicator matches the thumb's dimensions
	        width: '100%',
	        height: '100%'
	      })
	    });
	  };

	  return {
	    axis,
	    axisProps,
	    getRootProps,
	    getHiddenInputProps,
	    getThumbProps,
	    dragging,
	    marks,
	    values,
	    active,
	    focusVisible,
	    open,
	    range,
	    trackOffset,
	    trackLeap
	  };
	}

	var _interopRequireDefault$1x = interopRequireDefault.exports;

	Object.defineProperty(SliderUnstyled$1, "__esModule", {
	  value: true
	});
	SliderUnstyled$1.default = void 0;

	var _extends2$1a = _interopRequireDefault$1x(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$14 = _interopRequireDefault$1x(objectWithoutPropertiesLoose.exports);

	var React$1c = _interopRequireWildcard$1f(require$$3);

	var _propTypes$11 = _interopRequireDefault$1x(propTypes.exports);

	var _clsx$M = _interopRequireDefault$1x(clsx$1);

	var _utils$X = utils$h;

	var _appendOwnerState$2 = _interopRequireDefault$1x(appendOwnerState$1);

	var _isHostComponent = _interopRequireDefault$1x(isHostComponent$1);

	var _composeClasses$5 = _interopRequireDefault$1x(composeClasses$2);

	var _sliderUnstyledClasses = sliderUnstyledClasses$1;

	var _SliderValueLabelUnstyled = _interopRequireDefault$1x(SliderValueLabelUnstyled$1);

	var _useSlider = _interopRequireWildcard$1f(useSlider$1);

	var _jsxRuntime$1c = jsxRuntime;

	const _excluded$14 = ["aria-label", "aria-valuetext", "className", "component", "classes", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "onMouseDown", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat", "isRtl", "components", "componentsProps"];

	function _getRequireWildcardCache$1f(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1f = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1f(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1f(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const Identity = x => x;

	const useUtilityClasses$M = ownerState => {
	  const {
	    disabled,
	    dragging,
	    marked,
	    orientation,
	    track,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', dragging && 'dragging', marked && 'marked', orientation === 'vertical' && 'vertical', track === 'inverted' && 'trackInverted', track === false && 'trackFalse'],
	    rail: ['rail'],
	    track: ['track'],
	    mark: ['mark'],
	    markActive: ['markActive'],
	    markLabel: ['markLabel'],
	    markLabelActive: ['markLabelActive'],
	    valueLabel: ['valueLabel'],
	    thumb: ['thumb', disabled && 'disabled'],
	    active: ['active'],
	    disabled: ['disabled'],
	    focusVisible: ['focusVisible']
	  };
	  return (0, _composeClasses$5.default)(slots, _sliderUnstyledClasses.getSliderUtilityClass, classes);
	};

	const Forward = ({
	  children
	}) => children;

	const SliderUnstyled = /*#__PURE__*/React$1c.forwardRef(function SliderUnstyled(props, ref) {
	  var _ref, _components$Rail, _components$Track, _components$Thumb, _components$ValueLabe, _components$Mark, _components$MarkLabel;

	  const {
	    'aria-label': ariaLabel,
	    'aria-valuetext': ariaValuetext,
	    className,
	    component,
	    classes: classesProp,
	    disableSwap = false,
	    disabled = false,
	    getAriaLabel,
	    getAriaValueText,
	    marks: marksProp = false,
	    max = 100,
	    min = 0,
	    onMouseDown,
	    orientation = 'horizontal',
	    scale = Identity,
	    step = 1,
	    track = 'normal',
	    valueLabelDisplay = 'off',
	    valueLabelFormat = Identity,
	    isRtl = false,
	    components = {},
	    componentsProps = {}
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$14.default)(props, _excluded$14); // all props with defaults
	  // consider extracting to hook an reusing the lint rule for the varints

	  const ownerState = (0, _extends2$1a.default)({}, props, {
	    mark: marksProp,
	    classes: classesProp,
	    disabled,
	    isRtl,
	    max,
	    min,
	    orientation,
	    scale,
	    step,
	    track,
	    valueLabelDisplay,
	    valueLabelFormat
	  });
	  const {
	    axisProps,
	    getRootProps,
	    getHiddenInputProps,
	    getThumbProps,
	    open,
	    active,
	    axis,
	    range,
	    focusVisible,
	    dragging,
	    marks,
	    values,
	    trackOffset,
	    trackLeap
	  } = (0, _useSlider.default)((0, _extends2$1a.default)({}, ownerState, {
	    ref
	  }));
	  ownerState.marked = marks.length > 0 && marks.some(mark => mark.label);
	  ownerState.dragging = dragging;
	  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'span';
	  const rootProps = (0, _appendOwnerState$2.default)(Root, (0, _extends2$1a.default)({}, other, componentsProps.root), ownerState);
	  const Rail = (_components$Rail = components.Rail) != null ? _components$Rail : 'span';
	  const railProps = (0, _appendOwnerState$2.default)(Rail, componentsProps.rail, ownerState);
	  const Track = (_components$Track = components.Track) != null ? _components$Track : 'span';
	  const trackProps = (0, _appendOwnerState$2.default)(Track, componentsProps.track, ownerState);
	  const trackStyle = (0, _extends2$1a.default)({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap));
	  const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : 'span';
	  const thumbProps = (0, _appendOwnerState$2.default)(Thumb, componentsProps.thumb, ownerState);
	  const ValueLabel = (_components$ValueLabe = components.ValueLabel) != null ? _components$ValueLabe : _SliderValueLabelUnstyled.default;
	  const valueLabelProps = (0, _appendOwnerState$2.default)(ValueLabel, componentsProps.valueLabel, ownerState);
	  const Mark = (_components$Mark = components.Mark) != null ? _components$Mark : 'span';
	  const markProps = (0, _appendOwnerState$2.default)(Mark, componentsProps.mark, ownerState);
	  const MarkLabel = (_components$MarkLabel = components.MarkLabel) != null ? _components$MarkLabel : 'span';
	  const markLabelProps = (0, _appendOwnerState$2.default)(MarkLabel, componentsProps.markLabel, ownerState);
	  const Input = components.Input || 'input';
	  const inputProps = (0, _appendOwnerState$2.default)(Input, componentsProps.input, ownerState);
	  const hiddenInputProps = getHiddenInputProps();
	  const classes = useUtilityClasses$M(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$1c.jsxs)(Root, (0, _extends2$1a.default)({}, rootProps, getRootProps({
	    onMouseDown
	  }), {
	    className: (0, _clsx$M.default)(classes.root, rootProps.className, className),
	    children: [/*#__PURE__*/(0, _jsxRuntime$1c.jsx)(Rail, (0, _extends2$1a.default)({}, railProps, {
	      className: (0, _clsx$M.default)(classes.rail, railProps.className)
	    })), /*#__PURE__*/(0, _jsxRuntime$1c.jsx)(Track, (0, _extends2$1a.default)({}, trackProps, {
	      className: (0, _clsx$M.default)(classes.track, trackProps.className),
	      style: (0, _extends2$1a.default)({}, trackStyle, trackProps.style)
	    })), marks.map((mark, index) => {
	      const percent = (0, _useSlider.valueToPercent)(mark.value, min, max);
	      const style = axisProps[axis].offset(percent);
	      let markActive;

	      if (track === false) {
	        markActive = values.indexOf(mark.value) !== -1;
	      } else {
	        markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
	      }

	      return /*#__PURE__*/(0, _jsxRuntime$1c.jsxs)(React$1c.Fragment, {
	        children: [/*#__PURE__*/(0, _jsxRuntime$1c.jsx)(Mark, (0, _extends2$1a.default)({
	          "data-index": index
	        }, markProps, !(0, _isHostComponent.default)(Mark) && {
	          markActive
	        }, {
	          style: (0, _extends2$1a.default)({}, style, markProps.style),
	          className: (0, _clsx$M.default)(classes.mark, markProps.className, markActive && classes.markActive)
	        })), mark.label != null ? /*#__PURE__*/(0, _jsxRuntime$1c.jsx)(MarkLabel, (0, _extends2$1a.default)({
	          "aria-hidden": true,
	          "data-index": index
	        }, markLabelProps, !(0, _isHostComponent.default)(MarkLabel) && {
	          markLabelActive: markActive
	        }, {
	          style: (0, _extends2$1a.default)({}, style, markLabelProps.style),
	          className: (0, _clsx$M.default)(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
	          children: mark.label
	        })) : null]
	      }, mark.value);
	    }), values.map((value, index) => {
	      const percent = (0, _useSlider.valueToPercent)(value, min, max);
	      const style = axisProps[axis].offset(percent);
	      const ValueLabelComponent = valueLabelDisplay === 'off' ? Forward : ValueLabel;
	      return /*#__PURE__*/(0, _jsxRuntime$1c.jsx)(React$1c.Fragment, {
	        children: /*#__PURE__*/(0, _jsxRuntime$1c.jsx)(ValueLabelComponent, (0, _extends2$1a.default)({}, !(0, _isHostComponent.default)(ValueLabelComponent) && {
	          valueLabelFormat,
	          valueLabelDisplay,
	          value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,
	          index,
	          open: open === index || active === index || valueLabelDisplay === 'on',
	          disabled
	        }, valueLabelProps, {
	          className: (0, _clsx$M.default)(classes.valueLabel, valueLabelProps.className),
	          children: /*#__PURE__*/(0, _jsxRuntime$1c.jsx)(Thumb, (0, _extends2$1a.default)({
	            "data-index": index
	          }, thumbProps, getThumbProps(), {
	            className: (0, _clsx$M.default)(classes.thumb, thumbProps.className, active === index && classes.active, focusVisible === index && classes.focusVisible)
	          }, !(0, _isHostComponent.default)(Thumb) && {
	            ownerState: (0, _extends2$1a.default)({}, ownerState, thumbProps.ownerState)
	          }, {
	            style: (0, _extends2$1a.default)({}, style, {
	              pointerEvents: disableSwap && active !== index ? 'none' : undefined
	            }, thumbProps.style),
	            children: /*#__PURE__*/(0, _jsxRuntime$1c.jsx)(Input, (0, _extends2$1a.default)({}, hiddenInputProps, {
	              "data-index": index,
	              "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
	              "aria-valuenow": scale(value),
	              "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
	              value: values[index]
	            }, !(0, _isHostComponent.default)(Input) && {
	              ownerState: (0, _extends2$1a.default)({}, ownerState, inputProps.ownerState)
	            }, inputProps, {
	              style: (0, _extends2$1a.default)({}, hiddenInputProps.style, inputProps.style)
	            }))
	          }))
	        }))
	      }, index);
	    })]
	  }));
	});
	SliderUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The label of the slider.
	   */
	  'aria-label': (0, _utils$X.chainPropTypes)(_propTypes$11.default.string, props => {
	    const range = Array.isArray(props.value || props.defaultValue);

	    if (range && props['aria-label'] != null) {
	      return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
	    }

	    return null;
	  }),

	  /**
	   * The id of the element containing a label for the slider.
	   */
	  'aria-labelledby': _propTypes$11.default.string,

	  /**
	   * A string value that provides a user-friendly name for the current value of the slider.
	   */
	  'aria-valuetext': (0, _utils$X.chainPropTypes)(_propTypes$11.default.string, props => {
	    const range = Array.isArray(props.value || props.defaultValue);

	    if (range && props['aria-valuetext'] != null) {
	      return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
	    }

	    return null;
	  }),

	  /**
	   * @ignore
	   */
	  children: _propTypes$11.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$11.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$11.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$11.default.elementType,

	  /**
	   * The components used for each slot inside the Slider.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$11.default.shape({
	    Input: _propTypes$11.default.elementType,
	    Mark: _propTypes$11.default.elementType,
	    MarkLabel: _propTypes$11.default.elementType,
	    Rail: _propTypes$11.default.elementType,
	    Root: _propTypes$11.default.elementType,
	    Thumb: _propTypes$11.default.elementType,
	    Track: _propTypes$11.default.elementType,
	    ValueLabel: _propTypes$11.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Slider.
	   * @default {}
	   */
	  componentsProps: _propTypes$11.default.shape({
	    input: _propTypes$11.default.object,
	    mark: _propTypes$11.default.object,
	    markLabel: _propTypes$11.default.object,
	    rail: _propTypes$11.default.object,
	    root: _propTypes$11.default.object,
	    thumb: _propTypes$11.default.object,
	    track: _propTypes$11.default.object,
	    valueLabel: _propTypes$11.default.shape({
	      className: _propTypes$11.default.string,
	      components: _propTypes$11.default.shape({
	        Root: _propTypes$11.default.elementType
	      }),
	      style: _propTypes$11.default.object,
	      value: _propTypes$11.default.oneOfType([_propTypes$11.default.arrayOf(_propTypes$11.default.number), _propTypes$11.default.number]),
	      valueLabelDisplay: _propTypes$11.default.oneOf(['auto', 'off', 'on'])
	    })
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: _propTypes$11.default.oneOfType([_propTypes$11.default.arrayOf(_propTypes$11.default.number), _propTypes$11.default.number]),

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: _propTypes$11.default.bool,

	  /**
	   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
	   * @default false
	   */
	  disableSwap: _propTypes$11.default.bool,

	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
	   * This is important for screen reader users.
	   * @param {number} index The thumb label's index to format.
	   * @returns {string}
	   */
	  getAriaLabel: _propTypes$11.default.func,

	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
	   * This is important for screen reader users.
	   * @param {number} value The thumb label's value to format.
	   * @param {number} index The thumb label's index to format.
	   * @returns {string}
	   */
	  getAriaValueText: _propTypes$11.default.func,

	  /**
	   * Indicates whether the theme context has rtl direction. It is set automatically.
	   * @default false
	   */
	  isRtl: _propTypes$11.default.bool,

	  /**
	   * Marks indicate predetermined values to which the user can move the slider.
	   * If `true` the marks are spaced according the value of the `step` prop.
	   * If an array, it should contain objects with `value` and an optional `label` keys.
	   * @default false
	   */
	  marks: _propTypes$11.default.oneOfType([_propTypes$11.default.arrayOf(_propTypes$11.default.shape({
	    label: _propTypes$11.default.node,
	    value: _propTypes$11.default.number.isRequired
	  })), _propTypes$11.default.bool]),

	  /**
	   * The maximum allowed value of the slider.
	   * Should not be equal to min.
	   * @default 100
	   */
	  max: _propTypes$11.default.number,

	  /**
	   * The minimum allowed value of the slider.
	   * Should not be equal to max.
	   * @default 0
	   */
	  min: _propTypes$11.default.number,

	  /**
	   * Name attribute of the hidden `input` element.
	   */
	  name: _propTypes$11.default.string,

	  /**
	   * Callback function that is fired when the slider's value changed.
	   *
	   * @param {Event} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (any).
	   * **Warning**: This is a generic event not a change event.
	   * @param {number | number[]} value The new value.
	   * @param {number} activeThumb Index of the currently moved thumb.
	   */
	  onChange: _propTypes$11.default.func,

	  /**
	   * Callback function that is fired when the `mouseup` is triggered.
	   *
	   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
	   * @param {number | number[]} value The new value.
	   */
	  onChangeCommitted: _propTypes$11.default.func,

	  /**
	   * @ignore
	   */
	  onMouseDown: _propTypes$11.default.func,

	  /**
	   * The component orientation.
	   * @default 'horizontal'
	   */
	  orientation: _propTypes$11.default.oneOf(['horizontal', 'vertical']),

	  /**
	   * A transformation function, to change the scale of the slider.
	   * @default (x) => x
	   */
	  scale: _propTypes$11.default.func,

	  /**
	   * The granularity with which the slider can step through values. (A "discrete" slider.)
	   * The `min` prop serves as the origin for the valid values.
	   * We recommend (max - min) to be evenly divisible by the step.
	   *
	   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
	   * @default 1
	   */
	  step: _propTypes$11.default.number,

	  /**
	   * Tab index attribute of the hidden `input` element.
	   */
	  tabIndex: _propTypes$11.default.number,

	  /**
	   * The track presentation:
	   *
	   * - `normal` the track will render a bar representing the slider value.
	   * - `inverted` the track will render a bar representing the remaining slider value.
	   * - `false` the track will render without a bar.
	   * @default 'normal'
	   */
	  track: _propTypes$11.default.oneOf(['inverted', 'normal', false]),

	  /**
	   * The value of the slider.
	   * For ranged sliders, provide an array with two values.
	   */
	  value: _propTypes$11.default.oneOfType([_propTypes$11.default.arrayOf(_propTypes$11.default.number), _propTypes$11.default.number]),

	  /**
	   * Controls when the value label is displayed:
	   *
	   * - `auto` the value label will display when the thumb is hovered or focused.
	   * - `on` will display persistently.
	   * - `off` will never display.
	   * @default 'off'
	   */
	  valueLabelDisplay: _propTypes$11.default.oneOf(['auto', 'off', 'on']),

	  /**
	   * The format function the value label's value.
	   *
	   * When a function is provided, it should have the following signature:
	   *
	   * - {number} value The value label's value to format
	   * - {number} index The value label's index to format
	   * @default (x) => x
	   */
	  valueLabelFormat: _propTypes$11.default.oneOfType([_propTypes$11.default.func, _propTypes$11.default.string])
	} ;
	var _default$2x = SliderUnstyled;
	SliderUnstyled$1.default = _default$2x;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  SliderValueLabelUnstyled: true,
		  sliderUnstyledClasses: true,
		  useSlider: true
		};
		Object.defineProperty(exports, "SliderValueLabelUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _SliderValueLabelUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _SliderUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "sliderUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _sliderUnstyledClasses.default;
		  }
		});
		Object.defineProperty(exports, "useSlider", {
		  enumerable: true,
		  get: function () {
		    return _useSlider.default;
		  }
		});

		var _SliderUnstyled = _interopRequireDefault(SliderUnstyled$1);

		var _SliderValueLabelUnstyled = _interopRequireDefault(SliderValueLabelUnstyled$1);

		var _sliderUnstyledClasses = _interopRequireWildcard(sliderUnstyledClasses$1);

		Object.keys(_sliderUnstyledClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _sliderUnstyledClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _sliderUnstyledClasses[key];
		    }
		  });
		});

		var _useSlider = _interopRequireDefault(useSlider$1);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (SliderUnstyled$2));

	var SwitchUnstyled$2 = {};

	var SwitchUnstyled$1 = {};

	var useSwitch$1 = {};

	var _interopRequireDefault$1w = interopRequireDefault.exports;

	Object.defineProperty(useSwitch$1, "__esModule", {
	  value: true
	});
	useSwitch$1.default = useSwitch;

	var _extends2$19 = _interopRequireDefault$1w(_extends$5.exports);

	var React$1b = _interopRequireWildcard$1e(require$$3);

	var _utils$W = utils$h;

	function _getRequireWildcardCache$1e(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1e = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1e(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1e(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * The basic building block for creating custom switches.
	 *
	 * Demos:
	 *
	 * - [Switches](https://mui.com/components/switches/)
	 */
	function useSwitch(props) {
	  const {
	    checked: checkedProp,
	    defaultChecked,
	    disabled,
	    onBlur,
	    onChange,
	    onFocus,
	    onFocusVisible,
	    readOnly,
	    required
	  } = props;
	  const [checked, setCheckedState] = (0, _utils$W.unstable_useControlled)({
	    controlled: checkedProp,
	    default: Boolean(defaultChecked),
	    name: 'Switch',
	    state: 'checked'
	  });

	  const handleInputChange = (event, otherHandler) => {
	    // Workaround for https://github.com/facebook/react/issues/9023
	    if (event.nativeEvent.defaultPrevented) {
	      return;
	    }

	    setCheckedState(event.target.checked);
	    onChange == null ? void 0 : onChange(event);
	    otherHandler == null ? void 0 : otherHandler(event);
	  };

	  const {
	    isFocusVisibleRef,
	    onBlur: handleBlurVisible,
	    onFocus: handleFocusVisible,
	    ref: focusVisibleRef
	  } = (0, _utils$W.unstable_useIsFocusVisible)();
	  const [focusVisible, setFocusVisible] = React$1b.useState(false);

	  if (disabled && focusVisible) {
	    setFocusVisible(false);
	  }

	  React$1b.useEffect(() => {
	    isFocusVisibleRef.current = focusVisible;
	  }, [focusVisible, isFocusVisibleRef]);
	  const inputRef = React$1b.useRef(null);

	  const handleFocus = (event, otherHandler) => {
	    // Fix for https://github.com/facebook/react/issues/7769
	    if (!inputRef.current) {
	      inputRef.current = event.currentTarget;
	    }

	    handleFocusVisible(event);

	    if (isFocusVisibleRef.current === true) {
	      setFocusVisible(true);
	      onFocusVisible == null ? void 0 : onFocusVisible(event);
	    }

	    onFocus == null ? void 0 : onFocus(event);
	    otherHandler == null ? void 0 : otherHandler(event);
	  };

	  const handleBlur = (event, otherHandler) => {
	    handleBlurVisible(event);

	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }

	    onBlur == null ? void 0 : onBlur(event);
	    otherHandler == null ? void 0 : otherHandler(event);
	  };

	  const handleRefChange = (0, _utils$W.unstable_useForkRef)(focusVisibleRef, inputRef);

	  const getInputProps = (otherProps = {}) => (0, _extends2$19.default)({
	    checked: checkedProp,
	    defaultChecked,
	    disabled,
	    readOnly,
	    required,
	    type: 'checkbox'
	  }, otherProps, {
	    onChange: event => handleInputChange(event, otherProps.onChange),
	    onFocus: event => handleFocus(event, otherProps.onFocus),
	    onBlur: event => handleBlur(event, otherProps.onBlur),
	    ref: handleRefChange
	  });

	  return {
	    checked,
	    disabled: Boolean(disabled),
	    focusVisible,
	    getInputProps,
	    readOnly: Boolean(readOnly)
	  };
	}

	var switchUnstyledClasses$1 = {};

	var _interopRequireDefault$1v = interopRequireDefault.exports;

	Object.defineProperty(switchUnstyledClasses$1, "__esModule", {
	  value: true
	});
	switchUnstyledClasses$1.default = void 0;
	switchUnstyledClasses$1.getSwitchUnstyledUtilityClass = getSwitchUnstyledUtilityClass;

	var _generateUtilityClass$4 = _interopRequireDefault$1v(generateUtilityClass$2);

	var _generateUtilityClasses$4 = _interopRequireDefault$1v(generateUtilityClasses$2);

	function getSwitchUnstyledUtilityClass(slot) {
	  return (0, _generateUtilityClass$4.default)('MuiSwitch', slot);
	}

	const switchUnstyledClasses = (0, _generateUtilityClasses$4.default)('MuiSwitch', ['root', 'input', 'track', 'thumb', 'checked', 'disabled', 'focusVisible', 'readOnly']);
	var _default$2w = switchUnstyledClasses;
	switchUnstyledClasses$1.default = _default$2w;

	var _interopRequireDefault$1u = interopRequireDefault.exports;

	Object.defineProperty(SwitchUnstyled$1, "__esModule", {
	  value: true
	});
	SwitchUnstyled$1.default = void 0;

	var _extends2$18 = _interopRequireDefault$1u(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$13 = _interopRequireDefault$1u(objectWithoutPropertiesLoose.exports);

	var React$1a = _interopRequireWildcard$1d(require$$3);

	var _propTypes$10 = _interopRequireDefault$1u(propTypes.exports);

	var _clsx$L = _interopRequireDefault$1u(clsx$1);

	var _useSwitch = _interopRequireDefault$1u(useSwitch$1);

	var _switchUnstyledClasses = _interopRequireDefault$1u(switchUnstyledClasses$1);

	var _appendOwnerState$1 = _interopRequireDefault$1u(appendOwnerState$1);

	var _jsxRuntime$1b = jsxRuntime;

	const _excluded$13 = ["checked", "className", "component", "components", "componentsProps", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required"];

	function _getRequireWildcardCache$1d(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1d = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1d(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1d(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * The foundation for building custom-styled switches.
	 *
	 * Demos:
	 *
	 * - [Switches](https://mui.com/components/switches/)
	 *
	 * API:
	 *
	 * - [SwitchUnstyled API](https://mui.com/api/switch-unstyled/)
	 */
	const SwitchUnstyled = /*#__PURE__*/React$1a.forwardRef(function SwitchUnstyled(props, ref) {
	  var _ref, _components$Thumb, _componentsProps$thum, _components$Input, _componentsProps$inpu, _components$Track, _componentsProps$trac;

	  const {
	    checked: checkedProp,
	    className,
	    component,
	    components = {},
	    componentsProps = {},
	    defaultChecked,
	    disabled: disabledProp,
	    onBlur,
	    onChange,
	    onFocus,
	    onFocusVisible,
	    readOnly: readOnlyProp
	  } = props,
	        otherProps = (0, _objectWithoutPropertiesLoose2$13.default)(props, _excluded$13);
	  const useSwitchProps = {
	    checked: checkedProp,
	    defaultChecked,
	    disabled: disabledProp,
	    onBlur,
	    onChange,
	    onFocus,
	    onFocusVisible,
	    readOnly: readOnlyProp
	  };
	  const {
	    getInputProps,
	    checked,
	    disabled,
	    focusVisible,
	    readOnly
	  } = (0, _useSwitch.default)(useSwitchProps);
	  const ownerState = (0, _extends2$18.default)({}, props, {
	    checked,
	    disabled,
	    focusVisible,
	    readOnly
	  });
	  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'span';
	  const rootProps = (0, _appendOwnerState$1.default)(Root, (0, _extends2$18.default)({}, otherProps, componentsProps.root), ownerState);
	  const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : 'span';
	  const thumbProps = (0, _appendOwnerState$1.default)(Thumb, (_componentsProps$thum = componentsProps.thumb) != null ? _componentsProps$thum : {}, ownerState);
	  const Input = (_components$Input = components.Input) != null ? _components$Input : 'input';
	  const inputProps = (0, _appendOwnerState$1.default)(Input, (_componentsProps$inpu = componentsProps.input) != null ? _componentsProps$inpu : {}, ownerState);
	  const Track = components.Track === null ? () => null : (_components$Track = components.Track) != null ? _components$Track : 'span';
	  const trackProps = (0, _appendOwnerState$1.default)(Track, (_componentsProps$trac = componentsProps.track) != null ? _componentsProps$trac : {}, ownerState);
	  const stateClasses = (0, _clsx$L.default)(checked && _switchUnstyledClasses.default.checked, disabled && _switchUnstyledClasses.default.disabled, focusVisible && _switchUnstyledClasses.default.focusVisible, readOnly && _switchUnstyledClasses.default.readOnly);
	  return /*#__PURE__*/(0, _jsxRuntime$1b.jsxs)(Root, (0, _extends2$18.default)({
	    ref: ref
	  }, rootProps, {
	    className: (0, _clsx$L.default)(_switchUnstyledClasses.default.root, stateClasses, className, rootProps == null ? void 0 : rootProps.className),
	    children: [/*#__PURE__*/(0, _jsxRuntime$1b.jsx)(Track, (0, _extends2$18.default)({}, trackProps, {
	      className: (0, _clsx$L.default)(_switchUnstyledClasses.default.track, trackProps == null ? void 0 : trackProps.className)
	    })), /*#__PURE__*/(0, _jsxRuntime$1b.jsx)(Thumb, (0, _extends2$18.default)({}, thumbProps, {
	      className: (0, _clsx$L.default)(_switchUnstyledClasses.default.thumb, thumbProps == null ? void 0 : thumbProps.className)
	    })), /*#__PURE__*/(0, _jsxRuntime$1b.jsx)(Input, (0, _extends2$18.default)({}, getInputProps(inputProps), {
	      className: (0, _clsx$L.default)(_switchUnstyledClasses.default.input, inputProps == null ? void 0 : inputProps.className)
	    }))]
	  }));
	});
	SwitchUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the component is checked.
	   */
	  checked: _propTypes$10.default.bool,

	  /**
	   * Class name applied to the root element.
	   */
	  className: _propTypes$10.default.string,

	  /**
	   * The component used for the Root slot.
	   * Either a string to use a HTML element or a component.
	   * This is equivalent to `components.Root`. If both are provided, the `component` is used.
	   */
	  component: _propTypes$10.default.elementType,

	  /**
	   * The components used for each slot inside the Switch.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$10.default
	  /* @typescript-to-proptypes-ignore */
	  .shape({
	    Input: _propTypes$10.default.elementType,
	    Root: _propTypes$10.default.elementType,
	    Thumb: _propTypes$10.default.elementType,
	    Track: _propTypes$10.default.oneOfType([_propTypes$10.default.elementType, _propTypes$10.default.oneOf([null])])
	  }),

	  /**
	   * The props used for each slot inside the Switch.
	   * @default {}
	   */
	  componentsProps: _propTypes$10.default.shape({
	    input: _propTypes$10.default.object,
	    root: _propTypes$10.default.object,
	    thumb: _propTypes$10.default.object,
	    track: _propTypes$10.default.object
	  }),

	  /**
	   * The default checked state. Use when the component is not controlled.
	   */
	  defaultChecked: _propTypes$10.default.bool,

	  /**
	   * If `true`, the component is disabled.
	   */
	  disabled: _propTypes$10.default.bool,

	  /**
	   * @ignore
	   */
	  onBlur: _propTypes$10.default.func,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: _propTypes$10.default.func,

	  /**
	   * @ignore
	   */
	  onFocus: _propTypes$10.default.func,

	  /**
	   * @ignore
	   */
	  onFocusVisible: _propTypes$10.default.func,

	  /**
	   * If `true`, the component is read only.
	   */
	  readOnly: _propTypes$10.default.bool,

	  /**
	   * If `true`, the `input` element is required.
	   */
	  required: _propTypes$10.default.bool
	} ;
	var _default$2v = SwitchUnstyled;
	SwitchUnstyled$1.default = _default$2v;

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  useSwitch: true,
		  switchUnstyledClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _SwitchUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "switchUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _switchUnstyledClasses.default;
		  }
		});
		Object.defineProperty(exports, "useSwitch", {
		  enumerable: true,
		  get: function () {
		    return _useSwitch.default;
		  }
		});

		var _SwitchUnstyled = _interopRequireWildcard(SwitchUnstyled$1);

		Object.keys(_SwitchUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _SwitchUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _SwitchUnstyled[key];
		    }
		  });
		});

		var _useSwitch = _interopRequireWildcard(useSwitch$1);

		Object.keys(_useSwitch).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _useSwitch[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _useSwitch[key];
		    }
		  });
		});

		var _switchUnstyledClasses = _interopRequireWildcard(switchUnstyledClasses$1);

		Object.keys(_switchUnstyledClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _switchUnstyledClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _switchUnstyledClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (SwitchUnstyled$2));

	var TabPanelUnstyled$2 = {};

	var TabPanelUnstyled$1 = {};

	var tabPanelUnstyledClasses$1 = {};

	var _interopRequireDefault$1t = interopRequireDefault.exports;

	Object.defineProperty(tabPanelUnstyledClasses$1, "__esModule", {
	  value: true
	});
	tabPanelUnstyledClasses$1.default = void 0;
	tabPanelUnstyledClasses$1.getTabPanelUnstyledUtilityClass = getTabPanelUnstyledUtilityClass;

	var _generateUtilityClass$3 = _interopRequireDefault$1t(generateUtilityClass$2);

	var _generateUtilityClasses$3 = _interopRequireDefault$1t(generateUtilityClasses$2);

	function getTabPanelUnstyledUtilityClass(slot) {
	  return (0, _generateUtilityClass$3.default)('TabPanelUnstyled', slot);
	}

	const tabPanelUnstyledClasses = (0, _generateUtilityClasses$3.default)('TabPanelUnstyled', ['root', 'hidden']);
	var _default$2u = tabPanelUnstyledClasses;
	tabPanelUnstyledClasses$1.default = _default$2u;

	var useTabPanel$1 = {};

	var TabsUnstyled$2 = {};

	var TabsUnstyled$1 = {};

	var tabsUnstyledClasses$1 = {};

	var _interopRequireDefault$1s = interopRequireDefault.exports;

	Object.defineProperty(tabsUnstyledClasses$1, "__esModule", {
	  value: true
	});
	tabsUnstyledClasses$1.default = void 0;
	tabsUnstyledClasses$1.getTabsUnstyledUtilityClass = getTabsUnstyledUtilityClass;

	var _generateUtilityClass$2 = _interopRequireDefault$1s(generateUtilityClass$2);

	var _generateUtilityClasses$2 = _interopRequireDefault$1s(generateUtilityClasses$2);

	function getTabsUnstyledUtilityClass(slot) {
	  return (0, _generateUtilityClass$2.default)('TabsUnstyled', slot);
	}

	const tabsUnstyledClasses = (0, _generateUtilityClasses$2.default)('TabsUnstyled', ['root', 'horizontal', 'vertical']);
	var _default$2t = tabsUnstyledClasses;
	tabsUnstyledClasses$1.default = _default$2t;

	var useTabs$1 = {};

	Object.defineProperty(useTabs$1, "__esModule", {
	  value: true
	});
	useTabs$1.default = void 0;

	var React$19 = _interopRequireWildcard$1c(require$$3);

	var _utils$V = utils$h;

	function _getRequireWildcardCache$1c(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1c = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1c(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1c(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useTabs = props => {
	  const {
	    value: valueProp,
	    defaultValue,
	    onChange,
	    orientation,
	    direction,
	    selectionFollowsFocus
	  } = props;
	  const [value, setValue] = (0, _utils$V.unstable_useControlled)({
	    controlled: valueProp,
	    default: defaultValue,
	    name: 'Tabs',
	    state: 'value'
	  });
	  const idPrefix = (0, _utils$V.unstable_useId)();
	  const onSelected = React$19.useCallback((e, newValue) => {
	    setValue(newValue);

	    if (onChange) {
	      onChange(e, newValue);
	    }
	  }, [onChange, setValue]);

	  const getRootProps = () => {
	    return {};
	  };

	  const tabsContextValue = React$19.useMemo(() => {
	    return {
	      idPrefix,
	      value,
	      onSelected,
	      orientation,
	      direction,
	      selectionFollowsFocus
	    };
	  }, [idPrefix, value, onSelected, orientation, direction, selectionFollowsFocus]);
	  return {
	    getRootProps,
	    tabsContextValue
	  };
	};

	var _default$2s = useTabs;
	useTabs$1.default = _default$2s;

	var TabsContext = {};

	Object.defineProperty(TabsContext, "__esModule", {
	  value: true
	});
	TabsContext.default = void 0;
	TabsContext.getPanelId = getPanelId$1;
	TabsContext.getTabId = getTabId$1;
	TabsContext.useTabContext = useTabContext$1;

	var React$18 = _interopRequireWildcard$1b(require$$3);

	function _getRequireWildcardCache$1b(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1b = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1b(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1b(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * @ignore - internal component.
	 */
	const Context$1 = /*#__PURE__*/React$18.createContext(null);

	{
	  Context$1.displayName = 'TabsContext';
	}
	/**
	 * @returns {unknown}
	 */


	function useTabContext$1() {
	  return React$18.useContext(Context$1);
	}

	function getPanelId$1(context, value) {
	  const {
	    idPrefix
	  } = context;

	  if (idPrefix === null) {
	    return null;
	  }

	  return `${context.idPrefix}-P-${value}`;
	}

	function getTabId$1(context, value) {
	  const {
	    idPrefix
	  } = context;

	  if (idPrefix === null) {
	    return null;
	  }

	  return `${context.idPrefix}-T-${value}`;
	}

	var _default$2r = Context$1;
	TabsContext.default = _default$2r;

	var _interopRequireDefault$1r = interopRequireDefault.exports;

	Object.defineProperty(TabsUnstyled$1, "__esModule", {
	  value: true
	});
	TabsUnstyled$1.default = void 0;

	var _extends2$17 = _interopRequireDefault$1r(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$12 = _interopRequireDefault$1r(objectWithoutPropertiesLoose.exports);

	var React$17 = _interopRequireWildcard$1a(require$$3);

	var _propTypes$$ = _interopRequireDefault$1r(propTypes.exports);

	var _clsx$K = _interopRequireDefault$1r(clsx$1);

	var _utils$U = utils$d;

	var _composeClasses$4 = _interopRequireDefault$1r(composeClasses$2);

	var _tabsUnstyledClasses = tabsUnstyledClasses$1;

	var _useTabs = _interopRequireDefault$1r(useTabs$1);

	var _TabsContext = _interopRequireDefault$1r(TabsContext);

	var _jsxRuntime$1a = jsxRuntime;

	const _excluded$12 = ["children", "className", "value", "defaultValue", "orientation", "direction", "component", "components", "componentsProps", "onChange", "selectionFollowsFocus"];

	function _getRequireWildcardCache$1a(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1a = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1a(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1a(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$L = ownerState => {
	  const {
	    orientation
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation]
	  };
	  return (0, _composeClasses$4.default)(slots, _tabsUnstyledClasses.getTabsUnstyledUtilityClass, {});
	};
	/**
	 *
	 * Demos:
	 *
	 * - [Tabs](https://mui.com/components/tabs/)
	 *
	 * API:
	 *
	 * - [TabsUnstyled API](https://mui.com/api/tabs-unstyled/)
	 */


	const TabsUnstyled = /*#__PURE__*/React$17.forwardRef((props, ref) => {
	  var _ref, _componentsProps$root;

	  const {
	    children,
	    className,
	    orientation = 'horizontal',
	    direction = 'ltr',
	    component,
	    components = {},
	    componentsProps = {}
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$12.default)(props, _excluded$12);
	  const {
	    tabsContextValue,
	    getRootProps
	  } = (0, _useTabs.default)(props);
	  const ownerState = (0, _extends2$17.default)({}, props, {
	    orientation,
	    direction
	  });
	  const classes = useUtilityClasses$L(ownerState);
	  const TabsRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
	  const tabsRootProps = (0, _utils$U.appendOwnerState)(TabsRoot, (0, _extends2$17.default)({}, other, componentsProps.root), ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$1a.jsx)(TabsRoot, (0, _extends2$17.default)({}, getRootProps(), tabsRootProps, {
	    ref: ref,
	    className: (0, _clsx$K.default)(classes.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, className),
	    children: /*#__PURE__*/(0, _jsxRuntime$1a.jsx)(_TabsContext.default.Provider, {
	      value: tabsContextValue,
	      children: children
	    })
	  }));
	});
	TabsUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$$.default.node,

	  /**
	   * @ignore
	   */
	  className: _propTypes$$.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$$.default.elementType,

	  /**
	   * The components used for each slot inside the Tabs.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$$.default.shape({
	    Root: _propTypes$$.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Tabs.
	   * @default {}
	   */
	  componentsProps: _propTypes$$.default.shape({
	    root: _propTypes$$.default.object
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: _propTypes$$.default.oneOfType([_propTypes$$.default.oneOf([false]), _propTypes$$.default.number, _propTypes$$.default.string]),

	  /**
	   * The direction of the text.
	   * @default 'ltr'
	   */
	  direction: _propTypes$$.default.oneOf(['ltr', 'rtl']),

	  /**
	   * Callback invoked when new value is being set.
	   */
	  onChange: _propTypes$$.default.func,

	  /**
	   * The component orientation (layout flow direction).
	   * @default 'horizontal'
	   */
	  orientation: _propTypes$$.default.oneOf(['horizontal', 'vertical']),

	  /**
	   * If `true` the selected tab changes on focus. Otherwise it only
	   * changes on activation.
	   */
	  selectionFollowsFocus: _propTypes$$.default.bool,

	  /**
	   * The value of the currently selected `Tab`.
	   * If you don't want any selected `Tab`, you can set this prop to `false`.
	   */
	  value: _propTypes$$.default.oneOfType([_propTypes$$.default.oneOf([false]), _propTypes$$.default.number, _propTypes$$.default.string])
	} ;
	var _default$2q = TabsUnstyled;
	TabsUnstyled$1.default = _default$2q;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  TabsContext: true,
		  tabsUnstyledClasses: true,
		  useTabs: true
		};
		Object.defineProperty(exports, "TabsContext", {
		  enumerable: true,
		  get: function () {
		    return _TabsContext.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _TabsUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "tabsUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _tabsUnstyledClasses.default;
		  }
		});
		Object.defineProperty(exports, "useTabs", {
		  enumerable: true,
		  get: function () {
		    return _useTabs.default;
		  }
		});

		var _TabsUnstyled = _interopRequireDefault(TabsUnstyled$1);

		var _TabsContext = _interopRequireWildcard(TabsContext);

		Object.keys(_TabsContext).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _TabsContext[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _TabsContext[key];
		    }
		  });
		});

		var _tabsUnstyledClasses = _interopRequireWildcard(tabsUnstyledClasses$1);

		Object.keys(_tabsUnstyledClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _tabsUnstyledClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _tabsUnstyledClasses[key];
		    }
		  });
		});

		var _useTabs = _interopRequireWildcard(useTabs$1);

		Object.keys(_useTabs).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _useTabs[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _useTabs[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TabsUnstyled$2));

	Object.defineProperty(useTabPanel$1, "__esModule", {
	  value: true
	});
	useTabPanel$1.default = void 0;

	var _TabsUnstyled$2 = TabsUnstyled$2;

	const useTabPanel = props => {
	  const {
	    value
	  } = props;
	  const context = (0, _TabsUnstyled$2.useTabContext)();

	  if (context === null) {
	    throw new Error('No TabContext provided');
	  }

	  const hidden = value !== context.value;
	  const id = (0, _TabsUnstyled$2.getPanelId)(context, value);
	  const tabId = (0, _TabsUnstyled$2.getTabId)(context, value);

	  const getRootProps = () => {
	    return {
	      'aria-labelledby': tabId,
	      hidden,
	      id
	    };
	  };

	  return {
	    hidden,
	    getRootProps
	  };
	};

	var _default$2p = useTabPanel;
	useTabPanel$1.default = _default$2p;

	var _interopRequireDefault$1q = interopRequireDefault.exports;

	Object.defineProperty(TabPanelUnstyled$1, "__esModule", {
	  value: true
	});
	TabPanelUnstyled$1.default = void 0;

	var _extends2$16 = _interopRequireDefault$1q(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$11 = _interopRequireDefault$1q(objectWithoutPropertiesLoose.exports);

	var React$16 = _interopRequireWildcard$19(require$$3);

	var _propTypes$_ = _interopRequireDefault$1q(propTypes.exports);

	var _clsx$J = _interopRequireDefault$1q(clsx$1);

	var _utils$T = utils$d;

	var _composeClasses$3 = _interopRequireDefault$1q(composeClasses$2);

	var _tabPanelUnstyledClasses = tabPanelUnstyledClasses$1;

	var _useTabPanel = _interopRequireDefault$1q(useTabPanel$1);

	var _jsxRuntime$19 = jsxRuntime;

	const _excluded$11 = ["children", "className", "value", "components", "componentsProps", "component"];

	function _getRequireWildcardCache$19(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$19 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$19(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$19(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$K = ownerState => {
	  const {
	    hidden
	  } = ownerState;
	  const slots = {
	    root: ['root', hidden && 'hidden']
	  };
	  return (0, _composeClasses$3.default)(slots, _tabPanelUnstyledClasses.getTabPanelUnstyledUtilityClass, {});
	};
	/**
	 *
	 * Demos:
	 *
	 * - [Tabs](https://mui.com/components/tabs/)
	 *
	 * API:
	 *
	 * - [TabPanelUnstyled API](https://mui.com/api/tab-panel-unstyled/)
	 */


	const TabPanelUnstyled = /*#__PURE__*/React$16.forwardRef(function TabPanelUnstyled(props, ref) {
	  var _ref, _componentsProps$root;

	  const {
	    children,
	    className,
	    components = {},
	    componentsProps = {},
	    component
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$11.default)(props, _excluded$11);
	  const {
	    hidden,
	    getRootProps
	  } = (0, _useTabPanel.default)(props);
	  const ownerState = (0, _extends2$16.default)({}, props, {
	    hidden
	  });
	  const classes = useUtilityClasses$K(ownerState);
	  const TabPanelRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
	  const tabPanelRootProps = (0, _utils$T.appendOwnerState)(TabPanelRoot, (0, _extends2$16.default)({}, other, componentsProps.root), ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$19.jsx)(TabPanelRoot, (0, _extends2$16.default)({}, getRootProps(), {
	    ref: ref,
	    role: "tabpanel"
	  }, tabPanelRootProps, {
	    className: (0, _clsx$J.default)(classes.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, className),
	    children: !hidden && children
	  }));
	});
	TabPanelUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$_.default.node,

	  /**
	   * @ignore
	   */
	  className: _propTypes$_.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$_.default.elementType,

	  /**
	   * The components used for each slot inside the TabPanel.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$_.default.shape({
	    Root: _propTypes$_.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the TabPanel.
	   * @default {}
	   */
	  componentsProps: _propTypes$_.default.shape({
	    root: _propTypes$_.default.object
	  }),

	  /**
	   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
	   */
	  value: _propTypes$_.default.oneOfType([_propTypes$_.default.number, _propTypes$_.default.string]).isRequired
	} ;
	var _default$2o = TabPanelUnstyled;
	TabPanelUnstyled$1.default = _default$2o;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  tabPanelUnstyledClasses: true,
		  useTabPanel: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _TabPanelUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "tabPanelUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _tabPanelUnstyledClasses.default;
		  }
		});
		Object.defineProperty(exports, "useTabPanel", {
		  enumerable: true,
		  get: function () {
		    return _useTabPanel.default;
		  }
		});

		var _TabPanelUnstyled = _interopRequireDefault(TabPanelUnstyled$1);

		var _tabPanelUnstyledClasses = _interopRequireWildcard(tabPanelUnstyledClasses$1);

		Object.keys(_tabPanelUnstyledClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _tabPanelUnstyledClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _tabPanelUnstyledClasses[key];
		    }
		  });
		});

		var _useTabPanel = _interopRequireWildcard(useTabPanel$1);

		Object.keys(_useTabPanel).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _useTabPanel[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _useTabPanel[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TabPanelUnstyled$2));

	var TabsListUnstyled$2 = {};

	var TabsListUnstyled$1 = {};

	var tabsListUnstyledClasses$1 = {};

	var _interopRequireDefault$1p = interopRequireDefault.exports;

	Object.defineProperty(tabsListUnstyledClasses$1, "__esModule", {
	  value: true
	});
	tabsListUnstyledClasses$1.default = void 0;
	tabsListUnstyledClasses$1.getTabsListUnstyledUtilityClass = getTabsListUnstyledUtilityClass;

	var _generateUtilityClass$1 = _interopRequireDefault$1p(generateUtilityClass$2);

	var _generateUtilityClasses$1 = _interopRequireDefault$1p(generateUtilityClasses$2);

	function getTabsListUnstyledUtilityClass(slot) {
	  return (0, _generateUtilityClass$1.default)('TabsListUnstyled', slot);
	}

	const tabsListUnstyledClasses = (0, _generateUtilityClasses$1.default)('TabsListUnstyled', ['root', 'horizontal', 'vertical']);
	var _default$2n = tabsListUnstyledClasses;
	tabsListUnstyledClasses$1.default = _default$2n;

	var useTabsList$1 = {};

	var _interopRequireDefault$1o = interopRequireDefault.exports;

	Object.defineProperty(useTabsList$1, "__esModule", {
	  value: true
	});
	useTabsList$1.default = void 0;

	var _extends2$15 = _interopRequireDefault$1o(_extends$5.exports);

	var React$15 = _interopRequireWildcard$18(require$$3);

	var _utils$S = utils$h;

	var _reactIs$5 = reactIs.exports;

	var _TabsUnstyled$1 = TabsUnstyled$2;

	var _extractEventHandlers = _interopRequireDefault$1o(extractEventHandlers$1);

	function _getRequireWildcardCache$18(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$18 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$18(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$18(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const nextItem$2 = (list, item) => {
	  if (!list) {
	    return null;
	  }

	  if (list === item) {
	    return list.firstChild;
	  }

	  if (item && item.nextElementSibling) {
	    return item.nextElementSibling;
	  }

	  return list.firstChild;
	};

	const previousItem$2 = (list, item) => {
	  if (!list) {
	    return null;
	  }

	  if (list === item) {
	    return list.lastChild;
	  }

	  if (item && item.previousElementSibling) {
	    return item.previousElementSibling;
	  }

	  return list.lastChild;
	};

	const moveFocus$2 = (list, currentFocus, traversalFunction) => {
	  let wrappedOnce = false;
	  let nextFocus = traversalFunction(list, currentFocus);

	  while (list && nextFocus) {
	    // Prevent infinite loop.
	    if (nextFocus === list.firstChild) {
	      if (wrappedOnce) {
	        return;
	      }

	      wrappedOnce = true;
	    } // Same logic as useAutocomplete.js


	    const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';

	    if (!nextFocus.hasAttribute('tabindex') || nextFocusDisabled) {
	      // Move to the next element.
	      nextFocus = traversalFunction(list, nextFocus);
	    } else {
	      nextFocus.focus();
	      return;
	    }
	  }
	};

	const useTabsList = props => {
	  const {
	    'aria-label': ariaLabel,
	    'aria-labelledby': ariaLabelledBy,
	    children,
	    ref
	  } = props;
	  const tabsListRef = /*#__PURE__*/React$15.createRef();
	  const handleRef = (0, _utils$S.unstable_useForkRef)(tabsListRef, ref);
	  const context = (0, _TabsUnstyled$1.useTabContext)();

	  if (context === null) {
	    throw new Error('No TabContext provided');
	  }

	  const {
	    value,
	    orientation = 'horizontal',
	    direction = 'ltr'
	  } = context;
	  const isRtl = direction === 'rtl';

	  const handleKeyDown = event => {
	    const list = tabsListRef.current;
	    const currentFocus = (0, _utils$S.unstable_ownerDocument)(list).activeElement; // Keyboard navigation assumes that [role="tab"] are siblings
	    // though we might warn in the future about nested, interactive elements
	    // as a a11y violation

	    const role = currentFocus == null ? void 0 : currentFocus.getAttribute('role');

	    if (role !== 'tab') {
	      return;
	    }

	    let previousItemKey = orientation === 'horizontal' ? 'ArrowLeft' : 'ArrowUp';
	    let nextItemKey = orientation === 'horizontal' ? 'ArrowRight' : 'ArrowDown';

	    if (orientation === 'horizontal' && isRtl) {
	      // swap previousItemKey with nextItemKey
	      previousItemKey = 'ArrowRight';
	      nextItemKey = 'ArrowLeft';
	    }

	    switch (event.key) {
	      case previousItemKey:
	        event.preventDefault();
	        moveFocus$2(list, currentFocus, previousItem$2);
	        break;

	      case nextItemKey:
	        event.preventDefault();
	        moveFocus$2(list, currentFocus, nextItem$2);
	        break;

	      case 'Home':
	        event.preventDefault();
	        moveFocus$2(list, null, nextItem$2);
	        break;

	      case 'End':
	        event.preventDefault();
	        moveFocus$2(list, null, previousItem$2);
	        break;
	    }
	  };

	  const createHandleKeyDown = otherHandlers => event => {
	    var _otherHandlers$onKeyD;

	    handleKeyDown(event);
	    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
	  };

	  const getRootProps = otherHandlers => {
	    const propsEventHandlers = (0, _extractEventHandlers.default)(props);
	    const externalEventHandlers = (0, _extends2$15.default)({}, propsEventHandlers, otherHandlers);
	    const ownEventHandlers = {
	      onKeyDown: createHandleKeyDown(externalEventHandlers)
	    };
	    const mergedEventHandlers = (0, _extends2$15.default)({}, externalEventHandlers, ownEventHandlers);
	    return (0, _extends2$15.default)({
	      'aria-label': ariaLabel,
	      'aria-labelledby': ariaLabelledBy,
	      'aria-orientation': orientation === 'vertical' ? 'vertical' : null,
	      role: 'tablist',
	      ref: handleRef
	    }, mergedEventHandlers);
	  };

	  const processChildren = React$15.useCallback(() => {
	    const valueToIndex = new Map();
	    let childIndex = 0;
	    const processedChildren = React$15.Children.map(children, child => {
	      if (! /*#__PURE__*/React$15.isValidElement(child)) {
	        return null;
	      }

	      {
	        if ((0, _reactIs$5.isFragment)(child)) {
	          console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	        }
	      }

	      const childValue = child.props.value === undefined ? childIndex : child.props.value;
	      valueToIndex.set(childValue, childIndex);
	      childIndex += 1;
	      return /*#__PURE__*/React$15.cloneElement(child, (0, _extends2$15.default)({
	        value: childValue
	      }, childIndex === 1 && value === false && !child.props.tabIndex || value === childValue ? {
	        tabIndex: 0
	      } : {
	        tabIndex: -1
	      }));
	    });
	    return processedChildren;
	  }, [children, value]);
	  return {
	    isRtl,
	    orientation,
	    value,
	    processChildren,
	    getRootProps
	  };
	};

	var _default$2m = useTabsList;
	useTabsList$1.default = _default$2m;

	var _interopRequireDefault$1n = interopRequireDefault.exports;

	Object.defineProperty(TabsListUnstyled$1, "__esModule", {
	  value: true
	});
	TabsListUnstyled$1.default = void 0;

	var _extends2$14 = _interopRequireDefault$1n(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$10 = _interopRequireDefault$1n(objectWithoutPropertiesLoose.exports);

	var React$14 = _interopRequireWildcard$17(require$$3);

	var _propTypes$Z = _interopRequireDefault$1n(propTypes.exports);

	var _clsx$I = _interopRequireDefault$1n(clsx$1);

	var _composeClasses$2 = _interopRequireDefault$1n(composeClasses$2);

	var _utils$R = utils$d;

	var _tabsListUnstyledClasses = tabsListUnstyledClasses$1;

	var _useTabsList = _interopRequireDefault$1n(useTabsList$1);

	var _jsxRuntime$18 = jsxRuntime;

	const _excluded$10 = ["className", "children", "component", "components", "componentsProps"];

	function _getRequireWildcardCache$17(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$17 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$17(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$17(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$J = ownerState => {
	  const {
	    orientation
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation]
	  };
	  return (0, _composeClasses$2.default)(slots, _tabsListUnstyledClasses.getTabsListUnstyledUtilityClass, {});
	};
	/**
	 *
	 * Demos:
	 *
	 * - [Tabs](https://mui.com/components/tabs/)
	 *
	 * API:
	 *
	 * - [TabsListUnstyled API](https://mui.com/api/tabs-list-unstyled/)
	 */


	const TabsListUnstyled = /*#__PURE__*/React$14.forwardRef((props, ref) => {
	  var _ref, _componentsProps$root;

	  const {
	    className,
	    component,
	    components = {},
	    componentsProps = {}
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$10.default)(props, _excluded$10);
	  const {
	    isRtl,
	    orientation,
	    getRootProps,
	    processChildren
	  } = (0, _useTabsList.default)((0, _extends2$14.default)({}, props, {
	    ref
	  }));
	  const ownerState = (0, _extends2$14.default)({}, props, {
	    isRtl,
	    orientation
	  });
	  const classes = useUtilityClasses$J(ownerState);
	  const TabsListRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
	  const tabsListRootProps = (0, _utils$R.appendOwnerState)(TabsListRoot, (0, _extends2$14.default)({}, other, componentsProps.root), ownerState);
	  const processedChildren = processChildren();
	  return /*#__PURE__*/(0, _jsxRuntime$18.jsx)(TabsListRoot, (0, _extends2$14.default)({}, getRootProps(), tabsListRootProps, {
	    className: (0, _clsx$I.default)(className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, classes.root),
	    children: processedChildren
	  }));
	});
	TabsListUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$Z.default.node,

	  /**
	   * @ignore
	   */
	  className: _propTypes$Z.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$Z.default.elementType,

	  /**
	   * The components used for each slot inside the TabsList.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$Z.default.shape({
	    Root: _propTypes$Z.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the TabsList.
	   * @default {}
	   */
	  componentsProps: _propTypes$Z.default.shape({
	    root: _propTypes$Z.default.object
	  })
	} ;
	var _default$2l = TabsListUnstyled;
	TabsListUnstyled$1.default = _default$2l;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  tabsListUnstyledClasses: true,
		  useTabsList: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _TabsListUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "tabsListUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _tabsListUnstyledClasses.default;
		  }
		});
		Object.defineProperty(exports, "useTabsList", {
		  enumerable: true,
		  get: function () {
		    return _useTabsList.default;
		  }
		});

		var _TabsListUnstyled = _interopRequireDefault(TabsListUnstyled$1);

		var _tabsListUnstyledClasses = _interopRequireWildcard(tabsListUnstyledClasses$1);

		Object.keys(_tabsListUnstyledClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _tabsListUnstyledClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _tabsListUnstyledClasses[key];
		    }
		  });
		});

		var _useTabsList = _interopRequireWildcard(useTabsList$1);

		Object.keys(_useTabsList).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _useTabsList[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _useTabsList[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TabsListUnstyled$2));

	var TabUnstyled$2 = {};

	var TabUnstyled$1 = {};

	var tabUnstyledClasses$1 = {};

	var _interopRequireDefault$1m = interopRequireDefault.exports;

	Object.defineProperty(tabUnstyledClasses$1, "__esModule", {
	  value: true
	});
	tabUnstyledClasses$1.default = void 0;
	tabUnstyledClasses$1.getTabUnstyledUtilityClass = getTabUnstyledUtilityClass;

	var _generateUtilityClass = _interopRequireDefault$1m(generateUtilityClass$2);

	var _generateUtilityClasses = _interopRequireDefault$1m(generateUtilityClasses$2);

	function getTabUnstyledUtilityClass(slot) {
	  return (0, _generateUtilityClass.default)('TabUnstyled', slot);
	}

	const tabUnstyledClasses = (0, _generateUtilityClasses.default)('TabUnstyled', ['root', 'selected', 'disabled']);
	var _default$2k = tabUnstyledClasses;
	tabUnstyledClasses$1.default = _default$2k;

	var useTab$1 = {};

	var _interopRequireDefault$1l = interopRequireDefault.exports;

	Object.defineProperty(useTab$1, "__esModule", {
	  value: true
	});
	useTab$1.default = void 0;

	var _extends2$13 = _interopRequireDefault$1l(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$$ = _interopRequireDefault$1l(objectWithoutPropertiesLoose.exports);

	var _TabsUnstyled = TabsUnstyled$2;

	var _ButtonUnstyled = ButtonUnstyled$2;

	const _excluded$$ = ["getRootProps"];

	const useTab = props => {
	  const {
	    value: valueProp,
	    onChange,
	    onClick,
	    onFocus
	  } = props;

	  const _useButton = (0, _ButtonUnstyled.useButton)(props),
	        {
	    getRootProps: getRootPropsButton
	  } = _useButton,
	        otherButtonProps = (0, _objectWithoutPropertiesLoose2$$.default)(_useButton, _excluded$$);

	  const context = (0, _TabsUnstyled.useTabContext)();

	  if (context === null) {
	    throw new Error('No TabContext provided');
	  }

	  const value = valueProp != null ? valueProp : 0;
	  const selected = context.value === value;
	  const selectionFollowsFocus = context.selectionFollowsFocus;
	  const a11yAttributes = {
	    role: 'tab',
	    'aria-controls': (0, _TabsUnstyled.getPanelId)(context, value),
	    id: (0, _TabsUnstyled.getTabId)(context, value),
	    'aria-selected': selected,
	    disabled: otherButtonProps.disabled
	  };

	  const handleFocus = event => {
	    if (selectionFollowsFocus && !selected) {
	      if (onChange) {
	        onChange(event, value);
	      }

	      context.onSelected(event, value);
	    }

	    if (onFocus) {
	      onFocus(event);
	    }
	  };

	  const handleClick = event => {
	    if (!selected) {
	      if (onChange) {
	        onChange(event, value);
	      }

	      context.onSelected(event, value);
	    }

	    if (onClick) {
	      onClick(event);
	    }
	  };

	  const getRootProps = otherHandlers => {
	    const buttonResolvedProps = getRootPropsButton((0, _extends2$13.default)({
	      onClick: handleClick,
	      onFocus: handleFocus
	    }, otherHandlers));
	    return (0, _extends2$13.default)({}, buttonResolvedProps, a11yAttributes);
	  };

	  return (0, _extends2$13.default)({
	    getRootProps
	  }, otherButtonProps, {
	    selected
	  });
	};

	var _default$2j = useTab;
	useTab$1.default = _default$2j;

	var _interopRequireDefault$1k = interopRequireDefault.exports;

	Object.defineProperty(TabUnstyled$1, "__esModule", {
	  value: true
	});
	TabUnstyled$1.default = void 0;

	var _extends2$12 = _interopRequireDefault$1k(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$_ = _interopRequireDefault$1k(objectWithoutPropertiesLoose.exports);

	var React$13 = _interopRequireWildcard$16(require$$3);

	var _propTypes$Y = _interopRequireDefault$1k(propTypes.exports);

	var _clsx$H = _interopRequireDefault$1k(clsx$1);

	var _utils$Q = utils$h;

	var _composeClasses$1 = _interopRequireDefault$1k(composeClasses$2);

	var _appendOwnerState = _interopRequireDefault$1k(appendOwnerState$1);

	var _tabUnstyledClasses = tabUnstyledClasses$1;

	var _useTab = _interopRequireDefault$1k(useTab$1);

	var _jsxRuntime$17 = jsxRuntime;

	const _excluded$_ = ["action", "children", "value", "className", "disabled", "onChange", "onClick", "onFocus", "component", "components", "componentsProps"];

	function _getRequireWildcardCache$16(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$16 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$16(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$16(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$I = ownerState => {
	  const {
	    selected,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', selected && 'selected', disabled && 'disabled']
	  };
	  return (0, _composeClasses$1.default)(slots, _tabUnstyledClasses.getTabUnstyledUtilityClass, {});
	};
	/**
	 *
	 * Demos:
	 *
	 * - [Tabs](https://mui.com/components/tabs/)
	 *
	 * API:
	 *
	 * - [TabUnstyled API](https://mui.com/api/tab-unstyled/)
	 */


	const TabUnstyled = /*#__PURE__*/React$13.forwardRef(function TabUnstyled(props, ref) {
	  var _ref, _componentsProps$root;

	  const {
	    action,
	    children,
	    className,
	    disabled = false,
	    component,
	    components = {},
	    componentsProps = {}
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$_.default)(props, _excluded$_);
	  const tabRef = React$13.useRef();
	  const handleRef = (0, _utils$Q.unstable_useForkRef)(tabRef, ref);
	  const {
	    active,
	    focusVisible,
	    setFocusVisible,
	    selected,
	    getRootProps
	  } = (0, _useTab.default)((0, _extends2$12.default)({}, props, {
	    ref: handleRef
	  }));
	  React$13.useImperativeHandle(action, () => ({
	    focusVisible: () => {
	      setFocusVisible(true);
	      tabRef.current.focus();
	    }
	  }), [setFocusVisible]);
	  const ownerState = (0, _extends2$12.default)({}, props, {
	    active,
	    focusVisible,
	    disabled,
	    selected
	  });
	  const classes = useUtilityClasses$I(ownerState);
	  const TabRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
	  const tabRootProps = (0, _appendOwnerState.default)(TabRoot, (0, _extends2$12.default)({}, other, componentsProps.root), ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$17.jsx)(TabRoot, (0, _extends2$12.default)({}, getRootProps(), tabRootProps, {
	    className: (0, _clsx$H.default)(classes.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, className),
	    ref: ref,
	    children: children
	  }));
	});
	TabUnstyled.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * A ref for imperative actions. It currently only supports `focusVisible()` action.
	   */
	  action: _propTypes$Y.default.oneOfType([_propTypes$Y.default.func, _propTypes$Y.default.shape({
	    current: _propTypes$Y.default.shape({
	      focusVisible: _propTypes$Y.default.func.isRequired
	    })
	  })]),

	  /**
	   * @ignore
	   */
	  children: _propTypes$Y.default.node,

	  /**
	   * @ignore
	   */
	  className: _propTypes$Y.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$Y.default.elementType,

	  /**
	   * The components used for each slot inside the Tab.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$Y.default.shape({
	    Root: _propTypes$Y.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Tab.
	   * @default {}
	   */
	  componentsProps: _propTypes$Y.default.shape({
	    root: _propTypes$Y.default.object
	  }),

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: _propTypes$Y.default.bool,

	  /**
	   * Callback invoked when new value is being set.
	   */
	  onChange: _propTypes$Y.default.func,

	  /**
	   * @ignore
	   */
	  onClick: _propTypes$Y.default.func,

	  /**
	   * @ignore
	   */
	  onFocus: _propTypes$Y.default.func,

	  /**
	   * You can provide your own value. Otherwise, we fall back to the child position index.
	   */
	  value: _propTypes$Y.default.oneOfType([_propTypes$Y.default.number, _propTypes$Y.default.string])
	} ;
	var _default$2i = TabUnstyled;
	TabUnstyled$1.default = _default$2i;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  tabUnstyledClasses: true,
		  useTab: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _TabUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "tabUnstyledClasses", {
		  enumerable: true,
		  get: function () {
		    return _tabUnstyledClasses.default;
		  }
		});
		Object.defineProperty(exports, "useTab", {
		  enumerable: true,
		  get: function () {
		    return _useTab.default;
		  }
		});

		var _TabUnstyled = _interopRequireDefault(TabUnstyled$1);

		var _tabUnstyledClasses = _interopRequireWildcard(tabUnstyledClasses$1);

		Object.keys(_tabUnstyledClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _tabUnstyledClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _tabUnstyledClasses[key];
		    }
		  });
		});

		var _useTab = _interopRequireWildcard(useTab$1);

		Object.keys(_useTab).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _useTab[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _useTab[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TabUnstyled$2));

	var TextareaAutosize$2 = {};

	var TextareaAutosize$1 = {};

	var _interopRequireDefault$1j = interopRequireDefault.exports;

	Object.defineProperty(TextareaAutosize$1, "__esModule", {
	  value: true
	});
	TextareaAutosize$1.default = void 0;

	var _extends2$11 = _interopRequireDefault$1j(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$Z = _interopRequireDefault$1j(objectWithoutPropertiesLoose.exports);

	var React$12 = _interopRequireWildcard$15(require$$3);

	var _propTypes$X = _interopRequireDefault$1j(propTypes.exports);

	var _utils$P = utils$h;

	var _jsxRuntime$16 = jsxRuntime;

	const _excluded$Z = ["onChange", "maxRows", "minRows", "style", "value"];

	function _getRequireWildcardCache$15(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$15 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$15(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$15(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function getStyleValue(computedStyle, property) {
	  return parseInt(computedStyle[property], 10) || 0;
	}

	const styles$5 = {
	  shadow: {
	    // Visibility needed to hide the extra text area on iPads
	    visibility: 'hidden',
	    // Remove from the content flow
	    position: 'absolute',
	    // Ignore the scrollbar width
	    overflow: 'hidden',
	    height: 0,
	    top: 0,
	    left: 0,
	    // Create a new layer, increase the isolation of the computed values
	    transform: 'translateZ(0)'
	  }
	};
	const TextareaAutosize = /*#__PURE__*/React$12.forwardRef(function TextareaAutosize(props, ref) {
	  const {
	    onChange,
	    maxRows,
	    minRows = 1,
	    style,
	    value
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$Z.default)(props, _excluded$Z);
	  const {
	    current: isControlled
	  } = React$12.useRef(value != null);
	  const inputRef = React$12.useRef(null);
	  const handleRef = (0, _utils$P.unstable_useForkRef)(ref, inputRef);
	  const shadowRef = React$12.useRef(null);
	  const renders = React$12.useRef(0);
	  const [state, setState] = React$12.useState({});
	  const syncHeight = React$12.useCallback(() => {
	    const input = inputRef.current;
	    const containerWindow = (0, _utils$P.unstable_ownerWindow)(input);
	    const computedStyle = containerWindow.getComputedStyle(input); // If input's width is shrunk and it's not visible, don't sync height.

	    if (computedStyle.width === '0px') {
	      return;
	    }

	    const inputShallow = shadowRef.current;
	    inputShallow.style.width = computedStyle.width;
	    inputShallow.value = input.value || props.placeholder || 'x';

	    if (inputShallow.value.slice(-1) === '\n') {
	      // Certain fonts which overflow the line height will cause the textarea
	      // to report a different scrollHeight depending on whether the last line
	      // is empty. Make it non-empty to avoid this issue.
	      inputShallow.value += ' ';
	    }

	    const boxSizing = computedStyle['box-sizing'];
	    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
	    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content

	    const innerHeight = inputShallow.scrollHeight; // Measure height of a textarea with a single row

	    inputShallow.value = 'x';
	    const singleRowHeight = inputShallow.scrollHeight; // The height of the outer content

	    let outerHeight = innerHeight;

	    if (minRows) {
	      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
	    }

	    if (maxRows) {
	      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
	    }

	    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.

	    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
	    const overflow = Math.abs(outerHeight - innerHeight) <= 1;
	    setState(prevState => {
	      // Need a large enough difference to update the height.
	      // This prevents infinite rendering loop.
	      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
	        renders.current += 1;
	        return {
	          overflow,
	          outerHeightStyle
	        };
	      }

	      {
	        if (renders.current === 20) {
	          console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\n'));
	        }
	      }

	      return prevState;
	    });
	  }, [maxRows, minRows, props.placeholder]);
	  React$12.useEffect(() => {
	    const handleResize = (0, _utils$P.unstable_debounce)(() => {
	      renders.current = 0;
	      syncHeight();
	    });
	    const containerWindow = (0, _utils$P.unstable_ownerWindow)(inputRef.current);
	    containerWindow.addEventListener('resize', handleResize);
	    let resizeObserver;

	    if (typeof ResizeObserver !== 'undefined') {
	      resizeObserver = new ResizeObserver(handleResize);
	      resizeObserver.observe(inputRef.current);
	    }

	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);

	      if (resizeObserver) {
	        resizeObserver.disconnect();
	      }
	    };
	  }, [syncHeight]);
	  (0, _utils$P.unstable_useEnhancedEffect)(() => {
	    syncHeight();
	  });
	  React$12.useEffect(() => {
	    renders.current = 0;
	  }, [value]);

	  const handleChange = event => {
	    renders.current = 0;

	    if (!isControlled) {
	      syncHeight();
	    }

	    if (onChange) {
	      onChange(event);
	    }
	  };

	  return /*#__PURE__*/(0, _jsxRuntime$16.jsxs)(React$12.Fragment, {
	    children: [/*#__PURE__*/(0, _jsxRuntime$16.jsx)("textarea", (0, _extends2$11.default)({
	      value: value,
	      onChange: handleChange,
	      ref: handleRef // Apply the rows prop to get a "correct" first SSR paint
	      ,
	      rows: minRows,
	      style: (0, _extends2$11.default)({
	        height: state.outerHeightStyle,
	        // Need a large enough difference to allow scrolling.
	        // This prevents infinite rendering loop.
	        overflow: state.overflow ? 'hidden' : null
	      }, style)
	    }, other)), /*#__PURE__*/(0, _jsxRuntime$16.jsx)("textarea", {
	      "aria-hidden": true,
	      className: props.className,
	      readOnly: true,
	      ref: shadowRef,
	      tabIndex: -1,
	      style: (0, _extends2$11.default)({}, styles$5.shadow, style, {
	        padding: 0
	      })
	    })]
	  });
	});
	TextareaAutosize.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  className: _propTypes$X.default.string,

	  /**
	   * Maximum number of rows to display.
	   */
	  maxRows: _propTypes$X.default.oneOfType([_propTypes$X.default.number, _propTypes$X.default.string]),

	  /**
	   * Minimum number of rows to display.
	   * @default 1
	   */
	  minRows: _propTypes$X.default.oneOfType([_propTypes$X.default.number, _propTypes$X.default.string]),

	  /**
	   * @ignore
	   */
	  onChange: _propTypes$X.default.func,

	  /**
	   * @ignore
	   */
	  placeholder: _propTypes$X.default.string,

	  /**
	   * @ignore
	   */
	  style: _propTypes$X.default.object,

	  /**
	   * @ignore
	   */
	  value: _propTypes$X.default.oneOfType([_propTypes$X.default.arrayOf(_propTypes$X.default.string), _propTypes$X.default.number, _propTypes$X.default.string])
	} ;
	var _default$2h = TextareaAutosize;
	TextareaAutosize$1.default = _default$2h;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _TextareaAutosize.default;
		  }
		});

		var _TextareaAutosize = _interopRequireDefault(TextareaAutosize$1);
	} (TextareaAutosize$2));

	/** @license MUI v5.0.0-alpha.67
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  BackdropUnstyled: true,
		  BadgeUnstyled: true,
		  ButtonUnstyled: true,
		  ClickAwayListener: true,
		  unstable_composeClasses: true,
		  generateUtilityClass: true,
		  generateUtilityClasses: true,
		  FormControlUnstyled: true,
		  InputUnstyled: true,
		  ModalUnstyled: true,
		  MultiSelectUnstyled: true,
		  NoSsr: true,
		  OptionGroupUnstyled: true,
		  OptionUnstyled: true,
		  PopperUnstyled: true,
		  Portal: true,
		  SelectUnstyled: true,
		  SliderUnstyled: true,
		  SwitchUnstyled: true,
		  TabPanelUnstyled: true,
		  TabsListUnstyled: true,
		  TabsUnstyled: true,
		  TabUnstyled: true,
		  TextareaAutosize: true,
		  Unstable_TrapFocus: true
		};
		Object.defineProperty(exports, "BackdropUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _BackdropUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "BadgeUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _BadgeUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "ButtonUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _ButtonUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "ClickAwayListener", {
		  enumerable: true,
		  get: function () {
		    return _ClickAwayListener.default;
		  }
		});
		Object.defineProperty(exports, "FormControlUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _FormControlUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "InputUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _InputUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "ModalUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _ModalUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "MultiSelectUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _MultiSelectUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "NoSsr", {
		  enumerable: true,
		  get: function () {
		    return _NoSsr.default;
		  }
		});
		Object.defineProperty(exports, "OptionGroupUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _OptionGroupUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "OptionUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _OptionUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "PopperUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _PopperUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "Portal", {
		  enumerable: true,
		  get: function () {
		    return _Portal.default;
		  }
		});
		Object.defineProperty(exports, "SelectUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _SelectUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "SliderUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _SliderUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "SwitchUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _SwitchUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "TabPanelUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _TabPanelUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "TabUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _TabUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "TabsListUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _TabsListUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "TabsUnstyled", {
		  enumerable: true,
		  get: function () {
		    return _TabsUnstyled.default;
		  }
		});
		Object.defineProperty(exports, "TextareaAutosize", {
		  enumerable: true,
		  get: function () {
		    return _TextareaAutosize.default;
		  }
		});
		Object.defineProperty(exports, "Unstable_TrapFocus", {
		  enumerable: true,
		  get: function () {
		    return _Unstable_TrapFocus.default;
		  }
		});
		Object.defineProperty(exports, "generateUtilityClass", {
		  enumerable: true,
		  get: function () {
		    return _generateUtilityClass.default;
		  }
		});
		Object.defineProperty(exports, "generateUtilityClasses", {
		  enumerable: true,
		  get: function () {
		    return _generateUtilityClasses.default;
		  }
		});
		Object.defineProperty(exports, "unstable_composeClasses", {
		  enumerable: true,
		  get: function () {
		    return _composeClasses.default;
		  }
		});

		var _utils = utils$d;

		Object.keys(_utils).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _utils[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _utils[key];
		    }
		  });
		});

		var _AutocompleteUnstyled = AutocompleteUnstyled;

		Object.keys(_AutocompleteUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _AutocompleteUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _AutocompleteUnstyled[key];
		    }
		  });
		});

		var _BackdropUnstyled = _interopRequireWildcard(BackdropUnstyled$2);

		Object.keys(_BackdropUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _BackdropUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _BackdropUnstyled[key];
		    }
		  });
		});

		var _BadgeUnstyled = _interopRequireWildcard(BadgeUnstyled$2);

		Object.keys(_BadgeUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _BadgeUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _BadgeUnstyled[key];
		    }
		  });
		});

		var _ButtonUnstyled = _interopRequireWildcard(ButtonUnstyled$2);

		Object.keys(_ButtonUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _ButtonUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _ButtonUnstyled[key];
		    }
		  });
		});

		var _ClickAwayListener = _interopRequireDefault(ClickAwayListener$4);

		var _composeClasses = _interopRequireDefault(composeClasses$2);

		var _generateUtilityClass = _interopRequireWildcard(generateUtilityClass$2);

		Object.keys(_generateUtilityClass).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _generateUtilityClass[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _generateUtilityClass[key];
		    }
		  });
		});

		var _generateUtilityClasses = _interopRequireDefault(generateUtilityClasses$2);

		var _FormControlUnstyled = _interopRequireWildcard(FormControlUnstyled$2);

		Object.keys(_FormControlUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _FormControlUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _FormControlUnstyled[key];
		    }
		  });
		});

		var _InputUnstyled = _interopRequireWildcard(InputUnstyled$2);

		Object.keys(_InputUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _InputUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _InputUnstyled[key];
		    }
		  });
		});

		var _ListboxUnstyled = ListboxUnstyled;

		Object.keys(_ListboxUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _ListboxUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _ListboxUnstyled[key];
		    }
		  });
		});

		var _ModalUnstyled = _interopRequireWildcard(ModalUnstyled$2);

		Object.keys(_ModalUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _ModalUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _ModalUnstyled[key];
		    }
		  });
		});

		var _MultiSelectUnstyled = _interopRequireWildcard(MultiSelectUnstyled$2);

		Object.keys(_MultiSelectUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _MultiSelectUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _MultiSelectUnstyled[key];
		    }
		  });
		});

		var _NoSsr = _interopRequireDefault(NoSsr$2);

		var _OptionGroupUnstyled = _interopRequireWildcard(OptionGroupUnstyled$2);

		Object.keys(_OptionGroupUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _OptionGroupUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _OptionGroupUnstyled[key];
		    }
		  });
		});

		var _OptionUnstyled = _interopRequireWildcard(OptionUnstyled$2);

		Object.keys(_OptionUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _OptionUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _OptionUnstyled[key];
		    }
		  });
		});

		var _PopperUnstyled = _interopRequireDefault(PopperUnstyled$2);

		var _Portal = _interopRequireDefault(Portal$2);

		var _SelectUnstyled = _interopRequireWildcard(SelectUnstyled$2);

		Object.keys(_SelectUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _SelectUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _SelectUnstyled[key];
		    }
		  });
		});

		var _SliderUnstyled = _interopRequireWildcard(SliderUnstyled$2);

		Object.keys(_SliderUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _SliderUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _SliderUnstyled[key];
		    }
		  });
		});

		var _SwitchUnstyled = _interopRequireWildcard(SwitchUnstyled$2);

		Object.keys(_SwitchUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _SwitchUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _SwitchUnstyled[key];
		    }
		  });
		});

		var _TabPanelUnstyled = _interopRequireWildcard(TabPanelUnstyled$2);

		Object.keys(_TabPanelUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _TabPanelUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _TabPanelUnstyled[key];
		    }
		  });
		});

		var _TabsListUnstyled = _interopRequireWildcard(TabsListUnstyled$2);

		Object.keys(_TabsListUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _TabsListUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _TabsListUnstyled[key];
		    }
		  });
		});

		var _TabsUnstyled = _interopRequireWildcard(TabsUnstyled$2);

		Object.keys(_TabsUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _TabsUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _TabsUnstyled[key];
		    }
		  });
		});

		var _TabUnstyled = _interopRequireWildcard(TabUnstyled$2);

		Object.keys(_TabUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _TabUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _TabUnstyled[key];
		    }
		  });
		});

		var _TextareaAutosize = _interopRequireDefault(TextareaAutosize$2);

		var _Unstable_TrapFocus = _interopRequireDefault(Unstable_TrapFocus$2);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (node$1));

	var createMixins$1 = {};

	var _interopRequireDefault$1i = interopRequireDefault.exports;

	Object.defineProperty(createMixins$1, "__esModule", {
	  value: true
	});
	createMixins$1.default = createMixins;

	var _extends2$10 = _interopRequireDefault$1i(_extends$5.exports);

	function createMixins(breakpoints, spacing, mixins) {
	  return (0, _extends2$10.default)({
	    toolbar: {
	      minHeight: 56,
	      [`${breakpoints.up('xs')} and (orientation: landscape)`]: {
	        minHeight: 48
	      },
	      [breakpoints.up('sm')]: {
	        minHeight: 64
	      }
	    }
	  }, mixins);
	}

	var createPalette$1 = {};

	var common$1 = {};

	Object.defineProperty(common$1, "__esModule", {
	  value: true
	});
	common$1.default = void 0;
	const common = {
	  black: '#000',
	  white: '#fff'
	};
	var _default$2g = common;
	common$1.default = _default$2g;

	var grey$1 = {};

	Object.defineProperty(grey$1, "__esModule", {
	  value: true
	});
	grey$1.default = void 0;
	const grey = {
	  50: '#fafafa',
	  100: '#f5f5f5',
	  200: '#eeeeee',
	  300: '#e0e0e0',
	  400: '#bdbdbd',
	  500: '#9e9e9e',
	  600: '#757575',
	  700: '#616161',
	  800: '#424242',
	  900: '#212121',
	  A100: '#f5f5f5',
	  A200: '#eeeeee',
	  A400: '#bdbdbd',
	  A700: '#616161'
	};
	var _default$2f = grey;
	grey$1.default = _default$2f;

	var purple$1 = {};

	Object.defineProperty(purple$1, "__esModule", {
	  value: true
	});
	purple$1.default = void 0;
	const purple = {
	  50: '#f3e5f5',
	  100: '#e1bee7',
	  200: '#ce93d8',
	  300: '#ba68c8',
	  400: '#ab47bc',
	  500: '#9c27b0',
	  600: '#8e24aa',
	  700: '#7b1fa2',
	  800: '#6a1b9a',
	  900: '#4a148c',
	  A100: '#ea80fc',
	  A200: '#e040fb',
	  A400: '#d500f9',
	  A700: '#aa00ff'
	};
	var _default$2e = purple;
	purple$1.default = _default$2e;

	var red$1 = {};

	Object.defineProperty(red$1, "__esModule", {
	  value: true
	});
	red$1.default = void 0;
	const red = {
	  50: '#ffebee',
	  100: '#ffcdd2',
	  200: '#ef9a9a',
	  300: '#e57373',
	  400: '#ef5350',
	  500: '#f44336',
	  600: '#e53935',
	  700: '#d32f2f',
	  800: '#c62828',
	  900: '#b71c1c',
	  A100: '#ff8a80',
	  A200: '#ff5252',
	  A400: '#ff1744',
	  A700: '#d50000'
	};
	var _default$2d = red;
	red$1.default = _default$2d;

	var orange$1 = {};

	Object.defineProperty(orange$1, "__esModule", {
	  value: true
	});
	orange$1.default = void 0;
	const orange = {
	  50: '#fff3e0',
	  100: '#ffe0b2',
	  200: '#ffcc80',
	  300: '#ffb74d',
	  400: '#ffa726',
	  500: '#ff9800',
	  600: '#fb8c00',
	  700: '#f57c00',
	  800: '#ef6c00',
	  900: '#e65100',
	  A100: '#ffd180',
	  A200: '#ffab40',
	  A400: '#ff9100',
	  A700: '#ff6d00'
	};
	var _default$2c = orange;
	orange$1.default = _default$2c;

	var blue$1 = {};

	Object.defineProperty(blue$1, "__esModule", {
	  value: true
	});
	blue$1.default = void 0;
	const blue = {
	  50: '#e3f2fd',
	  100: '#bbdefb',
	  200: '#90caf9',
	  300: '#64b5f6',
	  400: '#42a5f5',
	  500: '#2196f3',
	  600: '#1e88e5',
	  700: '#1976d2',
	  800: '#1565c0',
	  900: '#0d47a1',
	  A100: '#82b1ff',
	  A200: '#448aff',
	  A400: '#2979ff',
	  A700: '#2962ff'
	};
	var _default$2b = blue;
	blue$1.default = _default$2b;

	var lightBlue$1 = {};

	Object.defineProperty(lightBlue$1, "__esModule", {
	  value: true
	});
	lightBlue$1.default = void 0;
	const lightBlue = {
	  50: '#e1f5fe',
	  100: '#b3e5fc',
	  200: '#81d4fa',
	  300: '#4fc3f7',
	  400: '#29b6f6',
	  500: '#03a9f4',
	  600: '#039be5',
	  700: '#0288d1',
	  800: '#0277bd',
	  900: '#01579b',
	  A100: '#80d8ff',
	  A200: '#40c4ff',
	  A400: '#00b0ff',
	  A700: '#0091ea'
	};
	var _default$2a = lightBlue;
	lightBlue$1.default = _default$2a;

	var green$1 = {};

	Object.defineProperty(green$1, "__esModule", {
	  value: true
	});
	green$1.default = void 0;
	const green = {
	  50: '#e8f5e9',
	  100: '#c8e6c9',
	  200: '#a5d6a7',
	  300: '#81c784',
	  400: '#66bb6a',
	  500: '#4caf50',
	  600: '#43a047',
	  700: '#388e3c',
	  800: '#2e7d32',
	  900: '#1b5e20',
	  A100: '#b9f6ca',
	  A200: '#69f0ae',
	  A400: '#00e676',
	  A700: '#00c853'
	};
	var _default$29 = green;
	green$1.default = _default$29;

	var _interopRequireDefault$1h = interopRequireDefault.exports;

	Object.defineProperty(createPalette$1, "__esModule", {
	  value: true
	});
	createPalette$1.dark = void 0;
	createPalette$1.default = createPalette;
	createPalette$1.light = void 0;

	var _extends2$$ = _interopRequireDefault$1h(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$Y = _interopRequireDefault$1h(objectWithoutPropertiesLoose.exports);

	var _utils$O = utils$h;

	var _system$g = system;

	var _common = _interopRequireDefault$1h(common$1);

	var _grey = _interopRequireDefault$1h(grey$1);

	var _purple = _interopRequireDefault$1h(purple$1);

	var _red = _interopRequireDefault$1h(red$1);

	var _orange = _interopRequireDefault$1h(orange$1);

	var _blue = _interopRequireDefault$1h(blue$1);

	var _lightBlue = _interopRequireDefault$1h(lightBlue$1);

	var _green = _interopRequireDefault$1h(green$1);

	const _excluded$Y = ["mode", "contrastThreshold", "tonalOffset"];
	const light = {
	  // The colors used to style the text.
	  text: {
	    // The most important text.
	    primary: 'rgba(0, 0, 0, 0.87)',
	    // Secondary text.
	    secondary: 'rgba(0, 0, 0, 0.6)',
	    // Disabled text have even lower visual prominence.
	    disabled: 'rgba(0, 0, 0, 0.38)'
	  },
	  // The color used to divide different elements.
	  divider: 'rgba(0, 0, 0, 0.12)',
	  // The background colors used to style the surfaces.
	  // Consistency between these values is important.
	  background: {
	    paper: _common.default.white,
	    default: _common.default.white
	  },
	  // The colors used to style the action elements.
	  action: {
	    // The color of an active action like an icon button.
	    active: 'rgba(0, 0, 0, 0.54)',
	    // The color of an hovered action.
	    hover: 'rgba(0, 0, 0, 0.04)',
	    hoverOpacity: 0.04,
	    // The color of a selected action.
	    selected: 'rgba(0, 0, 0, 0.08)',
	    selectedOpacity: 0.08,
	    // The color of a disabled action.
	    disabled: 'rgba(0, 0, 0, 0.26)',
	    // The background color of a disabled action.
	    disabledBackground: 'rgba(0, 0, 0, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(0, 0, 0, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.12
	  }
	};
	createPalette$1.light = light;
	const dark = {
	  text: {
	    primary: _common.default.white,
	    secondary: 'rgba(255, 255, 255, 0.7)',
	    disabled: 'rgba(255, 255, 255, 0.5)',
	    icon: 'rgba(255, 255, 255, 0.5)'
	  },
	  divider: 'rgba(255, 255, 255, 0.12)',
	  background: {
	    paper: '#121212',
	    default: '#121212'
	  },
	  action: {
	    active: _common.default.white,
	    hover: 'rgba(255, 255, 255, 0.08)',
	    hoverOpacity: 0.08,
	    selected: 'rgba(255, 255, 255, 0.16)',
	    selectedOpacity: 0.16,
	    disabled: 'rgba(255, 255, 255, 0.3)',
	    disabledBackground: 'rgba(255, 255, 255, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(255, 255, 255, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.24
	  }
	};
	createPalette$1.dark = dark;

	function addLightOrDark(intent, direction, shade, tonalOffset) {
	  const tonalOffsetLight = tonalOffset.light || tonalOffset;
	  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;

	  if (!intent[direction]) {
	    if (intent.hasOwnProperty(shade)) {
	      intent[direction] = intent[shade];
	    } else if (direction === 'light') {
	      intent.light = (0, _system$g.lighten)(intent.main, tonalOffsetLight);
	    } else if (direction === 'dark') {
	      intent.dark = (0, _system$g.darken)(intent.main, tonalOffsetDark);
	    }
	  }
	}

	function getDefaultPrimary(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: _blue.default[200],
	      light: _blue.default[50],
	      dark: _blue.default[400]
	    };
	  }

	  return {
	    main: _blue.default[700],
	    light: _blue.default[400],
	    dark: _blue.default[800]
	  };
	}

	function getDefaultSecondary(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: _purple.default[200],
	      light: _purple.default[50],
	      dark: _purple.default[400]
	    };
	  }

	  return {
	    main: _purple.default[500],
	    light: _purple.default[300],
	    dark: _purple.default[700]
	  };
	}

	function getDefaultError(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: _red.default[500],
	      light: _red.default[300],
	      dark: _red.default[700]
	    };
	  }

	  return {
	    main: _red.default[700],
	    light: _red.default[400],
	    dark: _red.default[800]
	  };
	}

	function getDefaultInfo(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: _lightBlue.default[400],
	      light: _lightBlue.default[300],
	      dark: _lightBlue.default[700]
	    };
	  }

	  return {
	    main: _lightBlue.default[700],
	    light: _lightBlue.default[500],
	    dark: _lightBlue.default[900]
	  };
	}

	function getDefaultSuccess(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: _green.default[400],
	      light: _green.default[300],
	      dark: _green.default[700]
	    };
	  }

	  return {
	    main: _green.default[800],
	    light: _green.default[500],
	    dark: _green.default[900]
	  };
	}

	function getDefaultWarning(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: _orange.default[400],
	      light: _orange.default[300],
	      dark: _orange.default[700]
	    };
	  }

	  return {
	    main: '#ed6c02',
	    // closest to orange[800] that pass 3:1.
	    light: _orange.default[500],
	    dark: _orange.default[900]
	  };
	}

	function createPalette(palette) {
	  const {
	    mode = 'light',
	    contrastThreshold = 3,
	    tonalOffset = 0.2
	  } = palette,
	        other = (0, _objectWithoutPropertiesLoose2$Y.default)(palette, _excluded$Y);
	  const primary = palette.primary || getDefaultPrimary(mode);
	  const secondary = palette.secondary || getDefaultSecondary(mode);
	  const error = palette.error || getDefaultError(mode);
	  const info = palette.info || getDefaultInfo(mode);
	  const success = palette.success || getDefaultSuccess(mode);
	  const warning = palette.warning || getDefaultWarning(mode); // Use the same logic as
	  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
	  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54

	  function getContrastText(background) {
	    const contrastText = (0, _system$g.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;

	    {
	      const contrast = (0, _system$g.getContrastRatio)(background, contrastText);

	      if (contrast < 3) {
	        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
	      }
	    }

	    return contrastText;
	  }

	  const augmentColor = ({
	    color,
	    name,
	    mainShade = 500,
	    lightShade = 300,
	    darkShade = 700
	  }) => {
	    color = (0, _extends2$$.default)({}, color);

	    if (!color.main && color[mainShade]) {
	      color.main = color[mainShade];
	    }

	    if (!color.hasOwnProperty('main')) {
	      throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` );
	    }

	    if (typeof color.main !== 'string') {
	      throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` );
	    }

	    addLightOrDark(color, 'light', lightShade, tonalOffset);
	    addLightOrDark(color, 'dark', darkShade, tonalOffset);

	    if (!color.contrastText) {
	      color.contrastText = getContrastText(color.main);
	    }

	    return color;
	  };

	  const modes = {
	    dark,
	    light
	  };

	  {
	    if (!modes[mode]) {
	      console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
	    }
	  }

	  const paletteOutput = (0, _utils$O.deepmerge)((0, _extends2$$.default)({
	    // A collection of common colors.
	    common: _common.default,
	    // The palette mode, can be light or dark.
	    mode,
	    // The colors used to represent primary interface elements for a user.
	    primary: augmentColor({
	      color: primary,
	      name: 'primary'
	    }),
	    // The colors used to represent secondary interface elements for a user.
	    secondary: augmentColor({
	      color: secondary,
	      name: 'secondary',
	      mainShade: 'A400',
	      lightShade: 'A200',
	      darkShade: 'A700'
	    }),
	    // The colors used to represent interface elements that the user should be made aware of.
	    error: augmentColor({
	      color: error,
	      name: 'error'
	    }),
	    // The colors used to represent potentially dangerous actions or important messages.
	    warning: augmentColor({
	      color: warning,
	      name: 'warning'
	    }),
	    // The colors used to present information to the user that is neutral and not necessarily important.
	    info: augmentColor({
	      color: info,
	      name: 'info'
	    }),
	    // The colors used to indicate the successful completion of an action that user triggered.
	    success: augmentColor({
	      color: success,
	      name: 'success'
	    }),
	    // The grey colors.
	    grey: _grey.default,
	    // Used by `getContrastText()` to maximize the contrast between
	    // the background and the text.
	    contrastThreshold,
	    // Takes a background color and returns the text color that maximizes the contrast.
	    getContrastText,
	    // Generate a rich color object.
	    augmentColor,
	    // Used by the functions below to shift a color's luminance by approximately
	    // two indexes within its tonal palette.
	    // E.g., shift from Red 500 to Red 300 or Red 700.
	    tonalOffset
	  }, modes[mode]), other);
	  return paletteOutput;
	}

	var createTypography$1 = {};

	var _interopRequireDefault$1g = interopRequireDefault.exports;

	Object.defineProperty(createTypography$1, "__esModule", {
	  value: true
	});
	createTypography$1.default = createTypography;

	var _extends2$_ = _interopRequireDefault$1g(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$X = _interopRequireDefault$1g(objectWithoutPropertiesLoose.exports);

	var _utils$N = utils$h;

	const _excluded$X = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];

	function round(value) {
	  return Math.round(value * 1e5) / 1e5;
	}

	const caseAllCaps = {
	  textTransform: 'uppercase'
	};
	const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
	/**
	 * @see @link{https://material.io/design/typography/the-type-system.html}
	 * @see @link{https://material.io/design/typography/understanding-typography.html}
	 */

	function createTypography(palette, typography) {
	  const _ref = typeof typography === 'function' ? typography(palette) : typography,
	        {
	    fontFamily = defaultFontFamily,
	    // The default font size of the Material Specification.
	    fontSize = 14,
	    // px
	    fontWeightLight = 300,
	    fontWeightRegular = 400,
	    fontWeightMedium = 500,
	    fontWeightBold = 700,
	    // Tell MUI what's the font-size on the html element.
	    // 16px is the default font-size used by browsers.
	    htmlFontSize = 16,
	    // Apply the CSS properties to all the variants.
	    allVariants,
	    pxToRem: pxToRem2
	  } = _ref,
	        other = (0, _objectWithoutPropertiesLoose2$X.default)(_ref, _excluded$X);

	  {
	    if (typeof fontSize !== 'number') {
	      console.error('MUI: `fontSize` is required to be a number.');
	    }

	    if (typeof htmlFontSize !== 'number') {
	      console.error('MUI: `htmlFontSize` is required to be a number.');
	    }
	  }

	  const coef = fontSize / 14;

	  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);

	  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => (0, _extends2$_.default)({
	    fontFamily,
	    fontWeight,
	    fontSize: pxToRem(size),
	    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
	    lineHeight
	  }, fontFamily === defaultFontFamily ? {
	    letterSpacing: `${round(letterSpacing / size)}em`
	  } : {}, casing, allVariants);

	  const variants = {
	    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
	    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
	    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
	    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
	    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
	    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
	    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
	    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
	    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
	    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
	    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
	    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
	    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
	  };
	  return (0, _utils$N.deepmerge)((0, _extends2$_.default)({
	    htmlFontSize,
	    pxToRem,
	    fontFamily,
	    fontSize,
	    fontWeightLight,
	    fontWeightRegular,
	    fontWeightMedium,
	    fontWeightBold
	  }, variants), other, {
	    clone: false // No need to clone deep

	  });
	}

	var shadows$1 = {};

	Object.defineProperty(shadows$1, "__esModule", {
	  value: true
	});
	shadows$1.default = void 0;
	const shadowKeyUmbraOpacity = 0.2;
	const shadowKeyPenumbraOpacity = 0.14;
	const shadowAmbientShadowOpacity = 0.12;

	function createShadow(...px) {
	  return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
	} // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss


	const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
	var _default$28 = shadows;
	shadows$1.default = _default$28;

	var createTransitions$1 = {};

	var _interopRequireDefault$1f = interopRequireDefault.exports;

	Object.defineProperty(createTransitions$1, "__esModule", {
	  value: true
	});
	createTransitions$1.default = createTransitions;
	createTransitions$1.easing = createTransitions$1.duration = void 0;

	var _objectWithoutPropertiesLoose2$W = _interopRequireDefault$1f(objectWithoutPropertiesLoose.exports);

	var _extends2$Z = _interopRequireDefault$1f(_extends$5.exports);

	const _excluded$W = ["duration", "easing", "delay"];
	// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
	// to learn the context in which each easing should be used.
	const easing = {
	  // This is the most common easing curve.
	  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
	  // Objects enter the screen at full velocity from off-screen and
	  // slowly decelerate to a resting point.
	  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
	  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
	  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
	  // The sharp curve is used by objects that may return to the screen at any time.
	  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
	}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
	// to learn when use what timing

	createTransitions$1.easing = easing;
	const duration = {
	  shortest: 150,
	  shorter: 200,
	  short: 250,
	  // most basic recommended timing
	  standard: 300,
	  // this is to be used in complex animations
	  complex: 375,
	  // recommended when something is entering screen
	  enteringScreen: 225,
	  // recommended when something is leaving screen
	  leavingScreen: 195
	};
	createTransitions$1.duration = duration;

	function formatMs(milliseconds) {
	  return `${Math.round(milliseconds)}ms`;
	}

	function getAutoHeightDuration(height) {
	  if (!height) {
	    return 0;
	  }

	  const constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

	  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
	}

	function createTransitions(inputTransitions) {
	  const mergedEasing = (0, _extends2$Z.default)({}, easing, inputTransitions.easing);
	  const mergedDuration = (0, _extends2$Z.default)({}, duration, inputTransitions.duration);

	  const create = (props = ['all'], options = {}) => {
	    const {
	      duration: durationOption = mergedDuration.standard,
	      easing: easingOption = mergedEasing.easeInOut,
	      delay = 0
	    } = options,
	          other = (0, _objectWithoutPropertiesLoose2$W.default)(options, _excluded$W);

	    {
	      const isString = value => typeof value === 'string'; // IE11 support, replace with Number.isNaN
	      // eslint-disable-next-line no-restricted-globals


	      const isNumber = value => !isNaN(parseFloat(value));

	      if (!isString(props) && !Array.isArray(props)) {
	        console.error('MUI: Argument "props" must be a string or Array.');
	      }

	      if (!isNumber(durationOption) && !isString(durationOption)) {
	        console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
	      }

	      if (!isString(easingOption)) {
	        console.error('MUI: Argument "easing" must be a string.');
	      }

	      if (!isNumber(delay) && !isString(delay)) {
	        console.error('MUI: Argument "delay" must be a number or a string.');
	      }

	      if (Object.keys(other).length !== 0) {
	        console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
	      }
	    }

	    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
	  };

	  return (0, _extends2$Z.default)({
	    getAutoHeightDuration,
	    create
	  }, inputTransitions, {
	    easing: mergedEasing,
	    duration: mergedDuration
	  });
	}

	var zIndex$1 = {};

	Object.defineProperty(zIndex$1, "__esModule", {
	  value: true
	});
	zIndex$1.default = void 0;
	// We need to centralize the zIndex definitions as they work
	// like global values in the browser.
	const zIndex = {
	  mobileStepper: 1000,
	  speedDial: 1050,
	  appBar: 1100,
	  drawer: 1200,
	  modal: 1300,
	  snackbar: 1400,
	  tooltip: 1500
	};
	var _default$27 = zIndex;
	zIndex$1.default = _default$27;

	var _interopRequireDefault$1e = interopRequireDefault.exports;

	Object.defineProperty(createTheme$1, "__esModule", {
	  value: true
	});
	createTheme$1.createMuiTheme = createMuiTheme;
	createTheme$1.default = void 0;

	var _extends2$Y = _interopRequireDefault$1e(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$V = _interopRequireDefault$1e(objectWithoutPropertiesLoose.exports);

	var _utils$M = utils$h;

	var _base$1r = node$1;

	var _system$f = system;

	var _createMixins = _interopRequireDefault$1e(createMixins$1);

	var _createPalette = _interopRequireDefault$1e(createPalette$1);

	var _createTypography = _interopRequireDefault$1e(createTypography$1);

	var _shadows = _interopRequireDefault$1e(shadows$1);

	var _createTransitions$5 = _interopRequireDefault$1e(createTransitions$1);

	var _zIndex = _interopRequireDefault$1e(zIndex$1);

	const _excluded$V = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];

	function createTheme(options = {}, ...args) {
	  const {
	    mixins: mixinsInput = {},
	    palette: paletteInput = {},
	    transitions: transitionsInput = {},
	    typography: typographyInput = {}
	  } = options,
	        other = (0, _objectWithoutPropertiesLoose2$V.default)(options, _excluded$V);
	  const palette = (0, _createPalette.default)(paletteInput);
	  const systemTheme = (0, _system$f.createTheme)(options);
	  let muiTheme = (0, _utils$M.deepmerge)(systemTheme, {
	    mixins: (0, _createMixins.default)(systemTheme.breakpoints, systemTheme.spacing, mixinsInput),
	    palette,
	    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
	    shadows: _shadows.default.slice(),
	    typography: (0, _createTypography.default)(palette, typographyInput),
	    transitions: (0, _createTransitions$5.default)(transitionsInput),
	    zIndex: (0, _extends2$Y.default)({}, _zIndex.default)
	  });
	  muiTheme = (0, _utils$M.deepmerge)(muiTheme, other);
	  muiTheme = args.reduce((acc, argument) => (0, _utils$M.deepmerge)(acc, argument), muiTheme);

	  {
	    const stateClasses = ['active', 'checked', 'completed', 'disabled', 'error', 'expanded', 'focused', 'focusVisible', 'required', 'selected'];

	    const traverse = (node, component) => {
	      let key; // eslint-disable-next-line guard-for-in, no-restricted-syntax

	      for (key in node) {
	        const child = node[key];

	        if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
	          {
	            const stateClass = (0, _base$1r.generateUtilityClass)('', key);
	            console.error([`MUI: The \`${component}\` component increases ` + `the CSS specificity of the \`${key}\` internal state.`, 'You can not override it like this: ', JSON.stringify(node, null, 2), '', `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
	              root: {
	                [`&.${stateClass}`]: child
	              }
	            }, null, 2), '', 'https://mui.com/r/state-classes-guide'].join('\n'));
	          } // Remove the style to prevent global conflicts.


	          node[key] = {};
	        }
	      }
	    };

	    Object.keys(muiTheme.components).forEach(component => {
	      const styleOverrides = muiTheme.components[component].styleOverrides;

	      if (styleOverrides && component.indexOf('Mui') === 0) {
	        traverse(styleOverrides, component);
	      }
	    });
	  }

	  return muiTheme;
	}

	let warnedOnce$1 = false;

	function createMuiTheme(...args) {
	  {
	    if (!warnedOnce$1) {
	      warnedOnce$1 = true;
	      console.error(['MUI: the createMuiTheme function was renamed to createTheme.', '', "You should use `import { createTheme } from '@mui/material/styles'`"].join('\n'));
	    }
	  }

	  return createTheme(...args);
	}

	var _default$26 = createTheme;
	createTheme$1.default = _default$26;

	var _interopRequireDefault$1d = interopRequireDefault.exports;

	Object.defineProperty(defaultTheme$2, "__esModule", {
	  value: true
	});
	defaultTheme$2.default = void 0;

	var _createTheme$1 = _interopRequireDefault$1d(createTheme$1);

	const defaultTheme$1 = (0, _createTheme$1.default)();
	var _default$25 = defaultTheme$1;
	defaultTheme$2.default = _default$25;

	var _interopRequireDefault$1c = interopRequireDefault.exports;

	Object.defineProperty(useTheme$8, "__esModule", {
	  value: true
	});
	useTheme$8.default = useTheme;

	var React$11 = _interopRequireWildcard$14(require$$3);

	var _system$e = system;

	var _defaultTheme$3 = _interopRequireDefault$1c(defaultTheme$2);

	function _getRequireWildcardCache$14(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$14 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$14(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$14(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function useTheme() {
	  const theme = (0, _system$e.useTheme)(_defaultTheme$3.default);

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React$11.useDebugValue(theme);
	  }

	  return theme;
	}

	var utils$b = {};

	Object.defineProperty(utils$b, "__esModule", {
	  value: true
	});
	utils$b.getTransitionProps = getTransitionProps;
	utils$b.reflow = void 0;

	const reflow = node => node.scrollTop;

	utils$b.reflow = reflow;

	function getTransitionProps(props, options) {
	  var _style$transitionDura, _style$transitionTimi;

	  const {
	    timeout,
	    easing,
	    style = {}
	  } = props;
	  return {
	    duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
	    easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
	    delay: style.transitionDelay
	  };
	}

	var utils$a = {};

	var capitalize = {};

	Object.defineProperty(capitalize, "__esModule", {
	  value: true
	});
	capitalize.default = void 0;

	var _utils$L = utils$h;

	var _default$24 = _utils$L.unstable_capitalize;
	capitalize.default = _default$24;

	var createChainedFunction$1 = {};

	Object.defineProperty(createChainedFunction$1, "__esModule", {
	  value: true
	});
	createChainedFunction$1.default = void 0;

	var _utils$K = utils$h;

	var _default$23 = _utils$K.unstable_createChainedFunction;
	createChainedFunction$1.default = _default$23;

	var createSvgIcon$2 = {};

	var SvgIcon$3 = {};

	var SvgIcon$2 = {};

	var useThemeProps$1 = {};

	var _interopRequireDefault$1b = interopRequireDefault.exports;

	Object.defineProperty(useThemeProps$1, "__esModule", {
	  value: true
	});
	useThemeProps$1.default = useThemeProps;

	var _system$d = system;

	var _defaultTheme$2 = _interopRequireDefault$1b(defaultTheme$2);

	function useThemeProps({
	  props,
	  name
	}) {
	  return (0, _system$d.useThemeProps)({
	    props,
	    name,
	    defaultTheme: _defaultTheme$2.default
	  });
	}

	var styled$1 = {};

	var _interopRequireDefault$1a = interopRequireDefault.exports;

	Object.defineProperty(styled$1, "__esModule", {
	  value: true
	});
	styled$1.slotShouldForwardProp = styled$1.rootShouldForwardProp = styled$1.default = void 0;

	var _system$c = system;

	var _defaultTheme$1 = _interopRequireDefault$1a(defaultTheme$2);

	const rootShouldForwardProp = prop => (0, _system$c.shouldForwardProp)(prop) && prop !== 'classes';

	styled$1.rootShouldForwardProp = rootShouldForwardProp;
	const slotShouldForwardProp = _system$c.shouldForwardProp;
	styled$1.slotShouldForwardProp = slotShouldForwardProp;
	const styled = (0, _system$c.createStyled)({
	  defaultTheme: _defaultTheme$1.default,
	  rootShouldForwardProp
	});
	var _default$22 = styled;
	styled$1.default = _default$22;

	var svgIconClasses$1 = {};

	Object.defineProperty(svgIconClasses$1, "__esModule", {
	  value: true
	});
	svgIconClasses$1.default = void 0;
	svgIconClasses$1.getSvgIconUtilityClass = getSvgIconUtilityClass;

	var _base$1q = node$1;

	function getSvgIconUtilityClass(slot) {
	  return (0, _base$1q.generateUtilityClass)('MuiSvgIcon', slot);
	}

	const svgIconClasses = (0, _base$1q.generateUtilityClasses)('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);
	var _default$21 = svgIconClasses;
	svgIconClasses$1.default = _default$21;

	var _interopRequireDefault$19 = interopRequireDefault.exports;

	Object.defineProperty(SvgIcon$2, "__esModule", {
	  value: true
	});
	SvgIcon$2.default = void 0;

	var _extends2$X = _interopRequireDefault$19(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$U = _interopRequireDefault$19(objectWithoutPropertiesLoose.exports);

	var React$10 = _interopRequireWildcard$13(require$$3);

	var _propTypes$W = _interopRequireDefault$19(propTypes.exports);

	var _clsx$G = _interopRequireDefault$19(clsx$1);

	var _base$1p = node$1;

	var _capitalize$g = _interopRequireDefault$19(capitalize);

	var _useThemeProps$I = _interopRequireDefault$19(useThemeProps$1);

	var _styled$L = _interopRequireDefault$19(styled$1);

	var _svgIconClasses = svgIconClasses$1;

	var _jsxRuntime$15 = jsxRuntime;

	const _excluded$U = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];

	function _getRequireWildcardCache$13(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$13 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$13(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$13(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$H = ownerState => {
	  const {
	    color,
	    fontSize,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', color !== 'inherit' && `color${(0, _capitalize$g.default)(color)}`, `fontSize${(0, _capitalize$g.default)(fontSize)}`]
	  };
	  return (0, _base$1p.unstable_composeClasses)(slots, _svgIconClasses.getSvgIconUtilityClass, classes);
	};

	const SvgIconRoot = (0, _styled$L.default)('svg', {
	  name: 'MuiSvgIcon',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'inherit' && styles[`color${(0, _capitalize$g.default)(ownerState.color)}`], styles[`fontSize${(0, _capitalize$g.default)(ownerState.fontSize)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _theme$palette$ownerS, _theme$palette, _theme$palette$ownerS2, _theme$palette2, _theme$palette2$actio, _theme$palette3, _theme$palette3$actio;

	  return {
	    userSelect: 'none',
	    width: '1em',
	    height: '1em',
	    display: 'inline-block',
	    fill: 'currentColor',
	    flexShrink: 0,
	    transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, 'fill', {
	      duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
	    }),
	    fontSize: {
	      inherit: 'inherit',
	      small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || '1.25rem',
	      medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || '1.5rem',
	      large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || '2.1875'
	    }[ownerState.fontSize],
	    // TODO v5 deprecate, v6 remove for sx
	    color: (_theme$palette$ownerS = (_theme$palette = theme.palette) == null ? void 0 : (_theme$palette$ownerS2 = _theme$palette[ownerState.color]) == null ? void 0 : _theme$palette$ownerS2.main) != null ? _theme$palette$ownerS : {
	      action: (_theme$palette2 = theme.palette) == null ? void 0 : (_theme$palette2$actio = _theme$palette2.action) == null ? void 0 : _theme$palette2$actio.active,
	      disabled: (_theme$palette3 = theme.palette) == null ? void 0 : (_theme$palette3$actio = _theme$palette3.action) == null ? void 0 : _theme$palette3$actio.disabled,
	      inherit: undefined
	    }[ownerState.color]
	  };
	});
	const SvgIcon$1 = /*#__PURE__*/React$10.forwardRef(function SvgIcon(inProps, ref) {
	  const props = (0, _useThemeProps$I.default)({
	    props: inProps,
	    name: 'MuiSvgIcon'
	  });
	  const {
	    children,
	    className,
	    color = 'inherit',
	    component = 'svg',
	    fontSize = 'medium',
	    htmlColor,
	    inheritViewBox = false,
	    titleAccess,
	    viewBox = '0 0 24 24'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$U.default)(props, _excluded$U);
	  const ownerState = (0, _extends2$X.default)({}, props, {
	    color,
	    component,
	    fontSize,
	    inheritViewBox,
	    viewBox
	  });
	  const more = {};

	  if (!inheritViewBox) {
	    more.viewBox = viewBox;
	  }

	  const classes = useUtilityClasses$H(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$15.jsxs)(SvgIconRoot, (0, _extends2$X.default)({
	    as: component,
	    className: (0, _clsx$G.default)(classes.root, className),
	    ownerState: ownerState,
	    focusable: "false",
	    color: htmlColor,
	    "aria-hidden": titleAccess ? undefined : true,
	    role: titleAccess ? 'img' : undefined,
	    ref: ref
	  }, more, other, {
	    children: [children, titleAccess ? /*#__PURE__*/(0, _jsxRuntime$15.jsx)("title", {
	      children: titleAccess
	    }) : null]
	  }));
	});
	SvgIcon$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Node passed into the SVG element.
	   */
	  children: _propTypes$W.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$W.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$W.default.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
	   * @default 'inherit'
	   */
	  color: _propTypes$W.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$W.default.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), _propTypes$W.default.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$W.default.elementType,

	  /**
	   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
	   * @default 'medium'
	   */
	  fontSize: _propTypes$W.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$W.default.oneOf(['inherit', 'large', 'medium', 'small']), _propTypes$W.default.string]),

	  /**
	   * Applies a color attribute to the SVG element.
	   */
	  htmlColor: _propTypes$W.default.string,

	  /**
	   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
	   * prop will be ignored.
	   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
	   * `component`'s viewBox to the root node.
	   * @default false
	   */
	  inheritViewBox: _propTypes$W.default.bool,

	  /**
	   * The shape-rendering attribute. The behavior of the different options is described on the
	   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
	   * If you are having issues with blurry icons you should investigate this prop.
	   */
	  shapeRendering: _propTypes$W.default.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$W.default.oneOfType([_propTypes$W.default.arrayOf(_propTypes$W.default.oneOfType([_propTypes$W.default.func, _propTypes$W.default.object, _propTypes$W.default.bool])), _propTypes$W.default.func, _propTypes$W.default.object]),

	  /**
	   * Provides a human-readable title for the element that contains it.
	   * https://www.w3.org/TR/SVG-access/#Equivalent
	   */
	  titleAccess: _propTypes$W.default.string,

	  /**
	   * Allows you to redefine what the coordinates without units mean inside an SVG element.
	   * For example, if the SVG element is 500 (width) by 200 (height),
	   * and you pass viewBox="0 0 50 20",
	   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
	   * to bottom right (50,20) and each unit will be worth 10px.
	   * @default '0 0 24 24'
	   */
	  viewBox: _propTypes$W.default.string
	} ;
	SvgIcon$1.muiName = 'SvgIcon';
	var _default$20 = SvgIcon$1;
	SvgIcon$2.default = _default$20;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  svgIconClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _SvgIcon.default;
		  }
		});
		Object.defineProperty(exports, "svgIconClasses", {
		  enumerable: true,
		  get: function () {
		    return _svgIconClasses.default;
		  }
		});

		var _SvgIcon = _interopRequireDefault(SvgIcon$2);

		var _svgIconClasses = _interopRequireWildcard(svgIconClasses$1);

		Object.keys(_svgIconClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _svgIconClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _svgIconClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (SvgIcon$3));

	var _interopRequireDefault$18 = interopRequireDefault.exports;

	Object.defineProperty(createSvgIcon$2, "__esModule", {
	  value: true
	});
	createSvgIcon$2.default = createSvgIcon$1;

	var _extends2$W = _interopRequireDefault$18(_extends$5.exports);

	var React$$ = _interopRequireWildcard$12(require$$3);

	var _SvgIcon = _interopRequireDefault$18(SvgIcon$3);

	var _jsxRuntime$14 = jsxRuntime;

	function _getRequireWildcardCache$12(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$12 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$12(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$12(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * Private module reserved for @mui packages.
	 */
	function createSvgIcon$1(path, displayName) {
	  const Component = (props, ref) => /*#__PURE__*/(0, _jsxRuntime$14.jsx)(_SvgIcon.default, (0, _extends2$W.default)({
	    "data-testid": `${displayName}Icon`,
	    ref: ref
	  }, props, {
	    children: path
	  }));

	  {
	    // Need to set `displayName` on the inner component for React.memo.
	    // React prior to 16.14 ignores `displayName` on the wrapper.
	    Component.displayName = `${displayName}Icon`;
	  }

	  Component.muiName = _SvgIcon.default.muiName;
	  return /*#__PURE__*/React$$.memo( /*#__PURE__*/React$$.forwardRef(Component));
	}

	var deprecatedPropType = {};

	Object.defineProperty(deprecatedPropType, "__esModule", {
	  value: true
	});
	deprecatedPropType.default = void 0;

	var _utils$J = utils$h;

	var _default$1$ = _utils$J.unstable_deprecatedPropType;
	deprecatedPropType.default = _default$1$;

	var isMuiElement = {};

	Object.defineProperty(isMuiElement, "__esModule", {
	  value: true
	});
	isMuiElement.default = void 0;

	var _utils$I = utils$h;

	var _default$1_ = _utils$I.unstable_isMuiElement;
	isMuiElement.default = _default$1_;

	var ownerDocument = {};

	Object.defineProperty(ownerDocument, "__esModule", {
	  value: true
	});
	ownerDocument.default = void 0;

	var _utils$H = utils$h;

	var _default$1Z = _utils$H.unstable_ownerDocument;
	ownerDocument.default = _default$1Z;

	var ownerWindow = {};

	Object.defineProperty(ownerWindow, "__esModule", {
	  value: true
	});
	ownerWindow.default = void 0;

	var _utils$G = utils$h;

	var _default$1Y = _utils$G.unstable_ownerWindow;
	ownerWindow.default = _default$1Y;

	var requirePropFactory = {};

	Object.defineProperty(requirePropFactory, "__esModule", {
	  value: true
	});
	requirePropFactory.default = void 0;

	var _utils$F = utils$h;

	var _default$1X = _utils$F.unstable_requirePropFactory;
	requirePropFactory.default = _default$1X;

	var setRef = {};

	Object.defineProperty(setRef, "__esModule", {
	  value: true
	});
	setRef.default = void 0;

	var _utils$E = utils$h;

	var _default$1W = _utils$E.unstable_setRef;
	setRef.default = _default$1W;

	var useEnhancedEffect$1 = {};

	Object.defineProperty(useEnhancedEffect$1, "__esModule", {
	  value: true
	});
	useEnhancedEffect$1.default = void 0;

	var _utils$D = utils$h;

	var _default$1V = _utils$D.unstable_useEnhancedEffect;
	useEnhancedEffect$1.default = _default$1V;

	var useId = {};

	Object.defineProperty(useId, "__esModule", {
	  value: true
	});
	useId.default = void 0;

	var _utils$C = utils$h;

	var _default$1U = _utils$C.unstable_useId;
	useId.default = _default$1U;

	var unsupportedProp = {};

	Object.defineProperty(unsupportedProp, "__esModule", {
	  value: true
	});
	unsupportedProp.default = void 0;

	var _utils$B = utils$h;

	var _default$1T = _utils$B.unstable_unsupportedProp;
	unsupportedProp.default = _default$1T;

	var useControlled = {};

	Object.defineProperty(useControlled, "__esModule", {
	  value: true
	});
	useControlled.default = void 0;

	var _utils$A = utils$h;

	var _default$1S = _utils$A.unstable_useControlled;
	useControlled.default = _default$1S;

	var useEventCallback$1 = {};

	Object.defineProperty(useEventCallback$1, "__esModule", {
	  value: true
	});
	useEventCallback$1.default = void 0;

	var _utils$z = utils$h;

	var _default$1R = _utils$z.unstable_useEventCallback;
	useEventCallback$1.default = _default$1R;

	var useIsFocusVisible = {};

	Object.defineProperty(useIsFocusVisible, "__esModule", {
	  value: true
	});
	useIsFocusVisible.default = void 0;

	var _utils$y = utils$h;

	var _default$1Q = _utils$y.unstable_useIsFocusVisible;
	useIsFocusVisible.default = _default$1Q;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "capitalize", {
		  enumerable: true,
		  get: function () {
		    return _capitalize.default;
		  }
		});
		Object.defineProperty(exports, "createChainedFunction", {
		  enumerable: true,
		  get: function () {
		    return _createChainedFunction.default;
		  }
		});
		Object.defineProperty(exports, "createSvgIcon", {
		  enumerable: true,
		  get: function () {
		    return _createSvgIcon.default;
		  }
		});
		Object.defineProperty(exports, "debounce", {
		  enumerable: true,
		  get: function () {
		    return _debounce.default;
		  }
		});
		Object.defineProperty(exports, "deprecatedPropType", {
		  enumerable: true,
		  get: function () {
		    return _deprecatedPropType.default;
		  }
		});
		Object.defineProperty(exports, "isMuiElement", {
		  enumerable: true,
		  get: function () {
		    return _isMuiElement.default;
		  }
		});
		Object.defineProperty(exports, "ownerDocument", {
		  enumerable: true,
		  get: function () {
		    return _ownerDocument.default;
		  }
		});
		Object.defineProperty(exports, "ownerWindow", {
		  enumerable: true,
		  get: function () {
		    return _ownerWindow.default;
		  }
		});
		Object.defineProperty(exports, "requirePropFactory", {
		  enumerable: true,
		  get: function () {
		    return _requirePropFactory.default;
		  }
		});
		Object.defineProperty(exports, "setRef", {
		  enumerable: true,
		  get: function () {
		    return _setRef.default;
		  }
		});
		Object.defineProperty(exports, "unstable_ClassNameGenerator", {
		  enumerable: true,
		  get: function () {
		    return _base.unstable_ClassNameGenerator;
		  }
		});
		Object.defineProperty(exports, "unstable_useEnhancedEffect", {
		  enumerable: true,
		  get: function () {
		    return _useEnhancedEffect.default;
		  }
		});
		Object.defineProperty(exports, "unstable_useId", {
		  enumerable: true,
		  get: function () {
		    return _useId.default;
		  }
		});
		Object.defineProperty(exports, "unsupportedProp", {
		  enumerable: true,
		  get: function () {
		    return _unsupportedProp.default;
		  }
		});
		Object.defineProperty(exports, "useControlled", {
		  enumerable: true,
		  get: function () {
		    return _useControlled.default;
		  }
		});
		Object.defineProperty(exports, "useEventCallback", {
		  enumerable: true,
		  get: function () {
		    return _useEventCallback.default;
		  }
		});
		Object.defineProperty(exports, "useForkRef", {
		  enumerable: true,
		  get: function () {
		    return _useForkRef.default;
		  }
		});
		Object.defineProperty(exports, "useIsFocusVisible", {
		  enumerable: true,
		  get: function () {
		    return _useIsFocusVisible.default;
		  }
		});

		var _capitalize = _interopRequireDefault(capitalize);

		var _createChainedFunction = _interopRequireDefault(createChainedFunction$1);

		var _createSvgIcon = _interopRequireDefault(createSvgIcon$2);

		var _debounce = _interopRequireDefault(debounce$1);

		var _deprecatedPropType = _interopRequireDefault(deprecatedPropType);

		var _isMuiElement = _interopRequireDefault(isMuiElement);

		var _ownerDocument = _interopRequireDefault(ownerDocument);

		var _ownerWindow = _interopRequireDefault(ownerWindow);

		var _requirePropFactory = _interopRequireDefault(requirePropFactory);

		var _setRef = _interopRequireDefault(setRef);

		var _useEnhancedEffect = _interopRequireDefault(useEnhancedEffect$1);

		var _useId = _interopRequireDefault(useId);

		var _unsupportedProp = _interopRequireDefault(unsupportedProp);

		var _useControlled = _interopRequireDefault(useControlled);

		var _useEventCallback = _interopRequireDefault(useEventCallback$1);

		var _useForkRef = _interopRequireDefault(useForkRef);

		var _useIsFocusVisible = _interopRequireDefault(useIsFocusVisible);

		var _base = node$1;
	} (utils$a));

	var _interopRequireDefault$17 = interopRequireDefault.exports;

	Object.defineProperty(Slide$2, "__esModule", {
	  value: true
	});
	Slide$2.default = void 0;
	Slide$2.setTranslateValue = setTranslateValue;

	var _extends2$V = _interopRequireDefault$17(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$T = _interopRequireDefault$17(objectWithoutPropertiesLoose.exports);

	var React$_ = _interopRequireWildcard$11(require$$3);

	var _propTypes$V = _interopRequireDefault$17(propTypes.exports);

	var _reactTransitionGroup$4 = cjs;

	var _utils$x = utils$h;

	var _debounce$3 = _interopRequireDefault$17(debounce$1);

	var _useForkRef$a = _interopRequireDefault$17(useForkRef);

	var _useTheme$9 = _interopRequireDefault$17(useTheme$8);

	var _createTransitions$4 = createTransitions$1;

	var _utils2$5 = utils$b;

	var _utils3$1 = utils$a;

	var _jsxRuntime$13 = jsxRuntime;

	const _excluded$T = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];

	function _getRequireWildcardCache$11(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$11 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$11(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$11(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	// Translate the node so it can't be seen on the screen.
	// Later, we're going to translate the node back to its original location with `none`.
	function getTranslateValue(direction, node, resolvedContainer) {
	  const rect = node.getBoundingClientRect();
	  const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
	  const containerWindow = (0, _utils3$1.ownerWindow)(node);
	  let transform;

	  if (node.fakeTransform) {
	    transform = node.fakeTransform;
	  } else {
	    const computedStyle = containerWindow.getComputedStyle(node);
	    transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');
	  }

	  let offsetX = 0;
	  let offsetY = 0;

	  if (transform && transform !== 'none' && typeof transform === 'string') {
	    const transformValues = transform.split('(')[1].split(')')[0].split(',');
	    offsetX = parseInt(transformValues[4], 10);
	    offsetY = parseInt(transformValues[5], 10);
	  }

	  if (direction === 'left') {
	    if (containerRect) {
	      return `translateX(${containerRect.right + offsetX - rect.left}px)`;
	    }

	    return `translateX(${containerWindow.innerWidth + offsetX - rect.left}px)`;
	  }

	  if (direction === 'right') {
	    if (containerRect) {
	      return `translateX(-${rect.right - containerRect.left - offsetX}px)`;
	    }

	    return `translateX(-${rect.left + rect.width - offsetX}px)`;
	  }

	  if (direction === 'up') {
	    if (containerRect) {
	      return `translateY(${containerRect.bottom + offsetY - rect.top}px)`;
	    }

	    return `translateY(${containerWindow.innerHeight + offsetY - rect.top}px)`;
	  } // direction === 'down'


	  if (containerRect) {
	    return `translateY(-${rect.top - containerRect.top + rect.height - offsetY}px)`;
	  }

	  return `translateY(-${rect.top + rect.height - offsetY}px)`;
	}

	function resolveContainer(containerPropProp) {
	  return typeof containerPropProp === 'function' ? containerPropProp() : containerPropProp;
	}

	function setTranslateValue(direction, node, containerProp) {
	  const resolvedContainer = resolveContainer(containerProp);
	  const transform = getTranslateValue(direction, node, resolvedContainer);

	  if (transform) {
	    node.style.webkitTransform = transform;
	    node.style.transform = transform;
	  }
	}

	const defaultEasing = {
	  enter: _createTransitions$4.easing.easeOut,
	  exit: _createTransitions$4.easing.sharp
	};
	const defaultTimeout$1 = {
	  enter: _createTransitions$4.duration.enteringScreen,
	  exit: _createTransitions$4.duration.leavingScreen
	};
	/**
	 * The Slide transition is used by the [Drawer](/components/drawers/) component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	const Slide$1 = /*#__PURE__*/React$_.forwardRef(function Slide(props, ref) {
	  const {
	    addEndListener,
	    appear = true,
	    children,
	    container: containerProp,
	    direction = 'down',
	    easing: easingProp = defaultEasing,
	    in: inProp,
	    onEnter,
	    onEntered,
	    onEntering,
	    onExit,
	    onExited,
	    onExiting,
	    style,
	    timeout = defaultTimeout$1,
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = _reactTransitionGroup$4.Transition
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$T.default)(props, _excluded$T);
	  const theme = (0, _useTheme$9.default)();
	  const childrenRef = React$_.useRef(null);
	  const handleRefIntermediary = (0, _useForkRef$a.default)(children.ref, childrenRef);
	  const handleRef = (0, _useForkRef$a.default)(handleRefIntermediary, ref);

	  const normalizedTransitionCallback = callback => isAppearing => {
	    if (callback) {
	      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
	      if (isAppearing === undefined) {
	        callback(childrenRef.current);
	      } else {
	        callback(childrenRef.current, isAppearing);
	      }
	    }
	  };

	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    setTranslateValue(direction, node, containerProp);
	    (0, _utils2$5.reflow)(node);

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
	    const transitionProps = (0, _utils2$5.getTransitionProps)({
	      timeout,
	      style,
	      easing: easingProp
	    }, {
	      mode: 'enter'
	    });
	    node.style.webkitTransition = theme.transitions.create('-webkit-transform', (0, _extends2$V.default)({}, transitionProps));
	    node.style.transition = theme.transitions.create('transform', (0, _extends2$V.default)({}, transitionProps));
	    node.style.webkitTransform = 'none';
	    node.style.transform = 'none';

	    if (onEntering) {
	      onEntering(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const transitionProps = (0, _utils2$5.getTransitionProps)({
	      timeout,
	      style,
	      easing: easingProp
	    }, {
	      mode: 'exit'
	    });
	    node.style.webkitTransition = theme.transitions.create('-webkit-transform', transitionProps);
	    node.style.transition = theme.transitions.create('transform', transitionProps);
	    setTranslateValue(direction, node, containerProp);

	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(node => {
	    // No need for transitions when the component is hidden
	    node.style.webkitTransition = '';
	    node.style.transition = '';

	    if (onExited) {
	      onExited(node);
	    }
	  });

	  const handleAddEndListener = next => {
	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(childrenRef.current, next);
	    }
	  };

	  const updatePosition = React$_.useCallback(() => {
	    if (childrenRef.current) {
	      setTranslateValue(direction, childrenRef.current, containerProp);
	    }
	  }, [direction, containerProp]);
	  React$_.useEffect(() => {
	    // Skip configuration where the position is screen size invariant.
	    if (inProp || direction === 'down' || direction === 'right') {
	      return undefined;
	    }

	    const handleResize = (0, _debounce$3.default)(() => {
	      if (childrenRef.current) {
	        setTranslateValue(direction, childrenRef.current, containerProp);
	      }
	    });
	    const containerWindow = (0, _utils3$1.ownerWindow)(childrenRef.current);
	    containerWindow.addEventListener('resize', handleResize);
	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	    };
	  }, [direction, inProp, containerProp]);
	  React$_.useEffect(() => {
	    if (!inProp) {
	      // We need to update the position of the drawer when the direction change and
	      // when it's hidden.
	      updatePosition();
	    }
	  }, [inProp, updatePosition]);
	  return /*#__PURE__*/(0, _jsxRuntime$13.jsx)(TransitionComponent, (0, _extends2$V.default)({
	    nodeRef: childrenRef,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    appear: appear,
	    in: inProp,
	    timeout: timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/React$_.cloneElement(children, (0, _extends2$V.default)({
	        ref: handleRef,
	        style: (0, _extends2$V.default)({
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, style, children.props.style)
	      }, childProps));
	    }
	  }));
	});
	Slide$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Add a custom transition end trigger. Called with the transitioning DOM
	   * node and a done callback. Allows for more fine grained transition end
	   * logic. Note: Timeouts are still used as a fallback if provided.
	   */
	  addEndListener: _propTypes$V.default.func,

	  /**
	   * Perform the enter transition when it first mounts if `in` is also `true`.
	   * Set this to `false` to disable this behavior.
	   * @default true
	   */
	  appear: _propTypes$V.default.bool,

	  /**
	   * A single child content element.
	   */
	  children: _utils$x.elementAcceptingRef.isRequired,

	  /**
	   * An HTML element, or a function that returns one.
	   * It's used to set the container the Slide is transitioning from.
	   */
	  container: (0, _utils$x.chainPropTypes)(_propTypes$V.default.oneOfType([_utils$x.HTMLElementType, _propTypes$V.default.func]), props => {
	    if (props.open) {
	      const resolvedContainer = resolveContainer(props.container);

	      if (resolvedContainer && resolvedContainer.nodeType === 1) {
	        const box = resolvedContainer.getBoundingClientRect();

	        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	          return new Error(['MUI: The `container` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	        }
	      } else if (!resolvedContainer || typeof resolvedContainer.getBoundingClientRect !== 'function' || resolvedContainer.contextElement != null && resolvedContainer.contextElement.nodeType !== 1) {
	        return new Error(['MUI: The `container` prop provided to the component is invalid.', 'It should be an HTML element instance.'].join('\n'));
	      }
	    }

	    return null;
	  }),

	  /**
	   * Direction the child node will enter from.
	   * @default 'down'
	   */
	  direction: _propTypes$V.default.oneOf(['down', 'left', 'right', 'up']),

	  /**
	   * The transition timing function.
	   * You may specify a single easing or a object containing enter and exit values.
	   * @default {
	   *   enter: easing.easeOut,
	   *   exit: easing.sharp,
	   * }
	   */
	  easing: _propTypes$V.default.oneOfType([_propTypes$V.default.shape({
	    enter: _propTypes$V.default.string,
	    exit: _propTypes$V.default.string
	  }), _propTypes$V.default.string]),

	  /**
	   * If `true`, the component will transition in.
	   */
	  in: _propTypes$V.default.bool,

	  /**
	   * @ignore
	   */
	  onEnter: _propTypes$V.default.func,

	  /**
	   * @ignore
	   */
	  onEntered: _propTypes$V.default.func,

	  /**
	   * @ignore
	   */
	  onEntering: _propTypes$V.default.func,

	  /**
	   * @ignore
	   */
	  onExit: _propTypes$V.default.func,

	  /**
	   * @ignore
	   */
	  onExited: _propTypes$V.default.func,

	  /**
	   * @ignore
	   */
	  onExiting: _propTypes$V.default.func,

	  /**
	   * @ignore
	   */
	  style: _propTypes$V.default.object,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default {
	   *   enter: duration.enteringScreen,
	   *   exit: duration.leavingScreen,
	   * }
	   */
	  timeout: _propTypes$V.default.oneOfType([_propTypes$V.default.number, _propTypes$V.default.shape({
	    appear: _propTypes$V.default.number,
	    enter: _propTypes$V.default.number,
	    exit: _propTypes$V.default.number
	  })])
	} ;
	var _default$1P = Slide$1;
	Slide$2.default = _default$1P;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Slide.default;
		  }
		});

		var _Slide = _interopRequireDefault(Slide$2);
	} (Slide$3));

	var styles$4 = {};

	var adaptV4Theme$1 = {};

	var _interopRequireDefault$16 = interopRequireDefault.exports;

	Object.defineProperty(adaptV4Theme$1, "__esModule", {
	  value: true
	});
	adaptV4Theme$1.default = adaptV4Theme;

	var _extends2$U = _interopRequireDefault$16(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$S = _interopRequireDefault$16(objectWithoutPropertiesLoose.exports);

	var _system$b = system;

	const _excluded$S = ["defaultProps", "mixins", "overrides", "palette", "props", "styleOverrides"],
	      _excluded2$4 = ["type", "mode"];

	function adaptV4Theme(inputTheme) {
	  {
	    console.warn(['MUI: adaptV4Theme() is deprecated.', 'Follow the upgrade guide on https://mui.com/r/migration-v4#theme.'].join('\n'));
	  }

	  const {
	    defaultProps = {},
	    mixins = {},
	    overrides = {},
	    palette = {},
	    props = {},
	    styleOverrides = {}
	  } = inputTheme,
	        other = (0, _objectWithoutPropertiesLoose2$S.default)(inputTheme, _excluded$S);
	  const theme = (0, _extends2$U.default)({}, other, {
	    components: {}
	  }); // default props

	  Object.keys(defaultProps).forEach(component => {
	    const componentValue = theme.components[component] || {};
	    componentValue.defaultProps = defaultProps[component];
	    theme.components[component] = componentValue;
	  });
	  Object.keys(props).forEach(component => {
	    const componentValue = theme.components[component] || {};
	    componentValue.defaultProps = props[component];
	    theme.components[component] = componentValue;
	  }); // CSS overrides

	  Object.keys(styleOverrides).forEach(component => {
	    const componentValue = theme.components[component] || {};
	    componentValue.styleOverrides = styleOverrides[component];
	    theme.components[component] = componentValue;
	  });
	  Object.keys(overrides).forEach(component => {
	    const componentValue = theme.components[component] || {};
	    componentValue.styleOverrides = overrides[component];
	    theme.components[component] = componentValue;
	  }); // theme.spacing

	  theme.spacing = (0, _system$b.createSpacing)(inputTheme.spacing); // theme.mixins.gutters

	  const breakpoints = (0, _system$b.createBreakpoints)(inputTheme.breakpoints || {});
	  const spacing = theme.spacing;
	  theme.mixins = (0, _extends2$U.default)({
	    gutters: (styles = {}) => {
	      return (0, _extends2$U.default)({
	        paddingLeft: spacing(2),
	        paddingRight: spacing(2)
	      }, styles, {
	        [breakpoints.up('sm')]: (0, _extends2$U.default)({
	          paddingLeft: spacing(3),
	          paddingRight: spacing(3)
	        }, styles[breakpoints.up('sm')])
	      });
	    }
	  }, mixins);
	  const {
	    type: typeInput,
	    mode: modeInput
	  } = palette,
	        paletteRest = (0, _objectWithoutPropertiesLoose2$S.default)(palette, _excluded2$4);
	  const finalMode = modeInput || typeInput || 'light';
	  theme.palette = (0, _extends2$U.default)({
	    // theme.palette.text.hint
	    text: {
	      hint: finalMode === 'dark' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(0, 0, 0, 0.38)'
	    },
	    mode: finalMode,
	    type: finalMode
	  }, paletteRest);
	  return theme;
	}

	var createMuiStrictModeTheme$1 = {};

	var _interopRequireDefault$15 = interopRequireDefault.exports;

	Object.defineProperty(createMuiStrictModeTheme$1, "__esModule", {
	  value: true
	});
	createMuiStrictModeTheme$1.default = createMuiStrictModeTheme;

	var _utils$w = utils$h;

	var _createTheme = _interopRequireDefault$15(createTheme$1);

	function createMuiStrictModeTheme(options, ...args) {
	  return (0, _createTheme.default)((0, _utils$w.deepmerge)({
	    unstable_strictMode: true
	  }, options), ...args);
	}

	var createStyles$1 = {};

	Object.defineProperty(createStyles$1, "__esModule", {
	  value: true
	});
	createStyles$1.default = createStyles;
	let warnedOnce = false; // To remove in v6

	function createStyles(styles) {
	  if (!warnedOnce) {
	    console.warn(['MUI: createStyles from @mui/material/styles is deprecated.', 'Please use @mui/styles/createStyles'].join('\n'));
	    warnedOnce = true;
	  }

	  return styles;
	}

	var cssUtils = {};

	Object.defineProperty(cssUtils, "__esModule", {
	  value: true
	});
	cssUtils.alignProperty = alignProperty;
	cssUtils.convertLength = convertLength;
	cssUtils.fontGrid = fontGrid;
	cssUtils.getUnit = getUnit;
	cssUtils.isUnitless = isUnitless;
	cssUtils.responsiveProperty = responsiveProperty;
	cssUtils.toUnitless = toUnitless;

	function isUnitless(value) {
	  return String(parseFloat(value)).length === String(value).length;
	} // Ported from Compass
	// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss
	// Emulate the sass function "unit"


	function getUnit(input) {
	  return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || '';
	} // Emulate the sass function "unitless"


	function toUnitless(length) {
	  return parseFloat(length);
	} // Convert any CSS <length> or <percentage> value to any another.
	// From https://github.com/KyleAMathews/convert-css-length


	function convertLength(baseFontSize) {
	  return (length, toUnit) => {
	    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.

	    if (fromUnit === toUnit) {
	      return length;
	    } // Convert input length to pixels.


	    let pxLength = toUnitless(length);

	    if (fromUnit !== 'px') {
	      if (fromUnit === 'em') {
	        pxLength = toUnitless(length) * toUnitless(baseFontSize);
	      } else if (fromUnit === 'rem') {
	        pxLength = toUnitless(length) * toUnitless(baseFontSize);
	      }
	    } // Convert length in pixels to the output unit


	    let outputLength = pxLength;

	    if (toUnit !== 'px') {
	      if (toUnit === 'em') {
	        outputLength = pxLength / toUnitless(baseFontSize);
	      } else if (toUnit === 'rem') {
	        outputLength = pxLength / toUnitless(baseFontSize);
	      } else {
	        return length;
	      }
	    }

	    return parseFloat(outputLength.toFixed(5)) + toUnit;
	  };
	}

	function alignProperty({
	  size,
	  grid
	}) {
	  const sizeBelow = size - size % grid;
	  const sizeAbove = sizeBelow + grid;
	  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
	} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the
	// lineHeight falls under a x pixels grid, 4px in the case of Material Design,
	// without changing the relative line height


	function fontGrid({
	  lineHeight,
	  pixels,
	  htmlFontSize
	}) {
	  return pixels / (lineHeight * htmlFontSize);
	}
	/**
	 * generate a responsive version of a given CSS property
	 * @example
	 * responsiveProperty({
	 *   cssProperty: 'fontSize',
	 *   min: 15,
	 *   max: 20,
	 *   unit: 'px',
	 *   breakpoints: [300, 600],
	 * })
	 *
	 * // this returns
	 *
	 * {
	 *   fontSize: '15px',
	 *   '@media (min-width:300px)': {
	 *     fontSize: '17.5px',
	 *   },
	 *   '@media (min-width:600px)': {
	 *     fontSize: '20px',
	 *   },
	 * }
	 * @param {Object} params
	 * @param {string} params.cssProperty - The CSS property to be made responsive
	 * @param {number} params.min - The smallest value of the CSS property
	 * @param {number} params.max - The largest value of the CSS property
	 * @param {string} [params.unit] - The unit to be used for the CSS property
	 * @param {Array.number} [params.breakpoints]  - An array of breakpoints
	 * @param {number} [params.alignStep] - Round scaled value to fall under this grid
	 * @returns {Object} responsive styles for {params.cssProperty}
	 */


	function responsiveProperty({
	  cssProperty,
	  min,
	  max,
	  unit = 'rem',
	  breakpoints = [600, 900, 1200],
	  transform = null
	}) {
	  const output = {
	    [cssProperty]: `${min}${unit}`
	  };
	  const factor = (max - min) / breakpoints[breakpoints.length - 1];
	  breakpoints.forEach(breakpoint => {
	    let value = min + factor * breakpoint;

	    if (transform !== null) {
	      value = transform(value);
	    }

	    output[`@media (min-width:${breakpoint}px)`] = {
	      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`
	    };
	  });
	  return output;
	}

	var responsiveFontSizes$1 = {};

	var _interopRequireDefault$14 = interopRequireDefault.exports;

	Object.defineProperty(responsiveFontSizes$1, "__esModule", {
	  value: true
	});
	responsiveFontSizes$1.default = responsiveFontSizes;

	var _extends2$T = _interopRequireDefault$14(_extends$5.exports);

	var _cssUtils = cssUtils;

	function responsiveFontSizes(themeInput, options = {}) {
	  const {
	    breakpoints = ['sm', 'md', 'lg'],
	    disableAlign = false,
	    factor = 2,
	    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']
	  } = options;
	  const theme = (0, _extends2$T.default)({}, themeInput);
	  theme.typography = (0, _extends2$T.default)({}, theme.typography);
	  const typography = theme.typography; // Convert between CSS lengths e.g. em->px or px->rem
	  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).

	  const convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);
	  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);
	  variants.forEach(variant => {
	    const style = typography[variant];
	    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));

	    if (remFontSize <= 1) {
	      return;
	    }

	    const maxFontSize = remFontSize;
	    const minFontSize = 1 + (maxFontSize - 1) / factor;
	    let {
	      lineHeight
	    } = style;

	    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {
	      throw new Error(`MUI: Unsupported non-unitless line height with grid alignment.
Use unitless line heights instead.` );
	    }

	    if (!(0, _cssUtils.isUnitless)(lineHeight)) {
	      // make it unitless
	      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);
	    }

	    let transform = null;

	    if (!disableAlign) {
	      transform = value => (0, _cssUtils.alignProperty)({
	        size: value,
	        grid: (0, _cssUtils.fontGrid)({
	          pixels: 4,
	          lineHeight,
	          htmlFontSize: typography.htmlFontSize
	        })
	      });
	    }

	    typography[variant] = (0, _extends2$T.default)({}, style, (0, _cssUtils.responsiveProperty)({
	      cssProperty: 'fontSize',
	      min: minFontSize,
	      max: maxFontSize,
	      unit: 'rem',
	      breakpoints: breakpointValues,
	      transform
	    }));
	  });
	  return theme;
	}

	var ThemeProvider = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _system.ThemeProvider;
		  }
		});

		var _system = system;
	} (ThemeProvider));

	var makeStyles$1 = {};

	Object.defineProperty(makeStyles$1, "__esModule", {
	  value: true
	});
	makeStyles$1.default = makeStyles;

	function makeStyles() {
	  throw new Error(`MUI: makeStyles is not longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#material-ui-core-styles for more details.` );
	}

	var withStyles$1 = {};

	Object.defineProperty(withStyles$1, "__esModule", {
	  value: true
	});
	withStyles$1.default = withStyles;

	function withStyles() {
	  throw new Error(`MUI: withStyles is not longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#material-ui-core-styles for more details.` );
	}

	var withTheme$1 = {};

	Object.defineProperty(withTheme$1, "__esModule", {
	  value: true
	});
	withTheme$1.default = withTheme;

	function withTheme() {
	  throw new Error(`MUI: withTheme is not longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#material-ui-core-styles for more details.` );
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "StyledEngineProvider", {
		  enumerable: true,
		  get: function () {
		    return _system.StyledEngineProvider;
		  }
		});
		Object.defineProperty(exports, "ThemeProvider", {
		  enumerable: true,
		  get: function () {
		    return _ThemeProvider.default;
		  }
		});
		Object.defineProperty(exports, "adaptV4Theme", {
		  enumerable: true,
		  get: function () {
		    return _adaptV4Theme.default;
		  }
		});
		Object.defineProperty(exports, "alpha", {
		  enumerable: true,
		  get: function () {
		    return _system.alpha;
		  }
		});
		Object.defineProperty(exports, "createMuiTheme", {
		  enumerable: true,
		  get: function () {
		    return _createTheme.createMuiTheme;
		  }
		});
		Object.defineProperty(exports, "createStyles", {
		  enumerable: true,
		  get: function () {
		    return _createStyles.default;
		  }
		});
		Object.defineProperty(exports, "createTheme", {
		  enumerable: true,
		  get: function () {
		    return _createTheme.default;
		  }
		});
		Object.defineProperty(exports, "css", {
		  enumerable: true,
		  get: function () {
		    return _system.css;
		  }
		});
		Object.defineProperty(exports, "darken", {
		  enumerable: true,
		  get: function () {
		    return _system.darken;
		  }
		});
		Object.defineProperty(exports, "decomposeColor", {
		  enumerable: true,
		  get: function () {
		    return _system.decomposeColor;
		  }
		});
		Object.defineProperty(exports, "duration", {
		  enumerable: true,
		  get: function () {
		    return _createTransitions.duration;
		  }
		});
		Object.defineProperty(exports, "easing", {
		  enumerable: true,
		  get: function () {
		    return _createTransitions.easing;
		  }
		});
		Object.defineProperty(exports, "emphasize", {
		  enumerable: true,
		  get: function () {
		    return _system.emphasize;
		  }
		});
		Object.defineProperty(exports, "experimentalStyled", {
		  enumerable: true,
		  get: function () {
		    return _styled.default;
		  }
		});
		Object.defineProperty(exports, "experimental_sx", {
		  enumerable: true,
		  get: function () {
		    return _system.experimental_sx;
		  }
		});
		Object.defineProperty(exports, "getContrastRatio", {
		  enumerable: true,
		  get: function () {
		    return _system.getContrastRatio;
		  }
		});
		Object.defineProperty(exports, "getLuminance", {
		  enumerable: true,
		  get: function () {
		    return _system.getLuminance;
		  }
		});
		Object.defineProperty(exports, "hexToRgb", {
		  enumerable: true,
		  get: function () {
		    return _system.hexToRgb;
		  }
		});
		Object.defineProperty(exports, "hslToRgb", {
		  enumerable: true,
		  get: function () {
		    return _system.hslToRgb;
		  }
		});
		Object.defineProperty(exports, "keyframes", {
		  enumerable: true,
		  get: function () {
		    return _system.keyframes;
		  }
		});
		Object.defineProperty(exports, "lighten", {
		  enumerable: true,
		  get: function () {
		    return _system.lighten;
		  }
		});
		Object.defineProperty(exports, "makeStyles", {
		  enumerable: true,
		  get: function () {
		    return _makeStyles.default;
		  }
		});
		Object.defineProperty(exports, "recomposeColor", {
		  enumerable: true,
		  get: function () {
		    return _system.recomposeColor;
		  }
		});
		Object.defineProperty(exports, "responsiveFontSizes", {
		  enumerable: true,
		  get: function () {
		    return _responsiveFontSizes.default;
		  }
		});
		Object.defineProperty(exports, "rgbToHex", {
		  enumerable: true,
		  get: function () {
		    return _system.rgbToHex;
		  }
		});
		Object.defineProperty(exports, "styled", {
		  enumerable: true,
		  get: function () {
		    return _styled.default;
		  }
		});
		Object.defineProperty(exports, "unstable_createMuiStrictModeTheme", {
		  enumerable: true,
		  get: function () {
		    return _createMuiStrictModeTheme.default;
		  }
		});
		Object.defineProperty(exports, "unstable_getUnit", {
		  enumerable: true,
		  get: function () {
		    return _cssUtils.getUnit;
		  }
		});
		Object.defineProperty(exports, "unstable_toUnitless", {
		  enumerable: true,
		  get: function () {
		    return _cssUtils.toUnitless;
		  }
		});
		Object.defineProperty(exports, "useTheme", {
		  enumerable: true,
		  get: function () {
		    return _useTheme.default;
		  }
		});
		Object.defineProperty(exports, "useThemeProps", {
		  enumerable: true,
		  get: function () {
		    return _useThemeProps.default;
		  }
		});
		Object.defineProperty(exports, "withStyles", {
		  enumerable: true,
		  get: function () {
		    return _withStyles.default;
		  }
		});
		Object.defineProperty(exports, "withTheme", {
		  enumerable: true,
		  get: function () {
		    return _withTheme.default;
		  }
		});

		var _adaptV4Theme = _interopRequireDefault(adaptV4Theme$1);

		var _system = system;

		var _createTheme = _interopRequireWildcard(createTheme$1);

		var _createMuiStrictModeTheme = _interopRequireDefault(createMuiStrictModeTheme$1);

		var _createStyles = _interopRequireDefault(createStyles$1);

		var _cssUtils = cssUtils;

		var _responsiveFontSizes = _interopRequireDefault(responsiveFontSizes$1);

		var _createTransitions = createTransitions$1;

		var _useTheme = _interopRequireDefault(useTheme$8);

		var _useThemeProps = _interopRequireDefault(useThemeProps$1);

		var _styled = _interopRequireDefault(styled$1);

		var _ThemeProvider = _interopRequireDefault(ThemeProvider);

		var _makeStyles = _interopRequireDefault(makeStyles$1);

		var _withStyles = _interopRequireDefault(withStyles$1);

		var _withTheme = _interopRequireDefault(withTheme$1);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (styles$4));

	var Collapse$3 = {};

	var Collapse$2 = {};

	var collapseClasses$1 = {};

	Object.defineProperty(collapseClasses$1, "__esModule", {
	  value: true
	});
	collapseClasses$1.default = void 0;
	collapseClasses$1.getCollapseUtilityClass = getCollapseUtilityClass;

	var _base$1o = node$1;

	function getCollapseUtilityClass(slot) {
	  return (0, _base$1o.generateUtilityClass)('MuiCollapse', slot);
	}

	const collapseClasses = (0, _base$1o.generateUtilityClasses)('MuiCollapse', ['root', 'horizontal', 'vertical', 'entered', 'hidden', 'wrapper', 'wrapperInner']);
	var _default$1O = collapseClasses;
	collapseClasses$1.default = _default$1O;

	var _interopRequireDefault$13 = interopRequireDefault.exports;

	Object.defineProperty(Collapse$2, "__esModule", {
	  value: true
	});
	Collapse$2.default = void 0;

	var _objectWithoutPropertiesLoose2$R = _interopRequireDefault$13(objectWithoutPropertiesLoose.exports);

	var _extends2$S = _interopRequireDefault$13(_extends$5.exports);

	var React$Z = _interopRequireWildcard$10(require$$3);

	var _clsx$F = _interopRequireDefault$13(clsx$1);

	var _propTypes$U = _interopRequireDefault$13(propTypes.exports);

	var _reactTransitionGroup$3 = cjs;

	var _utils$v = utils$h;

	var _base$1n = node$1;

	var _styled$K = _interopRequireDefault$13(styled$1);

	var _useThemeProps$H = _interopRequireDefault$13(useThemeProps$1);

	var _createTransitions$3 = createTransitions$1;

	var _utils2$4 = utils$b;

	var _useTheme$8 = _interopRequireDefault$13(useTheme$8);

	var _utils3 = utils$a;

	var _collapseClasses = collapseClasses$1;

	var _jsxRuntime$12 = jsxRuntime;

	const _excluded$R = ["addEndListener", "children", "className", "collapsedSize", "component", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "orientation", "style", "timeout", "TransitionComponent"];

	function _getRequireWildcardCache$10(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$10 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$10(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$10(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$G = ownerState => {
	  const {
	    orientation,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', `${orientation}`],
	    entered: ['entered'],
	    hidden: ['hidden'],
	    wrapper: ['wrapper', `${orientation}`],
	    wrapperInner: ['wrapperInner', `${orientation}`]
	  };
	  return (0, _base$1n.unstable_composeClasses)(slots, _collapseClasses.getCollapseUtilityClass, classes);
	};

	const CollapseRoot = (0, _styled$K.default)('div', {
	  name: 'MuiCollapse',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.orientation], ownerState.state === 'entered' && styles.entered, ownerState.state === 'exited' && !ownerState.in && ownerState.collapsedSize === '0px' && styles.hidden];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$S.default)({
	  height: 0,
	  overflow: 'hidden',
	  transition: theme.transitions.create('height')
	}, ownerState.orientation === 'horizontal' && {
	  height: 'auto',
	  width: 0,
	  transition: theme.transitions.create('width')
	}, ownerState.state === 'entered' && (0, _extends2$S.default)({
	  height: 'auto',
	  overflow: 'visible'
	}, ownerState.orientation === 'horizontal' && {
	  width: 'auto'
	}), ownerState.state === 'exited' && !ownerState.in && ownerState.collapsedSize === '0px' && {
	  visibility: 'hidden'
	}));
	const CollapseWrapper = (0, _styled$K.default)('div', {
	  name: 'MuiCollapse',
	  slot: 'Wrapper',
	  overridesResolver: (props, styles) => styles.wrapper
	})(({
	  ownerState
	}) => (0, _extends2$S.default)({
	  // Hack to get children with a negative margin to not falsify the height computation.
	  display: 'flex',
	  width: '100%'
	}, ownerState.orientation === 'horizontal' && {
	  width: 'auto',
	  height: '100%'
	}));
	const CollapseWrapperInner = (0, _styled$K.default)('div', {
	  name: 'MuiCollapse',
	  slot: 'WrapperInner',
	  overridesResolver: (props, styles) => styles.wrapperInner
	})(({
	  ownerState
	}) => (0, _extends2$S.default)({
	  width: '100%'
	}, ownerState.orientation === 'horizontal' && {
	  width: 'auto',
	  height: '100%'
	}));
	/**
	 * The Collapse transition is used by the
	 * [Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	const Collapse$1 = /*#__PURE__*/React$Z.forwardRef(function Collapse(inProps, ref) {
	  const props = (0, _useThemeProps$H.default)({
	    props: inProps,
	    name: 'MuiCollapse'
	  });
	  const {
	    addEndListener,
	    children,
	    className,
	    collapsedSize: collapsedSizeProp = '0px',
	    component,
	    easing,
	    in: inProp,
	    onEnter,
	    onEntered,
	    onEntering,
	    onExit,
	    onExited,
	    onExiting,
	    orientation = 'vertical',
	    style,
	    timeout = _createTransitions$3.duration.standard,
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = _reactTransitionGroup$3.Transition
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$R.default)(props, _excluded$R);
	  const ownerState = (0, _extends2$S.default)({}, props, {
	    orientation,
	    collapsedSize: collapsedSizeProp
	  });
	  const classes = useUtilityClasses$G(ownerState);
	  const theme = (0, _useTheme$8.default)();
	  const timer = React$Z.useRef();
	  const wrapperRef = React$Z.useRef(null);
	  const autoTransitionDuration = React$Z.useRef();
	  const collapsedSize = typeof collapsedSizeProp === 'number' ? `${collapsedSizeProp}px` : collapsedSizeProp;
	  const isHorizontal = orientation === 'horizontal';
	  const size = isHorizontal ? 'width' : 'height';
	  React$Z.useEffect(() => {
	    return () => {
	      clearTimeout(timer.current);
	    };
	  }, []);
	  const nodeRef = React$Z.useRef(null);
	  const handleRef = (0, _utils3.useForkRef)(ref, nodeRef);

	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };

	  const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal ? 'clientWidth' : 'clientHeight'] : 0;

	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    if (wrapperRef.current && isHorizontal) {
	      // Set absolute position to get the size of collapsed content
	      wrapperRef.current.style.position = 'absolute';
	    }

	    node.style[size] = collapsedSize;

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
	    const wrapperSize = getWrapperSize();

	    if (wrapperRef.current && isHorizontal) {
	      // After the size is read reset the position back to default
	      wrapperRef.current.style.position = '';
	    }

	    const {
	      duration: transitionDuration,
	      easing: transitionTimingFunction
	    } = (0, _utils2$4.getTransitionProps)({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });

	    if (timeout === 'auto') {
	      const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
	      node.style.transitionDuration = `${duration2}ms`;
	      autoTransitionDuration.current = duration2;
	    } else {
	      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;
	    }

	    node.style[size] = `${wrapperSize}px`;
	    node.style.transitionTimingFunction = transitionTimingFunction;

	    if (onEntering) {
	      onEntering(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback((node, isAppearing) => {
	    node.style[size] = 'auto';

	    if (onEntered) {
	      onEntered(node, isAppearing);
	    }
	  });
	  const handleExit = normalizedTransitionCallback(node => {
	    node.style[size] = `${getWrapperSize()}px`;

	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);
	  const handleExiting = normalizedTransitionCallback(node => {
	    const wrapperSize = getWrapperSize();
	    const {
	      duration: transitionDuration,
	      easing: transitionTimingFunction
	    } = (0, _utils2$4.getTransitionProps)({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });

	    if (timeout === 'auto') {
	      // TODO: rename getAutoHeightDuration to something more generic (width support)
	      // Actually it just calculates animation duration based on size
	      const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
	      node.style.transitionDuration = `${duration2}ms`;
	      autoTransitionDuration.current = duration2;
	    } else {
	      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;
	    }

	    node.style[size] = collapsedSize;
	    node.style.transitionTimingFunction = transitionTimingFunction;

	    if (onExiting) {
	      onExiting(node);
	    }
	  });

	  const handleAddEndListener = next => {
	    if (timeout === 'auto') {
	      timer.current = setTimeout(next, autoTransitionDuration.current || 0);
	    }

	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };

	  return /*#__PURE__*/(0, _jsxRuntime$12.jsx)(TransitionComponent, (0, _extends2$S.default)({
	    in: inProp,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    nodeRef: nodeRef,
	    timeout: timeout === 'auto' ? null : timeout
	  }, other, {
	    children: (state, childProps) => /*#__PURE__*/(0, _jsxRuntime$12.jsx)(CollapseRoot, (0, _extends2$S.default)({
	      as: component,
	      className: (0, _clsx$F.default)(classes.root, className, {
	        'entered': classes.entered,
	        'exited': !inProp && collapsedSize === '0px' && classes.hidden
	      }[state]),
	      style: (0, _extends2$S.default)({
	        [isHorizontal ? 'minWidth' : 'minHeight']: collapsedSize
	      }, style),
	      ownerState: (0, _extends2$S.default)({}, ownerState, {
	        state
	      }),
	      ref: handleRef
	    }, childProps, {
	      children: /*#__PURE__*/(0, _jsxRuntime$12.jsx)(CollapseWrapper, {
	        ownerState: (0, _extends2$S.default)({}, ownerState, {
	          state
	        }),
	        className: classes.wrapper,
	        ref: wrapperRef,
	        children: /*#__PURE__*/(0, _jsxRuntime$12.jsx)(CollapseWrapperInner, {
	          ownerState: (0, _extends2$S.default)({}, ownerState, {
	            state
	          }),
	          className: classes.wrapperInner,
	          children: children
	        })
	      })
	    }))
	  }));
	});
	Collapse$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Add a custom transition end trigger. Called with the transitioning DOM
	   * node and a done callback. Allows for more fine grained transition end
	   * logic. Note: Timeouts are still used as a fallback if provided.
	   */
	  addEndListener: _propTypes$U.default.func,

	  /**
	   * The content node to be collapsed.
	   */
	  children: _propTypes$U.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$U.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$U.default.string,

	  /**
	   * The width (horizontal) or height (vertical) of the container when collapsed.
	   * @default '0px'
	   */
	  collapsedSize: _propTypes$U.default.oneOfType([_propTypes$U.default.number, _propTypes$U.default.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _utils$v.elementTypeAcceptingRef,

	  /**
	   * The transition timing function.
	   * You may specify a single easing or a object containing enter and exit values.
	   */
	  easing: _propTypes$U.default.oneOfType([_propTypes$U.default.shape({
	    enter: _propTypes$U.default.string,
	    exit: _propTypes$U.default.string
	  }), _propTypes$U.default.string]),

	  /**
	   * If `true`, the component will transition in.
	   */
	  in: _propTypes$U.default.bool,

	  /**
	   * @ignore
	   */
	  onEnter: _propTypes$U.default.func,

	  /**
	   * @ignore
	   */
	  onEntered: _propTypes$U.default.func,

	  /**
	   * @ignore
	   */
	  onEntering: _propTypes$U.default.func,

	  /**
	   * @ignore
	   */
	  onExit: _propTypes$U.default.func,

	  /**
	   * @ignore
	   */
	  onExited: _propTypes$U.default.func,

	  /**
	   * @ignore
	   */
	  onExiting: _propTypes$U.default.func,

	  /**
	   * The transition orientation.
	   * @default 'vertical'
	   */
	  orientation: _propTypes$U.default.oneOf(['horizontal', 'vertical']),

	  /**
	   * @ignore
	   */
	  style: _propTypes$U.default.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$U.default.oneOfType([_propTypes$U.default.arrayOf(_propTypes$U.default.oneOfType([_propTypes$U.default.func, _propTypes$U.default.object, _propTypes$U.default.bool])), _propTypes$U.default.func, _propTypes$U.default.object]),

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   *
	   * Set to 'auto' to automatically calculate transition time based on height.
	   * @default duration.standard
	   */
	  timeout: _propTypes$U.default.oneOfType([_propTypes$U.default.oneOf(['auto']), _propTypes$U.default.number, _propTypes$U.default.shape({
	    appear: _propTypes$U.default.number,
	    enter: _propTypes$U.default.number,
	    exit: _propTypes$U.default.number
	  })])
	} ;
	Collapse$1.muiSupportAuto = true;
	var _default$1N = Collapse$1;
	Collapse$2.default = _default$1N;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  collapseClasses: true
		};
		Object.defineProperty(exports, "collapseClasses", {
		  enumerable: true,
		  get: function () {
		    return _collapseClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Collapse.default;
		  }
		});

		var _Collapse = _interopRequireDefault(Collapse$2);

		var _collapseClasses = _interopRequireWildcard(collapseClasses$1);

		Object.keys(_collapseClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _collapseClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _collapseClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Collapse$3));

	var ClickAwayListener$1 = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ClickAwayListener.default;
		  }
		});

		var _ClickAwayListener = _interopRequireWildcard(ClickAwayListener$4);

		Object.keys(_ClickAwayListener).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _ClickAwayListener[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _ClickAwayListener[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ClickAwayListener$1));

	Object.defineProperty(notistack_cjs_development, '__esModule', { value: true });

	function _interopDefault$1 (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var React$Y = require$$3;
	var React__default = _interopDefault$1(React$Y);
	var reactDom = require$$3;
	var clsx = _interopDefault$1(clsx$1);
	var Slide = _interopDefault$1(Slide$3);
	var styles$3 = styles$4;
	var Collapse = _interopDefault$1(Collapse$3);
	var SvgIcon = _interopDefault$1(SvgIcon$3);
	var ClickAwayListener = _interopDefault$1(ClickAwayListener$1);
	var hoistNonReactStatics = _interopDefault$1(hoistNonReactStatics_cjs);

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	var SnackbarContext = /*#__PURE__*/React__default.createContext();

	var allClasses = {
	  mui: {
	    root: {},
	    anchorOriginTopCenter: {},
	    anchorOriginBottomCenter: {},
	    anchorOriginTopRight: {},
	    anchorOriginBottomRight: {},
	    anchorOriginTopLeft: {},
	    anchorOriginBottomLeft: {}
	  },
	  container: {
	    containerRoot: {},
	    containerAnchorOriginTopCenter: {},
	    containerAnchorOriginBottomCenter: {},
	    containerAnchorOriginTopRight: {},
	    containerAnchorOriginBottomRight: {},
	    containerAnchorOriginTopLeft: {},
	    containerAnchorOriginBottomLeft: {}
	  }
	};
	var MESSAGES = {
	  NO_PERSIST_ALL: 'WARNING - notistack: Reached maxSnack while all enqueued snackbars have \'persist\' flag. Notistack will dismiss the oldest snackbar anyway to allow other ones in the queue to be presented.'
	};
	var SNACKBAR_INDENTS = {
	  view: {
	    "default": 20,
	    dense: 4
	  },
	  snackbar: {
	    "default": 6,
	    dense: 2
	  }
	};
	var DEFAULTS = {
	  maxSnack: 3,
	  dense: false,
	  hideIconVariant: false,
	  variant: 'default',
	  autoHideDuration: 5000,
	  anchorOrigin: {
	    vertical: 'bottom',
	    horizontal: 'left'
	  },
	  TransitionComponent: Slide,
	  transitionDuration: {
	    enter: 225,
	    exit: 195
	  }
	};
	var capitalise = function capitalise(text) {
	  return text.charAt(0).toUpperCase() + text.slice(1);
	};
	var originKeyExtractor = function originKeyExtractor(anchor) {
	  return "" + capitalise(anchor.vertical) + capitalise(anchor.horizontal);
	};
	/**
	 * Omit SnackbarContainer class keys that are not needed for SnackbarItem
	 */

	var omitContainerKeys = function omitContainerKeys(classes) {
	  return (// @ts-ignore
	    Object.keys(classes).filter(function (key) {
	      return !allClasses.container[key];
	    }).reduce(function (obj, key) {
	      var _extends2;

	      return _extends({}, obj, (_extends2 = {}, _extends2[key] = classes[key], _extends2));
	    }, {})
	  );
	};
	var REASONS = {
	  TIMEOUT: 'timeout',
	  CLICKAWAY: 'clickaway',
	  MAXSNACK: 'maxsnack',
	  INSTRUCTED: 'instructed'
	};
	/** Tranforms classes name */

	var transformer = {
	  toContainerAnchorOrigin: function toContainerAnchorOrigin(origin) {
	    return "containerAnchorOrigin" + origin;
	  },
	  toAnchorOrigin: function toAnchorOrigin(_ref) {
	    var vertical = _ref.vertical,
	        horizontal = _ref.horizontal;
	    return "anchorOrigin" + capitalise(vertical) + capitalise(horizontal);
	  },
	  toVariant: function toVariant(variant) {
	    return "variant" + capitalise(variant);
	  }
	};
	var isDefined = function isDefined(value) {
	  return !!value || value === 0;
	};

	var numberOrNull = function numberOrNull(numberish) {
	  return typeof numberish === 'number' || numberish === null;
	}; // @ts-ignore


	var merge$1 = function merge(options, props, defaults) {
	  return function (name) {
	    if (name === 'autoHideDuration') {
	      if (numberOrNull(options.autoHideDuration)) return options.autoHideDuration;
	      if (numberOrNull(props.autoHideDuration)) return props.autoHideDuration;
	      return DEFAULTS.autoHideDuration;
	    }

	    return options[name] || props[name] || defaults[name];
	  };
	};
	function objectMerge(options, props, defaults) {
	  if (options === void 0) {
	    options = {};
	  }

	  if (props === void 0) {
	    props = {};
	  }

	  if (defaults === void 0) {
	    defaults = {};
	  }

	  return _extends({}, defaults, {}, props, {}, options);
	}

	var componentName = 'SnackbarContent';
	var classes = {
	  root: componentName + "-root"
	};
	var Root = /*#__PURE__*/styles$3.styled('div')(function (_ref) {
	  var _ref2, _ref3;

	  var theme = _ref.theme;
	  return _ref3 = {}, _ref3["&." + classes.root] = (_ref2 = {
	    display: 'flex',
	    flexWrap: 'wrap',
	    flexGrow: 1
	  }, _ref2[theme.breakpoints.up('sm')] = {
	    flexGrow: 'initial',
	    minWidth: 288
	  }, _ref2), _ref3;
	});
	var SnackbarContent = /*#__PURE__*/React$Y.forwardRef(function (_ref4, ref) {
	  var className = _ref4.className,
	      props = _objectWithoutPropertiesLoose(_ref4, ["className"]);

	  return React__default.createElement(Root, Object.assign({
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, props));
	});

	var DIRECTION = {
	  right: 'left',
	  left: 'right',
	  bottom: 'up',
	  top: 'down'
	};
	var getTransitionDirection = function getTransitionDirection(anchorOrigin) {
	  if (anchorOrigin.horizontal !== 'center') {
	    return DIRECTION[anchorOrigin.horizontal];
	  }

	  return DIRECTION[anchorOrigin.vertical];
	};

	var CheckIcon = function CheckIcon(props) {
	  return React__default.createElement(SvgIcon, Object.assign({}, props), React__default.createElement("path", {
	    d: "M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41\n        10.59L10 14.17L17.59 6.58L19 8L10 17Z"
	  }));
	};

	var WarningIcon = function WarningIcon(props) {
	  return React__default.createElement(SvgIcon, Object.assign({}, props), React__default.createElement("path", {
	    d: "M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z"
	  }));
	};

	var ErrorIcon = function ErrorIcon(props) {
	  return React__default.createElement(SvgIcon, Object.assign({}, props), React__default.createElement("path", {
	    d: "M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,\n        6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,\n        13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z"
	  }));
	};

	var InfoIcon = function InfoIcon(props) {
	  return React__default.createElement(SvgIcon, Object.assign({}, props), React__default.createElement("path", {
	    d: "M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,\n        0 22,12A10,10 0 0,0 12,2Z"
	  }));
	};

	var iconStyles = {
	  fontSize: 20,
	  marginInlineEnd: 8
	};
	var defaultIconVariants = {
	  "default": undefined,
	  success: /*#__PURE__*/React__default.createElement(CheckIcon, {
	    style: iconStyles
	  }),
	  warning: /*#__PURE__*/React__default.createElement(WarningIcon, {
	    style: iconStyles
	  }),
	  error: /*#__PURE__*/React__default.createElement(ErrorIcon, {
	    style: iconStyles
	  }),
	  info: /*#__PURE__*/React__default.createElement(InfoIcon, {
	    style: iconStyles
	  })
	};

	/**
	 * @link https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/createChainedFunction.js
	 */
	function createChainedFunction(funcs, extraArg) {
	  return funcs.reduce(function (acc, func) {
	    if (func == null) return acc;

	    {
	      if (typeof func !== 'function') {
	        // eslint-disable-next-line no-console
	        console.error('Invalid Argument Type. must only provide functions, undefined, or null.');
	      }
	    }

	    return function chainedFunction() {
	      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var argums = [].concat(args);

	      if (extraArg && argums.indexOf(extraArg) === -1) {
	        argums.push(extraArg);
	      }

	      acc.apply(this, argums);
	      func.apply(this, argums);
	    };
	  }, function () {});
	}

	/**
	 * @link https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/useEventCallback.js
	 */
	var useEnhancedEffect = typeof window !== 'undefined' ? React$Y.useLayoutEffect : React$Y.useEffect;
	function useEventCallback(fn) {
	  var ref = React$Y.useRef(fn);
	  useEnhancedEffect(function () {
	    ref.current = fn;
	  });
	  return React$Y.useCallback(function () {
	    return (ref.current).apply(void 0, arguments);
	  }, []);
	}

	var Snackbar$1 = /*#__PURE__*/React$Y.forwardRef(function (props, ref) {
	  var children = props.children,
	      autoHideDuration = props.autoHideDuration,
	      ClickAwayListenerProps = props.ClickAwayListenerProps,
	      _props$disableWindowB = props.disableWindowBlurListener,
	      disableWindowBlurListener = _props$disableWindowB === void 0 ? false : _props$disableWindowB,
	      onClose = props.onClose,
	      onMouseEnter = props.onMouseEnter,
	      onMouseLeave = props.onMouseLeave,
	      open = props.open,
	      resumeHideDuration = props.resumeHideDuration,
	      other = _objectWithoutPropertiesLoose(props, ["children", "autoHideDuration", "ClickAwayListenerProps", "disableWindowBlurListener", "onClose", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration"]);

	  var timerAutoHide = React$Y.useRef();
	  var handleClose = useEventCallback(function () {
	    if (onClose) {
	      onClose.apply(void 0, arguments);
	    }
	  });
	  var setAutoHideTimer = useEventCallback(function (autoHideDurationParam) {
	    if (!onClose || autoHideDurationParam == null) {
	      return;
	    }

	    clearTimeout(timerAutoHide.current);
	    timerAutoHide.current = setTimeout(function () {
	      handleClose(null, REASONS.TIMEOUT);
	    }, autoHideDurationParam);
	  });
	  React$Y.useEffect(function () {
	    if (open) {
	      setAutoHideTimer(autoHideDuration);
	    }

	    return function () {
	      clearTimeout(timerAutoHide.current);
	    };
	  }, [open, autoHideDuration, setAutoHideTimer]);
	  /**
	   * Pause the timer when the user is interacting with the Snackbar
	   * or when the user hide the window.
	   */

	  var handlePause = function handlePause() {
	    clearTimeout(timerAutoHide.current);
	  };
	  /**
	   * Restart the timer when the user is no longer interacting with the Snackbar
	   * or when the window is shown back.
	   */


	  var handleResume = React$Y.useCallback(function () {
	    if (autoHideDuration != null) {
	      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
	    }
	  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);

	  var handleMouseEnter = function handleMouseEnter(event) {
	    if (onMouseEnter) {
	      onMouseEnter(event);
	    }

	    handlePause();
	  };

	  var handleMouseLeave = function handleMouseLeave(event) {
	    if (onMouseLeave) {
	      onMouseLeave(event);
	    }

	    handleResume();
	  };

	  var handleClickAway = function handleClickAway(event) {
	    if (onClose) {
	      onClose(event, REASONS.CLICKAWAY);
	    }
	  };

	  React$Y.useEffect(function () {
	    if (!disableWindowBlurListener && open) {
	      window.addEventListener('focus', handleResume);
	      window.addEventListener('blur', handlePause);
	      return function () {
	        window.removeEventListener('focus', handleResume);
	        window.removeEventListener('blur', handlePause);
	      };
	    }

	    return undefined;
	  }, [disableWindowBlurListener, handleResume, open]);
	  return React$Y.createElement(ClickAwayListener, _extends({
	    onClickAway: handleClickAway
	  }, ClickAwayListenerProps), React$Y.createElement("div", _extends({
	    onMouseEnter: handleMouseEnter,
	    onMouseLeave: handleMouseLeave,
	    ref: ref
	  }, other), children));
	});

	var componentName$1 = 'SnackbarItem';
	var classes$1 = {
	  contentRoot: componentName$1 + "-contentRoot",
	  lessPadding: componentName$1 + "-lessPadding",
	  variantSuccess: componentName$1 + "-variantSuccess",
	  variantError: componentName$1 + "-variantError",
	  variantInfo: componentName$1 + "-variantInfo",
	  variantWarning: componentName$1 + "-variantWarning",
	  message: componentName$1 + "-message",
	  action: componentName$1 + "-action",
	  wrappedRoot: componentName$1 + "-wrappedRoot"
	};
	var StyledSnackbar = /*#__PURE__*/styles$3.styled(Snackbar$1)(function (_ref) {
	  var _ref2;

	  var theme = _ref.theme;
	  var mode = theme.palette.mode || theme.palette.type;
	  var backgroundColor = styles$3.emphasize(theme.palette.background["default"], mode === 'light' ? 0.8 : 0.98);
	  return _ref2 = {}, _ref2["&." + classes$1.wrappedRoot] = {
	    position: 'relative',
	    transform: 'translateX(0)',
	    top: 0,
	    right: 0,
	    bottom: 0,
	    left: 0
	  }, _ref2["." + classes$1.contentRoot] = _extends({}, theme.typography.body2, {
	    backgroundColor: backgroundColor,
	    color: theme.palette.getContrastText(backgroundColor),
	    alignItems: 'center',
	    padding: '6px 16px',
	    borderRadius: '4px',
	    boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)'
	  }), _ref2["." + classes$1.lessPadding] = {
	    paddingLeft: 8 * 2.5
	  }, _ref2["." + classes$1.variantSuccess] = {
	    backgroundColor: '#43a047',
	    color: '#fff'
	  }, _ref2["." + classes$1.variantError] = {
	    backgroundColor: '#d32f2f',
	    color: '#fff'
	  }, _ref2["." + classes$1.variantInfo] = {
	    backgroundColor: '#2196f3',
	    color: '#fff'
	  }, _ref2["." + classes$1.variantWarning] = {
	    backgroundColor: '#ff9800',
	    color: '#fff'
	  }, _ref2["." + classes$1.message] = {
	    display: 'flex',
	    alignItems: 'center',
	    padding: '8px 0'
	  }, _ref2["." + classes$1.action] = {
	    display: 'flex',
	    alignItems: 'center',
	    marginLeft: 'auto',
	    paddingLeft: 16,
	    marginRight: -8
	  }, _ref2;
	});

	var SnackbarItem = function SnackbarItem(_ref3) {
	  var propClasses = _ref3.classes,
	      props = _objectWithoutPropertiesLoose(_ref3, ["classes"]);

	  var timeout = React$Y.useRef();

	  var _useState = React$Y.useState(true),
	      collapsed = _useState[0],
	      setCollapsed = _useState[1];

	  React$Y.useEffect(function () {
	    return function () {
	      if (timeout.current) {
	        clearTimeout(timeout.current);
	      }
	    };
	  }, []);
	  var handleClose = createChainedFunction([props.snack.onClose, props.onClose], props.snack.key);

	  var handleEntered = function handleEntered() {
	    if (props.snack.requestClose) {
	      handleClose(null, REASONS.INSTRCUTED);
	    }
	  };

	  var handleExitedScreen = function handleExitedScreen() {
	    timeout.current = setTimeout(function () {
	      setCollapsed(!collapsed);
	    }, 125);
	  };

	  var style = props.style,
	      otherAriaAttributes = props.ariaAttributes,
	      otherClassName = props.className,
	      hideIconVariant = props.hideIconVariant,
	      iconVariant = props.iconVariant,
	      snack = props.snack,
	      otherAction = props.action,
	      otherContent = props.content,
	      otherTranComponent = props.TransitionComponent,
	      otherTranProps = props.TransitionProps,
	      otherTranDuration = props.transitionDuration,
	      other = _objectWithoutPropertiesLoose(props, ["style", "dense", "ariaAttributes", "className", "hideIconVariant", "iconVariant", "snack", "action", "content", "TransitionComponent", "TransitionProps", "transitionDuration", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting"]);

	  var key = snack.key,
	      open = snack.open,
	      singleClassName = snack.className,
	      variant = snack.variant,
	      singleContent = snack.content,
	      singleAction = snack.action,
	      singleAriaAttributes = snack.ariaAttributes,
	      anchorOrigin = snack.anchorOrigin,
	      snackMessage = snack.message,
	      singleTranComponent = snack.TransitionComponent,
	      singleTranProps = snack.TransitionProps,
	      singleTranDuration = snack.transitionDuration,
	      singleSnackProps = _objectWithoutPropertiesLoose(snack, ["persist", "key", "open", "entered", "requestClose", "className", "variant", "content", "action", "ariaAttributes", "anchorOrigin", "message", "TransitionComponent", "TransitionProps", "transitionDuration", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting"]);

	  var icon = _extends({}, defaultIconVariants, {}, iconVariant)[variant];

	  var ariaAttributes = _extends({
	    'aria-describedby': 'notistack-snackbar'
	  }, objectMerge(singleAriaAttributes, otherAriaAttributes));

	  var TransitionComponent = singleTranComponent || otherTranComponent || DEFAULTS.TransitionComponent;
	  var transitionDuration = objectMerge(singleTranDuration, otherTranDuration, DEFAULTS.transitionDuration);

	  var transitionProps = _extends({
	    direction: getTransitionDirection(anchorOrigin)
	  }, objectMerge(singleTranProps, otherTranProps));

	  var action = singleAction || otherAction;

	  if (typeof action === 'function') {
	    action = action(key);
	  }

	  var content = singleContent || otherContent;

	  if (typeof content === 'function') {
	    content = content(key, snack.message);
	  } // eslint-disable-next-line operator-linebreak


	  var callbacks = ['onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].reduce(function (acc, cbName) {
	    var _extends2;

	    return _extends({}, acc, (_extends2 = {}, _extends2[cbName] = createChainedFunction([props.snack[cbName], props[cbName]], props.snack.key), _extends2));
	  }, {});
	  return React__default.createElement(Collapse, {
	    unmountOnExit: true,
	    timeout: 175,
	    "in": collapsed,
	    onExited: callbacks.onExited
	  }, React__default.createElement(StyledSnackbar, Object.assign({}, other, singleSnackProps, {
	    open: open,
	    className: clsx(propClasses.root, classes$1.wrappedRoot, propClasses[transformer.toAnchorOrigin(anchorOrigin)]),
	    onClose: handleClose
	  }), React__default.createElement(TransitionComponent, Object.assign({
	    appear: true,
	    "in": open,
	    timeout: transitionDuration
	  }, transitionProps, {
	    onExit: callbacks.onExit,
	    onExiting: callbacks.onExiting,
	    onExited: handleExitedScreen,
	    onEnter: callbacks.onEnter,
	    onEntering: callbacks.onEntering,
	    // order matters. first callbacks.onEntered to set entered: true,
	    // then handleEntered to check if there's a request for closing
	    onEntered: createChainedFunction([callbacks.onEntered, handleEntered])
	  }), content || React__default.createElement(SnackbarContent, Object.assign({}, ariaAttributes, {
	    role: "alert",
	    style: style,
	    className: clsx(classes$1.contentRoot, classes$1[transformer.toVariant(variant)], propClasses[transformer.toVariant(variant)], otherClassName, singleClassName, !hideIconVariant && icon && classes$1.lessPadding)
	  }), React__default.createElement("div", {
	    id: ariaAttributes['aria-describedby'],
	    className: classes$1.message
	  }, !hideIconVariant ? icon : null, snackMessage), action && React__default.createElement("div", {
	    className: classes$1.action
	  }, action)))));
	};

	var collapse = {
	  // Material-UI 4.12.x and above uses MuiCollapse-root; earlier versions use
	  // Mui-Collapse-container.  https://github.com/mui-org/material-ui/pull/24084
	  container: '& > .MuiCollapse-container, & > .MuiCollapse-root',
	  wrapper: '& > .MuiCollapse-container > .MuiCollapse-wrapper, & > .MuiCollapse-root > .MuiCollapse-wrapper'
	};
	var xsWidthMargin = 16;
	var componentName$2 = 'SnackbarContainer';
	var classes$2 = {
	  root: componentName$2 + "-root",
	  rootDense: componentName$2 + "-rootDense",
	  top: componentName$2 + "-top",
	  bottom: componentName$2 + "-bottom",
	  left: componentName$2 + "-left",
	  right: componentName$2 + "-right",
	  center: componentName$2 + "-center"
	};
	var Root$1 = /*#__PURE__*/styles$3.styled('div')(function (_ref) {
	  var _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;

	  var theme = _ref.theme;
	  return _ref7 = {}, _ref7["&." + classes$2.root] = (_ref2 = {
	    boxSizing: 'border-box',
	    display: 'flex',
	    maxHeight: '100%',
	    position: 'fixed',
	    zIndex: theme.zIndex.snackbar,
	    height: 'auto',
	    width: 'auto',
	    transition: 'top 300ms ease 0ms, right 300ms ease 0ms, bottom 300ms ease 0ms, left 300ms ease 0ms, margin 300ms ease 0ms, max-width 300ms ease 0ms',
	    // container itself is invisible and should not block clicks, clicks should be passed to its children
	    pointerEvents: 'none'
	  }, _ref2[collapse.container] = {
	    pointerEvents: 'all'
	  }, _ref2[collapse.wrapper] = {
	    padding: SNACKBAR_INDENTS.snackbar["default"] + "px 0px",
	    transition: 'padding 300ms ease 0ms'
	  }, _ref2.maxWidth = "calc(100% - " + SNACKBAR_INDENTS.view["default"] * 2 + "px)", _ref2[theme.breakpoints.down('sm')] = {
	    width: '100%',
	    maxWidth: "calc(100% - " + xsWidthMargin * 2 + "px)"
	  }, _ref2), _ref7["&." + classes$2.rootDense] = (_ref3 = {}, _ref3[collapse.wrapper] = {
	    padding: SNACKBAR_INDENTS.snackbar.dense + "px 0px"
	  }, _ref3), _ref7["&." + classes$2.top] = {
	    top: SNACKBAR_INDENTS.view["default"] - SNACKBAR_INDENTS.snackbar["default"],
	    flexDirection: 'column'
	  }, _ref7["&." + classes$2.bottom] = {
	    bottom: SNACKBAR_INDENTS.view["default"] - SNACKBAR_INDENTS.snackbar["default"],
	    flexDirection: 'column-reverse'
	  }, _ref7["&." + classes$2.left] = (_ref4 = {
	    left: SNACKBAR_INDENTS.view["default"]
	  }, _ref4[theme.breakpoints.up('sm')] = {
	    alignItems: 'flex-start'
	  }, _ref4[theme.breakpoints.down('sm')] = {
	    left: xsWidthMargin + "px"
	  }, _ref4), _ref7["&." + classes$2.right] = (_ref5 = {
	    right: SNACKBAR_INDENTS.view["default"]
	  }, _ref5[theme.breakpoints.up('sm')] = {
	    alignItems: 'flex-end'
	  }, _ref5[theme.breakpoints.down('sm')] = {
	    right: xsWidthMargin + "px"
	  }, _ref5), _ref7["&." + classes$2.center] = (_ref6 = {
	    left: '50%',
	    transform: 'translateX(-50%)'
	  }, _ref6[theme.breakpoints.up('sm')] = {
	    alignItems: 'center'
	  }, _ref6), _ref7;
	});

	var SnackbarContainer = function SnackbarContainer(props) {
	  var className = props.className,
	      anchorOrigin = props.anchorOrigin,
	      dense = props.dense,
	      other = _objectWithoutPropertiesLoose(props, ["className", "anchorOrigin", "dense"]);

	  var combinedClassname = clsx(classes$2[anchorOrigin.vertical], classes$2[anchorOrigin.horizontal], classes$2.root, // root should come after others to override maxWidth
	  className, dense && classes$2.rootDense);
	  return React__default.createElement(Root$1, Object.assign({
	    className: combinedClassname
	  }, other));
	};

	var SnackbarContainer$1 = /*#__PURE__*/React__default.memo(SnackbarContainer);

	/* eslint-disable */

	var warning$1 = (function (message) {

	  if (typeof console !== 'undefined') {
	    console.error(message);
	  }

	  try {
	    throw new Error(message);
	  } catch (x) {}
	});

	var SnackbarProvider = /*#__PURE__*/function (_Component) {
	  _inheritsLoose(SnackbarProvider, _Component);

	  function SnackbarProvider(props) {
	    var _this;

	    _this = _Component.call(this, props) || this;
	    /**
	     * Adds a new snackbar to the queue to be presented.
	     * Returns generated or user defined key referencing the new snackbar or null
	     */

	    _this.enqueueSnackbar = function (message, opts) {
	      if (opts === void 0) {
	        opts = {};
	      }

	      var _opts = opts,
	          key = _opts.key,
	          preventDuplicate = _opts.preventDuplicate,
	          options = _objectWithoutPropertiesLoose(_opts, ["key", "preventDuplicate"]);

	      var hasSpecifiedKey = isDefined(key);
	      var id = hasSpecifiedKey ? key : new Date().getTime() + Math.random();
	      var merger = merge$1(options, _this.props, DEFAULTS);

	      var snack = _extends({
	        key: id
	      }, options, {
	        message: message,
	        open: true,
	        entered: false,
	        requestClose: false,
	        variant: merger('variant'),
	        anchorOrigin: merger('anchorOrigin'),
	        autoHideDuration: merger('autoHideDuration')
	      });

	      if (options.persist) {
	        snack.autoHideDuration = undefined;
	      }

	      _this.setState(function (state) {
	        if (preventDuplicate === undefined && _this.props.preventDuplicate || preventDuplicate) {
	          var compareFunction = function compareFunction(item) {
	            return hasSpecifiedKey ? item.key === key : item.message === message;
	          };

	          var inQueue = state.queue.findIndex(compareFunction) > -1;
	          var inView = state.snacks.findIndex(compareFunction) > -1;

	          if (inQueue || inView) {
	            return state;
	          }
	        }

	        return _this.handleDisplaySnack(_extends({}, state, {
	          queue: [].concat(state.queue, [snack])
	        }));
	      });

	      return id;
	    };
	    /**
	     * Reducer: Display snack if there's space for it. Otherwise, immediately
	     * begin dismissing the oldest message to start showing the new one.
	     */


	    _this.handleDisplaySnack = function (state) {
	      var snacks = state.snacks;

	      if (snacks.length >= _this.maxSnack) {
	        return _this.handleDismissOldest(state);
	      }

	      return _this.processQueue(state);
	    };
	    /**
	     * Reducer: Display items (notifications) in the queue if there's space for them.
	     */


	    _this.processQueue = function (state) {
	      var queue = state.queue,
	          snacks = state.snacks;

	      if (queue.length > 0) {
	        return _extends({}, state, {
	          snacks: [].concat(snacks, [queue[0]]),
	          queue: queue.slice(1, queue.length)
	        });
	      }

	      return state;
	    };
	    /**
	     * Reducer: Hide oldest snackbar on the screen because there exists a new one which we have to display.
	     * (ignoring the one with 'persist' flag. i.e. explicitly told by user not to get dismissed).
	     *
	     * Note 1: If there is already a message leaving the screen, no new messages are dismissed.
	     * Note 2: If the oldest message has not yet entered the screen, only a request to close the
	     *         snackbar is made. Once it entered the screen, it will be immediately dismissed.
	     */


	    _this.handleDismissOldest = function (state) {
	      if (state.snacks.some(function (item) {
	        return !item.open || item.requestClose;
	      })) {
	        return state;
	      }

	      var popped = false;
	      var ignore = false;
	      var persistentCount = state.snacks.reduce(function (acc, current) {
	        return acc + (current.open && current.persist ? 1 : 0);
	      }, 0);

	      if (persistentCount === _this.maxSnack) {
	         warning$1(MESSAGES.NO_PERSIST_ALL) ;
	        ignore = true;
	      }

	      var snacks = state.snacks.map(function (item) {
	        if (!popped && (!item.persist || ignore)) {
	          popped = true;

	          if (!item.entered) {
	            return _extends({}, item, {
	              requestClose: true
	            });
	          }

	          if (item.onClose) item.onClose(null, REASONS.MAXSNACK, item.key);
	          if (_this.props.onClose) _this.props.onClose(null, REASONS.MAXSNACK, item.key);
	          return _extends({}, item, {
	            open: false
	          });
	        }

	        return _extends({}, item);
	      });
	      return _extends({}, state, {
	        snacks: snacks
	      });
	    };
	    /**
	     * Set the entered state of the snackbar with the given key.
	     */


	    _this.handleEnteredSnack = function (node, isAppearing, key) {
	      if (!isDefined(key)) {
	        throw new Error('handleEnteredSnack Cannot be called with undefined key');
	      }

	      _this.setState(function (_ref) {
	        var snacks = _ref.snacks;
	        return {
	          snacks: snacks.map(function (item) {
	            return item.key === key ? _extends({}, item, {
	              entered: true
	            }) : _extends({}, item);
	          })
	        };
	      });
	    };
	    /**
	     * Hide a snackbar after its timeout.
	     */


	    _this.handleCloseSnack = function (event, reason, key) {
	      // should not use createChainedFunction for onClose.
	      // because this.closeSnackbar called this function
	      if (_this.props.onClose) {
	        _this.props.onClose(event, reason, key);
	      }

	      if (reason === REASONS.CLICKAWAY) return;
	      var shouldCloseAll = key === undefined;

	      _this.setState(function (_ref2) {
	        var snacks = _ref2.snacks,
	            queue = _ref2.queue;
	        return {
	          snacks: snacks.map(function (item) {
	            if (!shouldCloseAll && item.key !== key) {
	              return _extends({}, item);
	            }

	            return item.entered ? _extends({}, item, {
	              open: false
	            }) : _extends({}, item, {
	              requestClose: true
	            });
	          }),
	          queue: queue.filter(function (item) {
	            return item.key !== key;
	          })
	        };
	      });
	    };
	    /**
	     * Close snackbar with the given key
	     */


	    _this.closeSnackbar = function (key) {
	      // call individual snackbar onClose callback passed through options parameter
	      var toBeClosed = _this.state.snacks.find(function (item) {
	        return item.key === key;
	      });

	      if (isDefined(key) && toBeClosed && toBeClosed.onClose) {
	        toBeClosed.onClose(null, REASONS.INSTRUCTED, key);
	      }

	      _this.handleCloseSnack(null, REASONS.INSTRUCTED, key);
	    };
	    /**
	     * When we set open attribute of a snackbar to false (i.e. after we hide a snackbar),
	     * it leaves the screen and immediately after leaving animation is done, this method
	     * gets called. We remove the hidden snackbar from state and then display notifications
	     * waiting in the queue (if any). If after this process the queue is not empty, the
	     * oldest message is dismissed.
	     */
	    // @ts-ignore


	    _this.handleExitedSnack = function (event, key1, key2) {
	      var key = key1 || key2;

	      if (!isDefined(key)) {
	        throw new Error('handleExitedSnack Cannot be called with undefined key');
	      }

	      _this.setState(function (state) {
	        var newState = _this.processQueue(_extends({}, state, {
	          snacks: state.snacks.filter(function (item) {
	            return item.key !== key;
	          })
	        }));

	        if (newState.queue.length === 0) {
	          return newState;
	        }

	        return _this.handleDismissOldest(newState);
	      });
	    };

	    _this.state = {
	      snacks: [],
	      queue: [],
	      contextValue: {
	        enqueueSnackbar: _this.enqueueSnackbar.bind(_assertThisInitialized(_this)),
	        closeSnackbar: _this.closeSnackbar.bind(_assertThisInitialized(_this))
	      }
	    };
	    return _this;
	  }

	  var _proto = SnackbarProvider.prototype;

	  _proto.render = function render() {
	    var _this2 = this;

	    var contextValue = this.state.contextValue;

	    var _this$props = this.props,
	        iconVariant = _this$props.iconVariant,
	        _this$props$dense = _this$props.dense,
	        dense = _this$props$dense === void 0 ? DEFAULTS.dense : _this$props$dense,
	        _this$props$hideIconV = _this$props.hideIconVariant,
	        hideIconVariant = _this$props$hideIconV === void 0 ? DEFAULTS.hideIconVariant : _this$props$hideIconV,
	        domRoot = _this$props.domRoot,
	        children = _this$props.children,
	        _this$props$classes = _this$props.classes,
	        classes = _this$props$classes === void 0 ? {} : _this$props$classes,
	        props = _objectWithoutPropertiesLoose(_this$props, ["maxSnack", "preventDuplicate", "variant", "anchorOrigin", "iconVariant", "dense", "hideIconVariant", "domRoot", "children", "classes"]);

	    var categ = this.state.snacks.reduce(function (acc, current) {
	      var _extends2;

	      var category = originKeyExtractor(current.anchorOrigin);
	      var existingOfCategory = acc[category] || [];
	      return _extends({}, acc, (_extends2 = {}, _extends2[category] = [].concat(existingOfCategory, [current]), _extends2));
	    }, {});
	    var snackbars = Object.keys(categ).map(function (origin) {
	      var snacks = categ[origin];
	      return React__default.createElement(SnackbarContainer$1, {
	        key: origin,
	        dense: dense,
	        anchorOrigin: snacks[0].anchorOrigin,
	        className: clsx(classes.containerRoot, classes[transformer.toContainerAnchorOrigin(origin)])
	      }, snacks.map(function (snack) {
	        return React__default.createElement(SnackbarItem, Object.assign({}, props, {
	          key: snack.key,
	          snack: snack,
	          dense: dense,
	          iconVariant: iconVariant,
	          hideIconVariant: hideIconVariant,
	          classes: omitContainerKeys(classes),
	          onClose: _this2.handleCloseSnack,
	          onExited: createChainedFunction([_this2.handleExitedSnack, _this2.props.onExited]),
	          onEntered: createChainedFunction([_this2.handleEnteredSnack, _this2.props.onEntered])
	        }));
	      }));
	    });
	    return React__default.createElement(SnackbarContext.Provider, {
	      value: contextValue
	    }, children, domRoot ? reactDom.createPortal(snackbars, domRoot) : snackbars);
	  };

	  _createClass(SnackbarProvider, [{
	    key: "maxSnack",
	    get: function get() {
	      return this.props.maxSnack || DEFAULTS.maxSnack;
	    }
	  }]);

	  return SnackbarProvider;
	}(React$Y.Component);

	// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
	var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;

	var getFunctionName$1 = function getFunctionName(fn) {
	  var match = ("" + fn).match(fnNameMatchRegex);
	  var name = match && match[1];
	  return name || '';
	};
	/**
	 * @param {function} Component
	 * @param {string} fallback
	 * @returns {string | undefined}
	 */


	var getFunctionComponentName = function getFunctionComponentName(Component, fallback) {
	  if (fallback === void 0) {
	    fallback = '';
	  }

	  return Component.displayName || Component.name || getFunctionName$1(Component) || fallback;
	};

	var getWrappedName = function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = getFunctionComponentName(innerType);
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	};
	/** 
	 * From react-is
	 * @link https://github.com/facebook/react/blob/master/packages/shared/ReactSymbols.js
	 */


	var ForwardRef = function ForwardRef() {
	  var symbolFor = typeof Symbol === 'function' && Symbol["for"];
	  return symbolFor ? symbolFor('react.forward_ref') : 0xead0;
	};
	/**
	 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
	 *
	 * @param {React.ReactType} Component
	 * @returns {string | undefined}
	 */


	var getDisplayName = (function (Component) {
	  if (Component == null) {
	    return undefined;
	  }

	  if (typeof Component === 'string') {
	    return Component;
	  }

	  if (typeof Component === 'function') {
	    return getFunctionComponentName(Component, 'Component');
	  }

	  if (typeof Component === 'object') {
	    switch (Component.$$typeof) {
	      case ForwardRef():
	        return getWrappedName(Component, Component.render, 'ForwardRef');

	      default:
	        return undefined;
	    }
	  }

	  return undefined;
	});

	var withSnackbar = function withSnackbar(Component) {
	  var WrappedComponent = React__default.forwardRef(function (props, ref) {
	    return React__default.createElement(SnackbarContext.Consumer, null, function (context) {
	      return React__default.createElement(Component, _extends({}, props, {
	        ref: ref,
	        enqueueSnackbar: context.enqueueSnackbar,
	        closeSnackbar: context.closeSnackbar
	      }));
	    });
	  });

	  {
	    WrappedComponent.displayName = "WithSnackbar(" + getDisplayName(Component) + ")";
	  }

	  hoistNonReactStatics(WrappedComponent, Component);
	  return WrappedComponent;
	};

	var useSnackbar = (function () {
	  return React$Y.useContext(SnackbarContext);
	});

	notistack_cjs_development.SnackbarContent = SnackbarContent;
	notistack_cjs_development.SnackbarProvider = SnackbarProvider;
	notistack_cjs_development.useSnackbar = useSnackbar;
	notistack_cjs_development.withSnackbar = withSnackbar;

	{
	  dist$8.exports = notistack_cjs_development;
	}

	var redux$1 = {};

	var objectSpread2 = {exports: {}};

	var defineProperty = {exports: {}};

	(function (module) {
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }

		  return obj;
		}

		module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (defineProperty));

	(function (module) {
		var defineProperty$1 = defineProperty.exports;

		function ownKeys(object, enumerableOnly) {
		  var keys = Object.keys(object);

		  if (Object.getOwnPropertySymbols) {
		    var symbols = Object.getOwnPropertySymbols(object);
		    enumerableOnly && (symbols = symbols.filter(function (sym) {
		      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
		    })), keys.push.apply(keys, symbols);
		  }

		  return keys;
		}

		function _objectSpread2(target) {
		  for (var i = 1; i < arguments.length; i++) {
		    var source = null != arguments[i] ? arguments[i] : {};
		    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
		      defineProperty$1(target, key, source[key]);
		    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
		      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
		    });
		  }

		  return target;
		}

		module.exports = _objectSpread2, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (objectSpread2));

	Object.defineProperty(redux$1, '__esModule', { value: true });

	var _objectSpread = objectSpread2.exports;

	function _interopDefaultLegacy$1 (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy$1(_objectSpread);

	// Inlined version of the `symbol-observable` polyfill
	var $$observable = (function () {
	  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
	})();

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var randomString = function randomString() {
	  return Math.random().toString(36).substring(7).split('').join('.');
	};

	var ActionTypes = {
	  INIT: "@@redux/INIT" + randomString(),
	  REPLACE: "@@redux/REPLACE" + randomString(),
	  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
	    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
	  }
	};

	/**
	 * @param {any} obj The object to inspect.
	 * @returns {boolean} True if the argument appears to be a plain object.
	 */
	function isPlainObject$2(obj) {
	  if (typeof obj !== 'object' || obj === null) return false;
	  var proto = obj;

	  while (Object.getPrototypeOf(proto) !== null) {
	    proto = Object.getPrototypeOf(proto);
	  }

	  return Object.getPrototypeOf(obj) === proto;
	}

	// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of
	function miniKindOf(val) {
	  if (val === void 0) return 'undefined';
	  if (val === null) return 'null';
	  var type = typeof val;

	  switch (type) {
	    case 'boolean':
	    case 'string':
	    case 'number':
	    case 'symbol':
	    case 'function':
	      {
	        return type;
	      }
	  }

	  if (Array.isArray(val)) return 'array';
	  if (isDate$1(val)) return 'date';
	  if (isError$1(val)) return 'error';
	  var constructorName = ctorName(val);

	  switch (constructorName) {
	    case 'Symbol':
	    case 'Promise':
	    case 'WeakMap':
	    case 'WeakSet':
	    case 'Map':
	    case 'Set':
	      return constructorName;
	  } // other


	  return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
	}

	function ctorName(val) {
	  return typeof val.constructor === 'function' ? val.constructor.name : null;
	}

	function isError$1(val) {
	  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';
	}

	function isDate$1(val) {
	  if (val instanceof Date) return true;
	  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';
	}

	function kindOf(val) {
	  var typeOfVal = typeof val;

	  {
	    typeOfVal = miniKindOf(val);
	  }

	  return typeOfVal;
	}

	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [preloadedState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */

	function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;

	  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
	    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');
	  }

	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error("Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
	    }

	    return enhancer(createStore)(reducer, preloadedState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error("Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
	  }

	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;
	  /**
	   * This makes a shallow copy of currentListeners so we can use
	   * nextListeners as a temporary list while dispatching.
	   *
	   * This prevents any bugs around consumers calling
	   * subscribe/unsubscribe in the middle of a dispatch.
	   */

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }
	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */


	  function getState() {
	    if (isDispatching) {
	      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
	    }

	    return currentState;
	  }
	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */


	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error("Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
	    }

	    if (isDispatching) {
	      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
	    }

	    var isSubscribed = true;
	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);
	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      if (isDispatching) {
	        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
	      }

	      isSubscribed = false;
	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	      currentListeners = null;
	    };
	  }
	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */


	  function dispatch(action) {
	    if (!isPlainObject$2(action)) {
	      throw new Error("Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;

	    for (var i = 0; i < listeners.length; i++) {
	      var listener = listeners[i];
	      listener();
	    }

	    return action;
	  }
	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */


	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error("Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
	    }

	    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
	    // Any reducers that existed in both the new and old rootReducer
	    // will receive the previous state. This effectively populates
	    // the new state tree with any relevant data from the old one.

	    dispatch({
	      type: ActionTypes.REPLACE
	    });
	  }
	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/tc39/proposal-observable
	   */


	  function observable() {
	    var _ref;

	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object' || observer === null) {
	          throw new Error("Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
	        }

	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }

	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return {
	          unsubscribe: unsubscribe
	        };
	      }
	    }, _ref[$$observable] = function () {
	      return this;
	    }, _ref;
	  } // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.


	  dispatch({
	    type: ActionTypes.INIT
	  });
	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[$$observable] = observable, _ref2;
	}

	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */


	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	  } catch (e) {} // eslint-disable-line no-empty

	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!isPlainObject$2(inputState)) {
	    return "The " + argumentName + " has unexpected type of \"" + kindOf(inputState) + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });
	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });
	  if (action && action.type === ActionTypes.REPLACE) return;

	  if (unexpectedKeys.length > 0) {
	    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
	  }
	}

	function assertReducerShape(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, {
	      type: ActionTypes.INIT
	    });

	    if (typeof initialState === 'undefined') {
	      throw new Error("The slice reducer for key \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
	    }

	    if (typeof reducer(undefined, {
	      type: ActionTypes.PROBE_UNKNOWN_ACTION()
	    }) === 'undefined') {
	      throw new Error("The slice reducer for key \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle '" + ActionTypes.INIT + "' or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
	    }
	  });
	}
	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */


	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};

	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];

	    {
	      if (typeof reducers[key] === 'undefined') {
	        warning("No reducer provided for key \"" + key + "\"");
	      }
	    }

	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }

	  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
	  // keys multiple times.

	  var unexpectedKeyCache;

	  {
	    unexpectedKeyCache = {};
	  }

	  var shapeAssertionError;

	  try {
	    assertReducerShape(finalReducers);
	  } catch (e) {
	    shapeAssertionError = e;
	  }

	  return function combination(state, action) {
	    if (state === void 0) {
	      state = {};
	    }

	    if (shapeAssertionError) {
	      throw shapeAssertionError;
	    }

	    {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

	      if (warningMessage) {
	        warning(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};

	    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
	      var _key = finalReducerKeys[_i];
	      var reducer = finalReducers[_key];
	      var previousStateForKey = state[_key];
	      var nextStateForKey = reducer(previousStateForKey, action);

	      if (typeof nextStateForKey === 'undefined') {
	        var actionType = action && action.type;
	        throw new Error("When called with an action of type " + (actionType ? "\"" + String(actionType) + "\"" : '(unknown type)') + ", the slice reducer for key \"" + _key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.");
	      }

	      nextState[_key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }

	    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
	    return hasChanged ? nextState : state;
	  };
	}

	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(this, arguments));
	  };
	}
	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass an action creator as the first argument,
	 * and get a dispatch wrapped function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */


	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error("bindActionCreators expected an object or a function, but instead received: '" + kindOf(actionCreators) + "'. " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
	  }

	  var boundActionCreators = {};

	  for (var key in actionCreators) {
	    var actionCreator = actionCreators[key];

	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }

	  return boundActionCreators;
	}

	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */
	function compose() {
	  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(void 0, arguments));
	    };
	  });
	}

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */

	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function () {
	      var store = createStore.apply(void 0, arguments);

	      var _dispatch = function dispatch() {
	        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');
	      };

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch() {
	          return _dispatch.apply(void 0, arguments);
	        }
	      };
	      var chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = compose.apply(void 0, chain)(store.dispatch);
	      return _objectSpread__default['default'](_objectSpread__default['default']({}, store), {}, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

	/*
	 * This is a dummy function to check if the function name has been altered by minification.
	 * If the function has been minified and NODE_ENV !== 'production', warn the user.
	 */

	function isCrushed() {}

	if (typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
	}

	redux$1.__DO_NOT_USE__ActionTypes = ActionTypes;
	redux$1.applyMiddleware = applyMiddleware;
	redux$1.bindActionCreators = bindActionCreators;
	var combineReducers_1 = redux$1.combineReducers = combineReducers;
	redux$1.compose = compose;
	var createStore_1 = redux$1.createStore = createStore;

	const ENQUEUE_SNACKBAR = 'ENQUEUE_SNACKBAR';
	const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';
	const REMOVE_SNACKBAR = 'REMOVE_SNACKBAR';
	const enqueueSnackbar = notification => {
	  const key = notification.options && notification.options.key;
	  return {
	    type: ENQUEUE_SNACKBAR,
	    notification: { ...notification,
	      key: key || new Date().getTime() + Math.random()
	    }
	  };
	};
	const removeSnackbar = key => ({
	  type: REMOVE_SNACKBAR,
	  key
	});

	const defaultState$2 = {
	  notifications: []
	};
	var snackbar = ((state = defaultState$2, action) => {
	  switch (action.type) {
	    case ENQUEUE_SNACKBAR:
	      return { ...state,
	        notifications: [...state.notifications, {
	          key: action.key,
	          ...action.notification
	        }]
	      };

	    case CLOSE_SNACKBAR:
	      return { ...state,
	        notifications: state.notifications.map(notification => action.dismissAll || notification.key === action.key ? { ...notification,
	          dismissed: true
	        } : { ...notification
	        })
	      };

	    case REMOVE_SNACKBAR:
	      return { ...state,
	        notifications: state.notifications.filter(notification => notification.key !== action.key)
	      };

	    default:
	      return state;
	  }
	});

	const OPEN_DIALOG = 'OPEN_DIALOG';
	const CLOSE_DIALOG = 'CLOSE_DIALOG';
	const openDialog = options => ({
	  type: OPEN_DIALOG,
	  options
	});
	const closeDialog = () => ({
	  type: CLOSE_DIALOG
	});

	const defaultState$1 = {
	  open: false
	};
	var dialog$1 = ((state = defaultState$1, action) => {
	  switch (action.type) {
	    case OPEN_DIALOG:
	      return { ...action.options,
	        open: true
	      };

	    case CLOSE_DIALOG:
	      return defaultState$1;

	    default:
	      return state;
	  }
	});

	const SET_PREMIUM = 'SET_PREMIUM';
	const SET_ANNOUNCEMENTS = 'SET_ANNOUNCEMENT';
	const setPremium = premium => ({
	  type: SET_PREMIUM,
	  premium
	});
	const setAnnouncement = announcements => ({
	  type: SET_ANNOUNCEMENTS,
	  announcements
	});

	const defaultState = {
	  announcements: [],
	  premium: {
	    enabled: false
	  }
	};
	var remoteConfig = ((state = defaultState, action) => {
	  switch (action.type) {
	    case SET_PREMIUM:
	      return { ...state,
	        premium: action.premium
	      };

	    case SET_ANNOUNCEMENTS:
	      return { ...state,
	        announcements: action.announcements
	      };

	    default:
	      return state;
	  }
	});

	var store = createStore_1(combineReducers_1({
	  snackbar,
	  dialog: dialog$1,
	  remoteConfig
	}));

	const message = {
	  title: 'QuillBot Premium Crack: \r',
	  loginGuide: {
	    content: 'Everything is ready except login.\rDo you want to log in now?',
	    yes: 'Go to login now!',
	    no: 'Later'
	  },
	  sessionExpired: {
	    content: 'Session expired, you need to log in again\rDo you want to log in again now?',
	    yes: 'Go to login again now!',
	    no: 'Later'
	  },
	  error: {
	    logOut: 'Automatic log out failed, please click right top nav to log out manually'
	  },
	  hookPremium: {
	    disabled: 'Premium Hook is disabled, click setting icon (Right Top Nav) to enable it (Refresh to see the effect)'
	  },
	  hookPremiumToken: {
	    loaded: 'Premium features are available now!',
	    success: 'QuillBot Premuim Crack had just help you access premium features!',
	    disabled: 'Premium features hooks is disabled, click setting icon (Right Top Nav) to enable it',
	    unavailable: 'Premium features are unavailable now, please contact me at Telegram to update new token'
	  },
	  announcement: {
	    list: {
	      title: 'Announcements'
	    },
	    ignoredList: {
	      title: 'Ignored'
	    },
	    ignore: 'Ignore',
	    close: 'Close'
	  },
	  request: {
	    error: 'Can not get request data: '
	  },
	  verify: {
	    title: 'Quillbot Premium Crack need to verify that you\'re human',
	    guide: '<p>Please input the verification code from Telegram Group <strong>(valid for a week)</strong></p><p>Or move the slider to the given number (valid for 2 hours)<p/><p>The reason of verification is in Telegram Group<p/>',
	    sliderTo: 'Move The Slider To Number: ',
	    telegramBtn: 'Join Telegram Group',
	    input: 'Verification Code (Recommended: once unlock, free for a week)',
	    pass: 'Congratulations! You\'re human!'
	  },
	  panel: {
	    title: 'QuillBot Premium Crack',
	    setting: {
	      title: 'Setting'
	    },
	    about: {
	      title: 'About'
	    },
	    close: 'OK!'
	  },
	  star: 'Give a '
	};

	var Support = g(function () {
	  const SupportText = styles$4.styled('span')({
	    fontSize: 'large',
	    marginRight: '12px'
	  });
	  const GitHubBtn = styles$4.styled('iframe')({
	    border: 'none',
	    overflow: 'hidden',
	    width: '130px',
	    height: '30px'
	  });
	  return v$1(d$1, null, v$1(SupportText, null, message.star), v$1(GitHubBtn, {
	    src: "https://ghbtns.com/github-btn.html?user=blueagler&repo=QuillBot-Premium-Crack&type=star&count=true&size=large"
	  }));
	});

	var useLocalStorageState$2 = {};

	var useLocalStorageState$1 = {};

	var useLocalStorageStateBase$1 = {};

	var storage = {};

	Object.defineProperty(storage, "__esModule", { value: true });
	/**
	 * Abstraction for localStorage that uses an in-memory fallback when localStorage throws an error.
	 * Reasons for throwing an error:
	 * - maximum quota is exceeded
	 * - under Mobile Safari (since iOS 5) when the user enters private mode `localStorage.setItem()`
	 *   will throw
	 * - trying to access localStorage object when cookies are disabled in Safari throws
	 *   "SecurityError: The operation is insecure."
	 */
	const data$1 = {};
	storage.default = {
	    get(key, defaultValue) {
	        var _a;
	        try {
	            return (_a = data$1[key]) !== null && _a !== void 0 ? _a : parseJSON(localStorage.getItem(key));
	        }
	        catch (_b) {
	            return defaultValue;
	        }
	    },
	    set(key, value) {
	        try {
	            localStorage.setItem(key, JSON.stringify(value));
	            data$1[key] = undefined;
	            return true;
	        }
	        catch (_a) {
	            data$1[key] = value;
	            return false;
	        }
	    },
	    remove(key) {
	        data$1[key] = undefined;
	        localStorage.removeItem(key);
	    },
	};
	/**
	 * A wrapper for `JSON.parse()` which supports the return value of `JSON.stringify(undefined)`
	 * which returns the string `"undefined"` and this method returns the value `undefined`.
	 */
	function parseJSON(value) {
	    return value === 'undefined'
	        ? undefined
	        : // JSON.parse() doesn't accept non-string values, this is why we pass empty
	            // string which will throw an error which can be handled
	            JSON.parse(value !== null && value !== void 0 ? value : '');
	}

	Object.defineProperty(useLocalStorageStateBase$1, "__esModule", { value: true });
	const storage_1 = storage;
	const react_1$2 = require$$3;
	function useLocalStorageStateBase(key, defaultValue) {
	    const defaultValueForKey = (0, react_1$2.useMemo)(() => {
	        const isCallable = (value) => typeof value === 'function';
	        return isCallable(defaultValue) ? defaultValue() : defaultValue;
	        // disabling "exhaustive-deps" because we don't want to change the default state when the
	        // `defaultValue` is changed
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [key]);
	    const defaultState = (0, react_1$2.useMemo)(() => {
	        return {
	            value: storage_1.default.get(key, defaultValueForKey),
	            isPersistent: (() => {
	                /**
	                 * We want to return `true` on the server. If you render a message based on
	                 * `isPersistent` and the server returns `false` then the message will flicker until
	                 * hydration is done:
	                 * `{!isPersistent && <span>You changes aren't being persisted.</span>}`
	                 */
	                if (typeof window === 'undefined') {
	                    return true;
	                }
	                try {
	                    // - ulss = use-local-storage-state
	                    // - using shorthand to make library smaller in size
	                    localStorage.setItem('__ulss', '#');
	                    localStorage.removeItem('__ulss');
	                    return true;
	                }
	                catch (_a) {
	                    return false;
	                }
	            })(),
	        };
	    }, [key, defaultValueForKey]);
	    const [{ value, isPersistent }, setState] = (0, react_1$2.useState)(defaultState);
	    const updateValue = (0, react_1$2.useMemo)(() => {
	        return (newValue) => {
	            const isCallable = (value) => typeof value === 'function';
	            if (isCallable(newValue)) {
	                setState((state) => ({
	                    value: newValue(state.value),
	                    isPersistent: storage_1.default.set(key, newValue(state.value)),
	                }));
	            }
	            else {
	                setState({
	                    value: newValue,
	                    isPersistent: storage_1.default.set(key, newValue),
	                });
	            }
	        };
	    }, [key]);
	    // syncs changes across tabs and iframe's
	    (0, react_1$2.useEffect)(() => {
	        const onStorage = (e) => {
	            if (e.storageArea === localStorage && e.key === key) {
	                setState({
	                    value: storage_1.default.get(key, defaultValueForKey),
	                    isPersistent: true,
	                });
	            }
	        };
	        window.addEventListener('storage', onStorage);
	        return () => window.removeEventListener('storage', onStorage);
	    }, [key, defaultValueForKey]);
	    const isFirstRender = (0, react_1$2.useRef)(true);
	    (0, react_1$2.useEffect)(() => {
	        // https://github.com/astoilkov/use-local-storage-state/issues/30
	        if (isFirstRender.current && defaultState.value === undefined) {
	            return;
	        }
	        // https://github.com/astoilkov/use-local-storage-state/issues/33
	        if (localStorage.getItem(key) === null) {
	            // set the `defaultValue` in the localStorage on initial render:
	            // https://github.com/astoilkov/use-local-storage-state/issues/26
	            storage_1.default.set(key, defaultState.value);
	        }
	        if (isFirstRender.current) {
	            isFirstRender.current = false;
	            return;
	        }
	        // update the state when the `key` property changes (not on first render because this will
	        // cause a second unnecessary render)
	        setState(defaultState);
	    }, [key, defaultState]);
	    return (0, react_1$2.useMemo)(() => [
	        value,
	        updateValue,
	        {
	            isPersistent,
	            removeItem() {
	                storage_1.default.remove(key);
	                setState((state) => ({
	                    value: defaultValueForKey,
	                    isPersistent: state.isPersistent,
	                }));
	            },
	        },
	    ], [value, updateValue, isPersistent, key, defaultValueForKey]);
	}
	useLocalStorageStateBase$1.default = useLocalStorageStateBase;

	Object.defineProperty(useLocalStorageState$1, "__esModule", { value: true });
	const react_1$1 = require$$3;
	const useLocalStorageStateBase_1$1 = useLocalStorageStateBase$1;
	/**
	 * Used to track usages of `useLocalStorageState()` with identical `key` values. If we encounter
	 * duplicates we throw an error to the user telling them to use `createLocalStorageStateHook`
	 * instead.
	 */
	const initializedStorageKeys = new Set();
	function useLocalStorageState(key, defaultValue) {
	    const value = (0, useLocalStorageStateBase_1$1.default)(key, defaultValue);
	    /**
	     * Detects incorrect usage of the library and throws an error with a suggestion how to fix it.
	     */
	    (0, react_1$1.useEffect)(() => {
	        if (initializedStorageKeys.has(key)) {
	            throw new Error(`When using the same key in multiple places use createLocalStorageStateHook('${key}'): ` +
	                `https://github.com/astoilkov/use-local-storage-state#create-local-storage-state-hook`);
	        }
	        else {
	            initializedStorageKeys.add(key);
	        }
	        return () => void initializedStorageKeys.delete(key);
	    }, [key]);
	    return value;
	}
	useLocalStorageState$1.default = useLocalStorageState;

	var createLocalStorageStateHook$2 = {};

	Object.defineProperty(createLocalStorageStateHook$2, "__esModule", { value: true });
	const react_dom_1 = require$$3;
	const react_1 = require$$3;
	const useLocalStorageStateBase_1 = useLocalStorageStateBase$1;
	function createLocalStorageStateHook$1(key, defaultValue) {
	    const setValueFunctions = [];
	    const removeItemFunctions = [];
	    return function useLocalStorageStateHook() {
	        const [value, setValue, { isPersistent, removeItem }] = (0, useLocalStorageStateBase_1.default)(key, defaultValue);
	        const setValueAll = (0, react_1.useCallback)((newValue) => {
	            (0, react_dom_1.unstable_batchedUpdates)(() => {
	                for (const setValueFunction of setValueFunctions) {
	                    setValueFunction(newValue);
	                }
	            });
	        }, []);
	        (0, react_1.useEffect)(() => {
	            setValueFunctions.push(setValue);
	            removeItemFunctions.push(removeItem);
	            return () => {
	                setValueFunctions.splice(setValueFunctions.indexOf(setValue), 1);
	                removeItemFunctions.splice(removeItemFunctions.indexOf(removeItem), 1);
	            };
	        }, [setValue, removeItem]);
	        return (0, react_1.useMemo)(() => [
	            value,
	            setValueAll,
	            {
	                isPersistent,
	                removeItem() {
	                    for (const removeItemFunction of removeItemFunctions) {
	                        removeItemFunction();
	                    }
	                },
	            },
	        ], [value, setValueAll, isPersistent]);
	    };
	}
	createLocalStorageStateHook$2.default = createLocalStorageStateHook$1;

	Object.defineProperty(useLocalStorageState$2, "__esModule", { value: true });
	var createLocalStorageStateHook = useLocalStorageState$2.createLocalStorageStateHook = useLocalStorageState$2.useLocalStorageState = void 0;
	const useLocalStorageState_1 = useLocalStorageState$1;
	useLocalStorageState$2.useLocalStorageState = useLocalStorageState_1.default;
	const createLocalStorageStateHook_1 = createLocalStorageStateHook$2;
	createLocalStorageStateHook = useLocalStorageState$2.createLocalStorageStateHook = createLocalStorageStateHook_1.default;
	useLocalStorageState$2.default = useLocalStorageState_1.default;

	const initialStorage = {
	  settings: [{
	    id: 'hook-premium',
	    enabled: true,
	    label: 'Hook Premium',
	    description: 'Hook Premium'
	  }, {
	    id: 'hook-premium-token',
	    enabled: true,
	    label: 'Unlock Paraphrase Modes (Testing)',
	    description: 'Allow you to use premium paraphrase modes'
	  }, {
	    id: 'full-editor',
	    enabled: true,
	    label: 'Full Editor',
	    description: 'Full Editor'
	  }],
	  announcement: {
	    ignores: []
	  },
	  verify: {
	    expiredAt: 0
	  }
	};
	const useStorage = createLocalStorageStateHook('QBC-storage-0', initialStorage);
	const getStorage = key => {
	  let r;

	  if (localStorage.getItem('QBC-storage-0')) {
	    r = JSON.parse(localStorage.getItem('QBC-storage-0'));

	    if (!r.hasOwnProperty(key)) {
	      r[key] = initialStorage[key];
	    }
	  } else {
	    r = initialStorage;
	  }

	  return [r[key], r];
	};
	const getStorageEnable = getId => {
	  const [settings, storage] = getStorage('settings');

	  if (settings.find(({
	    id
	  }) => id === getId)) {
	    return settings.find(({
	      id
	    }) => id === getId).enabled;
	  } else {
	    const newStorage = [...settings, initialStorage.settings.find(({
	      id
	    }) => id === getId)];
	    localStorage.setItem('QBC-storage-0', JSON.stringify({ ...storage,
	      settings: newStorage
	    }));
	    return newStorage.find(({
	      id
	    }) => id === getId).enabled;
	  }
	};

	var IconButton$3 = {};

	var IconButton$2 = {};

	var ButtonBase$2 = {};

	var ButtonBase$1 = {};

	var TouchRipple$1 = {};

	var Ripple$1 = {};

	var _interopRequireDefault$12 = interopRequireDefault.exports;

	Object.defineProperty(Ripple$1, "__esModule", {
	  value: true
	});
	Ripple$1.default = void 0;

	var React$X = _interopRequireWildcard$$(require$$3);

	var _propTypes$T = _interopRequireDefault$12(propTypes.exports);

	var _clsx$E = _interopRequireDefault$12(clsx$1);

	var _jsxRuntime$11 = jsxRuntime;

	function _getRequireWildcardCache$$(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$$ = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$$(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$$(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * @ignore - internal component.
	 */
	function Ripple(props) {
	  const {
	    className,
	    classes,
	    pulsate = false,
	    rippleX,
	    rippleY,
	    rippleSize,
	    in: inProp,
	    onExited,
	    timeout
	  } = props;
	  const [leaving, setLeaving] = React$X.useState(false);
	  const rippleClassName = (0, _clsx$E.default)(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
	  const rippleStyles = {
	    width: rippleSize,
	    height: rippleSize,
	    top: -(rippleSize / 2) + rippleY,
	    left: -(rippleSize / 2) + rippleX
	  };
	  const childClassName = (0, _clsx$E.default)(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);

	  if (!inProp && !leaving) {
	    setLeaving(true);
	  }

	  React$X.useEffect(() => {
	    if (!inProp && onExited != null) {
	      // react-transition-group#onExited
	      const timeoutId = setTimeout(onExited, timeout);
	      return () => {
	        clearTimeout(timeoutId);
	      };
	    }

	    return undefined;
	  }, [onExited, inProp, timeout]);
	  return /*#__PURE__*/(0, _jsxRuntime$11.jsx)("span", {
	    className: rippleClassName,
	    style: rippleStyles,
	    children: /*#__PURE__*/(0, _jsxRuntime$11.jsx)("span", {
	      className: childClassName
	    })
	  });
	}

	Ripple.propTypes = {
	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: _propTypes$T.default.object.isRequired,
	  className: _propTypes$T.default.string,

	  /**
	   * @ignore - injected from TransitionGroup
	   */
	  in: _propTypes$T.default.bool,

	  /**
	   * @ignore - injected from TransitionGroup
	   */
	  onExited: _propTypes$T.default.func,

	  /**
	   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
	   */
	  pulsate: _propTypes$T.default.bool,

	  /**
	   * Diameter of the ripple.
	   */
	  rippleSize: _propTypes$T.default.number,

	  /**
	   * Horizontal position of the ripple center.
	   */
	  rippleX: _propTypes$T.default.number,

	  /**
	   * Vertical position of the ripple center.
	   */
	  rippleY: _propTypes$T.default.number,

	  /**
	   * exit delay
	   */
	  timeout: _propTypes$T.default.number.isRequired
	} ;
	var _default$1M = Ripple;
	Ripple$1.default = _default$1M;

	var touchRippleClasses$1 = {};

	Object.defineProperty(touchRippleClasses$1, "__esModule", {
	  value: true
	});
	touchRippleClasses$1.default = void 0;
	touchRippleClasses$1.getTouchRippleUtilityClass = getTouchRippleUtilityClass;

	var _base$1m = node$1;

	function getTouchRippleUtilityClass(slot) {
	  return (0, _base$1m.generateUtilityClass)('MuiTouchRipple', slot);
	}

	const touchRippleClasses = (0, _base$1m.generateUtilityClasses)('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);
	var _default$1L = touchRippleClasses;
	touchRippleClasses$1.default = _default$1L;

	var _interopRequireDefault$11 = interopRequireDefault.exports;

	Object.defineProperty(TouchRipple$1, "__esModule", {
	  value: true
	});
	TouchRipple$1.default = TouchRipple$1.TouchRippleRoot = TouchRipple$1.TouchRippleRipple = TouchRipple$1.DELAY_RIPPLE = void 0;

	var _extends2$R = _interopRequireDefault$11(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$Q = _interopRequireDefault$11(objectWithoutPropertiesLoose.exports);

	var React$W = _interopRequireWildcard$_(require$$3);

	var _propTypes$S = _interopRequireDefault$11(propTypes.exports);

	var _reactTransitionGroup$2 = cjs;

	var _clsx$D = _interopRequireDefault$11(clsx$1);

	var _system$a = system;

	var _styled$J = _interopRequireDefault$11(styled$1);

	var _useThemeProps$G = _interopRequireDefault$11(useThemeProps$1);

	var _Ripple = _interopRequireDefault$11(Ripple$1);

	var _touchRippleClasses = _interopRequireDefault$11(touchRippleClasses$1);

	var _jsxRuntime$10 = jsxRuntime;

	const _excluded$Q = ["center", "classes", "className"];

	function _getRequireWildcardCache$_(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$_ = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$_(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$_(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const DURATION = 550;
	const DELAY_RIPPLE = 80;
	TouchRipple$1.DELAY_RIPPLE = DELAY_RIPPLE;
	const enterKeyframe = (0, _system$a.keyframes)`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`;
	const exitKeyframe = (0, _system$a.keyframes)`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`;
	const pulsateKeyframe = (0, _system$a.keyframes)`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`;
	const TouchRippleRoot = (0, _styled$J.default)('span', {
	  name: 'MuiTouchRipple',
	  slot: 'Root'
	})({
	  overflow: 'hidden',
	  pointerEvents: 'none',
	  position: 'absolute',
	  zIndex: 0,
	  top: 0,
	  right: 0,
	  bottom: 0,
	  left: 0,
	  borderRadius: 'inherit'
	}); // This `styled()` function invokes keyframes. `styled-components` only supports keyframes
	// in string templates. Do not convert these styles in JS object as it will break.

	TouchRipple$1.TouchRippleRoot = TouchRippleRoot;
	const TouchRippleRipple = (0, _styled$J.default)(_Ripple.default, {
	  name: 'MuiTouchRipple',
	  slot: 'Ripple'
	})`
  opacity: 0;
  position: absolute;

  &.${_touchRippleClasses.default.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${enterKeyframe};
    animation-duration: ${DURATION}ms;
    animation-timing-function: ${({
  theme
}) => theme.transitions.easing.easeInOut};
  }

  &.${_touchRippleClasses.default.ripplePulsate} {
    animation-duration: ${({
  theme
}) => theme.transitions.duration.shorter}ms;
  }

  & .${_touchRippleClasses.default.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${_touchRippleClasses.default.childLeaving} {
    opacity: 0;
    animation-name: ${exitKeyframe};
    animation-duration: ${DURATION}ms;
    animation-timing-function: ${({
  theme
}) => theme.transitions.easing.easeInOut};
  }

  & .${_touchRippleClasses.default.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${pulsateKeyframe};
    animation-duration: 2500ms;
    animation-timing-function: ${({
  theme
}) => theme.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`;
	/**
	 * @ignore - internal component.
	 *
	 * TODO v5: Make private
	 */

	TouchRipple$1.TouchRippleRipple = TouchRippleRipple;
	const TouchRipple = /*#__PURE__*/React$W.forwardRef(function TouchRipple(inProps, ref) {
	  const props = (0, _useThemeProps$G.default)({
	    props: inProps,
	    name: 'MuiTouchRipple'
	  });
	  const {
	    center: centerProp = false,
	    classes = {},
	    className
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$Q.default)(props, _excluded$Q);
	  const [ripples, setRipples] = React$W.useState([]);
	  const nextKey = React$W.useRef(0);
	  const rippleCallback = React$W.useRef(null);
	  React$W.useEffect(() => {
	    if (rippleCallback.current) {
	      rippleCallback.current();
	      rippleCallback.current = null;
	    }
	  }, [ripples]); // Used to filter out mouse emulated events on mobile.

	  const ignoringMouseDown = React$W.useRef(false); // We use a timer in order to only show the ripples for touch "click" like events.
	  // We don't want to display the ripple for touch scroll events.

	  const startTimer = React$W.useRef(null); // This is the hook called once the previous timeout is ready.

	  const startTimerCommit = React$W.useRef(null);
	  const container = React$W.useRef(null);
	  React$W.useEffect(() => {
	    return () => {
	      clearTimeout(startTimer.current);
	    };
	  }, []);
	  const startCommit = React$W.useCallback(params => {
	    const {
	      pulsate,
	      rippleX,
	      rippleY,
	      rippleSize,
	      cb
	    } = params;
	    setRipples(oldRipples => [...oldRipples, /*#__PURE__*/(0, _jsxRuntime$10.jsx)(TouchRippleRipple, {
	      classes: {
	        ripple: (0, _clsx$D.default)(classes.ripple, _touchRippleClasses.default.ripple),
	        rippleVisible: (0, _clsx$D.default)(classes.rippleVisible, _touchRippleClasses.default.rippleVisible),
	        ripplePulsate: (0, _clsx$D.default)(classes.ripplePulsate, _touchRippleClasses.default.ripplePulsate),
	        child: (0, _clsx$D.default)(classes.child, _touchRippleClasses.default.child),
	        childLeaving: (0, _clsx$D.default)(classes.childLeaving, _touchRippleClasses.default.childLeaving),
	        childPulsate: (0, _clsx$D.default)(classes.childPulsate, _touchRippleClasses.default.childPulsate)
	      },
	      timeout: DURATION,
	      pulsate: pulsate,
	      rippleX: rippleX,
	      rippleY: rippleY,
	      rippleSize: rippleSize
	    }, nextKey.current)]);
	    nextKey.current += 1;
	    rippleCallback.current = cb;
	  }, [classes]);
	  const start = React$W.useCallback((event = {}, options = {}, cb) => {
	    const {
	      pulsate = false,
	      center = centerProp || options.pulsate,
	      fakeElement = false // For test purposes

	    } = options;

	    if (event.type === 'mousedown' && ignoringMouseDown.current) {
	      ignoringMouseDown.current = false;
	      return;
	    }

	    if (event.type === 'touchstart') {
	      ignoringMouseDown.current = true;
	    }

	    const element = fakeElement ? null : container.current;
	    const rect = element ? element.getBoundingClientRect() : {
	      width: 0,
	      height: 0,
	      left: 0,
	      top: 0
	    }; // Get the size of the ripple

	    let rippleX;
	    let rippleY;
	    let rippleSize;

	    if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
	      rippleX = Math.round(rect.width / 2);
	      rippleY = Math.round(rect.height / 2);
	    } else {
	      const {
	        clientX,
	        clientY
	      } = event.touches ? event.touches[0] : event;
	      rippleX = Math.round(clientX - rect.left);
	      rippleY = Math.round(clientY - rect.top);
	    }

	    if (center) {
	      rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3); // For some reason the animation is broken on Mobile Chrome if the size is even.

	      if (rippleSize % 2 === 0) {
	        rippleSize += 1;
	      }
	    } else {
	      const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
	      const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
	      rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
	    } // Touche devices


	    if (event.touches) {
	      // check that this isn't another touchstart due to multitouch
	      // otherwise we will only clear a single timer when unmounting while two
	      // are running
	      if (startTimerCommit.current === null) {
	        // Prepare the ripple effect.
	        startTimerCommit.current = () => {
	          startCommit({
	            pulsate,
	            rippleX,
	            rippleY,
	            rippleSize,
	            cb
	          });
	        }; // Delay the execution of the ripple effect.


	        startTimer.current = setTimeout(() => {
	          if (startTimerCommit.current) {
	            startTimerCommit.current();
	            startTimerCommit.current = null;
	          }
	        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
	      }
	    } else {
	      startCommit({
	        pulsate,
	        rippleX,
	        rippleY,
	        rippleSize,
	        cb
	      });
	    }
	  }, [centerProp, startCommit]);
	  const pulsate = React$W.useCallback(() => {
	    start({}, {
	      pulsate: true
	    });
	  }, [start]);
	  const stop = React$W.useCallback((event, cb) => {
	    clearTimeout(startTimer.current); // The touch interaction occurs too quickly.
	    // We still want to show ripple effect.

	    if (event.type === 'touchend' && startTimerCommit.current) {
	      startTimerCommit.current();
	      startTimerCommit.current = null;
	      startTimer.current = setTimeout(() => {
	        stop(event, cb);
	      });
	      return;
	    }

	    startTimerCommit.current = null;
	    setRipples(oldRipples => {
	      if (oldRipples.length > 0) {
	        return oldRipples.slice(1);
	      }

	      return oldRipples;
	    });
	    rippleCallback.current = cb;
	  }, []);
	  React$W.useImperativeHandle(ref, () => ({
	    pulsate,
	    start,
	    stop
	  }), [pulsate, start, stop]);
	  return /*#__PURE__*/(0, _jsxRuntime$10.jsx)(TouchRippleRoot, (0, _extends2$R.default)({
	    className: (0, _clsx$D.default)(classes.root, _touchRippleClasses.default.root, className),
	    ref: container
	  }, other, {
	    children: /*#__PURE__*/(0, _jsxRuntime$10.jsx)(_reactTransitionGroup$2.TransitionGroup, {
	      component: null,
	      exit: true,
	      children: ripples
	    })
	  }));
	});
	TouchRipple.propTypes = {
	  /**
	   * If `true`, the ripple starts at the center of the component
	   * rather than at the point of interaction.
	   */
	  center: _propTypes$S.default.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: _propTypes$S.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$S.default.string
	} ;
	var _default$1K = TouchRipple;
	TouchRipple$1.default = _default$1K;

	var buttonBaseClasses$1 = {};

	Object.defineProperty(buttonBaseClasses$1, "__esModule", {
	  value: true
	});
	buttonBaseClasses$1.default = void 0;
	buttonBaseClasses$1.getButtonBaseUtilityClass = getButtonBaseUtilityClass;

	var _base$1l = node$1;

	function getButtonBaseUtilityClass(slot) {
	  return (0, _base$1l.generateUtilityClass)('MuiButtonBase', slot);
	}

	const buttonBaseClasses = (0, _base$1l.generateUtilityClasses)('MuiButtonBase', ['root', 'disabled', 'focusVisible']);
	var _default$1J = buttonBaseClasses;
	buttonBaseClasses$1.default = _default$1J;

	var _interopRequireDefault$10 = interopRequireDefault.exports;

	Object.defineProperty(ButtonBase$1, "__esModule", {
	  value: true
	});
	ButtonBase$1.default = ButtonBase$1.ButtonBaseRoot = void 0;

	var _extends2$Q = _interopRequireDefault$10(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$P = _interopRequireDefault$10(objectWithoutPropertiesLoose.exports);

	var React$V = _interopRequireWildcard$Z(require$$3);

	var _propTypes$R = _interopRequireDefault$10(propTypes.exports);

	var _clsx$C = _interopRequireDefault$10(clsx$1);

	var _utils$u = utils$h;

	var _composeClasses = _interopRequireDefault$10(composeClasses$2);

	var _styled$I = _interopRequireDefault$10(styled$1);

	var _useThemeProps$F = _interopRequireDefault$10(useThemeProps$1);

	var _useForkRef$9 = _interopRequireDefault$10(useForkRef);

	var _useEventCallback$1 = _interopRequireDefault$10(useEventCallback$1);

	var _useIsFocusVisible = _interopRequireDefault$10(useIsFocusVisible);

	var _TouchRipple = _interopRequireDefault$10(TouchRipple$1);

	var _buttonBaseClasses = _interopRequireWildcard$Z(buttonBaseClasses$1);

	var _jsxRuntime$$ = jsxRuntime;

	const _excluded$P = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "type"];

	function _getRequireWildcardCache$Z(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$Z = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$Z(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$Z(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$F = ownerState => {
	  const {
	    disabled,
	    focusVisible,
	    focusVisibleClassName,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
	  };
	  const composedClasses = (0, _composeClasses.default)(slots, _buttonBaseClasses.getButtonBaseUtilityClass, classes);

	  if (focusVisible && focusVisibleClassName) {
	    composedClasses.root += ` ${focusVisibleClassName}`;
	  }

	  return composedClasses;
	};

	const ButtonBaseRoot = (0, _styled$I.default)('button', {
	  name: 'MuiButtonBase',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'inline-flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  position: 'relative',
	  boxSizing: 'border-box',
	  WebkitTapHighlightColor: 'transparent',
	  backgroundColor: 'transparent',
	  // Reset default value
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0,
	  border: 0,
	  margin: 0,
	  // Remove the margin in Safari
	  borderRadius: 0,
	  padding: 0,
	  // Remove the padding in Firefox
	  cursor: 'pointer',
	  userSelect: 'none',
	  verticalAlign: 'middle',
	  MozAppearance: 'none',
	  // Reset
	  WebkitAppearance: 'none',
	  // Reset
	  textDecoration: 'none',
	  // So we take precedent over the style of a native <a /> element.
	  color: 'inherit',
	  '&::-moz-focus-inner': {
	    borderStyle: 'none' // Remove Firefox dotted outline.

	  },
	  [`&.${_buttonBaseClasses.default.disabled}`]: {
	    pointerEvents: 'none',
	    // Disable link interactions
	    cursor: 'default'
	  },
	  '@media print': {
	    colorAdjust: 'exact'
	  }
	});
	/**
	 * `ButtonBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating a button.
	 * It contains a load of style reset and some focus/ripple logic.
	 */

	ButtonBase$1.ButtonBaseRoot = ButtonBaseRoot;
	const ButtonBase = /*#__PURE__*/React$V.forwardRef(function ButtonBase(inProps, ref) {
	  const props = (0, _useThemeProps$F.default)({
	    props: inProps,
	    name: 'MuiButtonBase'
	  });
	  const {
	    action,
	    centerRipple = false,
	    children,
	    className,
	    component = 'button',
	    disabled = false,
	    disableRipple = false,
	    disableTouchRipple = false,
	    focusRipple = false,
	    LinkComponent = 'a',
	    onBlur,
	    onClick,
	    onContextMenu,
	    onDragLeave,
	    onFocus,
	    onFocusVisible,
	    onKeyDown,
	    onKeyUp,
	    onMouseDown,
	    onMouseLeave,
	    onMouseUp,
	    onTouchEnd,
	    onTouchMove,
	    onTouchStart,
	    tabIndex = 0,
	    TouchRippleProps,
	    type
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$P.default)(props, _excluded$P);
	  const buttonRef = React$V.useRef(null);
	  const rippleRef = React$V.useRef(null);
	  const {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref: focusVisibleRef
	  } = (0, _useIsFocusVisible.default)();
	  const [focusVisible, setFocusVisible] = React$V.useState(false);

	  if (disabled && focusVisible) {
	    setFocusVisible(false);
	  }

	  React$V.useImperativeHandle(action, () => ({
	    focusVisible: () => {
	      setFocusVisible(true);
	      buttonRef.current.focus();
	    }
	  }), []);
	  React$V.useEffect(() => {
	    if (focusVisible && focusRipple && !disableRipple) {
	      rippleRef.current.pulsate();
	    }
	  }, [disableRipple, focusRipple, focusVisible]);

	  function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
	    return (0, _useEventCallback$1.default)(event => {
	      if (eventCallback) {
	        eventCallback(event);
	      }

	      const ignore = skipRippleAction;

	      if (!ignore && rippleRef.current) {
	        rippleRef.current[rippleAction](event);
	      }

	      return true;
	    });
	  }

	  const handleMouseDown = useRippleHandler('start', onMouseDown);
	  const handleContextMenu = useRippleHandler('stop', onContextMenu);
	  const handleDragLeave = useRippleHandler('stop', onDragLeave);
	  const handleMouseUp = useRippleHandler('stop', onMouseUp);
	  const handleMouseLeave = useRippleHandler('stop', event => {
	    if (focusVisible) {
	      event.preventDefault();
	    }

	    if (onMouseLeave) {
	      onMouseLeave(event);
	    }
	  });
	  const handleTouchStart = useRippleHandler('start', onTouchStart);
	  const handleTouchEnd = useRippleHandler('stop', onTouchEnd);
	  const handleTouchMove = useRippleHandler('stop', onTouchMove);
	  const handleBlur = useRippleHandler('stop', event => {
	    handleBlurVisible(event);

	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }

	    if (onBlur) {
	      onBlur(event);
	    }
	  }, false);
	  const handleFocus = (0, _useEventCallback$1.default)(event => {
	    // Fix for https://github.com/facebook/react/issues/7769
	    if (!buttonRef.current) {
	      buttonRef.current = event.currentTarget;
	    }

	    handleFocusVisible(event);

	    if (isFocusVisibleRef.current === true) {
	      setFocusVisible(true);

	      if (onFocusVisible) {
	        onFocusVisible(event);
	      }
	    }

	    if (onFocus) {
	      onFocus(event);
	    }
	  });

	  const isNonNativeButton = () => {
	    const button = buttonRef.current;
	    return component && component !== 'button' && !(button.tagName === 'A' && button.href);
	  };
	  /**
	   * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
	   */


	  const keydownRef = React$V.useRef(false);
	  const handleKeyDown = (0, _useEventCallback$1.default)(event => {
	    // Check if key is already down to avoid repeats being counted as multiple activations
	    if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
	      keydownRef.current = true;
	      rippleRef.current.stop(event, () => {
	        rippleRef.current.start(event);
	      });
	    }

	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
	      event.preventDefault();
	    }

	    if (onKeyDown) {
	      onKeyDown(event);
	    } // Keyboard accessibility for non interactive elements


	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
	      event.preventDefault();

	      if (onClick) {
	        onClick(event);
	      }
	    }
	  });
	  const handleKeyUp = (0, _useEventCallback$1.default)(event => {
	    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
	    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
	    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
	      keydownRef.current = false;
	      rippleRef.current.stop(event, () => {
	        rippleRef.current.pulsate(event);
	      });
	    }

	    if (onKeyUp) {
	      onKeyUp(event);
	    } // Keyboard accessibility for non interactive elements


	    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
	      onClick(event);
	    }
	  });
	  let ComponentProp = component;

	  if (ComponentProp === 'button' && (other.href || other.to)) {
	    ComponentProp = LinkComponent;
	  }

	  const buttonProps = {};

	  if (ComponentProp === 'button') {
	    buttonProps.type = type === undefined ? 'button' : type;
	    buttonProps.disabled = disabled;
	  } else {
	    if (!other.href && !other.to) {
	      buttonProps.role = 'button';
	    }

	    if (disabled) {
	      buttonProps['aria-disabled'] = disabled;
	    }
	  }

	  const handleOwnRef = (0, _useForkRef$9.default)(focusVisibleRef, buttonRef);
	  const handleRef = (0, _useForkRef$9.default)(ref, handleOwnRef);
	  const [mountedState, setMountedState] = React$V.useState(false);
	  React$V.useEffect(() => {
	    setMountedState(true);
	  }, []);
	  const enableTouchRipple = mountedState && !disableRipple && !disabled;

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React$V.useEffect(() => {
	      if (enableTouchRipple && !rippleRef.current) {
	        console.error(['MUI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
	      }
	    }, [enableTouchRipple]);
	  }

	  const ownerState = (0, _extends2$Q.default)({}, props, {
	    centerRipple,
	    component,
	    disabled,
	    disableRipple,
	    disableTouchRipple,
	    focusRipple,
	    tabIndex,
	    focusVisible
	  });
	  const classes = useUtilityClasses$F(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$$.jsxs)(ButtonBaseRoot, (0, _extends2$Q.default)({
	    as: ComponentProp,
	    className: (0, _clsx$C.default)(classes.root, className),
	    ownerState: ownerState,
	    onBlur: handleBlur,
	    onClick: onClick,
	    onContextMenu: handleContextMenu,
	    onFocus: handleFocus,
	    onKeyDown: handleKeyDown,
	    onKeyUp: handleKeyUp,
	    onMouseDown: handleMouseDown,
	    onMouseLeave: handleMouseLeave,
	    onMouseUp: handleMouseUp,
	    onDragLeave: handleDragLeave,
	    onTouchEnd: handleTouchEnd,
	    onTouchMove: handleTouchMove,
	    onTouchStart: handleTouchStart,
	    ref: handleRef,
	    tabIndex: disabled ? -1 : tabIndex,
	    type: type
	  }, buttonProps, other, {
	    children: [children, enableTouchRipple ?
	    /*#__PURE__*/

	    /* TouchRipple is only needed client-side, x2 boost on the server. */
	    (0, _jsxRuntime$$.jsx)(_TouchRipple.default, (0, _extends2$Q.default)({
	      ref: rippleRef,
	      center: centerRipple
	    }, TouchRippleProps)) : null]
	  }));
	});
	ButtonBase.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A ref for imperative actions.
	   * It currently only supports `focusVisible()` action.
	   */
	  action: _utils$u.refType,

	  /**
	   * If `true`, the ripples are centered.
	   * They won't start at the cursor interaction position.
	   * @default false
	   */
	  centerRipple: _propTypes$R.default.bool,

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$R.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$R.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$R.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _utils$u.elementTypeAcceptingRef,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: _propTypes$R.default.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
	   * @default false
	   */
	  disableRipple: _propTypes$R.default.bool,

	  /**
	   * If `true`, the touch ripple effect is disabled.
	   * @default false
	   */
	  disableTouchRipple: _propTypes$R.default.bool,

	  /**
	   * If `true`, the base button will have a keyboard focus ripple.
	   * @default false
	   */
	  focusRipple: _propTypes$R.default.bool,

	  /**
	   * This prop can help identify which element has keyboard focus.
	   * The class name will be applied when the element gains the focus through keyboard interaction.
	   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
	   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
	   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
	   * if needed.
	   */
	  focusVisibleClassName: _propTypes$R.default.string,

	  /**
	   * @ignore
	   */
	  href: _propTypes$R.default
	  /* @typescript-to-proptypes-ignore */
	  .any,

	  /**
	   * The component used to render a link when the `href` prop is provided.
	   * @default 'a'
	   */
	  LinkComponent: _propTypes$R.default.elementType,

	  /**
	   * @ignore
	   */
	  onBlur: _propTypes$R.default.func,

	  /**
	   * @ignore
	   */
	  onClick: _propTypes$R.default.func,

	  /**
	   * @ignore
	   */
	  onContextMenu: _propTypes$R.default.func,

	  /**
	   * @ignore
	   */
	  onDragLeave: _propTypes$R.default.func,

	  /**
	   * @ignore
	   */
	  onFocus: _propTypes$R.default.func,

	  /**
	   * Callback fired when the component is focused with a keyboard.
	   * We trigger a `onFocus` callback too.
	   */
	  onFocusVisible: _propTypes$R.default.func,

	  /**
	   * @ignore
	   */
	  onKeyDown: _propTypes$R.default.func,

	  /**
	   * @ignore
	   */
	  onKeyUp: _propTypes$R.default.func,

	  /**
	   * @ignore
	   */
	  onMouseDown: _propTypes$R.default.func,

	  /**
	   * @ignore
	   */
	  onMouseLeave: _propTypes$R.default.func,

	  /**
	   * @ignore
	   */
	  onMouseUp: _propTypes$R.default.func,

	  /**
	   * @ignore
	   */
	  onTouchEnd: _propTypes$R.default.func,

	  /**
	   * @ignore
	   */
	  onTouchMove: _propTypes$R.default.func,

	  /**
	   * @ignore
	   */
	  onTouchStart: _propTypes$R.default.func,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$R.default.oneOfType([_propTypes$R.default.arrayOf(_propTypes$R.default.oneOfType([_propTypes$R.default.func, _propTypes$R.default.object, _propTypes$R.default.bool])), _propTypes$R.default.func, _propTypes$R.default.object]),

	  /**
	   * @default 0
	   */
	  tabIndex: _propTypes$R.default.number,

	  /**
	   * Props applied to the `TouchRipple` element.
	   */
	  TouchRippleProps: _propTypes$R.default.object,

	  /**
	   * @ignore
	   */
	  type: _propTypes$R.default.oneOfType([_propTypes$R.default.oneOf(['button', 'reset', 'submit']), _propTypes$R.default.string])
	} ;
	var _default$1I = ButtonBase;
	ButtonBase$1.default = _default$1I;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  buttonBaseClasses: true,
		  touchRippleClasses: true
		};
		Object.defineProperty(exports, "buttonBaseClasses", {
		  enumerable: true,
		  get: function () {
		    return _buttonBaseClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ButtonBase.default;
		  }
		});
		Object.defineProperty(exports, "touchRippleClasses", {
		  enumerable: true,
		  get: function () {
		    return _touchRippleClasses.default;
		  }
		});

		var _ButtonBase = _interopRequireDefault(ButtonBase$1);

		var _buttonBaseClasses = _interopRequireWildcard(buttonBaseClasses$1);

		Object.keys(_buttonBaseClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _buttonBaseClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _buttonBaseClasses[key];
		    }
		  });
		});

		var _touchRippleClasses = _interopRequireWildcard(touchRippleClasses$1);

		Object.keys(_touchRippleClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _touchRippleClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _touchRippleClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ButtonBase$2));

	var iconButtonClasses$1 = {};

	Object.defineProperty(iconButtonClasses$1, "__esModule", {
	  value: true
	});
	iconButtonClasses$1.default = void 0;
	iconButtonClasses$1.getIconButtonUtilityClass = getIconButtonUtilityClass;

	var _base$1k = node$1;

	function getIconButtonUtilityClass(slot) {
	  return (0, _base$1k.generateUtilityClass)('MuiIconButton', slot);
	}

	const iconButtonClasses = (0, _base$1k.generateUtilityClasses)('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
	var _default$1H = iconButtonClasses;
	iconButtonClasses$1.default = _default$1H;

	var _interopRequireDefault$$ = interopRequireDefault.exports;

	Object.defineProperty(IconButton$2, "__esModule", {
	  value: true
	});
	IconButton$2.default = void 0;

	var _objectWithoutPropertiesLoose2$O = _interopRequireDefault$$(objectWithoutPropertiesLoose.exports);

	var _extends2$P = _interopRequireDefault$$(_extends$5.exports);

	var React$U = _interopRequireWildcard$Y(require$$3);

	var _propTypes$Q = _interopRequireDefault$$(propTypes.exports);

	var _clsx$B = _interopRequireDefault$$(clsx$1);

	var _utils$t = utils$h;

	var _base$1j = node$1;

	var _system$9 = system;

	var _styled$H = _interopRequireDefault$$(styled$1);

	var _useThemeProps$E = _interopRequireDefault$$(useThemeProps$1);

	var _ButtonBase$7 = _interopRequireDefault$$(ButtonBase$2);

	var _capitalize$f = _interopRequireDefault$$(capitalize);

	var _iconButtonClasses = _interopRequireWildcard$Y(iconButtonClasses$1);

	var _jsxRuntime$_ = jsxRuntime;

	const _excluded$O = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];

	function _getRequireWildcardCache$Y(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$Y = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$Y(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$Y(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$E = ownerState => {
	  const {
	    classes,
	    disabled,
	    color,
	    edge,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', color !== 'default' && `color${(0, _capitalize$f.default)(color)}`, edge && `edge${(0, _capitalize$f.default)(edge)}`, `size${(0, _capitalize$f.default)(size)}`]
	  };
	  return (0, _base$1j.unstable_composeClasses)(slots, _iconButtonClasses.getIconButtonUtilityClass, classes);
	};

	const IconButtonRoot = (0, _styled$H.default)(_ButtonBase$7.default, {
	  name: 'MuiIconButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'default' && styles[`color${(0, _capitalize$f.default)(ownerState.color)}`], ownerState.edge && styles[`edge${(0, _capitalize$f.default)(ownerState.edge)}`], styles[`size${(0, _capitalize$f.default)(ownerState.size)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$P.default)({
	  textAlign: 'center',
	  flex: '0 0 auto',
	  fontSize: theme.typography.pxToRem(24),
	  padding: 8,
	  borderRadius: '50%',
	  overflow: 'visible',
	  // Explicitly set the default value to solve a bug on IE11.
	  color: theme.palette.action.active,
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  })
	}, !ownerState.disableRipple && {
	  '&:hover': {
	    backgroundColor: (0, _system$9.alpha)(theme.palette.action.active, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.edge === 'start' && {
	  marginLeft: ownerState.size === 'small' ? -3 : -12
	}, ownerState.edge === 'end' && {
	  marginRight: ownerState.size === 'small' ? -3 : -12
	}), ({
	  theme,
	  ownerState
	}) => (0, _extends2$P.default)({}, ownerState.color === 'inherit' && {
	  color: 'inherit'
	}, ownerState.color !== 'inherit' && ownerState.color !== 'default' && (0, _extends2$P.default)({
	  color: theme.palette[ownerState.color].main
	}, !ownerState.disableRipple && {
	  '&:hover': {
	    backgroundColor: (0, _system$9.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}), ownerState.size === 'small' && {
	  padding: 5,
	  fontSize: theme.typography.pxToRem(18)
	}, ownerState.size === 'large' && {
	  padding: 12,
	  fontSize: theme.typography.pxToRem(28)
	}, {
	  [`&.${_iconButtonClasses.default.disabled}`]: {
	    backgroundColor: 'transparent',
	    color: theme.palette.action.disabled
	  }
	}));
	/**
	 * Refer to the [Icons](/components/icons/) section of the documentation
	 * regarding the available icon options.
	 */

	const IconButton$1 = /*#__PURE__*/React$U.forwardRef(function IconButton(inProps, ref) {
	  const props = (0, _useThemeProps$E.default)({
	    props: inProps,
	    name: 'MuiIconButton'
	  });
	  const {
	    edge = false,
	    children,
	    className,
	    color = 'default',
	    disabled = false,
	    disableFocusRipple = false,
	    size = 'medium'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$O.default)(props, _excluded$O);
	  const ownerState = (0, _extends2$P.default)({}, props, {
	    edge,
	    color,
	    disabled,
	    disableFocusRipple,
	    size
	  });
	  const classes = useUtilityClasses$E(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$_.jsx)(IconButtonRoot, (0, _extends2$P.default)({
	    className: (0, _clsx$B.default)(classes.root, className),
	    centerRipple: true,
	    focusRipple: !disableFocusRipple,
	    disabled: disabled,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: children
	  }));
	});
	IconButton$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The icon to display.
	   */
	  children: (0, _utils$t.chainPropTypes)(_propTypes$Q.default.node, props => {
	    const found = React$U.Children.toArray(props.children).some(child => /*#__PURE__*/React$U.isValidElement(child) && child.props.onClick);

	    if (found) {
	      return new Error(['MUI: You are providing an onClick event listener to a child of a button element.', 'Prefer applying it to the IconButton directly.', 'This guarantees that the whole <button> will be responsive to click events.'].join('\n'));
	    }

	    return null;
	  }),

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$Q.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$Q.default.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * @default 'default'
	   */
	  color: _propTypes$Q.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$Q.default.oneOf(['inherit', 'default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), _propTypes$Q.default.string]),

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: _propTypes$Q.default.bool,

	  /**
	   * If `true`, the  keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: _propTypes$Q.default.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
	   * @default false
	   */
	  disableRipple: _propTypes$Q.default.bool,

	  /**
	   * If given, uses a negative margin to counteract the padding on one
	   * side (this is often helpful for aligning the left or right
	   * side of the icon with content above or below, without ruining the border
	   * size and shape).
	   * @default false
	   */
	  edge: _propTypes$Q.default.oneOf(['end', 'start', false]),

	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense button styling.
	   * @default 'medium'
	   */
	  size: _propTypes$Q.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$Q.default.oneOf(['small', 'medium', 'large']), _propTypes$Q.default.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$Q.default.oneOfType([_propTypes$Q.default.arrayOf(_propTypes$Q.default.oneOfType([_propTypes$Q.default.func, _propTypes$Q.default.object, _propTypes$Q.default.bool])), _propTypes$Q.default.func, _propTypes$Q.default.object])
	} ;
	var _default$1G = IconButton$1;
	IconButton$2.default = _default$1G;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  iconButtonClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _IconButton.default;
		  }
		});
		Object.defineProperty(exports, "iconButtonClasses", {
		  enumerable: true,
		  get: function () {
		    return _iconButtonClasses.default;
		  }
		});

		var _IconButton = _interopRequireDefault(IconButton$2);

		var _iconButtonClasses = _interopRequireWildcard(iconButtonClasses$1);

		Object.keys(_iconButtonClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _iconButtonClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _iconButtonClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (IconButton$3));

	var IconButton = /*@__PURE__*/getDefaultExportFromCjs(IconButton$3);

	var Drawer$3 = {};

	var Drawer$2 = {};

	var Modal$2 = {};

	var Modal$1 = {};

	var Backdrop$2 = {};

	var Backdrop$1 = {};

	var Fade$2 = {};

	var Fade$1 = {};

	var _interopRequireDefault$_ = interopRequireDefault.exports;

	Object.defineProperty(Fade$1, "__esModule", {
	  value: true
	});
	Fade$1.default = void 0;

	var _extends2$O = _interopRequireDefault$_(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$N = _interopRequireDefault$_(objectWithoutPropertiesLoose.exports);

	var React$T = _interopRequireWildcard$X(require$$3);

	var _propTypes$P = _interopRequireDefault$_(propTypes.exports);

	var _reactTransitionGroup$1 = cjs;

	var _utils$s = utils$h;

	var _createTransitions$2 = createTransitions$1;

	var _useTheme$7 = _interopRequireDefault$_(useTheme$8);

	var _utils2$3 = utils$b;

	var _useForkRef$8 = _interopRequireDefault$_(useForkRef);

	var _jsxRuntime$Z = jsxRuntime;

	const _excluded$N = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];

	function _getRequireWildcardCache$X(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$X = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$X(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$X(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const styles$2 = {
	  entering: {
	    opacity: 1
	  },
	  entered: {
	    opacity: 1
	  }
	};
	const defaultTimeout = {
	  enter: _createTransitions$2.duration.enteringScreen,
	  exit: _createTransitions$2.duration.leavingScreen
	};
	/**
	 * The Fade transition is used by the [Modal](/components/modal/) component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	const Fade = /*#__PURE__*/React$T.forwardRef(function Fade(props, ref) {
	  const {
	    addEndListener,
	    appear = true,
	    children,
	    easing,
	    in: inProp,
	    onEnter,
	    onEntered,
	    onEntering,
	    onExit,
	    onExited,
	    onExiting,
	    style,
	    timeout = defaultTimeout,
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = _reactTransitionGroup$1.Transition
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$N.default)(props, _excluded$N);
	  const theme = (0, _useTheme$7.default)();
	  const nodeRef = React$T.useRef(null);
	  const foreignRef = (0, _useForkRef$8.default)(children.ref, ref);
	  const handleRef = (0, _useForkRef$8.default)(nodeRef, foreignRef);

	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };

	  const handleEntering = normalizedTransitionCallback(onEntering);
	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    (0, _utils2$3.reflow)(node); // So the animation always start from the start.

	    const transitionProps = (0, _utils2$3.getTransitionProps)({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });
	    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
	    node.style.transition = theme.transitions.create('opacity', transitionProps);

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const transitionProps = (0, _utils2$3.getTransitionProps)({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });
	    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
	    node.style.transition = theme.transitions.create('opacity', transitionProps);

	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);

	  const handleAddEndListener = next => {
	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };

	  return /*#__PURE__*/(0, _jsxRuntime$Z.jsx)(TransitionComponent, (0, _extends2$O.default)({
	    appear: appear,
	    in: inProp,
	    nodeRef: nodeRef ,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    timeout: timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/React$T.cloneElement(children, (0, _extends2$O.default)({
	        style: (0, _extends2$O.default)({
	          opacity: 0,
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, styles$2[state], style, children.props.style),
	        ref: handleRef
	      }, childProps));
	    }
	  }));
	});
	Fade.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Add a custom transition end trigger. Called with the transitioning DOM
	   * node and a done callback. Allows for more fine grained transition end
	   * logic. Note: Timeouts are still used as a fallback if provided.
	   */
	  addEndListener: _propTypes$P.default.func,

	  /**
	   * Perform the enter transition when it first mounts if `in` is also `true`.
	   * Set this to `false` to disable this behavior.
	   * @default true
	   */
	  appear: _propTypes$P.default.bool,

	  /**
	   * A single child content element.
	   */
	  children: _utils$s.elementAcceptingRef.isRequired,

	  /**
	   * The transition timing function.
	   * You may specify a single easing or a object containing enter and exit values.
	   */
	  easing: _propTypes$P.default.oneOfType([_propTypes$P.default.shape({
	    enter: _propTypes$P.default.string,
	    exit: _propTypes$P.default.string
	  }), _propTypes$P.default.string]),

	  /**
	   * If `true`, the component will transition in.
	   */
	  in: _propTypes$P.default.bool,

	  /**
	   * @ignore
	   */
	  onEnter: _propTypes$P.default.func,

	  /**
	   * @ignore
	   */
	  onEntered: _propTypes$P.default.func,

	  /**
	   * @ignore
	   */
	  onEntering: _propTypes$P.default.func,

	  /**
	   * @ignore
	   */
	  onExit: _propTypes$P.default.func,

	  /**
	   * @ignore
	   */
	  onExited: _propTypes$P.default.func,

	  /**
	   * @ignore
	   */
	  onExiting: _propTypes$P.default.func,

	  /**
	   * @ignore
	   */
	  style: _propTypes$P.default.object,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default {
	   *   enter: duration.enteringScreen,
	   *   exit: duration.leavingScreen,
	   * }
	   */
	  timeout: _propTypes$P.default.oneOfType([_propTypes$P.default.number, _propTypes$P.default.shape({
	    appear: _propTypes$P.default.number,
	    enter: _propTypes$P.default.number,
	    exit: _propTypes$P.default.number
	  })])
	} ;
	var _default$1F = Fade;
	Fade$1.default = _default$1F;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Fade.default;
		  }
		});

		var _Fade = _interopRequireDefault(Fade$1);
	} (Fade$2));

	var _interopRequireDefault$Z = interopRequireDefault.exports;

	Object.defineProperty(Backdrop$1, "__esModule", {
	  value: true
	});
	Backdrop$1.default = Backdrop$1.backdropClasses = void 0;

	var _objectWithoutPropertiesLoose2$M = _interopRequireDefault$Z(objectWithoutPropertiesLoose.exports);

	var _extends2$N = _interopRequireDefault$Z(_extends$5.exports);

	var React$S = _interopRequireWildcard$W(require$$3);

	var _propTypes$O = _interopRequireDefault$Z(propTypes.exports);

	var _base$1i = node$1;

	var _BackdropUnstyled = _interopRequireWildcard$W(BackdropUnstyled$2);

	var _styled$G = _interopRequireDefault$Z(styled$1);

	var _useThemeProps$D = _interopRequireDefault$Z(useThemeProps$1);

	var _Fade$1 = _interopRequireDefault$Z(Fade$2);

	var _jsxRuntime$Y = jsxRuntime;

	const _excluded$M = ["children", "components", "componentsProps", "className", "invisible", "open", "transitionDuration", "TransitionComponent"];

	function _getRequireWildcardCache$W(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$W = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$W(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$W(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const backdropClasses = _BackdropUnstyled.backdropUnstyledClasses;
	Backdrop$1.backdropClasses = backdropClasses;

	const extendUtilityClasses$3 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  return classes;
	};

	const BackdropRoot = (0, _styled$G.default)('div', {
	  name: 'MuiBackdrop',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.invisible && styles.invisible];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$N.default)({
	  position: 'fixed',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  right: 0,
	  bottom: 0,
	  top: 0,
	  left: 0,
	  backgroundColor: 'rgba(0, 0, 0, 0.5)',
	  WebkitTapHighlightColor: 'transparent'
	}, ownerState.invisible && {
	  backgroundColor: 'transparent'
	}));
	const Backdrop = /*#__PURE__*/React$S.forwardRef(function Backdrop(inProps, ref) {
	  var _componentsProps$root;

	  const props = (0, _useThemeProps$D.default)({
	    props: inProps,
	    name: 'MuiBackdrop'
	  });
	  const {
	    children,
	    components = {},
	    componentsProps = {},
	    className,
	    invisible = false,
	    open,
	    transitionDuration,
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = _Fade$1.default
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$M.default)(props, _excluded$M);
	  const ownerState = (0, _extends2$N.default)({}, props, {
	    invisible
	  });
	  const classes = extendUtilityClasses$3(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$Y.jsx)(TransitionComponent, (0, _extends2$N.default)({
	    in: open,
	    timeout: transitionDuration
	  }, other, {
	    children: /*#__PURE__*/(0, _jsxRuntime$Y.jsx)(_BackdropUnstyled.default, {
	      className: className,
	      invisible: invisible,
	      components: (0, _extends2$N.default)({
	        Root: BackdropRoot
	      }, components),
	      componentsProps: {
	        root: (0, _extends2$N.default)({}, componentsProps.root, (!components.Root || !(0, _base$1i.isHostComponent)(components.Root)) && {
	          ownerState: (0, _extends2$N.default)({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState)
	        })
	      },
	      classes: classes,
	      ref: ref,
	      children: children
	    })
	  }));
	});
	Backdrop.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$O.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$O.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$O.default.string,

	  /**
	   * The components used for each slot inside the Backdrop.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$O.default.shape({
	    Root: _propTypes$O.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Backdrop.
	   * @default {}
	   */
	  componentsProps: _propTypes$O.default.shape({
	    root: _propTypes$O.default.object
	  }),

	  /**
	   * If `true`, the backdrop is invisible.
	   * It can be used when rendering a popover or a custom select component.
	   * @default false
	   */
	  invisible: _propTypes$O.default.bool,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: _propTypes$O.default.bool.isRequired,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$O.default.oneOfType([_propTypes$O.default.arrayOf(_propTypes$O.default.oneOfType([_propTypes$O.default.func, _propTypes$O.default.object, _propTypes$O.default.bool])), _propTypes$O.default.func, _propTypes$O.default.object]),

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   */
	  transitionDuration: _propTypes$O.default.oneOfType([_propTypes$O.default.number, _propTypes$O.default.shape({
	    appear: _propTypes$O.default.number,
	    enter: _propTypes$O.default.number,
	    exit: _propTypes$O.default.number
	  })])
	} ;
	var _default$1E = Backdrop;
	Backdrop$1.default = _default$1E;

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Backdrop.default;
		  }
		});

		var _Backdrop = _interopRequireWildcard(Backdrop$1);

		Object.keys(_Backdrop).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _Backdrop[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _Backdrop[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Backdrop$2));

	var _interopRequireDefault$Y = interopRequireDefault.exports;

	Object.defineProperty(Modal$1, "__esModule", {
	  value: true
	});
	Modal$1.modalClasses = Modal$1.default = void 0;

	var _objectWithoutPropertiesLoose2$L = _interopRequireDefault$Y(objectWithoutPropertiesLoose.exports);

	var _extends2$M = _interopRequireDefault$Y(_extends$5.exports);

	var React$R = _interopRequireWildcard$V(require$$3);

	var _propTypes$N = _interopRequireDefault$Y(propTypes.exports);

	var _base$1h = node$1;

	var _utils$r = utils$h;

	var _ModalUnstyled = _interopRequireWildcard$V(ModalUnstyled$2);

	var _styled$F = _interopRequireDefault$Y(styled$1);

	var _useThemeProps$C = _interopRequireDefault$Y(useThemeProps$1);

	var _Backdrop$1 = _interopRequireDefault$Y(Backdrop$2);

	var _jsxRuntime$X = jsxRuntime;

	const _excluded$L = ["BackdropComponent", "closeAfterTransition", "children", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted"];

	function _getRequireWildcardCache$V(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$V = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$V(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$V(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const modalClasses = _ModalUnstyled.modalUnstyledClasses;
	Modal$1.modalClasses = modalClasses;

	const extendUtilityClasses$2 = ownerState => {
	  return ownerState.classes;
	};

	const ModalRoot = (0, _styled$F.default)('div', {
	  name: 'MuiModal',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$M.default)({
	  position: 'fixed',
	  zIndex: theme.zIndex.modal,
	  right: 0,
	  bottom: 0,
	  top: 0,
	  left: 0
	}, !ownerState.open && ownerState.exited && {
	  visibility: 'hidden'
	}));
	const ModalBackdrop = (0, _styled$F.default)(_Backdrop$1.default, {
	  name: 'MuiModal',
	  slot: 'Backdrop',
	  overridesResolver: (props, styles) => {
	    return styles.backdrop;
	  }
	})({
	  zIndex: -1
	});
	/**
	 * Modal is a lower-level construct that is leveraged by the following components:
	 *
	 * - [Dialog](/api/dialog/)
	 * - [Drawer](/api/drawer/)
	 * - [Menu](/api/menu/)
	 * - [Popover](/api/popover/)
	 *
	 * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
	 * rather than directly using Modal.
	 *
	 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
	 */

	const Modal = /*#__PURE__*/React$R.forwardRef(function Modal(inProps, ref) {
	  var _componentsProps$root;

	  const props = (0, _useThemeProps$C.default)({
	    name: 'MuiModal',
	    props: inProps
	  });
	  const {
	    BackdropComponent = ModalBackdrop,
	    closeAfterTransition = false,
	    children,
	    components = {},
	    componentsProps = {},
	    disableAutoFocus = false,
	    disableEnforceFocus = false,
	    disableEscapeKeyDown = false,
	    disablePortal = false,
	    disableRestoreFocus = false,
	    disableScrollLock = false,
	    hideBackdrop = false,
	    keepMounted = false
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$L.default)(props, _excluded$L);
	  const [exited, setExited] = React$R.useState(true);
	  const commonProps = {
	    closeAfterTransition,
	    disableAutoFocus,
	    disableEnforceFocus,
	    disableEscapeKeyDown,
	    disablePortal,
	    disableRestoreFocus,
	    disableScrollLock,
	    hideBackdrop,
	    keepMounted
	  };
	  const ownerState = (0, _extends2$M.default)({}, props, commonProps, {
	    exited
	  });
	  const classes = extendUtilityClasses$2(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$X.jsx)(_ModalUnstyled.default, (0, _extends2$M.default)({
	    components: (0, _extends2$M.default)({
	      Root: ModalRoot
	    }, components),
	    componentsProps: {
	      root: (0, _extends2$M.default)({}, componentsProps.root, (!components.Root || !(0, _base$1h.isHostComponent)(components.Root)) && {
	        ownerState: (0, _extends2$M.default)({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState)
	      })
	    },
	    BackdropComponent: BackdropComponent,
	    onTransitionEnter: () => setExited(false),
	    onTransitionExited: () => setExited(true),
	    ref: ref
	  }, other, {
	    classes: classes
	  }, commonProps, {
	    children: children
	  }));
	});
	Modal.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A backdrop component. This prop enables custom backdrop rendering.
	   * @default styled(Backdrop, {
	   *   name: 'MuiModal',
	   *   slot: 'Backdrop',
	   *   overridesResolver: (props, styles) => {
	   *     return styles.backdrop;
	   *   },
	   * })({
	   *   zIndex: -1,
	   * })
	   */
	  BackdropComponent: _propTypes$N.default.elementType,

	  /**
	   * Props applied to the [`Backdrop`](/api/backdrop/) element.
	   */
	  BackdropProps: _propTypes$N.default.object,

	  /**
	   * A single child content element.
	   */
	  children: _utils$r.elementAcceptingRef.isRequired,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$N.default.object,

	  /**
	   * When set to true the Modal waits until a nested Transition is completed before closing.
	   * @default false
	   */
	  closeAfterTransition: _propTypes$N.default.bool,

	  /**
	   * The components used for each slot inside the Modal.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$N.default.shape({
	    Root: _propTypes$N.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Modal.
	   * @default {}
	   */
	  componentsProps: _propTypes$N.default.shape({
	    root: _propTypes$N.default.object
	  }),

	  /**
	   * An HTML element or function that returns one.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: _propTypes$N.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_utils$r.HTMLElementType, _propTypes$N.default.func]),

	  /**
	   * If `true`, the modal will not automatically shift focus to itself when it opens, and
	   * replace it to the last focused element when it closes.
	   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableAutoFocus: _propTypes$N.default.bool,

	  /**
	   * If `true`, the modal will not prevent focus from leaving the modal while open.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   * @default false
	   */
	  disableEnforceFocus: _propTypes$N.default.bool,

	  /**
	   * If `true`, hitting escape will not fire the `onClose` callback.
	   * @default false
	   */
	  disableEscapeKeyDown: _propTypes$N.default.bool,

	  /**
	   * The `children` will be under the DOM hierarchy of the parent component.
	   * @default false
	   */
	  disablePortal: _propTypes$N.default.bool,

	  /**
	   * If `true`, the modal will not restore focus to previously focused element once
	   * modal is hidden.
	   * @default false
	   */
	  disableRestoreFocus: _propTypes$N.default.bool,

	  /**
	   * Disable the scroll lock behavior.
	   * @default false
	   */
	  disableScrollLock: _propTypes$N.default.bool,

	  /**
	   * If `true`, the backdrop is not rendered.
	   * @default false
	   */
	  hideBackdrop: _propTypes$N.default.bool,

	  /**
	   * Always keep the children in the DOM.
	   * This prop can be useful in SEO situation or
	   * when you want to maximize the responsiveness of the Modal.
	   * @default false
	   */
	  keepMounted: _propTypes$N.default.bool,

	  /**
	   * Callback fired when the backdrop is clicked.
	   */
	  onBackdropClick: _propTypes$N.default.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   * The `reason` parameter can optionally be used to control the response to `onClose`.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
	   */
	  onClose: _propTypes$N.default.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: _propTypes$N.default.bool.isRequired,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$N.default.oneOfType([_propTypes$N.default.arrayOf(_propTypes$N.default.oneOfType([_propTypes$N.default.func, _propTypes$N.default.object, _propTypes$N.default.bool])), _propTypes$N.default.func, _propTypes$N.default.object])
	} ;
	var _default$1D = Modal;
	Modal$1.default = _default$1D;

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Modal.default;
		  }
		});

		var _ModalUnstyled = ModalUnstyled$2;

		Object.keys(_ModalUnstyled).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _ModalUnstyled[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _ModalUnstyled[key];
		    }
		  });
		});

		var _Modal = _interopRequireWildcard(Modal$1);

		Object.keys(_Modal).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _Modal[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _Modal[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Modal$2));

	var Paper$2 = {};

	var Paper$1 = {};

	var paperClasses$1 = {};

	Object.defineProperty(paperClasses$1, "__esModule", {
	  value: true
	});
	paperClasses$1.default = void 0;
	paperClasses$1.getPaperUtilityClass = getPaperUtilityClass;

	var _base$1g = node$1;

	function getPaperUtilityClass(slot) {
	  return (0, _base$1g.generateUtilityClass)('MuiPaper', slot);
	}

	const paperClasses = (0, _base$1g.generateUtilityClasses)('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);
	var _default$1C = paperClasses;
	paperClasses$1.default = _default$1C;

	var _interopRequireDefault$X = interopRequireDefault.exports;

	Object.defineProperty(Paper$1, "__esModule", {
	  value: true
	});
	Paper$1.default = void 0;

	var _objectWithoutPropertiesLoose2$K = _interopRequireDefault$X(objectWithoutPropertiesLoose.exports);

	var _extends2$L = _interopRequireDefault$X(_extends$5.exports);

	var React$Q = _interopRequireWildcard$U(require$$3);

	var _propTypes$M = _interopRequireDefault$X(propTypes.exports);

	var _clsx$A = _interopRequireDefault$X(clsx$1);

	var _utils$q = utils$h;

	var _base$1f = node$1;

	var _system$8 = system;

	var _styled$E = _interopRequireDefault$X(styled$1);

	var _useThemeProps$B = _interopRequireDefault$X(useThemeProps$1);

	var _useTheme$6 = _interopRequireDefault$X(useTheme$8);

	var _paperClasses = paperClasses$1;

	var _jsxRuntime$W = jsxRuntime;

	const _excluded$K = ["className", "component", "elevation", "square", "variant"];

	function _getRequireWildcardCache$U(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$U = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$U(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$U(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	// Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
	const getOverlayAlpha = elevation => {
	  let alphaValue;

	  if (elevation < 1) {
	    alphaValue = 5.11916 * elevation ** 2;
	  } else {
	    alphaValue = 4.5 * Math.log(elevation + 1) + 2;
	  }

	  return (alphaValue / 100).toFixed(2);
	};

	const useUtilityClasses$D = ownerState => {
	  const {
	    square,
	    elevation,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, !square && 'rounded', variant === 'elevation' && `elevation${elevation}`]
	  };
	  return (0, _base$1f.unstable_composeClasses)(slots, _paperClasses.getPaperUtilityClass, classes);
	};

	const PaperRoot = (0, _styled$E.default)('div', {
	  name: 'MuiPaper',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$L.default)({
	  backgroundColor: theme.palette.background.paper,
	  color: theme.palette.text.primary,
	  transition: theme.transitions.create('box-shadow')
	}, !ownerState.square && {
	  borderRadius: theme.shape.borderRadius
	}, ownerState.variant === 'outlined' && {
	  border: `1px solid ${theme.palette.divider}`
	}, ownerState.variant === 'elevation' && (0, _extends2$L.default)({
	  boxShadow: theme.shadows[ownerState.elevation]
	}, theme.palette.mode === 'dark' && {
	  backgroundImage: `linear-gradient(${(0, _system$8.alpha)('#fff', getOverlayAlpha(ownerState.elevation))}, ${(0, _system$8.alpha)('#fff', getOverlayAlpha(ownerState.elevation))})`
	})));
	const Paper = /*#__PURE__*/React$Q.forwardRef(function Paper(inProps, ref) {
	  const props = (0, _useThemeProps$B.default)({
	    props: inProps,
	    name: 'MuiPaper'
	  });
	  const {
	    className,
	    component = 'div',
	    elevation = 1,
	    square = false,
	    variant = 'elevation'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$K.default)(props, _excluded$K);
	  const ownerState = (0, _extends2$L.default)({}, props, {
	    component,
	    elevation,
	    square,
	    variant
	  });
	  const classes = useUtilityClasses$D(ownerState);

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    const theme = (0, _useTheme$6.default)();

	    if (theme.shadows[elevation] === undefined) {
	      console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join('\n'));
	    }
	  }

	  return /*#__PURE__*/(0, _jsxRuntime$W.jsx)(PaperRoot, (0, _extends2$L.default)({
	    as: component,
	    ownerState: ownerState,
	    className: (0, _clsx$A.default)(classes.root, className),
	    ref: ref
	  }, other));
	});
	Paper.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$M.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$M.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$M.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$M.default.elementType,

	  /**
	   * Shadow depth, corresponds to `dp` in the spec.
	   * It accepts values between 0 and 24 inclusive.
	   * @default 1
	   */
	  elevation: (0, _utils$q.chainPropTypes)(_utils$q.integerPropType, props => {
	    const {
	      elevation,
	      variant
	    } = props;

	    if (elevation > 0 && variant === 'outlined') {
	      return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
	    }

	    return null;
	  }),

	  /**
	   * If `true`, rounded corners are disabled.
	   * @default false
	   */
	  square: _propTypes$M.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$M.default.oneOfType([_propTypes$M.default.arrayOf(_propTypes$M.default.oneOfType([_propTypes$M.default.func, _propTypes$M.default.object, _propTypes$M.default.bool])), _propTypes$M.default.func, _propTypes$M.default.object]),

	  /**
	   * The variant to use.
	   * @default 'elevation'
	   */
	  variant: _propTypes$M.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$M.default.oneOf(['elevation', 'outlined']), _propTypes$M.default.string])
	} ;
	var _default$1B = Paper;
	Paper$1.default = _default$1B;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  paperClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Paper.default;
		  }
		});
		Object.defineProperty(exports, "paperClasses", {
		  enumerable: true,
		  get: function () {
		    return _paperClasses.default;
		  }
		});

		var _Paper = _interopRequireDefault(Paper$1);

		var _paperClasses = _interopRequireWildcard(paperClasses$1);

		Object.keys(_paperClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _paperClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _paperClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Paper$2));

	var drawerClasses$1 = {};

	Object.defineProperty(drawerClasses$1, "__esModule", {
	  value: true
	});
	drawerClasses$1.default = void 0;
	drawerClasses$1.getDrawerUtilityClass = getDrawerUtilityClass;

	var _base$1e = node$1;

	function getDrawerUtilityClass(slot) {
	  return (0, _base$1e.generateUtilityClass)('MuiDrawer', slot);
	}

	const drawerClasses = (0, _base$1e.generateUtilityClasses)('MuiDrawer', ['root', 'docked', 'paper', 'paperAnchorLeft', 'paperAnchorRight', 'paperAnchorTop', 'paperAnchorBottom', 'paperAnchorDockedLeft', 'paperAnchorDockedRight', 'paperAnchorDockedTop', 'paperAnchorDockedBottom', 'modal']);
	var _default$1A = drawerClasses;
	drawerClasses$1.default = _default$1A;

	var _interopRequireDefault$W = interopRequireDefault.exports;

	Object.defineProperty(Drawer$2, "__esModule", {
	  value: true
	});
	Drawer$2.default = void 0;
	Drawer$2.getAnchor = getAnchor;
	Drawer$2.isHorizontal = isHorizontal;

	var _objectWithoutPropertiesLoose2$J = _interopRequireDefault$W(objectWithoutPropertiesLoose.exports);

	var _extends2$K = _interopRequireDefault$W(_extends$5.exports);

	var React$P = _interopRequireWildcard$T(require$$3);

	var _propTypes$L = _interopRequireDefault$W(propTypes.exports);

	var _clsx$z = _interopRequireDefault$W(clsx$1);

	var _utils$p = utils$h;

	var _base$1d = node$1;

	var _Modal$2 = _interopRequireDefault$W(Modal$2);

	var _Slide = _interopRequireDefault$W(Slide$3);

	var _Paper$5 = _interopRequireDefault$W(Paper$2);

	var _capitalize$e = _interopRequireDefault$W(capitalize);

	var _createTransitions$1 = createTransitions$1;

	var _useTheme$5 = _interopRequireDefault$W(useTheme$8);

	var _useThemeProps$A = _interopRequireDefault$W(useThemeProps$1);

	var _styled$D = _interopRequireWildcard$T(styled$1);

	var _drawerClasses = drawerClasses$1;

	var _jsxRuntime$V = jsxRuntime;

	const _excluded$J = ["BackdropProps"],
	      _excluded2$3 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"];

	function _getRequireWildcardCache$T(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$T = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$T(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$T(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const overridesResolver$2 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, (ownerState.variant === 'permanent' || ownerState.variant === 'persistent') && styles.docked, styles.modal];
	};

	const useUtilityClasses$C = ownerState => {
	  const {
	    classes,
	    anchor,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    docked: [(variant === 'permanent' || variant === 'persistent') && 'docked'],
	    modal: ['modal'],
	    paper: ['paper', `paperAnchor${(0, _capitalize$e.default)(anchor)}`, variant !== 'temporary' && `paperAnchorDocked${(0, _capitalize$e.default)(anchor)}`]
	  };
	  return (0, _base$1d.unstable_composeClasses)(slots, _drawerClasses.getDrawerUtilityClass, classes);
	};

	const DrawerRoot = (0, _styled$D.default)(_Modal$2.default, {
	  name: 'MuiDrawer',
	  slot: 'Root',
	  overridesResolver: overridesResolver$2
	})(({
	  theme
	}) => ({
	  zIndex: theme.zIndex.drawer
	}));
	const DrawerDockedRoot = (0, _styled$D.default)('div', {
	  shouldForwardProp: _styled$D.rootShouldForwardProp,
	  name: 'MuiDrawer',
	  slot: 'Docked',
	  skipVariantsResolver: false,
	  overridesResolver: overridesResolver$2
	})({
	  flex: '0 0 auto'
	});
	const DrawerPaper = (0, _styled$D.default)(_Paper$5.default, {
	  name: 'MuiDrawer',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.paper, styles[`paperAnchor${(0, _capitalize$e.default)(ownerState.anchor)}`], ownerState.variant !== 'temporary' && styles[`paperAnchorDocked${(0, _capitalize$e.default)(ownerState.anchor)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$K.default)({
	  overflowY: 'auto',
	  display: 'flex',
	  flexDirection: 'column',
	  height: '100%',
	  flex: '1 0 auto',
	  zIndex: theme.zIndex.drawer,
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch',
	  // temporary style
	  position: 'fixed',
	  top: 0,
	  // We disable the focus ring for mouse, touch and keyboard users.
	  // At some point, it would be better to keep it for keyboard users.
	  // :focus-ring CSS pseudo-class will help.
	  outline: 0
	}, ownerState.anchor === 'left' && {
	  left: 0
	}, ownerState.anchor === 'top' && {
	  top: 0,
	  left: 0,
	  right: 0,
	  height: 'auto',
	  maxHeight: '100%'
	}, ownerState.anchor === 'right' && {
	  right: 0
	}, ownerState.anchor === 'bottom' && {
	  top: 'auto',
	  left: 0,
	  bottom: 0,
	  right: 0,
	  height: 'auto',
	  maxHeight: '100%'
	}, ownerState.anchor === 'left' && ownerState.variant !== 'temporary' && {
	  borderRight: `1px solid ${theme.palette.divider}`
	}, ownerState.anchor === 'top' && ownerState.variant !== 'temporary' && {
	  borderBottom: `1px solid ${theme.palette.divider}`
	}, ownerState.anchor === 'right' && ownerState.variant !== 'temporary' && {
	  borderLeft: `1px solid ${theme.palette.divider}`
	}, ownerState.anchor === 'bottom' && ownerState.variant !== 'temporary' && {
	  borderTop: `1px solid ${theme.palette.divider}`
	}));
	const oppositeDirection = {
	  left: 'right',
	  right: 'left',
	  top: 'down',
	  bottom: 'up'
	};

	function isHorizontal(anchor) {
	  return ['left', 'right'].indexOf(anchor) !== -1;
	}

	function getAnchor(theme, anchor) {
	  return theme.direction === 'rtl' && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
	}

	const defaultTransitionDuration$1 = {
	  enter: _createTransitions$1.duration.enteringScreen,
	  exit: _createTransitions$1.duration.leavingScreen
	};
	/**
	 * The props of the [Modal](/api/modal/) component are available
	 * when `variant="temporary"` is set.
	 */

	const Drawer$1 = /*#__PURE__*/React$P.forwardRef(function Drawer(inProps, ref) {
	  const props = (0, _useThemeProps$A.default)({
	    props: inProps,
	    name: 'MuiDrawer'
	  });
	  const {
	    anchor: anchorProp = 'left',
	    BackdropProps,
	    children,
	    className,
	    elevation = 16,
	    hideBackdrop = false,
	    ModalProps: {
	      BackdropProps: BackdropPropsProp
	    } = {},
	    onClose,
	    open = false,
	    PaperProps = {},
	    SlideProps,
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = _Slide.default,
	    transitionDuration = defaultTransitionDuration$1,
	    variant = 'temporary'
	  } = props,
	        ModalProps = (0, _objectWithoutPropertiesLoose2$J.default)(props.ModalProps, _excluded$J),
	        other = (0, _objectWithoutPropertiesLoose2$J.default)(props, _excluded2$3);
	  const theme = (0, _useTheme$5.default)(); // Let's assume that the Drawer will always be rendered on user space.
	  // We use this state is order to skip the appear transition during the
	  // initial mount of the component.

	  const mounted = React$P.useRef(false);
	  React$P.useEffect(() => {
	    mounted.current = true;
	  }, []);
	  const anchorInvariant = getAnchor(theme, anchorProp);
	  const anchor = anchorProp;
	  const ownerState = (0, _extends2$K.default)({}, props, {
	    anchor,
	    elevation,
	    open,
	    variant
	  }, other);
	  const classes = useUtilityClasses$C(ownerState);
	  const drawer = /*#__PURE__*/(0, _jsxRuntime$V.jsx)(DrawerPaper, (0, _extends2$K.default)({
	    elevation: variant === 'temporary' ? elevation : 0,
	    square: true
	  }, PaperProps, {
	    className: (0, _clsx$z.default)(classes.paper, PaperProps.className),
	    ownerState: ownerState,
	    children: children
	  }));

	  if (variant === 'permanent') {
	    return /*#__PURE__*/(0, _jsxRuntime$V.jsx)(DrawerDockedRoot, (0, _extends2$K.default)({
	      className: (0, _clsx$z.default)(classes.root, classes.docked, className),
	      ownerState: ownerState,
	      ref: ref
	    }, other, {
	      children: drawer
	    }));
	  }

	  const slidingDrawer = /*#__PURE__*/(0, _jsxRuntime$V.jsx)(TransitionComponent, (0, _extends2$K.default)({
	    in: open,
	    direction: oppositeDirection[anchorInvariant],
	    timeout: transitionDuration,
	    appear: mounted.current
	  }, SlideProps, {
	    children: drawer
	  }));

	  if (variant === 'persistent') {
	    return /*#__PURE__*/(0, _jsxRuntime$V.jsx)(DrawerDockedRoot, (0, _extends2$K.default)({
	      className: (0, _clsx$z.default)(classes.root, classes.docked, className),
	      ownerState: ownerState,
	      ref: ref
	    }, other, {
	      children: slidingDrawer
	    }));
	  } // variant === temporary


	  return /*#__PURE__*/(0, _jsxRuntime$V.jsx)(DrawerRoot, (0, _extends2$K.default)({
	    BackdropProps: (0, _extends2$K.default)({}, BackdropProps, BackdropPropsProp, {
	      transitionDuration
	    }),
	    className: (0, _clsx$z.default)(classes.root, classes.modal, className),
	    open: open,
	    ownerState: ownerState,
	    onClose: onClose,
	    hideBackdrop: hideBackdrop,
	    ref: ref
	  }, other, ModalProps, {
	    children: slidingDrawer
	  }));
	});
	Drawer$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Side from which the drawer will appear.
	   * @default 'left'
	   */
	  anchor: _propTypes$L.default.oneOf(['bottom', 'left', 'right', 'top']),

	  /**
	   * @ignore
	   */
	  BackdropProps: _propTypes$L.default.object,

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$L.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$L.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$L.default.string,

	  /**
	   * The elevation of the drawer.
	   * @default 16
	   */
	  elevation: _utils$p.integerPropType,

	  /**
	   * If `true`, the backdrop is not rendered.
	   * @default false
	   */
	  hideBackdrop: _propTypes$L.default.bool,

	  /**
	   * Props applied to the [`Modal`](/api/modal/) element.
	   * @default {}
	   */
	  ModalProps: _propTypes$L.default.object,

	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onClose: _propTypes$L.default.func,

	  /**
	   * If `true`, the component is shown.
	   * @default false
	   */
	  open: _propTypes$L.default.bool,

	  /**
	   * Props applied to the [`Paper`](/api/paper/) element.
	   * @default {}
	   */
	  PaperProps: _propTypes$L.default.object,

	  /**
	   * Props applied to the [`Slide`](/api/slide/) element.
	   */
	  SlideProps: _propTypes$L.default.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$L.default.oneOfType([_propTypes$L.default.arrayOf(_propTypes$L.default.oneOfType([_propTypes$L.default.func, _propTypes$L.default.object, _propTypes$L.default.bool])), _propTypes$L.default.func, _propTypes$L.default.object]),

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default { enter: duration.enteringScreen, exit: duration.leavingScreen }
	   */
	  transitionDuration: _propTypes$L.default.oneOfType([_propTypes$L.default.number, _propTypes$L.default.shape({
	    appear: _propTypes$L.default.number,
	    enter: _propTypes$L.default.number,
	    exit: _propTypes$L.default.number
	  })]),

	  /**
	   * The variant to use.
	   * @default 'temporary'
	   */
	  variant: _propTypes$L.default.oneOf(['permanent', 'persistent', 'temporary'])
	} ;
	var _default$1z = Drawer$1;
	Drawer$2.default = _default$1z;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  drawerClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Drawer.default;
		  }
		});
		Object.defineProperty(exports, "drawerClasses", {
		  enumerable: true,
		  get: function () {
		    return _drawerClasses.default;
		  }
		});

		var _Drawer = _interopRequireDefault(Drawer$2);

		var _drawerClasses = _interopRequireWildcard(drawerClasses$1);

		Object.keys(_drawerClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _drawerClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _drawerClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Drawer$3));

	var Drawer = /*@__PURE__*/getDefaultExportFromCjs(Drawer$3);

	var List$3 = {};

	var List$2 = {};

	var ListContext$1 = {};

	Object.defineProperty(ListContext$1, "__esModule", {
	  value: true
	});
	ListContext$1.default = void 0;

	var React$O = _interopRequireWildcard$S(require$$3);

	function _getRequireWildcardCache$S(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$S = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$S(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$S(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * @ignore - internal component.
	 */
	const ListContext = /*#__PURE__*/React$O.createContext({});

	{
	  ListContext.displayName = 'ListContext';
	}

	var _default$1y = ListContext;
	ListContext$1.default = _default$1y;

	var listClasses$1 = {};

	Object.defineProperty(listClasses$1, "__esModule", {
	  value: true
	});
	listClasses$1.default = void 0;
	listClasses$1.getListUtilityClass = getListUtilityClass;

	var _base$1c = node$1;

	function getListUtilityClass(slot) {
	  return (0, _base$1c.generateUtilityClass)('MuiList', slot);
	}

	const listClasses = (0, _base$1c.generateUtilityClasses)('MuiList', ['root', 'padding', 'dense', 'subheader']);
	var _default$1x = listClasses;
	listClasses$1.default = _default$1x;

	var _interopRequireDefault$V = interopRequireDefault.exports;

	Object.defineProperty(List$2, "__esModule", {
	  value: true
	});
	List$2.default = void 0;

	var _objectWithoutPropertiesLoose2$I = _interopRequireDefault$V(objectWithoutPropertiesLoose.exports);

	var _extends2$J = _interopRequireDefault$V(_extends$5.exports);

	var React$N = _interopRequireWildcard$R(require$$3);

	var _propTypes$K = _interopRequireDefault$V(propTypes.exports);

	var _clsx$y = _interopRequireDefault$V(clsx$1);

	var _base$1b = node$1;

	var _styled$C = _interopRequireDefault$V(styled$1);

	var _useThemeProps$z = _interopRequireDefault$V(useThemeProps$1);

	var _ListContext$4 = _interopRequireDefault$V(ListContext$1);

	var _listClasses = listClasses$1;

	var _jsxRuntime$U = jsxRuntime;

	const _excluded$I = ["children", "className", "component", "dense", "disablePadding", "subheader"];

	function _getRequireWildcardCache$R(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$R = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$R(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$R(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$B = ownerState => {
	  const {
	    classes,
	    disablePadding,
	    dense,
	    subheader
	  } = ownerState;
	  const slots = {
	    root: ['root', !disablePadding && 'padding', dense && 'dense', subheader && 'subheader']
	  };
	  return (0, _base$1b.unstable_composeClasses)(slots, _listClasses.getListUtilityClass, classes);
	};

	const ListRoot = (0, _styled$C.default)('ul', {
	  name: 'MuiList',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$J.default)({
	  listStyle: 'none',
	  margin: 0,
	  padding: 0,
	  position: 'relative'
	}, !ownerState.disablePadding && {
	  paddingTop: 8,
	  paddingBottom: 8
	}, ownerState.subheader && {
	  paddingTop: 0
	}));
	const List$1 = /*#__PURE__*/React$N.forwardRef(function List(inProps, ref) {
	  const props = (0, _useThemeProps$z.default)({
	    props: inProps,
	    name: 'MuiList'
	  });
	  const {
	    children,
	    className,
	    component = 'ul',
	    dense = false,
	    disablePadding = false,
	    subheader
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$I.default)(props, _excluded$I);
	  const context = React$N.useMemo(() => ({
	    dense
	  }), [dense]);
	  const ownerState = (0, _extends2$J.default)({}, props, {
	    component,
	    dense,
	    disablePadding
	  });
	  const classes = useUtilityClasses$B(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$U.jsx)(_ListContext$4.default.Provider, {
	    value: context,
	    children: /*#__PURE__*/(0, _jsxRuntime$U.jsxs)(ListRoot, (0, _extends2$J.default)({
	      as: component,
	      className: (0, _clsx$y.default)(classes.root, className),
	      ref: ref,
	      ownerState: ownerState
	    }, other, {
	      children: [subheader, children]
	    }))
	  });
	});
	List$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$K.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$K.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$K.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$K.default.elementType,

	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input is used for
	   * the list and list items.
	   * The prop is available to descendant components as the `dense` context.
	   * @default false
	   */
	  dense: _propTypes$K.default.bool,

	  /**
	   * If `true`, vertical padding is removed from the list.
	   * @default false
	   */
	  disablePadding: _propTypes$K.default.bool,

	  /**
	   * The content of the subheader, normally `ListSubheader`.
	   */
	  subheader: _propTypes$K.default.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$K.default.oneOfType([_propTypes$K.default.arrayOf(_propTypes$K.default.oneOfType([_propTypes$K.default.func, _propTypes$K.default.object, _propTypes$K.default.bool])), _propTypes$K.default.func, _propTypes$K.default.object])
	} ;
	var _default$1w = List$1;
	List$2.default = _default$1w;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  listClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _List.default;
		  }
		});
		Object.defineProperty(exports, "listClasses", {
		  enumerable: true,
		  get: function () {
		    return _listClasses.default;
		  }
		});

		var _List = _interopRequireDefault(List$2);

		var _listClasses = _interopRequireWildcard(listClasses$1);

		Object.keys(_listClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _listClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _listClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (List$3));

	var List = /*@__PURE__*/getDefaultExportFromCjs(List$3);

	var ListItemButton$3 = {};

	var ListItemButton$2 = {};

	var listItemButtonClasses$1 = {};

	Object.defineProperty(listItemButtonClasses$1, "__esModule", {
	  value: true
	});
	listItemButtonClasses$1.default = void 0;
	listItemButtonClasses$1.getListItemButtonUtilityClass = getListItemButtonUtilityClass;

	var _base$1a = node$1;

	function getListItemButtonUtilityClass(slot) {
	  return (0, _base$1a.generateUtilityClass)('MuiListItemButton', slot);
	}

	const listItemButtonClasses = (0, _base$1a.generateUtilityClasses)('MuiListItemButton', ['root', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'selected']);
	var _default$1v = listItemButtonClasses;
	listItemButtonClasses$1.default = _default$1v;

	var _interopRequireDefault$U = interopRequireDefault.exports;

	Object.defineProperty(ListItemButton$2, "__esModule", {
	  value: true
	});
	ListItemButton$2.overridesResolver = ListItemButton$2.default = void 0;

	var _objectWithoutPropertiesLoose2$H = _interopRequireDefault$U(objectWithoutPropertiesLoose.exports);

	var _extends2$I = _interopRequireDefault$U(_extends$5.exports);

	var React$M = _interopRequireWildcard$Q(require$$3);

	var _propTypes$J = _interopRequireDefault$U(propTypes.exports);

	var _clsx$x = _interopRequireDefault$U(clsx$1);

	var _base$19 = node$1;

	var _system$7 = system;

	var _styled$B = _interopRequireWildcard$Q(styled$1);

	var _useThemeProps$y = _interopRequireDefault$U(useThemeProps$1);

	var _ButtonBase$6 = _interopRequireDefault$U(ButtonBase$2);

	var _useEnhancedEffect$3 = _interopRequireDefault$U(useEnhancedEffect$1);

	var _useForkRef$7 = _interopRequireDefault$U(useForkRef);

	var _ListContext$3 = _interopRequireDefault$U(ListContext$1);

	var _listItemButtonClasses = _interopRequireWildcard$Q(listItemButtonClasses$1);

	var _jsxRuntime$T = jsxRuntime;

	const _excluded$H = ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected"];

	function _getRequireWildcardCache$Q(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$Q = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$Q(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$Q(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const overridesResolver$1 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
	};

	ListItemButton$2.overridesResolver = overridesResolver$1;

	const useUtilityClasses$A = ownerState => {
	  const {
	    alignItems,
	    classes,
	    dense,
	    disabled,
	    disableGutters,
	    divider,
	    selected
	  } = ownerState;
	  const slots = {
	    root: ['root', dense && 'dense', !disableGutters && 'gutters', divider && 'divider', disabled && 'disabled', alignItems === 'flex-start' && 'alignItemsFlexStart', selected && 'selected']
	  };
	  const composedClasses = (0, _base$19.unstable_composeClasses)(slots, _listItemButtonClasses.getListItemButtonUtilityClass, classes);
	  return (0, _extends2$I.default)({}, classes, composedClasses);
	};

	const ListItemButtonRoot = (0, _styled$B.default)(_ButtonBase$6.default, {
	  shouldForwardProp: prop => (0, _styled$B.rootShouldForwardProp)(prop) || prop === 'classes',
	  name: 'MuiListItemButton',
	  slot: 'Root',
	  overridesResolver: overridesResolver$1
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$I.default)({
	  display: 'flex',
	  flexGrow: 1,
	  justifyContent: 'flex-start',
	  alignItems: 'center',
	  position: 'relative',
	  textDecoration: 'none',
	  boxSizing: 'border-box',
	  textAlign: 'left',
	  paddingTop: 8,
	  paddingBottom: 8,
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  '&:hover': {
	    textDecoration: 'none',
	    backgroundColor: theme.palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${_listItemButtonClasses.default.selected}`]: {
	    backgroundColor: (0, _system$7.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    [`&.${_listItemButtonClasses.default.focusVisible}`]: {
	      backgroundColor: (0, _system$7.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  },
	  [`&.${_listItemButtonClasses.default.selected}:hover`]: {
	    backgroundColor: (0, _system$7.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: (0, _system$7.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
	    }
	  },
	  [`&.${_listItemButtonClasses.default.focusVisible}`]: {
	    backgroundColor: theme.palette.action.focus
	  },
	  [`&.${_listItemButtonClasses.default.disabled}`]: {
	    opacity: theme.palette.action.disabledOpacity
	  }
	}, ownerState.divider && {
	  borderBottom: `1px solid ${theme.palette.divider}`,
	  backgroundClip: 'padding-box'
	}, ownerState.alignItems === 'flex-start' && {
	  alignItems: 'flex-start'
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, ownerState.dense && {
	  paddingTop: 4,
	  paddingBottom: 4
	}));
	const ListItemButton$1 = /*#__PURE__*/React$M.forwardRef(function ListItemButton(inProps, ref) {
	  const props = (0, _useThemeProps$y.default)({
	    props: inProps,
	    name: 'MuiListItemButton'
	  });
	  const {
	    alignItems = 'center',
	    autoFocus = false,
	    component = 'div',
	    children,
	    dense = false,
	    disableGutters = false,
	    divider = false,
	    focusVisibleClassName,
	    selected = false
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$H.default)(props, _excluded$H);
	  const context = React$M.useContext(_ListContext$3.default);
	  const childContext = {
	    dense: dense || context.dense || false,
	    alignItems,
	    disableGutters
	  };
	  const listItemRef = React$M.useRef(null);
	  (0, _useEnhancedEffect$3.default)(() => {
	    if (autoFocus) {
	      if (listItemRef.current) {
	        listItemRef.current.focus();
	      } else {
	        console.error('MUI: Unable to set focus to a ListItemButton whose component has not been rendered.');
	      }
	    }
	  }, [autoFocus]);
	  const ownerState = (0, _extends2$I.default)({}, props, {
	    alignItems,
	    dense: childContext.dense,
	    disableGutters,
	    divider,
	    selected
	  });
	  const classes = useUtilityClasses$A(ownerState);
	  const handleRef = (0, _useForkRef$7.default)(listItemRef, ref);
	  return /*#__PURE__*/(0, _jsxRuntime$T.jsx)(_ListContext$3.default.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/(0, _jsxRuntime$T.jsx)(ListItemButtonRoot, (0, _extends2$I.default)({
	      ref: handleRef,
	      component: component,
	      focusVisibleClassName: (0, _clsx$x.default)(classes.focusVisible, focusVisibleClassName),
	      ownerState: ownerState
	    }, other, {
	      classes: classes,
	      children: children
	    }))
	  });
	});
	ListItemButton$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Defines the `align-items` style property.
	   * @default 'center'
	   */
	  alignItems: _propTypes$J.default.oneOf(['center', 'flex-start']),

	  /**
	   * If `true`, the list item is focused during the first mount.
	   * Focus will also be triggered if the value changes from false to true.
	   * @default false
	   */
	  autoFocus: _propTypes$J.default.bool,

	  /**
	   * The content of the component if a `ListItemSecondaryAction` is used it must
	   * be the last child.
	   */
	  children: _propTypes$J.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$J.default.object,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$J.default.elementType,

	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
	   * The prop defaults to the value inherited from the parent List component.
	   * @default false
	   */
	  dense: _propTypes$J.default.bool,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: _propTypes$J.default.bool,

	  /**
	   * If `true`, the left and right padding is removed.
	   * @default false
	   */
	  disableGutters: _propTypes$J.default.bool,

	  /**
	   * If `true`, a 1px light border is added to the bottom of the list item.
	   * @default false
	   */
	  divider: _propTypes$J.default.bool,

	  /**
	   * This prop can help identify which element has keyboard focus.
	   * The class name will be applied when the element gains the focus through keyboard interaction.
	   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
	   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
	   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
	   * if needed.
	   */
	  focusVisibleClassName: _propTypes$J.default.string,

	  /**
	   * Use to apply selected styling.
	   * @default false
	   */
	  selected: _propTypes$J.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$J.default.oneOfType([_propTypes$J.default.arrayOf(_propTypes$J.default.oneOfType([_propTypes$J.default.func, _propTypes$J.default.object, _propTypes$J.default.bool])), _propTypes$J.default.func, _propTypes$J.default.object])
	} ;
	var _default$1u = ListItemButton$1;
	ListItemButton$2.default = _default$1u;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  listItemButtonClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ListItemButton.default;
		  }
		});
		Object.defineProperty(exports, "listItemButtonClasses", {
		  enumerable: true,
		  get: function () {
		    return _listItemButtonClasses.default;
		  }
		});

		var _ListItemButton = _interopRequireDefault(ListItemButton$2);

		var _listItemButtonClasses = _interopRequireWildcard(listItemButtonClasses$1);

		Object.keys(_listItemButtonClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _listItemButtonClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _listItemButtonClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ListItemButton$3));

	var ListItemButton = /*@__PURE__*/getDefaultExportFromCjs(ListItemButton$3);

	var ListItem$3 = {};

	var ListItem$2 = {};

	var listItemClasses$1 = {};

	Object.defineProperty(listItemClasses$1, "__esModule", {
	  value: true
	});
	listItemClasses$1.default = void 0;
	listItemClasses$1.getListItemUtilityClass = getListItemUtilityClass;

	var _base$18 = node$1;

	function getListItemUtilityClass(slot) {
	  return (0, _base$18.generateUtilityClass)('MuiListItem', slot);
	}

	const listItemClasses = (0, _base$18.generateUtilityClasses)('MuiListItem', ['root', 'container', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'padding', 'button', 'secondaryAction', 'selected']);
	var _default$1t = listItemClasses;
	listItemClasses$1.default = _default$1t;

	var ListItemSecondaryAction$2 = {};

	var ListItemSecondaryAction$1 = {};

	var listItemSecondaryActionClasses$1 = {};

	Object.defineProperty(listItemSecondaryActionClasses$1, "__esModule", {
	  value: true
	});
	listItemSecondaryActionClasses$1.default = void 0;
	listItemSecondaryActionClasses$1.getListItemSecondaryActionClassesUtilityClass = getListItemSecondaryActionClassesUtilityClass;

	var _base$17 = node$1;

	function getListItemSecondaryActionClassesUtilityClass(slot) {
	  return (0, _base$17.generateUtilityClass)('MuiListItemSecondaryAction', slot);
	}

	const listItemSecondaryActionClasses = (0, _base$17.generateUtilityClasses)('MuiListItemSecondaryAction', ['root', 'disableGutters']);
	var _default$1s = listItemSecondaryActionClasses;
	listItemSecondaryActionClasses$1.default = _default$1s;

	var _interopRequireDefault$T = interopRequireDefault.exports;

	Object.defineProperty(ListItemSecondaryAction$1, "__esModule", {
	  value: true
	});
	ListItemSecondaryAction$1.default = void 0;

	var _objectWithoutPropertiesLoose2$G = _interopRequireDefault$T(objectWithoutPropertiesLoose.exports);

	var _extends2$H = _interopRequireDefault$T(_extends$5.exports);

	var React$L = _interopRequireWildcard$P(require$$3);

	var _propTypes$I = _interopRequireDefault$T(propTypes.exports);

	var _clsx$w = _interopRequireDefault$T(clsx$1);

	var _base$16 = node$1;

	var _styled$A = _interopRequireDefault$T(styled$1);

	var _useThemeProps$x = _interopRequireDefault$T(useThemeProps$1);

	var _ListContext$2 = _interopRequireDefault$T(ListContext$1);

	var _listItemSecondaryActionClasses = listItemSecondaryActionClasses$1;

	var _jsxRuntime$S = jsxRuntime;

	const _excluded$G = ["className"];

	function _getRequireWildcardCache$P(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$P = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$P(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$P(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$z = ownerState => {
	  const {
	    disableGutters,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', disableGutters && 'disableGutters']
	  };
	  return (0, _base$16.unstable_composeClasses)(slots, _listItemSecondaryActionClasses.getListItemSecondaryActionClassesUtilityClass, classes);
	};

	const ListItemSecondaryActionRoot = (0, _styled$A.default)('div', {
	  name: 'MuiListItemSecondaryAction',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.disableGutters && styles.disableGutters];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$H.default)({
	  position: 'absolute',
	  right: 16,
	  top: '50%',
	  transform: 'translateY(-50%)'
	}, ownerState.disableGutters && {
	  right: 0
	}));
	/**
	 * Must be used as the last child of ListItem to function properly.
	 */

	const ListItemSecondaryAction = /*#__PURE__*/React$L.forwardRef(function ListItemSecondaryAction(inProps, ref) {
	  const props = (0, _useThemeProps$x.default)({
	    props: inProps,
	    name: 'MuiListItemSecondaryAction'
	  });
	  const {
	    className
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$G.default)(props, _excluded$G);
	  const context = React$L.useContext(_ListContext$2.default);
	  const ownerState = (0, _extends2$H.default)({}, props, {
	    disableGutters: context.disableGutters
	  });
	  const classes = useUtilityClasses$z(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$S.jsx)(ListItemSecondaryActionRoot, (0, _extends2$H.default)({
	    className: (0, _clsx$w.default)(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	ListItemSecondaryAction.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component, normally an `IconButton` or selection control.
	   */
	  children: _propTypes$I.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$I.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$I.default.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$I.default.oneOfType([_propTypes$I.default.arrayOf(_propTypes$I.default.oneOfType([_propTypes$I.default.func, _propTypes$I.default.object, _propTypes$I.default.bool])), _propTypes$I.default.func, _propTypes$I.default.object])
	} ;
	ListItemSecondaryAction.muiName = 'ListItemSecondaryAction';
	var _default$1r = ListItemSecondaryAction;
	ListItemSecondaryAction$1.default = _default$1r;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  listItemSecondaryActionClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ListItemSecondaryAction.default;
		  }
		});
		Object.defineProperty(exports, "listItemSecondaryActionClasses", {
		  enumerable: true,
		  get: function () {
		    return _listItemSecondaryActionClasses.default;
		  }
		});

		var _ListItemSecondaryAction = _interopRequireDefault(ListItemSecondaryAction$1);

		var _listItemSecondaryActionClasses = _interopRequireWildcard(listItemSecondaryActionClasses$1);

		Object.keys(_listItemSecondaryActionClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _listItemSecondaryActionClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _listItemSecondaryActionClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ListItemSecondaryAction$2));

	var _interopRequireDefault$S = interopRequireDefault.exports;

	Object.defineProperty(ListItem$2, "__esModule", {
	  value: true
	});
	ListItem$2.overridesResolver = ListItem$2.default = ListItem$2.ListItemRoot = void 0;

	var _objectWithoutPropertiesLoose2$F = _interopRequireDefault$S(objectWithoutPropertiesLoose.exports);

	var _extends2$G = _interopRequireDefault$S(_extends$5.exports);

	var React$K = _interopRequireWildcard$O(require$$3);

	var _propTypes$H = _interopRequireDefault$S(propTypes.exports);

	var _clsx$v = _interopRequireDefault$S(clsx$1);

	var _base$15 = node$1;

	var _utils$o = utils$h;

	var _system$6 = system;

	var _styled$z = _interopRequireDefault$S(styled$1);

	var _useThemeProps$w = _interopRequireDefault$S(useThemeProps$1);

	var _ButtonBase$5 = _interopRequireDefault$S(ButtonBase$2);

	var _isMuiElement$1 = _interopRequireDefault$S(isMuiElement);

	var _useEnhancedEffect$2 = _interopRequireDefault$S(useEnhancedEffect$1);

	var _useForkRef$6 = _interopRequireDefault$S(useForkRef);

	var _ListContext$1 = _interopRequireDefault$S(ListContext$1);

	var _listItemClasses = _interopRequireWildcard$O(listItemClasses$1);

	var _ListItemButton = ListItemButton$3;

	var _ListItemSecondaryAction = _interopRequireDefault$S(ListItemSecondaryAction$2);

	var _jsxRuntime$R = jsxRuntime;

	const _excluded$F = ["className"],
	      _excluded2$2 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected"];

	function _getRequireWildcardCache$O(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$O = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$O(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$O(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const overridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters, !ownerState.disablePadding && styles.padding, ownerState.button && styles.button, ownerState.hasSecondaryAction && styles.secondaryAction];
	};

	ListItem$2.overridesResolver = overridesResolver;

	const useUtilityClasses$y = ownerState => {
	  const {
	    alignItems,
	    button,
	    classes,
	    dense,
	    disabled,
	    disableGutters,
	    disablePadding,
	    divider,
	    hasSecondaryAction,
	    selected
	  } = ownerState;
	  const slots = {
	    root: ['root', dense && 'dense', !disableGutters && 'gutters', !disablePadding && 'padding', divider && 'divider', disabled && 'disabled', button && 'button', alignItems === 'flex-start' && 'alignItemsFlexStart', hasSecondaryAction && 'secondaryAction', selected && 'selected'],
	    container: ['container']
	  };
	  return (0, _base$15.unstable_composeClasses)(slots, _listItemClasses.getListItemUtilityClass, classes);
	};

	const ListItemRoot = (0, _styled$z.default)('div', {
	  name: 'MuiListItem',
	  slot: 'Root',
	  overridesResolver
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$G.default)({
	  display: 'flex',
	  justifyContent: 'flex-start',
	  alignItems: 'center',
	  position: 'relative',
	  textDecoration: 'none',
	  width: '100%',
	  boxSizing: 'border-box',
	  textAlign: 'left'
	}, !ownerState.disablePadding && (0, _extends2$G.default)({
	  paddingTop: 8,
	  paddingBottom: 8
	}, ownerState.dense && {
	  paddingTop: 4,
	  paddingBottom: 4
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, !!ownerState.secondaryAction && {
	  // Add some space to avoid collision as `ListItemSecondaryAction`
	  // is absolutely positioned.
	  paddingRight: 48
	}), !!ownerState.secondaryAction && {
	  [`& > .${_ListItemButton.listItemButtonClasses.root}`]: {
	    paddingRight: 48
	  }
	}, {
	  [`&.${_listItemClasses.default.focusVisible}`]: {
	    backgroundColor: theme.palette.action.focus
	  },
	  [`&.${_listItemClasses.default.selected}`]: {
	    backgroundColor: (0, _system$6.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    [`&.${_listItemClasses.default.focusVisible}`]: {
	      backgroundColor: (0, _system$6.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  },
	  [`&.${_listItemClasses.default.disabled}`]: {
	    opacity: theme.palette.action.disabledOpacity
	  }
	}, ownerState.alignItems === 'flex-start' && {
	  alignItems: 'flex-start'
	}, ownerState.divider && {
	  borderBottom: `1px solid ${theme.palette.divider}`,
	  backgroundClip: 'padding-box'
	}, ownerState.button && {
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  '&:hover': {
	    textDecoration: 'none',
	    backgroundColor: theme.palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${_listItemClasses.default.selected}:hover`]: {
	    backgroundColor: (0, _system$6.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: (0, _system$6.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
	    }
	  }
	}, ownerState.hasSecondaryAction && {
	  // Add some space to avoid collision as `ListItemSecondaryAction`
	  // is absolutely positioned.
	  paddingRight: 48
	}));
	ListItem$2.ListItemRoot = ListItemRoot;
	const ListItemContainer = (0, _styled$z.default)('li', {
	  name: 'MuiListItem',
	  slot: 'Container',
	  overridesResolver: (props, styles) => styles.container
	})({
	  position: 'relative'
	});
	/**
	 * Uses an additional container component if `ListItemSecondaryAction` is the last child.
	 */

	const ListItem$1 = /*#__PURE__*/React$K.forwardRef(function ListItem(inProps, ref) {
	  const props = (0, _useThemeProps$w.default)({
	    props: inProps,
	    name: 'MuiListItem'
	  });
	  const {
	    alignItems = 'center',
	    autoFocus = false,
	    button = false,
	    children: childrenProp,
	    className,
	    component: componentProp,
	    components = {},
	    componentsProps = {},
	    ContainerComponent = 'li',
	    ContainerProps: {
	      className: ContainerClassName
	    } = {},
	    dense = false,
	    disabled = false,
	    disableGutters = false,
	    disablePadding = false,
	    divider = false,
	    focusVisibleClassName,
	    secondaryAction,
	    selected = false
	  } = props,
	        ContainerProps = (0, _objectWithoutPropertiesLoose2$F.default)(props.ContainerProps, _excluded$F),
	        other = (0, _objectWithoutPropertiesLoose2$F.default)(props, _excluded2$2);
	  const context = React$K.useContext(_ListContext$1.default);
	  const childContext = {
	    dense: dense || context.dense || false,
	    alignItems,
	    disableGutters
	  };
	  const listItemRef = React$K.useRef(null);
	  (0, _useEnhancedEffect$2.default)(() => {
	    if (autoFocus) {
	      if (listItemRef.current) {
	        listItemRef.current.focus();
	      } else {
	        console.error('MUI: Unable to set focus to a ListItem whose component has not been rendered.');
	      }
	    }
	  }, [autoFocus]);
	  const children = React$K.Children.toArray(childrenProp); // v4 implementation, deprecated in v5, will be removed in v6

	  const hasSecondaryAction = children.length && (0, _isMuiElement$1.default)(children[children.length - 1], ['ListItemSecondaryAction']);
	  const ownerState = (0, _extends2$G.default)({}, props, {
	    alignItems,
	    autoFocus,
	    button,
	    dense: childContext.dense,
	    disabled,
	    disableGutters,
	    disablePadding,
	    divider,
	    hasSecondaryAction,
	    selected
	  });
	  const classes = useUtilityClasses$y(ownerState);
	  const handleRef = (0, _useForkRef$6.default)(listItemRef, ref);
	  const Root = components.Root || ListItemRoot;
	  const rootProps = componentsProps.root || {};
	  const componentProps = (0, _extends2$G.default)({
	    className: (0, _clsx$v.default)(classes.root, rootProps.className, className),
	    disabled
	  }, other);
	  let Component = componentProp || 'li';

	  if (button) {
	    componentProps.component = componentProp || 'div';
	    componentProps.focusVisibleClassName = (0, _clsx$v.default)(_listItemClasses.default.focusVisible, focusVisibleClassName);
	    Component = _ButtonBase$5.default;
	  } // v4 implementation, deprecated in v5, will be removed in v6


	  if (hasSecondaryAction) {
	    // Use div by default.
	    Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.

	    if (ContainerComponent === 'li') {
	      if (Component === 'li') {
	        Component = 'div';
	      } else if (componentProps.component === 'li') {
	        componentProps.component = 'div';
	      }
	    }

	    return /*#__PURE__*/(0, _jsxRuntime$R.jsx)(_ListContext$1.default.Provider, {
	      value: childContext,
	      children: /*#__PURE__*/(0, _jsxRuntime$R.jsxs)(ListItemContainer, (0, _extends2$G.default)({
	        as: ContainerComponent,
	        className: (0, _clsx$v.default)(classes.container, ContainerClassName),
	        ref: handleRef,
	        ownerState: ownerState
	      }, ContainerProps, {
	        children: [/*#__PURE__*/(0, _jsxRuntime$R.jsx)(Root, (0, _extends2$G.default)({}, rootProps, !(0, _base$15.isHostComponent)(Root) && {
	          as: Component,
	          ownerState: (0, _extends2$G.default)({}, ownerState, rootProps.ownerState)
	        }, componentProps, {
	          children: children
	        })), children.pop()]
	      }))
	    });
	  }

	  return /*#__PURE__*/(0, _jsxRuntime$R.jsx)(_ListContext$1.default.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/(0, _jsxRuntime$R.jsxs)(Root, (0, _extends2$G.default)({}, rootProps, {
	      as: Component,
	      ref: handleRef,
	      ownerState: ownerState
	    }, !(0, _base$15.isHostComponent)(Root) && {
	      ownerState: (0, _extends2$G.default)({}, ownerState, rootProps.ownerState)
	    }, componentProps, {
	      children: [children, secondaryAction && /*#__PURE__*/(0, _jsxRuntime$R.jsx)(_ListItemSecondaryAction.default, {
	        children: secondaryAction
	      })]
	    }))
	  });
	});
	ListItem$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Defines the `align-items` style property.
	   * @default 'center'
	   */
	  alignItems: _propTypes$H.default.oneOf(['center', 'flex-start']),

	  /**
	   * If `true`, the list item is focused during the first mount.
	   * Focus will also be triggered if the value changes from false to true.
	   * @default false
	   * @deprecated checkout [ListItemButton](/api/list-item-button/) instead
	   */
	  autoFocus: _propTypes$H.default.bool,

	  /**
	   * If `true`, the list item is a button (using `ButtonBase`). Props intended
	   * for `ButtonBase` can then be applied to `ListItem`.
	   * @default false
	   * @deprecated checkout [ListItemButton](/api/list-item-button/) instead
	   */
	  button: _propTypes$H.default.bool,

	  /**
	   * The content of the component if a `ListItemSecondaryAction` is used it must
	   * be the last child.
	   */
	  children: (0, _utils$o.chainPropTypes)(_propTypes$H.default.node, props => {
	    const children = React$K.Children.toArray(props.children); // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)

	    let secondaryActionIndex = -1;

	    for (let i = children.length - 1; i >= 0; i -= 1) {
	      const child = children[i];

	      if ((0, _isMuiElement$1.default)(child, ['ListItemSecondaryAction'])) {
	        secondaryActionIndex = i;
	        break;
	      }
	    } //  is ListItemSecondaryAction the last child of ListItem


	    if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
	      return new Error('MUI: You used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');
	    }

	    return null;
	  }),

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$H.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$H.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$H.default.elementType,

	  /**
	   * The components used for each slot inside the InputBase.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$H.default.shape({
	    Root: _propTypes$H.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: _propTypes$H.default.shape({
	    root: _propTypes$H.default.object
	  }),

	  /**
	   * The container component used when a `ListItemSecondaryAction` is the last child.
	   * @default 'li'
	   * @deprecated
	   */
	  ContainerComponent: _utils$o.elementTypeAcceptingRef,

	  /**
	   * Props applied to the container component if used.
	   * @default {}
	   * @deprecated
	   */
	  ContainerProps: _propTypes$H.default.object,

	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
	   * The prop defaults to the value inherited from the parent List component.
	   * @default false
	   */
	  dense: _propTypes$H.default.bool,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   * @deprecated checkout [ListItemButton](/api/list-item-button/) instead
	   */
	  disabled: _propTypes$H.default.bool,

	  /**
	   * If `true`, the left and right padding is removed.
	   * @default false
	   */
	  disableGutters: _propTypes$H.default.bool,

	  /**
	   * If `true`, all padding is removed.
	   * @default false
	   */
	  disablePadding: _propTypes$H.default.bool,

	  /**
	   * If `true`, a 1px light border is added to the bottom of the list item.
	   * @default false
	   */
	  divider: _propTypes$H.default.bool,

	  /**
	   * @ignore
	   */
	  focusVisibleClassName: _propTypes$H.default.string,

	  /**
	   * The element to display at the end of ListItem.
	   */
	  secondaryAction: _propTypes$H.default.node,

	  /**
	   * Use to apply selected styling.
	   * @default false
	   * @deprecated checkout [ListItemButton](/api/list-item-button/) instead
	   */
	  selected: _propTypes$H.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$H.default.oneOfType([_propTypes$H.default.arrayOf(_propTypes$H.default.oneOfType([_propTypes$H.default.func, _propTypes$H.default.object, _propTypes$H.default.bool])), _propTypes$H.default.func, _propTypes$H.default.object])
	} ;
	var _default$1q = ListItem$1;
	ListItem$2.default = _default$1q;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  listItemClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ListItem.default;
		  }
		});
		Object.defineProperty(exports, "listItemClasses", {
		  enumerable: true,
		  get: function () {
		    return _listItemClasses.default;
		  }
		});

		var _ListItem = _interopRequireDefault(ListItem$2);

		var _listItemClasses = _interopRequireWildcard(listItemClasses$1);

		Object.keys(_listItemClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _listItemClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _listItemClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ListItem$3));

	var ListItem = /*@__PURE__*/getDefaultExportFromCjs(ListItem$3);

	var ListItemText$3 = {};

	var ListItemText$2 = {};

	var Typography$3 = {};

	var Typography$2 = {};

	var typographyClasses$1 = {};

	Object.defineProperty(typographyClasses$1, "__esModule", {
	  value: true
	});
	typographyClasses$1.default = void 0;
	typographyClasses$1.getTypographyUtilityClass = getTypographyUtilityClass;

	var _base$14 = node$1;

	function getTypographyUtilityClass(slot) {
	  return (0, _base$14.generateUtilityClass)('MuiTypography', slot);
	}

	const typographyClasses = (0, _base$14.generateUtilityClasses)('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);
	var _default$1p = typographyClasses;
	typographyClasses$1.default = _default$1p;

	var _interopRequireDefault$R = interopRequireDefault.exports;

	Object.defineProperty(Typography$2, "__esModule", {
	  value: true
	});
	Typography$2.default = Typography$2.TypographyRoot = void 0;

	var _objectWithoutPropertiesLoose2$E = _interopRequireDefault$R(objectWithoutPropertiesLoose.exports);

	var _extends2$F = _interopRequireDefault$R(_extends$5.exports);

	var React$J = _interopRequireWildcard$N(require$$3);

	var _propTypes$G = _interopRequireDefault$R(propTypes.exports);

	var _clsx$u = _interopRequireDefault$R(clsx$1);

	var _system$5 = system;

	var _base$13 = node$1;

	var _styled$y = _interopRequireDefault$R(styled$1);

	var _useThemeProps$v = _interopRequireDefault$R(useThemeProps$1);

	var _capitalize$d = _interopRequireDefault$R(capitalize);

	var _typographyClasses = typographyClasses$1;

	var _jsxRuntime$Q = jsxRuntime;

	const _excluded$E = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];

	function _getRequireWildcardCache$N(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$N = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$N(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$N(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$x = ownerState => {
	  const {
	    align,
	    gutterBottom,
	    noWrap,
	    paragraph,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, ownerState.align !== 'inherit' && `align${(0, _capitalize$d.default)(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
	  };
	  return (0, _base$13.unstable_composeClasses)(slots, _typographyClasses.getTypographyUtilityClass, classes);
	};

	const TypographyRoot = (0, _styled$y.default)('span', {
	  name: 'MuiTypography',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${(0, _capitalize$d.default)(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$F.default)({
	  margin: 0
	}, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
	  textAlign: ownerState.align
	}, ownerState.noWrap && {
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  whiteSpace: 'nowrap'
	}, ownerState.gutterBottom && {
	  marginBottom: '0.35em'
	}, ownerState.paragraph && {
	  marginBottom: 16
	}));
	Typography$2.TypographyRoot = TypographyRoot;
	const defaultVariantMapping = {
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  subtitle1: 'h6',
	  subtitle2: 'h6',
	  body1: 'p',
	  body2: 'p',
	  inherit: 'p'
	}; // TODO v6: deprecate these color values in v5.x and remove the transformation in v6

	const colorTransformations = {
	  primary: 'primary.main',
	  textPrimary: 'text.primary',
	  secondary: 'secondary.main',
	  textSecondary: 'text.secondary',
	  error: 'error.main'
	};

	const transformDeprecatedColors = color => {
	  return colorTransformations[color] || color;
	};

	const Typography$1 = /*#__PURE__*/React$J.forwardRef(function Typography(inProps, ref) {
	  const themeProps = (0, _useThemeProps$v.default)({
	    props: inProps,
	    name: 'MuiTypography'
	  });
	  const color = transformDeprecatedColors(themeProps.color);
	  const props = (0, _system$5.unstable_extendSxProp)((0, _extends2$F.default)({}, themeProps, {
	    color
	  }));
	  const {
	    align = 'inherit',
	    className,
	    component,
	    gutterBottom = false,
	    noWrap = false,
	    paragraph = false,
	    variant = 'body1',
	    variantMapping = defaultVariantMapping
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$E.default)(props, _excluded$E);
	  const ownerState = (0, _extends2$F.default)({}, props, {
	    align,
	    color,
	    className,
	    component,
	    gutterBottom,
	    noWrap,
	    paragraph,
	    variant,
	    variantMapping
	  });
	  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
	  const classes = useUtilityClasses$x(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$Q.jsx)(TypographyRoot, (0, _extends2$F.default)({
	    as: Component,
	    ref: ref,
	    ownerState: ownerState,
	    className: (0, _clsx$u.default)(classes.root, className)
	  }, other));
	});
	Typography$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Set the text-align on the component.
	   * @default 'inherit'
	   */
	  align: _propTypes$G.default.oneOf(['center', 'inherit', 'justify', 'left', 'right']),

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$G.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$G.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$G.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$G.default.elementType,

	  /**
	   * If `true`, the text will have a bottom margin.
	   * @default false
	   */
	  gutterBottom: _propTypes$G.default.bool,

	  /**
	   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
	   *
	   * Note that text overflow can only happen with block or inline-block level elements
	   * (the element needs to have a width in order to overflow).
	   * @default false
	   */
	  noWrap: _propTypes$G.default.bool,

	  /**
	   * If `true`, the element will be a paragraph element.
	   * @default false
	   */
	  paragraph: _propTypes$G.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$G.default.oneOfType([_propTypes$G.default.arrayOf(_propTypes$G.default.oneOfType([_propTypes$G.default.func, _propTypes$G.default.object, _propTypes$G.default.bool])), _propTypes$G.default.func, _propTypes$G.default.object]),

	  /**
	   * Applies the theme typography styles.
	   * @default 'body1'
	   */
	  variant: _propTypes$G.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$G.default.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), _propTypes$G.default.string]),

	  /**
	   * The component maps the variant prop to a range of different HTML element types.
	   * For instance, subtitle1 to `<h6>`.
	   * If you wish to change that mapping, you can provide your own.
	   * Alternatively, you can use the `component` prop.
	   * @default {
	   *   h1: 'h1',
	   *   h2: 'h2',
	   *   h3: 'h3',
	   *   h4: 'h4',
	   *   h5: 'h5',
	   *   h6: 'h6',
	   *   subtitle1: 'h6',
	   *   subtitle2: 'h6',
	   *   body1: 'p',
	   *   body2: 'p',
	   *   inherit: 'p',
	   * }
	   */
	  variantMapping: _propTypes$G.default
	  /* @typescript-to-proptypes-ignore */
	  .object
	} ;
	var _default$1o = Typography$1;
	Typography$2.default = _default$1o;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  typographyClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Typography.default;
		  }
		});
		Object.defineProperty(exports, "typographyClasses", {
		  enumerable: true,
		  get: function () {
		    return _typographyClasses.default;
		  }
		});

		var _Typography = _interopRequireDefault(Typography$2);

		var _typographyClasses = _interopRequireWildcard(typographyClasses$1);

		Object.keys(_typographyClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _typographyClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _typographyClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Typography$3));

	var Typography = /*@__PURE__*/getDefaultExportFromCjs(Typography$3);

	var listItemTextClasses$1 = {};

	Object.defineProperty(listItemTextClasses$1, "__esModule", {
	  value: true
	});
	listItemTextClasses$1.default = void 0;
	listItemTextClasses$1.getListItemTextUtilityClass = getListItemTextUtilityClass;

	var _base$12 = node$1;

	function getListItemTextUtilityClass(slot) {
	  return (0, _base$12.generateUtilityClass)('MuiListItemText', slot);
	}

	const listItemTextClasses = (0, _base$12.generateUtilityClasses)('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);
	var _default$1n = listItemTextClasses;
	listItemTextClasses$1.default = _default$1n;

	var _interopRequireDefault$Q = interopRequireDefault.exports;

	Object.defineProperty(ListItemText$2, "__esModule", {
	  value: true
	});
	ListItemText$2.default = void 0;

	var _objectWithoutPropertiesLoose2$D = _interopRequireDefault$Q(objectWithoutPropertiesLoose.exports);

	var _extends2$E = _interopRequireDefault$Q(_extends$5.exports);

	var React$I = _interopRequireWildcard$M(require$$3);

	var _propTypes$F = _interopRequireDefault$Q(propTypes.exports);

	var _clsx$t = _interopRequireDefault$Q(clsx$1);

	var _base$11 = node$1;

	var _Typography$2 = _interopRequireDefault$Q(Typography$3);

	var _ListContext = _interopRequireDefault$Q(ListContext$1);

	var _useThemeProps$u = _interopRequireDefault$Q(useThemeProps$1);

	var _styled$x = _interopRequireDefault$Q(styled$1);

	var _listItemTextClasses = _interopRequireWildcard$M(listItemTextClasses$1);

	var _jsxRuntime$P = jsxRuntime;

	const _excluded$D = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];

	function _getRequireWildcardCache$M(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$M = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$M(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$M(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$w = ownerState => {
	  const {
	    classes,
	    inset,
	    primary,
	    secondary,
	    dense
	  } = ownerState;
	  const slots = {
	    root: ['root', inset && 'inset', dense && 'dense', primary && secondary && 'multiline'],
	    primary: ['primary'],
	    secondary: ['secondary']
	  };
	  return (0, _base$11.unstable_composeClasses)(slots, _listItemTextClasses.getListItemTextUtilityClass, classes);
	};

	const ListItemTextRoot = (0, _styled$x.default)('div', {
	  name: 'MuiListItemText',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${_listItemTextClasses.default.primary}`]: styles.primary
	    }, {
	      [`& .${_listItemTextClasses.default.secondary}`]: styles.secondary
	    }, styles.root, ownerState.inset && styles.inset, ownerState.primary && ownerState.secondary && styles.multiline, ownerState.dense && styles.dense];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$E.default)({
	  flex: '1 1 auto',
	  minWidth: 0,
	  marginTop: 4,
	  marginBottom: 4
	}, ownerState.primary && ownerState.secondary && {
	  marginTop: 6,
	  marginBottom: 6
	}, ownerState.inset && {
	  paddingLeft: 56
	}));
	const ListItemText$1 = /*#__PURE__*/React$I.forwardRef(function ListItemText(inProps, ref) {
	  const props = (0, _useThemeProps$u.default)({
	    props: inProps,
	    name: 'MuiListItemText'
	  });
	  const {
	    children,
	    className,
	    disableTypography = false,
	    inset = false,
	    primary: primaryProp,
	    primaryTypographyProps,
	    secondary: secondaryProp,
	    secondaryTypographyProps
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$D.default)(props, _excluded$D);
	  const {
	    dense
	  } = React$I.useContext(_ListContext.default);
	  let primary = primaryProp != null ? primaryProp : children;
	  let secondary = secondaryProp;
	  const ownerState = (0, _extends2$E.default)({}, props, {
	    disableTypography,
	    inset,
	    primary: !!primary,
	    secondary: !!secondary,
	    dense
	  });
	  const classes = useUtilityClasses$w(ownerState);

	  if (primary != null && primary.type !== _Typography$2.default && !disableTypography) {
	    primary = /*#__PURE__*/(0, _jsxRuntime$P.jsx)(_Typography$2.default, (0, _extends2$E.default)({
	      variant: dense ? 'body2' : 'body1',
	      className: classes.primary,
	      component: "span",
	      display: "block"
	    }, primaryTypographyProps, {
	      children: primary
	    }));
	  }

	  if (secondary != null && secondary.type !== _Typography$2.default && !disableTypography) {
	    secondary = /*#__PURE__*/(0, _jsxRuntime$P.jsx)(_Typography$2.default, (0, _extends2$E.default)({
	      variant: "body2",
	      className: classes.secondary,
	      color: "text.secondary",
	      display: "block"
	    }, secondaryTypographyProps, {
	      children: secondary
	    }));
	  }

	  return /*#__PURE__*/(0, _jsxRuntime$P.jsxs)(ListItemTextRoot, (0, _extends2$E.default)({
	    className: (0, _clsx$t.default)(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [primary, secondary]
	  }));
	});
	ListItemText$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Alias for the `primary` prop.
	   */
	  children: _propTypes$F.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$F.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$F.default.string,

	  /**
	   * If `true`, the children won't be wrapped by a Typography component.
	   * This can be useful to render an alternative Typography variant by wrapping
	   * the `children` (or `primary`) text, and optional `secondary` text
	   * with the Typography component.
	   * @default false
	   */
	  disableTypography: _propTypes$F.default.bool,

	  /**
	   * If `true`, the children are indented.
	   * This should be used if there is no left avatar or left icon.
	   * @default false
	   */
	  inset: _propTypes$F.default.bool,

	  /**
	   * The main content element.
	   */
	  primary: _propTypes$F.default.node,

	  /**
	   * These props will be forwarded to the primary typography component
	   * (as long as disableTypography is not `true`).
	   */
	  primaryTypographyProps: _propTypes$F.default.object,

	  /**
	   * The secondary content element.
	   */
	  secondary: _propTypes$F.default.node,

	  /**
	   * These props will be forwarded to the secondary typography component
	   * (as long as disableTypography is not `true`).
	   */
	  secondaryTypographyProps: _propTypes$F.default.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$F.default.oneOfType([_propTypes$F.default.arrayOf(_propTypes$F.default.oneOfType([_propTypes$F.default.func, _propTypes$F.default.object, _propTypes$F.default.bool])), _propTypes$F.default.func, _propTypes$F.default.object])
	} ;
	var _default$1m = ListItemText$1;
	ListItemText$2.default = _default$1m;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  listItemTextClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ListItemText.default;
		  }
		});
		Object.defineProperty(exports, "listItemTextClasses", {
		  enumerable: true,
		  get: function () {
		    return _listItemTextClasses.default;
		  }
		});

		var _ListItemText = _interopRequireDefault(ListItemText$2);

		var _listItemTextClasses = _interopRequireWildcard(listItemTextClasses$1);

		Object.keys(_listItemTextClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _listItemTextClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _listItemTextClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ListItemText$3));

	var ListItemText = /*@__PURE__*/getDefaultExportFromCjs(ListItemText$3);

	var Switch$3 = {};

	var Switch$2 = {};

	var SwitchBase$1 = {};

	var useFormControl$1 = {};

	var FormControlContext$1 = {};

	Object.defineProperty(FormControlContext$1, "__esModule", {
	  value: true
	});
	FormControlContext$1.default = void 0;

	var React$H = _interopRequireWildcard$L(require$$3);

	function _getRequireWildcardCache$L(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$L = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$L(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$L(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * @ignore - internal component.
	 */
	const FormControlContext = /*#__PURE__*/React$H.createContext();

	{
	  FormControlContext.displayName = 'FormControlContext';
	}

	var _default$1l = FormControlContext;
	FormControlContext$1.default = _default$1l;

	var _interopRequireDefault$P = interopRequireDefault.exports;

	Object.defineProperty(useFormControl$1, "__esModule", {
	  value: true
	});
	useFormControl$1.default = useFormControl;

	var React$G = _interopRequireWildcard$K(require$$3);

	var _FormControlContext$2 = _interopRequireDefault$P(FormControlContext$1);

	function _getRequireWildcardCache$K(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$K = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$K(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$K(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function useFormControl() {
	  return React$G.useContext(_FormControlContext$2.default);
	}

	var switchBaseClasses$1 = {};

	Object.defineProperty(switchBaseClasses$1, "__esModule", {
	  value: true
	});
	switchBaseClasses$1.default = void 0;
	switchBaseClasses$1.getSwitchBaseUtilityClass = getSwitchBaseUtilityClass;

	var _base$10 = node$1;

	function getSwitchBaseUtilityClass(slot) {
	  return (0, _base$10.generateUtilityClass)('PrivateSwitchBase', slot);
	}

	const switchBaseClasses = (0, _base$10.generateUtilityClasses)('PrivateSwitchBase', ['root', 'checked', 'disabled', 'input', 'edgeStart', 'edgeEnd']);
	var _default$1k = switchBaseClasses;
	switchBaseClasses$1.default = _default$1k;

	var _interopRequireDefault$O = interopRequireDefault.exports;

	Object.defineProperty(SwitchBase$1, "__esModule", {
	  value: true
	});
	SwitchBase$1.default = void 0;

	var _objectWithoutPropertiesLoose2$C = _interopRequireDefault$O(objectWithoutPropertiesLoose.exports);

	var _extends2$D = _interopRequireDefault$O(_extends$5.exports);

	var React$F = _interopRequireWildcard$J(require$$3);

	var _propTypes$E = _interopRequireDefault$O(propTypes.exports);

	var _clsx$s = _interopRequireDefault$O(clsx$1);

	var _utils$n = utils$h;

	var _base$$ = node$1;

	var _capitalize$c = _interopRequireDefault$O(capitalize);

	var _styled$w = _interopRequireDefault$O(styled$1);

	var _useControlled$2 = _interopRequireDefault$O(useControlled);

	var _useFormControl$6 = _interopRequireDefault$O(useFormControl$1);

	var _ButtonBase$4 = _interopRequireDefault$O(ButtonBase$2);

	var _switchBaseClasses = switchBaseClasses$1;

	var _jsxRuntime$O = jsxRuntime;

	const _excluded$C = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];

	function _getRequireWildcardCache$J(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$J = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$J(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$J(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$v = ownerState => {
	  const {
	    classes,
	    checked,
	    disabled,
	    edge
	  } = ownerState;
	  const slots = {
	    root: ['root', checked && 'checked', disabled && 'disabled', edge && `edge${(0, _capitalize$c.default)(edge)}`],
	    input: ['input']
	  };
	  return (0, _base$$.unstable_composeClasses)(slots, _switchBaseClasses.getSwitchBaseUtilityClass, classes);
	};

	const SwitchBaseRoot = (0, _styled$w.default)(_ButtonBase$4.default)(({
	  ownerState
	}) => (0, _extends2$D.default)({
	  padding: 9,
	  borderRadius: '50%'
	}, ownerState.edge === 'start' && {
	  marginLeft: ownerState.size === 'small' ? -3 : -12
	}, ownerState.edge === 'end' && {
	  marginRight: ownerState.size === 'small' ? -3 : -12
	}));
	const SwitchBaseInput = (0, _styled$w.default)('input')({
	  cursor: 'inherit',
	  position: 'absolute',
	  opacity: 0,
	  width: '100%',
	  height: '100%',
	  top: 0,
	  left: 0,
	  margin: 0,
	  padding: 0,
	  zIndex: 1
	});
	/**
	 * @ignore - internal component.
	 */

	const SwitchBase = /*#__PURE__*/React$F.forwardRef(function SwitchBase(props, ref) {
	  const {
	    autoFocus,
	    checked: checkedProp,
	    checkedIcon,
	    className,
	    defaultChecked,
	    disabled: disabledProp,
	    disableFocusRipple = false,
	    edge = false,
	    icon,
	    id,
	    inputProps,
	    inputRef,
	    name,
	    onBlur,
	    onChange,
	    onFocus,
	    readOnly,
	    required,
	    tabIndex,
	    type,
	    value
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$C.default)(props, _excluded$C);
	  const [checked, setCheckedState] = (0, _useControlled$2.default)({
	    controlled: checkedProp,
	    default: Boolean(defaultChecked),
	    name: 'SwitchBase',
	    state: 'checked'
	  });
	  const muiFormControl = (0, _useFormControl$6.default)();

	  const handleFocus = event => {
	    if (onFocus) {
	      onFocus(event);
	    }

	    if (muiFormControl && muiFormControl.onFocus) {
	      muiFormControl.onFocus(event);
	    }
	  };

	  const handleBlur = event => {
	    if (onBlur) {
	      onBlur(event);
	    }

	    if (muiFormControl && muiFormControl.onBlur) {
	      muiFormControl.onBlur(event);
	    }
	  };

	  const handleInputChange = event => {
	    // Workaround for https://github.com/facebook/react/issues/9023
	    if (event.nativeEvent.defaultPrevented) {
	      return;
	    }

	    const newChecked = event.target.checked;
	    setCheckedState(newChecked);

	    if (onChange) {
	      // TODO v6: remove the second argument.
	      onChange(event, newChecked);
	    }
	  };

	  let disabled = disabledProp;

	  if (muiFormControl) {
	    if (typeof disabled === 'undefined') {
	      disabled = muiFormControl.disabled;
	    }
	  }

	  const hasLabelFor = type === 'checkbox' || type === 'radio';
	  const ownerState = (0, _extends2$D.default)({}, props, {
	    checked,
	    disabled,
	    disableFocusRipple,
	    edge
	  });
	  const classes = useUtilityClasses$v(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$O.jsxs)(SwitchBaseRoot, (0, _extends2$D.default)({
	    component: "span",
	    className: (0, _clsx$s.default)(classes.root, className),
	    centerRipple: true,
	    focusRipple: !disableFocusRipple,
	    disabled: disabled,
	    tabIndex: null,
	    role: undefined,
	    onFocus: handleFocus,
	    onBlur: handleBlur,
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [/*#__PURE__*/(0, _jsxRuntime$O.jsx)(SwitchBaseInput, (0, _extends2$D.default)({
	      autoFocus: autoFocus,
	      checked: checkedProp,
	      defaultChecked: defaultChecked,
	      className: classes.input,
	      disabled: disabled,
	      id: hasLabelFor && id,
	      name: name,
	      onChange: handleInputChange,
	      readOnly: readOnly,
	      ref: inputRef,
	      required: required,
	      ownerState: ownerState,
	      tabIndex: tabIndex,
	      type: type
	    }, type === 'checkbox' && value === undefined ? {} : {
	      value
	    }, inputProps)), checked ? checkedIcon : icon]
	  }));
	}); // NB: If changed, please update Checkbox, Switch and Radio
	// so that the API documentation is updated.

	SwitchBase.propTypes = {
	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   */
	  autoFocus: _propTypes$E.default.bool,

	  /**
	   * If `true`, the component is checked.
	   */
	  checked: _propTypes$E.default.bool,

	  /**
	   * The icon to display when the component is checked.
	   */
	  checkedIcon: _propTypes$E.default.node.isRequired,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: _propTypes$E.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$E.default.string,

	  /**
	   * @ignore
	   */
	  defaultChecked: _propTypes$E.default.bool,

	  /**
	   * If `true`, the component is disabled.
	   */
	  disabled: _propTypes$E.default.bool,

	  /**
	   * If `true`, the  keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: _propTypes$E.default.bool,

	  /**
	   * If given, uses a negative margin to counteract the padding on one
	   * side (this is often helpful for aligning the left or right
	   * side of the icon with content above or below, without ruining the border
	   * size and shape).
	   * @default false
	   */
	  edge: _propTypes$E.default.oneOf(['end', 'start', false]),

	  /**
	   * The icon to display when the component is unchecked.
	   */
	  icon: _propTypes$E.default.node.isRequired,

	  /**
	   * The id of the `input` element.
	   */
	  id: _propTypes$E.default.string,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: _propTypes$E.default.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: _utils$n.refType,

	  /*
	   * @ignore
	   */
	  name: _propTypes$E.default.string,

	  /**
	   * @ignore
	   */
	  onBlur: _propTypes$E.default.func,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: _propTypes$E.default.func,

	  /**
	   * @ignore
	   */
	  onFocus: _propTypes$E.default.func,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: _propTypes$E.default.bool,

	  /**
	   * If `true`, the `input` element is required.
	   */
	  required: _propTypes$E.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$E.default.object,

	  /**
	   * @ignore
	   */
	  tabIndex: _propTypes$E.default.oneOfType([_propTypes$E.default.number, _propTypes$E.default.string]),

	  /**
	   * The input component prop `type`.
	   */
	  type: _propTypes$E.default.string.isRequired,

	  /**
	   * The value of the component.
	   */
	  value: _propTypes$E.default.any
	} ;
	var _default$1j = SwitchBase;
	SwitchBase$1.default = _default$1j;

	var switchClasses$1 = {};

	Object.defineProperty(switchClasses$1, "__esModule", {
	  value: true
	});
	switchClasses$1.default = void 0;
	switchClasses$1.getSwitchUtilityClass = getSwitchUtilityClass;

	var _base$_ = node$1;

	function getSwitchUtilityClass(slot) {
	  return (0, _base$_.generateUtilityClass)('MuiSwitch', slot);
	}

	const switchClasses = (0, _base$_.generateUtilityClasses)('MuiSwitch', ['root', 'edgeStart', 'edgeEnd', 'switchBase', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium', 'checked', 'disabled', 'input', 'thumb', 'track']);
	var _default$1i = switchClasses;
	switchClasses$1.default = _default$1i;

	var _interopRequireDefault$N = interopRequireDefault.exports;

	Object.defineProperty(Switch$2, "__esModule", {
	  value: true
	});
	Switch$2.default = void 0;

	var _objectWithoutPropertiesLoose2$B = _interopRequireDefault$N(objectWithoutPropertiesLoose.exports);

	var _extends2$C = _interopRequireDefault$N(_extends$5.exports);

	var React$E = _interopRequireWildcard$I(require$$3);

	var _propTypes$D = _interopRequireDefault$N(propTypes.exports);

	var _clsx$r = _interopRequireDefault$N(clsx$1);

	var _utils$m = utils$h;

	var _base$Z = node$1;

	var _system$4 = system;

	var _capitalize$b = _interopRequireDefault$N(capitalize);

	var _SwitchBase = _interopRequireDefault$N(SwitchBase$1);

	var _useThemeProps$t = _interopRequireDefault$N(useThemeProps$1);

	var _styled$v = _interopRequireDefault$N(styled$1);

	var _switchClasses = _interopRequireWildcard$I(switchClasses$1);

	var _jsxRuntime$N = jsxRuntime;

	const _excluded$B = ["className", "color", "edge", "size", "sx"];

	function _getRequireWildcardCache$I(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$I = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$I(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$I(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$u = ownerState => {
	  const {
	    classes,
	    edge,
	    size,
	    color,
	    checked,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', edge && `edge${(0, _capitalize$b.default)(edge)}`, `size${(0, _capitalize$b.default)(size)}`],
	    switchBase: ['switchBase', `color${(0, _capitalize$b.default)(color)}`, checked && 'checked', disabled && 'disabled'],
	    thumb: ['thumb'],
	    track: ['track'],
	    input: ['input']
	  };
	  const composedClasses = (0, _base$Z.unstable_composeClasses)(slots, _switchClasses.getSwitchUtilityClass, classes);
	  return (0, _extends2$C.default)({}, classes, composedClasses);
	};

	const SwitchRoot = (0, _styled$v.default)('span', {
	  name: 'MuiSwitch',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.edge && styles[`edge${(0, _capitalize$b.default)(ownerState.edge)}`], styles[`size${(0, _capitalize$b.default)(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$C.default)({
	  display: 'inline-flex',
	  width: 34 + 12 * 2,
	  height: 14 + 12 * 2,
	  overflow: 'hidden',
	  padding: 12,
	  boxSizing: 'border-box',
	  position: 'relative',
	  flexShrink: 0,
	  zIndex: 0,
	  // Reset the stacking context.
	  verticalAlign: 'middle',
	  // For correct alignment with the text.
	  '@media print': {
	    colorAdjust: 'exact'
	  }
	}, ownerState.edge === 'start' && {
	  marginLeft: -8
	}, ownerState.edge === 'end' && {
	  marginRight: -8
	}, ownerState.size === 'small' && {
	  width: 40,
	  height: 24,
	  padding: 7,
	  [`& .${_switchClasses.default.thumb}`]: {
	    width: 16,
	    height: 16
	  },
	  [`& .${_switchClasses.default.switchBase}`]: {
	    padding: 4,
	    [`&.${_switchClasses.default.checked}`]: {
	      transform: 'translateX(16px)'
	    }
	  }
	}));
	const SwitchSwitchBase = (0, _styled$v.default)(_SwitchBase.default, {
	  name: 'MuiSwitch',
	  slot: 'SwitchBase',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.switchBase, {
	      [`& .${_switchClasses.default.input}`]: styles.input
	    }, ownerState.color !== 'default' && styles[`color${(0, _capitalize$b.default)(ownerState.color)}`]];
	  }
	})(({
	  theme
	}) => ({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  zIndex: 1,
	  // Render above the focus ripple.
	  color: theme.palette.mode === 'light' ? theme.palette.common.white : theme.palette.grey[300],
	  transition: theme.transitions.create(['left', 'transform'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  [`&.${_switchClasses.default.checked}`]: {
	    transform: 'translateX(20px)'
	  },
	  [`&.${_switchClasses.default.disabled}`]: {
	    color: theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[600]
	  },
	  [`&.${_switchClasses.default.checked} + .${_switchClasses.default.track}`]: {
	    opacity: 0.5
	  },
	  [`&.${_switchClasses.default.disabled} + .${_switchClasses.default.track}`]: {
	    opacity: theme.palette.mode === 'light' ? 0.12 : 0.2
	  },
	  [`& .${_switchClasses.default.input}`]: {
	    left: '-100%',
	    width: '300%'
	  }
	}), ({
	  theme,
	  ownerState
	}) => (0, _extends2$C.default)({
	  '&:hover': {
	    backgroundColor: (0, _system$4.alpha)(theme.palette.action.active, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.color !== 'default' && {
	  [`&.${_switchClasses.default.checked}`]: {
	    color: theme.palette[ownerState.color].main,
	    '&:hover': {
	      backgroundColor: (0, _system$4.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    },
	    [`&.${_switchClasses.default.disabled}`]: {
	      color: theme.palette.mode === 'light' ? (0, _system$4.lighten)(theme.palette[ownerState.color].main, 0.62) : (0, _system$4.darken)(theme.palette[ownerState.color].main, 0.55)
	    }
	  },
	  [`&.${_switchClasses.default.checked} + .${_switchClasses.default.track}`]: {
	    backgroundColor: theme.palette[ownerState.color].main
	  }
	}));
	const SwitchTrack = (0, _styled$v.default)('span', {
	  name: 'MuiSwitch',
	  slot: 'Track',
	  overridesResolver: (props, styles) => styles.track
	})(({
	  theme
	}) => ({
	  height: '100%',
	  width: '100%',
	  borderRadius: 14 / 2,
	  zIndex: -1,
	  transition: theme.transitions.create(['opacity', 'background-color'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  backgroundColor: theme.palette.mode === 'light' ? theme.palette.common.black : theme.palette.common.white,
	  opacity: theme.palette.mode === 'light' ? 0.38 : 0.3
	}));
	const SwitchThumb = (0, _styled$v.default)('span', {
	  name: 'MuiSwitch',
	  slot: 'Thumb',
	  overridesResolver: (props, styles) => styles.thumb
	})(({
	  theme
	}) => ({
	  boxShadow: theme.shadows[1],
	  backgroundColor: 'currentColor',
	  width: 20,
	  height: 20,
	  borderRadius: '50%'
	}));
	const Switch$1 = /*#__PURE__*/React$E.forwardRef(function Switch(inProps, ref) {
	  const props = (0, _useThemeProps$t.default)({
	    props: inProps,
	    name: 'MuiSwitch'
	  });
	  const {
	    className,
	    color = 'primary',
	    edge = false,
	    size = 'medium',
	    sx
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$B.default)(props, _excluded$B);
	  const ownerState = (0, _extends2$C.default)({}, props, {
	    color,
	    edge,
	    size
	  });
	  const classes = useUtilityClasses$u(ownerState);
	  const icon = /*#__PURE__*/(0, _jsxRuntime$N.jsx)(SwitchThumb, {
	    className: classes.thumb,
	    ownerState: ownerState
	  });
	  return /*#__PURE__*/(0, _jsxRuntime$N.jsxs)(SwitchRoot, {
	    className: (0, _clsx$r.default)(classes.root, className),
	    sx: sx,
	    ownerState: ownerState,
	    children: [/*#__PURE__*/(0, _jsxRuntime$N.jsx)(SwitchSwitchBase, (0, _extends2$C.default)({
	      type: "checkbox",
	      icon: icon,
	      checkedIcon: icon,
	      ref: ref,
	      ownerState: ownerState
	    }, other, {
	      classes: (0, _extends2$C.default)({}, classes, {
	        root: classes.switchBase
	      })
	    })), /*#__PURE__*/(0, _jsxRuntime$N.jsx)(SwitchTrack, {
	      className: classes.track,
	      ownerState: ownerState
	    })]
	  });
	});
	Switch$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the component is checked.
	   */
	  checked: _propTypes$D.default.bool,

	  /**
	   * The icon to display when the component is checked.
	   */
	  checkedIcon: _propTypes$D.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$D.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$D.default.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * @default 'primary'
	   */
	  color: _propTypes$D.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$D.default.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), _propTypes$D.default.string]),

	  /**
	   * The default checked state. Use when the component is not controlled.
	   */
	  defaultChecked: _propTypes$D.default.bool,

	  /**
	   * If `true`, the component is disabled.
	   */
	  disabled: _propTypes$D.default.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   */
	  disableRipple: _propTypes$D.default.bool,

	  /**
	   * If given, uses a negative margin to counteract the padding on one
	   * side (this is often helpful for aligning the left or right
	   * side of the icon with content above or below, without ruining the border
	   * size and shape).
	   * @default false
	   */
	  edge: _propTypes$D.default.oneOf(['end', 'start', false]),

	  /**
	   * The icon to display when the component is unchecked.
	   */
	  icon: _propTypes$D.default.node,

	  /**
	   * The id of the `input` element.
	   */
	  id: _propTypes$D.default.string,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: _propTypes$D.default.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: _utils$m.refType,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: _propTypes$D.default.func,

	  /**
	   * If `true`, the `input` element is required.
	   */
	  required: _propTypes$D.default.bool,

	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense switch styling.
	   * @default 'medium'
	   */
	  size: _propTypes$D.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$D.default.oneOf(['medium', 'small']), _propTypes$D.default.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$D.default.oneOfType([_propTypes$D.default.arrayOf(_propTypes$D.default.oneOfType([_propTypes$D.default.func, _propTypes$D.default.object, _propTypes$D.default.bool])), _propTypes$D.default.func, _propTypes$D.default.object]),

	  /**
	   * The value of the component. The DOM API casts this to a string.
	   * The browser uses "on" as the default value.
	   */
	  value: _propTypes$D.default.any
	} ;
	var _default$1h = Switch$1;
	Switch$2.default = _default$1h;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  switchClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Switch.default;
		  }
		});
		Object.defineProperty(exports, "switchClasses", {
		  enumerable: true,
		  get: function () {
		    return _switchClasses.default;
		  }
		});

		var _Switch = _interopRequireDefault(Switch$2);

		var _switchClasses = _interopRequireWildcard(switchClasses$1);

		Object.keys(_switchClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _switchClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _switchClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Switch$3));

	var Switch = /*@__PURE__*/getDefaultExportFromCjs(Switch$3);

	var Box$3 = {};

	var Box$2 = {};

	Object.defineProperty(Box$2, "__esModule", {
	  value: true
	});
	Box$2.default = void 0;

	var _system$3 = system;

	var _utils$l = utils$a;

	var _styles$1 = styles$4;

	const defaultTheme = (0, _styles$1.createTheme)();
	/**
	 * @ignore - do not document.
	 */

	const Box$1 = (0, _system$3.createBox)({
	  defaultTheme,
	  defaultClassName: 'MuiBox-root',
	  generateClassName: _utils$l.unstable_ClassNameGenerator.generate
	});
	var _default$1g = Box$1;
	Box$2.default = _default$1g;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Box.default;
		  }
		});

		var _Box = _interopRequireDefault(Box$2);
	} (Box$3));

	var Box = /*@__PURE__*/getDefaultExportFromCjs(Box$3);

	var Tab$3 = {};

	var Tab$2 = {};

	var tabClasses$1 = {};

	Object.defineProperty(tabClasses$1, "__esModule", {
	  value: true
	});
	tabClasses$1.default = void 0;
	tabClasses$1.getTabUtilityClass = getTabUtilityClass;

	var _base$Y = node$1;

	function getTabUtilityClass(slot) {
	  return (0, _base$Y.generateUtilityClass)('MuiTab', slot);
	}

	const tabClasses = (0, _base$Y.generateUtilityClasses)('MuiTab', ['root', 'labelIcon', 'textColorInherit', 'textColorPrimary', 'textColorSecondary', 'selected', 'disabled', 'fullWidth', 'wrapped', 'iconWrapper']);
	var _default$1f = tabClasses;
	tabClasses$1.default = _default$1f;

	var _interopRequireDefault$M = interopRequireDefault.exports;

	Object.defineProperty(Tab$2, "__esModule", {
	  value: true
	});
	Tab$2.default = void 0;

	var _objectWithoutPropertiesLoose2$A = _interopRequireDefault$M(objectWithoutPropertiesLoose.exports);

	var _extends2$B = _interopRequireDefault$M(_extends$5.exports);

	var React$D = _interopRequireWildcard$H(require$$3);

	var _propTypes$C = _interopRequireDefault$M(propTypes.exports);

	var _clsx$q = _interopRequireDefault$M(clsx$1);

	var _base$X = node$1;

	var _ButtonBase$3 = _interopRequireDefault$M(ButtonBase$2);

	var _capitalize$a = _interopRequireDefault$M(capitalize);

	var _useThemeProps$s = _interopRequireDefault$M(useThemeProps$1);

	var _styled$u = _interopRequireDefault$M(styled$1);

	var _unsupportedProp = _interopRequireDefault$M(unsupportedProp);

	var _tabClasses = _interopRequireWildcard$H(tabClasses$1);

	var _jsxRuntime$M = jsxRuntime;

	const _excluded$A = ["className", "disabled", "disableFocusRipple", "fullWidth", "icon", "iconPosition", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"];

	function _getRequireWildcardCache$H(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$H = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$H(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$H(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$t = ownerState => {
	  const {
	    classes,
	    textColor,
	    fullWidth,
	    wrapped,
	    icon,
	    label,
	    selected,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', icon && label && 'labelIcon', `textColor${(0, _capitalize$a.default)(textColor)}`, fullWidth && 'fullWidth', wrapped && 'wrapped', selected && 'selected', disabled && 'disabled'],
	    iconWrapper: ['iconWrapper']
	  };
	  return (0, _base$X.unstable_composeClasses)(slots, _tabClasses.getTabUtilityClass, classes);
	};

	const TabRoot = (0, _styled$u.default)(_ButtonBase$3.default, {
	  name: 'MuiTab',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.label && ownerState.icon && styles.labelIcon, styles[`textColor${(0, _capitalize$a.default)(ownerState.textColor)}`], ownerState.fullWidth && styles.fullWidth, ownerState.wrapped && styles.wrapped];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$B.default)({}, theme.typography.button, {
	  maxWidth: 360,
	  minWidth: 90,
	  position: 'relative',
	  minHeight: 48,
	  flexShrink: 0,
	  padding: '12px 16px',
	  overflow: 'hidden',
	  whiteSpace: 'normal',
	  textAlign: 'center'
	}, ownerState.label && {
	  flexDirection: ownerState.iconPosition === 'top' || ownerState.iconPosition === 'bottom' ? 'column' : 'row'
	}, {
	  lineHeight: 1.25
	}, ownerState.icon && ownerState.label && {
	  minHeight: 72,
	  paddingTop: 9,
	  paddingBottom: 9,
	  [`& > .${_tabClasses.default.iconWrapper}`]: (0, _extends2$B.default)({}, ownerState.iconPosition === 'top' && {
	    marginBottom: 6
	  }, ownerState.iconPosition === 'bottom' && {
	    marginTop: 6
	  }, ownerState.iconPosition === 'start' && {
	    marginRight: theme.spacing(1)
	  }, ownerState.iconPosition === 'end' && {
	    marginLeft: theme.spacing(1)
	  })
	}, ownerState.textColor === 'inherit' && {
	  color: 'inherit',
	  opacity: 0.6,
	  // same opacity as theme.palette.text.secondary
	  [`&.${_tabClasses.default.selected}`]: {
	    opacity: 1
	  },
	  [`&.${_tabClasses.default.disabled}`]: {
	    opacity: theme.palette.action.disabledOpacity
	  }
	}, ownerState.textColor === 'primary' && {
	  color: theme.palette.text.secondary,
	  [`&.${_tabClasses.default.selected}`]: {
	    color: theme.palette.primary.main
	  },
	  [`&.${_tabClasses.default.disabled}`]: {
	    color: theme.palette.text.disabled
	  }
	}, ownerState.textColor === 'secondary' && {
	  color: theme.palette.text.secondary,
	  [`&.${_tabClasses.default.selected}`]: {
	    color: theme.palette.secondary.main
	  },
	  [`&.${_tabClasses.default.disabled}`]: {
	    color: theme.palette.text.disabled
	  }
	}, ownerState.fullWidth && {
	  flexShrink: 1,
	  flexGrow: 1,
	  flexBasis: 0,
	  maxWidth: 'none'
	}, ownerState.wrapped && {
	  fontSize: theme.typography.pxToRem(12)
	}));
	const Tab$1 = /*#__PURE__*/React$D.forwardRef(function Tab(inProps, ref) {
	  const props = (0, _useThemeProps$s.default)({
	    props: inProps,
	    name: 'MuiTab'
	  });
	  const {
	    className,
	    disabled = false,
	    disableFocusRipple = false,
	    // eslint-disable-next-line react/prop-types
	    fullWidth,
	    icon: iconProp,
	    iconPosition = 'top',
	    // eslint-disable-next-line react/prop-types
	    indicator,
	    label,
	    onChange,
	    onClick,
	    onFocus,
	    // eslint-disable-next-line react/prop-types
	    selected,
	    // eslint-disable-next-line react/prop-types
	    selectionFollowsFocus,
	    // eslint-disable-next-line react/prop-types
	    textColor = 'inherit',
	    value,
	    wrapped = false
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$A.default)(props, _excluded$A);
	  const ownerState = (0, _extends2$B.default)({}, props, {
	    disabled,
	    disableFocusRipple,
	    selected,
	    icon: !!iconProp,
	    iconPosition,
	    label: !!label,
	    fullWidth,
	    textColor,
	    wrapped
	  });
	  const classes = useUtilityClasses$t(ownerState);
	  const icon = iconProp && label && /*#__PURE__*/React$D.isValidElement(iconProp) ? /*#__PURE__*/React$D.cloneElement(iconProp, {
	    className: (0, _clsx$q.default)(classes.iconWrapper, iconProp.props.className)
	  }) : iconProp;

	  const handleClick = event => {
	    if (!selected && onChange) {
	      onChange(event, value);
	    }

	    if (onClick) {
	      onClick(event);
	    }
	  };

	  const handleFocus = event => {
	    if (selectionFollowsFocus && !selected && onChange) {
	      onChange(event, value);
	    }

	    if (onFocus) {
	      onFocus(event);
	    }
	  };

	  return /*#__PURE__*/(0, _jsxRuntime$M.jsxs)(TabRoot, (0, _extends2$B.default)({
	    focusRipple: !disableFocusRipple,
	    className: (0, _clsx$q.default)(classes.root, className),
	    ref: ref,
	    role: "tab",
	    "aria-selected": selected,
	    disabled: disabled,
	    onClick: handleClick,
	    onFocus: handleFocus,
	    ownerState: ownerState,
	    tabIndex: selected ? 0 : -1
	  }, other, {
	    children: [iconPosition === 'top' || iconPosition === 'start' ? /*#__PURE__*/(0, _jsxRuntime$M.jsxs)(React$D.Fragment, {
	      children: [icon, label]
	    }) : /*#__PURE__*/(0, _jsxRuntime$M.jsxs)(React$D.Fragment, {
	      children: [label, icon]
	    }), indicator]
	  }));
	});
	Tab$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop isn't supported.
	   * Use the `component` prop if you need to change the children structure.
	   */
	  children: _unsupportedProp.default,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$C.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$C.default.string,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: _propTypes$C.default.bool,

	  /**
	   * If `true`, the  keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: _propTypes$C.default.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
	   * @default false
	   */
	  disableRipple: _propTypes$C.default.bool,

	  /**
	   * The icon to display.
	   */
	  icon: _propTypes$C.default.oneOfType([_propTypes$C.default.element, _propTypes$C.default.string]),

	  /**
	   * The position of the icon relative to the label.
	   * @default 'top'
	   */
	  iconPosition: _propTypes$C.default.oneOf(['bottom', 'end', 'start', 'top']),

	  /**
	   * The label element.
	   */
	  label: _propTypes$C.default.node,

	  /**
	   * @ignore
	   */
	  onChange: _propTypes$C.default.func,

	  /**
	   * @ignore
	   */
	  onClick: _propTypes$C.default.func,

	  /**
	   * @ignore
	   */
	  onFocus: _propTypes$C.default.func,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$C.default.oneOfType([_propTypes$C.default.arrayOf(_propTypes$C.default.oneOfType([_propTypes$C.default.func, _propTypes$C.default.object, _propTypes$C.default.bool])), _propTypes$C.default.func, _propTypes$C.default.object]),

	  /**
	   * You can provide your own value. Otherwise, we fallback to the child position index.
	   */
	  value: _propTypes$C.default.any,

	  /**
	   * Tab labels appear in a single row.
	   * They can use a second line if needed.
	   * @default false
	   */
	  wrapped: _propTypes$C.default.bool
	} ;
	var _default$1e = Tab$1;
	Tab$2.default = _default$1e;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  tabClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Tab.default;
		  }
		});
		Object.defineProperty(exports, "tabClasses", {
		  enumerable: true,
		  get: function () {
		    return _tabClasses.default;
		  }
		});

		var _Tab = _interopRequireDefault(Tab$2);

		var _tabClasses = _interopRequireWildcard(tabClasses$1);

		Object.keys(_tabClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _tabClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _tabClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Tab$3));

	var Tab = /*@__PURE__*/getDefaultExportFromCjs(Tab$3);

	var TabContext$3 = {};

	var TabContext$2 = {};

	var _interopRequireDefault$L = interopRequireDefault.exports;

	Object.defineProperty(TabContext$2, "__esModule", {
	  value: true
	});
	TabContext$2.default = TabContext$1;
	TabContext$2.getPanelId = getPanelId;
	TabContext$2.getTabId = getTabId;
	TabContext$2.useTabContext = useTabContext;

	var React$C = _interopRequireWildcard$G(require$$3);

	var _propTypes$B = _interopRequireDefault$L(propTypes.exports);

	var _jsxRuntime$L = jsxRuntime;

	function _getRequireWildcardCache$G(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$G = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$G(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$G(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * @type {React.Context<{ idPrefix: string; value: string } | null>}
	 */
	const Context = /*#__PURE__*/React$C.createContext(null);

	{
	  Context.displayName = 'TabContext';
	}

	function useUniquePrefix() {
	  const [id, setId] = React$C.useState(null);
	  React$C.useEffect(() => {
	    setId(`mui-p-${Math.round(Math.random() * 1e5)}`);
	  }, []);
	  return id;
	}

	function TabContext$1(props) {
	  const {
	    children,
	    value
	  } = props;
	  const idPrefix = useUniquePrefix();
	  const context = React$C.useMemo(() => {
	    return {
	      idPrefix,
	      value
	    };
	  }, [idPrefix, value]);
	  return /*#__PURE__*/(0, _jsxRuntime$L.jsx)(Context.Provider, {
	    value: context,
	    children: children
	  });
	}

	TabContext$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$B.default.node,

	  /**
	   * The value of the currently selected `Tab`.
	   */
	  value: _propTypes$B.default.string.isRequired
	} ;
	/**
	 * @returns {unknown}
	 */

	function useTabContext() {
	  return React$C.useContext(Context);
	}

	function getPanelId(context, value) {
	  const {
	    idPrefix
	  } = context;

	  if (idPrefix === null) {
	    return null;
	  }

	  return `${context.idPrefix}-P-${value}`;
	}

	function getTabId(context, value) {
	  const {
	    idPrefix
	  } = context;

	  if (idPrefix === null) {
	    return null;
	  }

	  return `${context.idPrefix}-T-${value}`;
	}

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _TabContext.default;
		  }
		});

		var _TabContext = _interopRequireWildcard(TabContext$2);

		Object.keys(_TabContext).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _TabContext[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _TabContext[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TabContext$3));

	var TabContext = /*@__PURE__*/getDefaultExportFromCjs(TabContext$3);

	var TabList$3 = {};

	var TabList$2 = {};

	var Tabs$2 = {};

	var Tabs$1 = {};

	var scrollLeft = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "detectScrollType", {
		  enumerable: true,
		  get: function () {
		    return _utils.unstable_detectScrollType;
		  }
		});
		Object.defineProperty(exports, "getNormalizedScrollLeft", {
		  enumerable: true,
		  get: function () {
		    return _utils.unstable_getNormalizedScrollLeft;
		  }
		});

		var _utils = utils$h;
	} (scrollLeft));

	var animate$1 = {};

	Object.defineProperty(animate$1, "__esModule", {
	  value: true
	});
	animate$1.default = animate;

	function easeInOutSin(time) {
	  return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
	}

	function animate(property, element, to, options = {}, cb = () => {}) {
	  const {
	    ease = easeInOutSin,
	    duration = 300 // standard

	  } = options;
	  let start = null;
	  const from = element[property];
	  let cancelled = false;

	  const cancel = () => {
	    cancelled = true;
	  };

	  const step = timestamp => {
	    if (cancelled) {
	      cb(new Error('Animation cancelled'));
	      return;
	    }

	    if (start === null) {
	      start = timestamp;
	    }

	    const time = Math.min(1, (timestamp - start) / duration);
	    element[property] = ease(time) * (to - from) + from;

	    if (time >= 1) {
	      requestAnimationFrame(() => {
	        cb(null);
	      });
	      return;
	    }

	    requestAnimationFrame(step);
	  };

	  if (from === to) {
	    cb(new Error('Element already at target position'));
	    return cancel;
	  }

	  requestAnimationFrame(step);
	  return cancel;
	}

	var ScrollbarSize$1 = {};

	var _interopRequireDefault$K = interopRequireDefault.exports;

	Object.defineProperty(ScrollbarSize$1, "__esModule", {
	  value: true
	});
	ScrollbarSize$1.default = ScrollbarSize;

	var _extends2$A = _interopRequireDefault$K(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$z = _interopRequireDefault$K(objectWithoutPropertiesLoose.exports);

	var React$B = _interopRequireWildcard$F(require$$3);

	var _propTypes$A = _interopRequireDefault$K(propTypes.exports);

	var _debounce$2 = _interopRequireDefault$K(debounce$1);

	var _utils$k = utils$a;

	var _jsxRuntime$K = jsxRuntime;

	const _excluded$z = ["onChange"];

	function _getRequireWildcardCache$F(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$F = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$F(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$F(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const styles$1 = {
	  width: 99,
	  height: 99,
	  position: 'absolute',
	  top: -9999,
	  overflow: 'scroll'
	};
	/**
	 * @ignore - internal component.
	 * The component originates from https://github.com/STORIS/react-scrollbar-size.
	 * It has been moved into the core in order to minimize the bundle size.
	 */

	function ScrollbarSize(props) {
	  const {
	    onChange
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$z.default)(props, _excluded$z);
	  const scrollbarHeight = React$B.useRef();
	  const nodeRef = React$B.useRef(null);

	  const setMeasurements = () => {
	    scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
	  };

	  React$B.useEffect(() => {
	    const handleResize = (0, _debounce$2.default)(() => {
	      const prevHeight = scrollbarHeight.current;
	      setMeasurements();

	      if (prevHeight !== scrollbarHeight.current) {
	        onChange(scrollbarHeight.current);
	      }
	    });
	    const containerWindow = (0, _utils$k.ownerWindow)(nodeRef.current);
	    containerWindow.addEventListener('resize', handleResize);
	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	    };
	  }, [onChange]);
	  React$B.useEffect(() => {
	    setMeasurements();
	    onChange(scrollbarHeight.current);
	  }, [onChange]);
	  return /*#__PURE__*/(0, _jsxRuntime$K.jsx)("div", (0, _extends2$A.default)({
	    style: styles$1,
	    ref: nodeRef
	  }, other));
	}

	ScrollbarSize.propTypes = {
	  onChange: _propTypes$A.default.func.isRequired
	} ;

	var TabScrollButton$2 = {};

	var TabScrollButton$1 = {};

	var KeyboardArrowLeft = {};

	var _interopRequireDefault$J = interopRequireDefault.exports;

	Object.defineProperty(KeyboardArrowLeft, "__esModule", {
	  value: true
	});
	KeyboardArrowLeft.default = void 0;

	_interopRequireWildcard$E(require$$3);

	var _createSvgIcon$9 = _interopRequireDefault$J(createSvgIcon$2);

	var _jsxRuntime$J = jsxRuntime;

	function _getRequireWildcardCache$E(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$E = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$E(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$E(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * @ignore - internal component.
	 */
	var _default$1d = (0, _createSvgIcon$9.default)( /*#__PURE__*/(0, _jsxRuntime$J.jsx)("path", {
	  d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
	}), 'KeyboardArrowLeft');

	KeyboardArrowLeft.default = _default$1d;

	var KeyboardArrowRight = {};

	var _interopRequireDefault$I = interopRequireDefault.exports;

	Object.defineProperty(KeyboardArrowRight, "__esModule", {
	  value: true
	});
	KeyboardArrowRight.default = void 0;

	_interopRequireWildcard$D(require$$3);

	var _createSvgIcon$8 = _interopRequireDefault$I(createSvgIcon$2);

	var _jsxRuntime$I = jsxRuntime;

	function _getRequireWildcardCache$D(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$D = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$D(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$D(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * @ignore - internal component.
	 */
	var _default$1c = (0, _createSvgIcon$8.default)( /*#__PURE__*/(0, _jsxRuntime$I.jsx)("path", {
	  d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
	}), 'KeyboardArrowRight');

	KeyboardArrowRight.default = _default$1c;

	var tabScrollButtonClasses$1 = {};

	Object.defineProperty(tabScrollButtonClasses$1, "__esModule", {
	  value: true
	});
	tabScrollButtonClasses$1.default = void 0;
	tabScrollButtonClasses$1.getTabScrollButtonUtilityClass = getTabScrollButtonUtilityClass;

	var _base$W = node$1;

	function getTabScrollButtonUtilityClass(slot) {
	  return (0, _base$W.generateUtilityClass)('MuiTabScrollButton', slot);
	}

	const tabScrollButtonClasses = (0, _base$W.generateUtilityClasses)('MuiTabScrollButton', ['root', 'vertical', 'horizontal', 'disabled']);
	var _default$1b = tabScrollButtonClasses;
	tabScrollButtonClasses$1.default = _default$1b;

	var _interopRequireDefault$H = interopRequireDefault.exports;

	Object.defineProperty(TabScrollButton$1, "__esModule", {
	  value: true
	});
	TabScrollButton$1.default = void 0;

	var _objectWithoutPropertiesLoose2$y = _interopRequireDefault$H(objectWithoutPropertiesLoose.exports);

	var _extends2$z = _interopRequireDefault$H(_extends$5.exports);

	var React$A = _interopRequireWildcard$C(require$$3);

	var _propTypes$z = _interopRequireDefault$H(propTypes.exports);

	var _clsx$p = _interopRequireDefault$H(clsx$1);

	var _base$V = node$1;

	var _KeyboardArrowLeft2 = _interopRequireDefault$H(KeyboardArrowLeft);

	var _KeyboardArrowRight2 = _interopRequireDefault$H(KeyboardArrowRight);

	var _ButtonBase$2 = _interopRequireDefault$H(ButtonBase$2);

	var _useTheme$4 = _interopRequireDefault$H(useTheme$8);

	var _useThemeProps$r = _interopRequireDefault$H(useThemeProps$1);

	var _styled$t = _interopRequireDefault$H(styled$1);

	var _tabScrollButtonClasses = _interopRequireWildcard$C(tabScrollButtonClasses$1);

	var _jsxRuntime$H = jsxRuntime;

	var _KeyboardArrowLeft, _KeyboardArrowRight;

	const _excluded$y = ["className", "direction", "orientation", "disabled"];

	function _getRequireWildcardCache$C(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$C = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$C(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$C(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$s = ownerState => {
	  const {
	    classes,
	    orientation,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation, disabled && 'disabled']
	  };
	  return (0, _base$V.unstable_composeClasses)(slots, _tabScrollButtonClasses.getTabScrollButtonUtilityClass, classes);
	};

	const TabScrollButtonRoot = (0, _styled$t.default)(_ButtonBase$2.default, {
	  name: 'MuiTabScrollButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.orientation && styles[ownerState.orientation]];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$z.default)({
	  width: 40,
	  flexShrink: 0,
	  opacity: 0.8,
	  [`&.${_tabScrollButtonClasses.default.disabled}`]: {
	    opacity: 0
	  }
	}, ownerState.orientation === 'vertical' && {
	  width: '100%',
	  height: 40,
	  '& svg': {
	    transform: `rotate(${ownerState.isRtl ? -90 : 90}deg)`
	  }
	}));
	const TabScrollButton = /*#__PURE__*/React$A.forwardRef(function TabScrollButton(inProps, ref) {
	  const props = (0, _useThemeProps$r.default)({
	    props: inProps,
	    name: 'MuiTabScrollButton'
	  });
	  const {
	    className,
	    direction
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$y.default)(props, _excluded$y);
	  const theme = (0, _useTheme$4.default)();
	  const isRtl = theme.direction === 'rtl';
	  const ownerState = (0, _extends2$z.default)({
	    isRtl
	  }, props);
	  const classes = useUtilityClasses$s(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$H.jsx)(TabScrollButtonRoot, (0, _extends2$z.default)({
	    component: "div",
	    className: (0, _clsx$p.default)(classes.root, className),
	    ref: ref,
	    role: null,
	    ownerState: ownerState,
	    tabIndex: null
	  }, other, {
	    children: direction === 'left' ? _KeyboardArrowLeft || (_KeyboardArrowLeft = /*#__PURE__*/(0, _jsxRuntime$H.jsx)(_KeyboardArrowLeft2.default, {
	      fontSize: "small"
	    })) : _KeyboardArrowRight || (_KeyboardArrowRight = /*#__PURE__*/(0, _jsxRuntime$H.jsx)(_KeyboardArrowRight2.default, {
	      fontSize: "small"
	    }))
	  }));
	});
	TabScrollButton.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$z.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$z.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$z.default.string,

	  /**
	   * The direction the button should indicate.
	   */
	  direction: _propTypes$z.default.oneOf(['left', 'right']).isRequired,

	  /**
	   * If `true`, the component is disabled.
	   */
	  disabled: _propTypes$z.default.bool,

	  /**
	   * The component orientation (layout flow direction).
	   */
	  orientation: _propTypes$z.default.oneOf(['horizontal', 'vertical']).isRequired,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$z.default.oneOfType([_propTypes$z.default.arrayOf(_propTypes$z.default.oneOfType([_propTypes$z.default.func, _propTypes$z.default.object, _propTypes$z.default.bool])), _propTypes$z.default.func, _propTypes$z.default.object])
	} ;
	var _default$1a = TabScrollButton;
	TabScrollButton$1.default = _default$1a;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  tabScrollButtonClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _TabScrollButton.default;
		  }
		});
		Object.defineProperty(exports, "tabScrollButtonClasses", {
		  enumerable: true,
		  get: function () {
		    return _tabScrollButtonClasses.default;
		  }
		});

		var _TabScrollButton = _interopRequireDefault(TabScrollButton$1);

		var _tabScrollButtonClasses = _interopRequireWildcard(tabScrollButtonClasses$1);

		Object.keys(_tabScrollButtonClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _tabScrollButtonClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _tabScrollButtonClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TabScrollButton$2));

	var tabsClasses$1 = {};

	Object.defineProperty(tabsClasses$1, "__esModule", {
	  value: true
	});
	tabsClasses$1.default = void 0;
	tabsClasses$1.getTabsUtilityClass = getTabsUtilityClass;

	var _base$U = node$1;

	function getTabsUtilityClass(slot) {
	  return (0, _base$U.generateUtilityClass)('MuiTabs', slot);
	}

	const tabsClasses = (0, _base$U.generateUtilityClasses)('MuiTabs', ['root', 'vertical', 'flexContainer', 'flexContainerVertical', 'centered', 'scroller', 'fixed', 'scrollableX', 'scrollableY', 'hideScrollbar', 'scrollButtons', 'scrollButtonsHideMobile', 'indicator']);
	var _default$19 = tabsClasses;
	tabsClasses$1.default = _default$19;

	var _interopRequireDefault$G = interopRequireDefault.exports;

	Object.defineProperty(Tabs$1, "__esModule", {
	  value: true
	});
	Tabs$1.default = void 0;

	var _objectWithoutPropertiesLoose2$x = _interopRequireDefault$G(objectWithoutPropertiesLoose.exports);

	var _extends2$y = _interopRequireDefault$G(_extends$5.exports);

	var React$z = _interopRequireWildcard$B(require$$3);

	var _reactIs$4 = reactIs.exports;

	var _propTypes$y = _interopRequireDefault$G(propTypes.exports);

	var _clsx$o = _interopRequireDefault$G(clsx$1);

	var _utils$j = utils$h;

	var _base$T = node$1;

	var _styled$s = _interopRequireDefault$G(styled$1);

	var _useThemeProps$q = _interopRequireDefault$G(useThemeProps$1);

	var _useTheme$3 = _interopRequireDefault$G(useTheme$8);

	var _debounce$1 = _interopRequireDefault$G(debounce$1);

	var _scrollLeft = scrollLeft;

	var _animate = _interopRequireDefault$G(animate$1);

	var _ScrollbarSize = _interopRequireDefault$G(ScrollbarSize$1);

	var _TabScrollButton = _interopRequireDefault$G(TabScrollButton$2);

	var _useEventCallback = _interopRequireDefault$G(useEventCallback$1);

	var _tabsClasses = _interopRequireWildcard$B(tabsClasses$1);

	var _ownerDocument$3 = _interopRequireDefault$G(ownerDocument);

	var _ownerWindow$1 = _interopRequireDefault$G(ownerWindow);

	var _jsxRuntime$G = jsxRuntime;

	const _excluded$x = ["aria-label", "aria-labelledby", "action", "centered", "children", "className", "component", "allowScrollButtonsMobile", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant", "visibleScrollbar"];

	function _getRequireWildcardCache$B(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$B = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$B(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$B(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const nextItem$1 = (list, item) => {
	  if (list === item) {
	    return list.firstChild;
	  }

	  if (item && item.nextElementSibling) {
	    return item.nextElementSibling;
	  }

	  return list.firstChild;
	};

	const previousItem$1 = (list, item) => {
	  if (list === item) {
	    return list.lastChild;
	  }

	  if (item && item.previousElementSibling) {
	    return item.previousElementSibling;
	  }

	  return list.lastChild;
	};

	const moveFocus$1 = (list, currentFocus, traversalFunction) => {
	  let wrappedOnce = false;
	  let nextFocus = traversalFunction(list, currentFocus);

	  while (nextFocus) {
	    // Prevent infinite loop.
	    if (nextFocus === list.firstChild) {
	      if (wrappedOnce) {
	        return;
	      }

	      wrappedOnce = true;
	    } // Same logic as useAutocomplete.js


	    const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';

	    if (!nextFocus.hasAttribute('tabindex') || nextFocusDisabled) {
	      // Move to the next element.
	      nextFocus = traversalFunction(list, nextFocus);
	    } else {
	      nextFocus.focus();
	      return;
	    }
	  }
	};

	const useUtilityClasses$r = ownerState => {
	  const {
	    vertical,
	    fixed,
	    hideScrollbar,
	    scrollableX,
	    scrollableY,
	    centered,
	    scrollButtonsHideMobile,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', vertical && 'vertical'],
	    scroller: ['scroller', fixed && 'fixed', hideScrollbar && 'hideScrollbar', scrollableX && 'scrollableX', scrollableY && 'scrollableY'],
	    flexContainer: ['flexContainer', vertical && 'flexContainerVertical', centered && 'centered'],
	    indicator: ['indicator'],
	    scrollButtons: ['scrollButtons', scrollButtonsHideMobile && 'scrollButtonsHideMobile'],
	    scrollableX: [scrollableX && 'scrollableX'],
	    hideScrollbar: [hideScrollbar && 'hideScrollbar']
	  };
	  return (0, _base$T.unstable_composeClasses)(slots, _tabsClasses.getTabsUtilityClass, classes);
	};

	const TabsRoot = (0, _styled$s.default)('div', {
	  name: 'MuiTabs',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${_tabsClasses.default.scrollButtons}`]: styles.scrollButtons
	    }, {
	      [`& .${_tabsClasses.default.scrollButtons}`]: ownerState.scrollButtonsHideMobile && styles.scrollButtonsHideMobile
	    }, styles.root, ownerState.vertical && styles.vertical];
	  }
	})(({
	  ownerState,
	  theme
	}) => (0, _extends2$y.default)({
	  overflow: 'hidden',
	  minHeight: 48,
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch',
	  display: 'flex'
	}, ownerState.vertical && {
	  flexDirection: 'column'
	}, ownerState.scrollButtonsHideMobile && {
	  [`& .${_tabsClasses.default.scrollButtons}`]: {
	    [theme.breakpoints.down('sm')]: {
	      display: 'none'
	    }
	  }
	}));
	const TabsScroller = (0, _styled$s.default)('div', {
	  name: 'MuiTabs',
	  slot: 'Scroller',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.scroller, ownerState.fixed && styles.fixed, ownerState.hideScrollbar && styles.hideScrollbar, ownerState.scrollableX && styles.scrollableX, ownerState.scrollableY && styles.scrollableY];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$y.default)({
	  position: 'relative',
	  display: 'inline-block',
	  flex: '1 1 auto',
	  whiteSpace: 'nowrap'
	}, ownerState.fixed && {
	  overflowX: 'hidden',
	  width: '100%'
	}, ownerState.hideScrollbar && {
	  // Hide dimensionless scrollbar on MacOS
	  scrollbarWidth: 'none',
	  // Firefox
	  '&::-webkit-scrollbar': {
	    display: 'none' // Safari + Chrome

	  }
	}, ownerState.scrollableX && {
	  overflowX: 'auto',
	  overflowY: 'hidden'
	}, ownerState.scrollableY && {
	  overflowY: 'auto',
	  overflowX: 'hidden'
	}));
	const FlexContainer = (0, _styled$s.default)('div', {
	  name: 'MuiTabs',
	  slot: 'FlexContainer',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.flexContainer, ownerState.vertical && styles.flexContainerVertical, ownerState.centered && styles.centered];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$y.default)({
	  display: 'flex'
	}, ownerState.vertical && {
	  flexDirection: 'column'
	}, ownerState.centered && {
	  justifyContent: 'center'
	}));
	const TabsIndicator = (0, _styled$s.default)('span', {
	  name: 'MuiTabs',
	  slot: 'Indicator',
	  overridesResolver: (props, styles) => styles.indicator
	})(({
	  ownerState,
	  theme
	}) => (0, _extends2$y.default)({
	  position: 'absolute',
	  height: 2,
	  bottom: 0,
	  width: '100%',
	  transition: theme.transitions.create()
	}, ownerState.indicatorColor === 'primary' && {
	  backgroundColor: theme.palette.primary.main
	}, ownerState.indicatorColor === 'secondary' && {
	  backgroundColor: theme.palette.secondary.main
	}, ownerState.vertical && {
	  height: '100%',
	  width: 2,
	  right: 0
	}));
	const TabsScrollbarSize = (0, _styled$s.default)(_ScrollbarSize.default, {
	  name: 'MuiTabs',
	  slot: 'ScrollbarSize'
	})({
	  overflowX: 'auto',
	  overflowY: 'hidden',
	  // Hide dimensionless scrollbar on MacOS
	  scrollbarWidth: 'none',
	  // Firefox
	  '&::-webkit-scrollbar': {
	    display: 'none' // Safari + Chrome

	  }
	});
	const defaultIndicatorStyle = {};
	let warnedOnceTabPresent = false;
	const Tabs = /*#__PURE__*/React$z.forwardRef(function Tabs(inProps, ref) {
	  const props = (0, _useThemeProps$q.default)({
	    props: inProps,
	    name: 'MuiTabs'
	  });
	  const theme = (0, _useTheme$3.default)();
	  const isRtl = theme.direction === 'rtl';
	  const {
	    'aria-label': ariaLabel,
	    'aria-labelledby': ariaLabelledBy,
	    action,
	    centered = false,
	    children: childrenProp,
	    className,
	    component = 'div',
	    allowScrollButtonsMobile = false,
	    indicatorColor = 'primary',
	    onChange,
	    orientation = 'horizontal',
	    ScrollButtonComponent = _TabScrollButton.default,
	    scrollButtons = 'auto',
	    selectionFollowsFocus,
	    TabIndicatorProps = {},
	    TabScrollButtonProps = {},
	    textColor = 'primary',
	    value,
	    variant = 'standard',
	    visibleScrollbar = false
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$x.default)(props, _excluded$x);
	  const scrollable = variant === 'scrollable';
	  const vertical = orientation === 'vertical';
	  const scrollStart = vertical ? 'scrollTop' : 'scrollLeft';
	  const start = vertical ? 'top' : 'left';
	  const end = vertical ? 'bottom' : 'right';
	  const clientSize = vertical ? 'clientHeight' : 'clientWidth';
	  const size = vertical ? 'height' : 'width';
	  const ownerState = (0, _extends2$y.default)({}, props, {
	    component,
	    allowScrollButtonsMobile,
	    indicatorColor,
	    orientation,
	    vertical,
	    scrollButtons,
	    textColor,
	    variant,
	    visibleScrollbar,
	    fixed: !scrollable,
	    hideScrollbar: scrollable && !visibleScrollbar,
	    scrollableX: scrollable && !vertical,
	    scrollableY: scrollable && vertical,
	    centered: centered && !scrollable,
	    scrollButtonsHideMobile: !allowScrollButtonsMobile
	  });
	  const classes = useUtilityClasses$r(ownerState);

	  {
	    if (centered && scrollable) {
	      console.error('MUI: You can not use the `centered={true}` and `variant="scrollable"` properties ' + 'at the same time on a `Tabs` component.');
	    }
	  }

	  const [mounted, setMounted] = React$z.useState(false);
	  const [indicatorStyle, setIndicatorStyle] = React$z.useState(defaultIndicatorStyle);
	  const [displayScroll, setDisplayScroll] = React$z.useState({
	    start: false,
	    end: false
	  });
	  const [scrollerStyle, setScrollerStyle] = React$z.useState({
	    overflow: 'hidden',
	    scrollbarWidth: 0
	  });
	  const valueToIndex = new Map();
	  const tabsRef = React$z.useRef(null);
	  const tabListRef = React$z.useRef(null);

	  const getTabsMeta = () => {
	    const tabsNode = tabsRef.current;
	    let tabsMeta;

	    if (tabsNode) {
	      const rect = tabsNode.getBoundingClientRect(); // create a new object with ClientRect class props + scrollLeft

	      tabsMeta = {
	        clientWidth: tabsNode.clientWidth,
	        scrollLeft: tabsNode.scrollLeft,
	        scrollTop: tabsNode.scrollTop,
	        scrollLeftNormalized: (0, _scrollLeft.getNormalizedScrollLeft)(tabsNode, theme.direction),
	        scrollWidth: tabsNode.scrollWidth,
	        top: rect.top,
	        bottom: rect.bottom,
	        left: rect.left,
	        right: rect.right
	      };
	    }

	    let tabMeta;

	    if (tabsNode && value !== false) {
	      const children = tabListRef.current.children;

	      if (children.length > 0) {
	        const tab = children[valueToIndex.get(value)];

	        {
	          if (!tab) {
	            console.error([`MUI: The \`value\` provided to the Tabs component is invalid.`, `None of the Tabs' children match with "${value}".`, valueToIndex.keys ? `You can provide one of the following values: ${Array.from(valueToIndex.keys()).join(', ')}.` : null].join('\n'));
	          }
	        }

	        tabMeta = tab ? tab.getBoundingClientRect() : null;

	        {
	          if (!warnedOnceTabPresent && tabMeta && tabMeta.width === 0 && tabMeta.height === 0) {
	            tabsMeta = null;
	            console.error(['MUI: The `value` provided to the Tabs component is invalid.', `The Tab with this \`value\` ("${value}") is not part of the document layout.`, "Make sure the tab item is present in the document or that it's not `display: none`."].join('\n'));
	            warnedOnceTabPresent = true;
	          }
	        }
	      }
	    }

	    return {
	      tabsMeta,
	      tabMeta
	    };
	  };

	  const updateIndicatorState = (0, _useEventCallback.default)(() => {
	    const {
	      tabsMeta,
	      tabMeta
	    } = getTabsMeta();
	    let startValue = 0;
	    let startIndicator;

	    if (vertical) {
	      startIndicator = 'top';

	      if (tabMeta && tabsMeta) {
	        startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
	      }
	    } else {
	      startIndicator = isRtl ? 'right' : 'left';

	      if (tabMeta && tabsMeta) {
	        const correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
	        startValue = (isRtl ? -1 : 1) * (tabMeta[startIndicator] - tabsMeta[startIndicator] + correction);
	      }
	    }

	    const newIndicatorStyle = {
	      [startIndicator]: startValue,
	      // May be wrong until the font is loaded.
	      [size]: tabMeta ? tabMeta[size] : 0
	    }; // IE11 support, replace with Number.isNaN
	    // eslint-disable-next-line no-restricted-globals

	    if (isNaN(indicatorStyle[startIndicator]) || isNaN(indicatorStyle[size])) {
	      setIndicatorStyle(newIndicatorStyle);
	    } else {
	      const dStart = Math.abs(indicatorStyle[startIndicator] - newIndicatorStyle[startIndicator]);
	      const dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);

	      if (dStart >= 1 || dSize >= 1) {
	        setIndicatorStyle(newIndicatorStyle);
	      }
	    }
	  });

	  const scroll = (scrollValue, {
	    animation = true
	  } = {}) => {
	    if (animation) {
	      (0, _animate.default)(scrollStart, tabsRef.current, scrollValue, {
	        duration: theme.transitions.duration.standard
	      });
	    } else {
	      tabsRef.current[scrollStart] = scrollValue;
	    }
	  };

	  const moveTabsScroll = delta => {
	    let scrollValue = tabsRef.current[scrollStart];

	    if (vertical) {
	      scrollValue += delta;
	    } else {
	      scrollValue += delta * (isRtl ? -1 : 1); // Fix for Edge

	      scrollValue *= isRtl && (0, _scrollLeft.detectScrollType)() === 'reverse' ? -1 : 1;
	    }

	    scroll(scrollValue);
	  };

	  const getScrollSize = () => {
	    const containerSize = tabsRef.current[clientSize];
	    let totalSize = 0;
	    const children = Array.from(tabListRef.current.children);

	    for (let i = 0; i < children.length; i += 1) {
	      const tab = children[i];

	      if (totalSize + tab[clientSize] > containerSize) {
	        break;
	      }

	      totalSize += tab[clientSize];
	    }

	    return totalSize;
	  };

	  const handleStartScrollClick = () => {
	    moveTabsScroll(-1 * getScrollSize());
	  };

	  const handleEndScrollClick = () => {
	    moveTabsScroll(getScrollSize());
	  }; // TODO Remove <ScrollbarSize /> as browser support for hidding the scrollbar
	  // with CSS improves.


	  const handleScrollbarSizeChange = React$z.useCallback(scrollbarWidth => {
	    setScrollerStyle({
	      overflow: null,
	      scrollbarWidth
	    });
	  }, []);

	  const getConditionalElements = () => {
	    const conditionalElements = {};
	    conditionalElements.scrollbarSizeListener = scrollable ? /*#__PURE__*/(0, _jsxRuntime$G.jsx)(TabsScrollbarSize, {
	      onChange: handleScrollbarSizeChange,
	      className: (0, _clsx$o.default)(classes.scrollableX, classes.hideScrollbar)
	    }) : null;
	    const scrollButtonsActive = displayScroll.start || displayScroll.end;
	    const showScrollButtons = scrollable && (scrollButtons === 'auto' && scrollButtonsActive || scrollButtons === true);
	    conditionalElements.scrollButtonStart = showScrollButtons ? /*#__PURE__*/(0, _jsxRuntime$G.jsx)(ScrollButtonComponent, (0, _extends2$y.default)({
	      orientation: orientation,
	      direction: isRtl ? 'right' : 'left',
	      onClick: handleStartScrollClick,
	      disabled: !displayScroll.start
	    }, TabScrollButtonProps, {
	      className: (0, _clsx$o.default)(classes.scrollButtons, TabScrollButtonProps.className)
	    })) : null;
	    conditionalElements.scrollButtonEnd = showScrollButtons ? /*#__PURE__*/(0, _jsxRuntime$G.jsx)(ScrollButtonComponent, (0, _extends2$y.default)({
	      orientation: orientation,
	      direction: isRtl ? 'left' : 'right',
	      onClick: handleEndScrollClick,
	      disabled: !displayScroll.end
	    }, TabScrollButtonProps, {
	      className: (0, _clsx$o.default)(classes.scrollButtons, TabScrollButtonProps.className)
	    })) : null;
	    return conditionalElements;
	  };

	  const scrollSelectedIntoView = (0, _useEventCallback.default)(animation => {
	    const {
	      tabsMeta,
	      tabMeta
	    } = getTabsMeta();

	    if (!tabMeta || !tabsMeta) {
	      return;
	    }

	    if (tabMeta[start] < tabsMeta[start]) {
	      // left side of button is out of view
	      const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start] - tabsMeta[start]);
	      scroll(nextScrollStart, {
	        animation
	      });
	    } else if (tabMeta[end] > tabsMeta[end]) {
	      // right side of button is out of view
	      const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end] - tabsMeta[end]);
	      scroll(nextScrollStart, {
	        animation
	      });
	    }
	  });
	  const updateScrollButtonState = (0, _useEventCallback.default)(() => {
	    if (scrollable && scrollButtons !== false) {
	      const {
	        scrollTop,
	        scrollHeight,
	        clientHeight,
	        scrollWidth,
	        clientWidth
	      } = tabsRef.current;
	      let showStartScroll;
	      let showEndScroll;

	      if (vertical) {
	        showStartScroll = scrollTop > 1;
	        showEndScroll = scrollTop < scrollHeight - clientHeight - 1;
	      } else {
	        const scrollLeft = (0, _scrollLeft.getNormalizedScrollLeft)(tabsRef.current, theme.direction); // use 1 for the potential rounding error with browser zooms.

	        showStartScroll = isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
	        showEndScroll = !isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
	      }

	      if (showStartScroll !== displayScroll.start || showEndScroll !== displayScroll.end) {
	        setDisplayScroll({
	          start: showStartScroll,
	          end: showEndScroll
	        });
	      }
	    }
	  });
	  React$z.useEffect(() => {
	    const handleResize = (0, _debounce$1.default)(() => {
	      updateIndicatorState();
	      updateScrollButtonState();
	    });
	    const win = (0, _ownerWindow$1.default)(tabsRef.current);
	    win.addEventListener('resize', handleResize);
	    let resizeObserver;

	    if (typeof ResizeObserver !== 'undefined') {
	      resizeObserver = new ResizeObserver(handleResize);
	      Array.from(tabListRef.current.children).forEach(child => {
	        resizeObserver.observe(child);
	      });
	    }

	    return () => {
	      handleResize.clear();
	      win.removeEventListener('resize', handleResize);

	      if (resizeObserver) {
	        resizeObserver.disconnect();
	      }
	    };
	  }, [updateIndicatorState, updateScrollButtonState]);
	  const handleTabsScroll = React$z.useMemo(() => (0, _debounce$1.default)(() => {
	    updateScrollButtonState();
	  }), [updateScrollButtonState]);
	  React$z.useEffect(() => {
	    return () => {
	      handleTabsScroll.clear();
	    };
	  }, [handleTabsScroll]);
	  React$z.useEffect(() => {
	    setMounted(true);
	  }, []);
	  React$z.useEffect(() => {
	    updateIndicatorState();
	    updateScrollButtonState();
	  });
	  React$z.useEffect(() => {
	    // Don't animate on the first render.
	    scrollSelectedIntoView(defaultIndicatorStyle !== indicatorStyle);
	  }, [scrollSelectedIntoView, indicatorStyle]);
	  React$z.useImperativeHandle(action, () => ({
	    updateIndicator: updateIndicatorState,
	    updateScrollButtons: updateScrollButtonState
	  }), [updateIndicatorState, updateScrollButtonState]);
	  const indicator = /*#__PURE__*/(0, _jsxRuntime$G.jsx)(TabsIndicator, (0, _extends2$y.default)({}, TabIndicatorProps, {
	    className: (0, _clsx$o.default)(classes.indicator, TabIndicatorProps.className),
	    ownerState: ownerState,
	    style: (0, _extends2$y.default)({}, indicatorStyle, TabIndicatorProps.style)
	  }));
	  let childIndex = 0;
	  const children = React$z.Children.map(childrenProp, child => {
	    if (! /*#__PURE__*/React$z.isValidElement(child)) {
	      return null;
	    }

	    {
	      if ((0, _reactIs$4.isFragment)(child)) {
	        console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    const childValue = child.props.value === undefined ? childIndex : child.props.value;
	    valueToIndex.set(childValue, childIndex);
	    const selected = childValue === value;
	    childIndex += 1;
	    return /*#__PURE__*/React$z.cloneElement(child, (0, _extends2$y.default)({
	      fullWidth: variant === 'fullWidth',
	      indicator: selected && !mounted && indicator,
	      selected,
	      selectionFollowsFocus,
	      onChange,
	      textColor,
	      value: childValue
	    }, childIndex === 1 && value === false && !child.props.tabIndex ? {
	      tabIndex: 0
	    } : {}));
	  });

	  const handleKeyDown = event => {
	    const list = tabListRef.current;
	    const currentFocus = (0, _ownerDocument$3.default)(list).activeElement; // Keyboard navigation assumes that [role="tab"] are siblings
	    // though we might warn in the future about nested, interactive elements
	    // as a a11y violation

	    const role = currentFocus.getAttribute('role');

	    if (role !== 'tab') {
	      return;
	    }

	    let previousItemKey = orientation === 'horizontal' ? 'ArrowLeft' : 'ArrowUp';
	    let nextItemKey = orientation === 'horizontal' ? 'ArrowRight' : 'ArrowDown';

	    if (orientation === 'horizontal' && isRtl) {
	      // swap previousItemKey with nextItemKey
	      previousItemKey = 'ArrowRight';
	      nextItemKey = 'ArrowLeft';
	    }

	    switch (event.key) {
	      case previousItemKey:
	        event.preventDefault();
	        moveFocus$1(list, currentFocus, previousItem$1);
	        break;

	      case nextItemKey:
	        event.preventDefault();
	        moveFocus$1(list, currentFocus, nextItem$1);
	        break;

	      case 'Home':
	        event.preventDefault();
	        moveFocus$1(list, null, nextItem$1);
	        break;

	      case 'End':
	        event.preventDefault();
	        moveFocus$1(list, null, previousItem$1);
	        break;
	    }
	  };

	  const conditionalElements = getConditionalElements();
	  return /*#__PURE__*/(0, _jsxRuntime$G.jsxs)(TabsRoot, (0, _extends2$y.default)({
	    className: (0, _clsx$o.default)(classes.root, className),
	    ownerState: ownerState,
	    ref: ref,
	    as: component
	  }, other, {
	    children: [conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /*#__PURE__*/(0, _jsxRuntime$G.jsxs)(TabsScroller, {
	      className: classes.scroller,
	      ownerState: ownerState,
	      style: {
	        overflow: scrollerStyle.overflow,
	        [vertical ? `margin${isRtl ? 'Left' : 'Right'}` : 'marginBottom']: visibleScrollbar ? undefined : -scrollerStyle.scrollbarWidth
	      },
	      ref: tabsRef,
	      onScroll: handleTabsScroll,
	      children: [/*#__PURE__*/(0, _jsxRuntime$G.jsx)(FlexContainer, {
	        "aria-label": ariaLabel,
	        "aria-labelledby": ariaLabelledBy,
	        "aria-orientation": orientation === 'vertical' ? 'vertical' : null,
	        className: classes.flexContainer,
	        ownerState: ownerState,
	        onKeyDown: handleKeyDown,
	        ref: tabListRef,
	        role: "tablist",
	        children: children
	      }), mounted && indicator]
	    }), conditionalElements.scrollButtonEnd]
	  }));
	});
	Tabs.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Callback fired when the component mounts.
	   * This is useful when you want to trigger an action programmatically.
	   * It supports two actions: `updateIndicator()` and `updateScrollButtons()`
	   *
	   * @param {object} actions This object contains all possible actions
	   * that can be triggered programmatically.
	   */
	  action: _utils$j.refType,

	  /**
	   * If `true`, the scroll buttons aren't forced hidden on mobile.
	   * By default the scroll buttons are hidden on mobile and takes precedence over `scrollButtons`.
	   * @default false
	   */
	  allowScrollButtonsMobile: _propTypes$y.default.bool,

	  /**
	   * The label for the Tabs as a string.
	   */
	  'aria-label': _propTypes$y.default.string,

	  /**
	   * An id or list of ids separated by a space that label the Tabs.
	   */
	  'aria-labelledby': _propTypes$y.default.string,

	  /**
	   * If `true`, the tabs are centered.
	   * This prop is intended for large views.
	   * @default false
	   */
	  centered: _propTypes$y.default.bool,

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$y.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$y.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$y.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$y.default.elementType,

	  /**
	   * Determines the color of the indicator.
	   * @default 'primary'
	   */
	  indicatorColor: _propTypes$y.default.oneOf(['primary', 'secondary']),

	  /**
	   * Callback fired when the value changes.
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
	   * @param {any} value We default to the index of the child (number)
	   */
	  onChange: _propTypes$y.default.func,

	  /**
	   * The component orientation (layout flow direction).
	   * @default 'horizontal'
	   */
	  orientation: _propTypes$y.default.oneOf(['horizontal', 'vertical']),

	  /**
	   * The component used to render the scroll buttons.
	   * @default TabScrollButton
	   */
	  ScrollButtonComponent: _propTypes$y.default.elementType,

	  /**
	   * Determine behavior of scroll buttons when tabs are set to scroll:
	   *
	   * - `auto` will only present them when not all the items are visible.
	   * - `true` will always present them.
	   * - `false` will never present them.
	   *
	   * By default the scroll buttons are hidden on mobile.
	   * This behavior can be disabled with `allowScrollButtonsMobile`.
	   * @default 'auto'
	   */
	  scrollButtons: _propTypes$y.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOf(['auto', false, true]),

	  /**
	   * If `true` the selected tab changes on focus. Otherwise it only
	   * changes on activation.
	   */
	  selectionFollowsFocus: _propTypes$y.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$y.default.oneOfType([_propTypes$y.default.arrayOf(_propTypes$y.default.oneOfType([_propTypes$y.default.func, _propTypes$y.default.object, _propTypes$y.default.bool])), _propTypes$y.default.func, _propTypes$y.default.object]),

	  /**
	   * Props applied to the tab indicator element.
	   * @default  {}
	   */
	  TabIndicatorProps: _propTypes$y.default.object,

	  /**
	   * Props applied to the [`TabScrollButton`](/api/tab-scroll-button/) element.
	   * @default {}
	   */
	  TabScrollButtonProps: _propTypes$y.default.object,

	  /**
	   * Determines the color of the `Tab`.
	   * @default 'primary'
	   */
	  textColor: _propTypes$y.default.oneOf(['inherit', 'primary', 'secondary']),

	  /**
	   * The value of the currently selected `Tab`.
	   * If you don't want any selected `Tab`, you can set this prop to `false`.
	   */
	  value: _propTypes$y.default.any,

	  /**
	   * Determines additional display behavior of the tabs:
	   *
	   *  - `scrollable` will invoke scrolling properties and allow for horizontally
	   *  scrolling (or swiping) of the tab bar.
	   *  -`fullWidth` will make the tabs grow to use all the available space,
	   *  which should be used for small views, like on mobile.
	   *  - `standard` will render the default state.
	   * @default 'standard'
	   */
	  variant: _propTypes$y.default.oneOf(['fullWidth', 'scrollable', 'standard']),

	  /**
	   * If `true`, the scrollbar is visible. It can be useful when displaying
	   * a long vertical list of tabs.
	   * @default false
	   */
	  visibleScrollbar: _propTypes$y.default.bool
	} ;
	var _default$18 = Tabs;
	Tabs$1.default = _default$18;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  tabsClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Tabs.default;
		  }
		});
		Object.defineProperty(exports, "tabsClasses", {
		  enumerable: true,
		  get: function () {
		    return _tabsClasses.default;
		  }
		});

		var _Tabs = _interopRequireDefault(Tabs$1);

		var _tabsClasses = _interopRequireWildcard(tabsClasses$1);

		Object.keys(_tabsClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _tabsClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _tabsClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Tabs$2));

	var _interopRequireDefault$F = interopRequireDefault.exports;

	Object.defineProperty(TabList$2, "__esModule", {
	  value: true
	});
	TabList$2.default = void 0;

	var _extends2$x = _interopRequireDefault$F(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$w = _interopRequireDefault$F(objectWithoutPropertiesLoose.exports);

	var React$y = _interopRequireWildcard$A(require$$3);

	var _propTypes$x = _interopRequireDefault$F(propTypes.exports);

	var _Tabs = _interopRequireDefault$F(Tabs$2);

	var _TabContext$1 = TabContext$3;

	var _jsxRuntime$F = jsxRuntime;

	const _excluded$w = ["children"];

	function _getRequireWildcardCache$A(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$A = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$A(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$A(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const TabList$1 = /*#__PURE__*/React$y.forwardRef(function TabList(props, ref) {
	  const {
	    children: childrenProp
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$w.default)(props, _excluded$w);
	  const context = (0, _TabContext$1.useTabContext)();

	  if (context === null) {
	    throw new TypeError('No TabContext provided');
	  }

	  const children = React$y.Children.map(childrenProp, child => {
	    if (! /*#__PURE__*/React$y.isValidElement(child)) {
	      return null;
	    }

	    return /*#__PURE__*/React$y.cloneElement(child, {
	      // SOMEDAY: `Tabs` will set those themselves
	      'aria-controls': (0, _TabContext$1.getPanelId)(context, child.props.value),
	      id: (0, _TabContext$1.getTabId)(context, child.props.value)
	    });
	  });
	  return /*#__PURE__*/(0, _jsxRuntime$F.jsx)(_Tabs.default, (0, _extends2$x.default)({}, other, {
	    ref: ref,
	    value: context.value,
	    children: children
	  }));
	});
	TabList$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A list of `<Tab />` elements.
	   */
	  children: _propTypes$x.default.node
	} ;
	var _default$17 = TabList$1;
	TabList$2.default = _default$17;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _TabList.default;
		  }
		});

		var _TabList = _interopRequireDefault(TabList$2);
	} (TabList$3));

	var TabList = /*@__PURE__*/getDefaultExportFromCjs(TabList$3);

	var TabPanel$3 = {};

	var TabPanel$2 = {};

	var tabPanelClasses$1 = {};

	Object.defineProperty(tabPanelClasses$1, "__esModule", {
	  value: true
	});
	tabPanelClasses$1.default = void 0;
	tabPanelClasses$1.getTabPanelUtilityClass = getTabPanelUtilityClass;

	var _base$S = node$1;

	function getTabPanelUtilityClass(slot) {
	  return (0, _base$S.generateUtilityClass)('MuiTabPanel', slot);
	}

	const tabPanelClasses = (0, _base$S.generateUtilityClasses)('MuiTabPanel', ['root']);
	var _default$16 = tabPanelClasses;
	tabPanelClasses$1.default = _default$16;

	var _interopRequireDefault$E = interopRequireDefault.exports;

	Object.defineProperty(TabPanel$2, "__esModule", {
	  value: true
	});
	TabPanel$2.default = void 0;

	var _extends2$w = _interopRequireDefault$E(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$v = _interopRequireDefault$E(objectWithoutPropertiesLoose.exports);

	var React$x = _interopRequireWildcard$z(require$$3);

	var _propTypes$w = _interopRequireDefault$E(propTypes.exports);

	var _clsx$n = _interopRequireDefault$E(clsx$1);

	var _styles = styles$4;

	var _base$R = node$1;

	var _tabPanelClasses = tabPanelClasses$1;

	var _TabContext = TabContext$3;

	var _jsxRuntime$E = jsxRuntime;

	const _excluded$v = ["children", "className", "value"];

	function _getRequireWildcardCache$z(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$z = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$z(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$z(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$q = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return (0, _base$R.unstable_composeClasses)(slots, _tabPanelClasses.getTabPanelUtilityClass, classes);
	};

	const TabPanelRoot = (0, _styles.styled)('div', {
	  name: 'MuiTabPanel',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme
	}) => ({
	  padding: theme.spacing(3)
	}));
	const TabPanel$1 = /*#__PURE__*/React$x.forwardRef(function TabPanel(inProps, ref) {
	  const props = (0, _styles.useThemeProps)({
	    props: inProps,
	    name: 'MuiTabPanel'
	  });
	  const {
	    children,
	    className,
	    value
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$v.default)(props, _excluded$v);
	  const ownerState = (0, _extends2$w.default)({}, props);
	  const classes = useUtilityClasses$q(ownerState);
	  const context = (0, _TabContext.useTabContext)();

	  if (context === null) {
	    throw new TypeError('No TabContext provided');
	  }

	  const id = (0, _TabContext.getPanelId)(context, value);
	  const tabId = (0, _TabContext.getTabId)(context, value);
	  return /*#__PURE__*/(0, _jsxRuntime$E.jsx)(TabPanelRoot, (0, _extends2$w.default)({
	    "aria-labelledby": tabId,
	    className: (0, _clsx$n.default)(classes.root, className),
	    hidden: value !== context.value,
	    id: id,
	    ref: ref,
	    role: "tabpanel",
	    ownerState: ownerState
	  }, other, {
	    children: value === context.value && children
	  }));
	});
	TabPanel$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$w.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$w.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$w.default.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$w.default.oneOfType([_propTypes$w.default.arrayOf(_propTypes$w.default.oneOfType([_propTypes$w.default.func, _propTypes$w.default.object, _propTypes$w.default.bool])), _propTypes$w.default.func, _propTypes$w.default.object]),

	  /**
	   * The `value` of the corresponding `Tab`. Must use the index of the `Tab` when
	   * no `value` was passed to `Tab`.
	   */
	  value: _propTypes$w.default.string.isRequired
	} ;
	var _default$15 = TabPanel$1;
	TabPanel$2.default = _default$15;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  tabPanelClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _TabPanel.default;
		  }
		});
		Object.defineProperty(exports, "tabPanelClasses", {
		  enumerable: true,
		  get: function () {
		    return _tabPanelClasses.default;
		  }
		});

		var _TabPanel = _interopRequireDefault(TabPanel$2);

		var _tabPanelClasses = _interopRequireWildcard(tabPanelClasses$1);

		Object.keys(_tabPanelClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _tabPanelClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _tabPanelClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TabPanel$3));

	var TabPanel = /*@__PURE__*/getDefaultExportFromCjs(TabPanel$3);

	var Settings = {};

	var createSvgIcon = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _utils.createSvgIcon;
		  }
		});

		var _utils = utils$a;
	} (createSvgIcon));

	var _interopRequireDefault$D = interopRequireDefault.exports;

	Object.defineProperty(Settings, "__esModule", {
	  value: true
	});
	var default_1$6 = Settings.default = void 0;

	var _createSvgIcon$7 = _interopRequireDefault$D(createSvgIcon);

	var _jsxRuntime$D = jsxRuntime;

	var _default$14 = (0, _createSvgIcon$7.default)( /*#__PURE__*/(0, _jsxRuntime$D.jsx)("path", {
	  d: "M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"
	}), 'Settings');

	default_1$6 = Settings.default = _default$14;

	var Info = {};

	var _interopRequireDefault$C = interopRequireDefault.exports;

	Object.defineProperty(Info, "__esModule", {
	  value: true
	});
	var default_1$5 = Info.default = void 0;

	var _createSvgIcon$6 = _interopRequireDefault$C(createSvgIcon);

	var _jsxRuntime$C = jsxRuntime;

	var _default$13 = (0, _createSvgIcon$6.default)( /*#__PURE__*/(0, _jsxRuntime$C.jsx)("path", {
	  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"
	}), 'Info');

	default_1$5 = Info.default = _default$13;

	var Close = {};

	var _interopRequireDefault$B = interopRequireDefault.exports;

	Object.defineProperty(Close, "__esModule", {
	  value: true
	});
	var default_1$4 = Close.default = void 0;

	var _createSvgIcon$5 = _interopRequireDefault$B(createSvgIcon);

	var _jsxRuntime$B = jsxRuntime;

	var _default$12 = (0, _createSvgIcon$5.default)( /*#__PURE__*/(0, _jsxRuntime$B.jsx)("path", {
	  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
	}), 'Close');

	default_1$4 = Close.default = _default$12;

	var Setting = g(function () {
	  const [open, setOpen] = l(false);
	  const [storage, setStorage] = useStorage();
	  const handleOpen = A$1(() => setOpen(true), []);
	  const handleClose = A$1(() => setOpen(false), []);
	  const handleToggleStorage = A$1(id => {
	    const newStorage = storage.settings.map(item => {
	      if (item.id === id) {
	        item.enabled = !item.enabled;
	      }

	      return item;
	    });
	    setStorage({ ...storage,
	      settings: newStorage
	    });
	  }, [storage]);
	  const [tab, setTab] = l('setting');
	  const handleChangeTab = A$1((_, newValue) => setTab(newValue), []);
	  return v$1(d$1, null, v$1(IconButton, {
	    onClick: handleOpen
	  }, v$1(default_1$6, null)), v$1(Drawer, {
	    anchor: "right",
	    open: open,
	    onClose: handleClose
	  }, v$1(Box, {
	    sx: {
	      display: 'flex',
	      justifyContent: 'space-between',
	      alignItems: 'center',
	      padding: '24px'
	    }
	  }, v$1(Typography, {
	    variant: "h5"
	  }, message.panel.title), v$1(IconButton, {
	    onClick: handleClose
	  }, v$1(default_1$4, null))), v$1(TabContext, {
	    value: tab
	  }, v$1(Box, {
	    sx: {
	      borderBottom: 1,
	      borderColor: 'divider'
	    }
	  }, v$1(TabList, {
	    onChange: handleChangeTab,
	    variant: "fullWidth"
	  }, v$1(Tab, {
	    icon: v$1(default_1$6, null),
	    label: message.panel.setting.title,
	    value: "setting"
	  }), v$1(Tab, {
	    icon: v$1(default_1$5, null),
	    label: message.panel.about.title,
	    value: "about"
	  }))), v$1(TabPanel, {
	    value: "setting",
	    sx: {
	      padding: 0
	    }
	  }, v$1(List, null, storage.settings.map(({
	    id,
	    enabled,
	    label,
	    description
	  }) => v$1(ListItem, {
	    key: id
	  }, v$1(ListItemButton, {
	    onClick: () => handleToggleStorage(id)
	  }, v$1(ListItemText, {
	    primary: label,
	    secondary: description
	  }), v$1(Switch, {
	    edge: "end",
	    checked: enabled
	  })))))), v$1(TabPanel, {
	    value: "about"
	  }))));
	});

	var Button$3 = {};

	var Button$2 = {};

	var buttonClasses$1 = {};

	Object.defineProperty(buttonClasses$1, "__esModule", {
	  value: true
	});
	buttonClasses$1.default = void 0;
	buttonClasses$1.getButtonUtilityClass = getButtonUtilityClass;

	var _base$Q = node$1;

	function getButtonUtilityClass(slot) {
	  return (0, _base$Q.generateUtilityClass)('MuiButton', slot);
	}

	const buttonClasses = (0, _base$Q.generateUtilityClasses)('MuiButton', ['root', 'text', 'textInherit', 'textPrimary', 'textSecondary', 'outlined', 'outlinedInherit', 'outlinedPrimary', 'outlinedSecondary', 'contained', 'containedInherit', 'containedPrimary', 'containedSecondary', 'disableElevation', 'focusVisible', 'disabled', 'colorInherit', 'textSizeSmall', 'textSizeMedium', 'textSizeLarge', 'outlinedSizeSmall', 'outlinedSizeMedium', 'outlinedSizeLarge', 'containedSizeSmall', 'containedSizeMedium', 'containedSizeLarge', 'sizeMedium', 'sizeSmall', 'sizeLarge', 'fullWidth', 'startIcon', 'endIcon', 'iconSizeSmall', 'iconSizeMedium', 'iconSizeLarge']);
	var _default$11 = buttonClasses;
	buttonClasses$1.default = _default$11;

	var ButtonGroupContext$1 = {};

	Object.defineProperty(ButtonGroupContext$1, "__esModule", {
	  value: true
	});
	ButtonGroupContext$1.default = void 0;

	var React$w = _interopRequireWildcard$y(require$$3);

	function _getRequireWildcardCache$y(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$y = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$y(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$y(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * @ignore - internal component.
	 */
	const ButtonGroupContext = /*#__PURE__*/React$w.createContext({});

	{
	  ButtonGroupContext.displayName = 'ButtonGroupContext';
	}

	var _default$10 = ButtonGroupContext;
	ButtonGroupContext$1.default = _default$10;

	var _interopRequireDefault$A = interopRequireDefault.exports;

	Object.defineProperty(Button$2, "__esModule", {
	  value: true
	});
	Button$2.default = void 0;

	var _objectWithoutPropertiesLoose2$u = _interopRequireDefault$A(objectWithoutPropertiesLoose.exports);

	var _extends2$v = _interopRequireDefault$A(_extends$5.exports);

	var React$v = _interopRequireWildcard$x(require$$3);

	var _propTypes$v = _interopRequireDefault$A(propTypes.exports);

	var _clsx$m = _interopRequireDefault$A(clsx$1);

	var _utils$i = utils$h;

	var _base$P = node$1;

	var _system$2 = system;

	var _styled$r = _interopRequireWildcard$x(styled$1);

	var _useThemeProps$p = _interopRequireDefault$A(useThemeProps$1);

	var _ButtonBase$1 = _interopRequireDefault$A(ButtonBase$2);

	var _capitalize$9 = _interopRequireDefault$A(capitalize);

	var _buttonClasses = _interopRequireWildcard$x(buttonClasses$1);

	var _ButtonGroupContext = _interopRequireDefault$A(ButtonGroupContext$1);

	var _jsxRuntime$A = jsxRuntime;

	const _excluded$u = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];

	function _getRequireWildcardCache$x(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$x = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$x(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$x(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$p = ownerState => {
	  const {
	    color,
	    disableElevation,
	    fullWidth,
	    size,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, `${variant}${(0, _capitalize$9.default)(color)}`, `size${(0, _capitalize$9.default)(size)}`, `${variant}Size${(0, _capitalize$9.default)(size)}`, color === 'inherit' && 'colorInherit', disableElevation && 'disableElevation', fullWidth && 'fullWidth'],
	    label: ['label'],
	    startIcon: ['startIcon', `iconSize${(0, _capitalize$9.default)(size)}`],
	    endIcon: ['endIcon', `iconSize${(0, _capitalize$9.default)(size)}`]
	  };
	  const composedClasses = (0, _base$P.unstable_composeClasses)(slots, _buttonClasses.getButtonUtilityClass, classes);
	  return (0, _extends2$v.default)({}, classes, composedClasses);
	};

	const commonIconStyles = ownerState => (0, _extends2$v.default)({}, ownerState.size === 'small' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 18
	  }
	}, ownerState.size === 'medium' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 20
	  }
	}, ownerState.size === 'large' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 22
	  }
	});

	const ButtonRoot = (0, _styled$r.default)(_ButtonBase$1.default, {
	  shouldForwardProp: prop => (0, _styled$r.rootShouldForwardProp)(prop) || prop === 'classes',
	  name: 'MuiButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${(0, _capitalize$9.default)(ownerState.color)}`], styles[`size${(0, _capitalize$9.default)(ownerState.size)}`], styles[`${ownerState.variant}Size${(0, _capitalize$9.default)(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$v.default)({}, theme.typography.button, {
	  minWidth: 64,
	  padding: '6px 16px',
	  borderRadius: theme.shape.borderRadius,
	  transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {
	    duration: theme.transitions.duration.short
	  }),
	  '&:hover': (0, _extends2$v.default)({
	    textDecoration: 'none',
	    backgroundColor: (0, _system$2.alpha)(theme.palette.text.primary, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
	    backgroundColor: (0, _system$2.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
	    border: `1px solid ${theme.palette[ownerState.color].main}`,
	    backgroundColor: (0, _system$2.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }, ownerState.variant === 'contained' && {
	    backgroundColor: theme.palette.grey.A100,
	    boxShadow: theme.shadows[4],
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      boxShadow: theme.shadows[2],
	      backgroundColor: theme.palette.grey[300]
	    }
	  }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
	    backgroundColor: theme.palette[ownerState.color].dark,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: theme.palette[ownerState.color].main
	    }
	  }),
	  '&:active': (0, _extends2$v.default)({}, ownerState.variant === 'contained' && {
	    boxShadow: theme.shadows[8]
	  }),
	  [`&.${_buttonClasses.default.focusVisible}`]: (0, _extends2$v.default)({}, ownerState.variant === 'contained' && {
	    boxShadow: theme.shadows[6]
	  }),
	  [`&.${_buttonClasses.default.disabled}`]: (0, _extends2$v.default)({
	    color: theme.palette.action.disabled
	  }, ownerState.variant === 'outlined' && {
	    border: `1px solid ${theme.palette.action.disabledBackground}`
	  }, ownerState.variant === 'outlined' && ownerState.color === 'secondary' && {
	    border: `1px solid ${theme.palette.action.disabled}`
	  }, ownerState.variant === 'contained' && {
	    color: theme.palette.action.disabled,
	    boxShadow: theme.shadows[0],
	    backgroundColor: theme.palette.action.disabledBackground
	  })
	}, ownerState.variant === 'text' && {
	  padding: '6px 8px'
	}, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
	  color: theme.palette[ownerState.color].main
	}, ownerState.variant === 'outlined' && {
	  padding: '5px 15px',
	  border: `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`
	}, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
	  color: theme.palette[ownerState.color].main,
	  border: `1px solid ${(0, _system$2.alpha)(theme.palette[ownerState.color].main, 0.5)}`
	}, ownerState.variant === 'contained' && {
	  color: theme.palette.getContrastText(theme.palette.grey[300]),
	  backgroundColor: theme.palette.grey[300],
	  boxShadow: theme.shadows[2]
	}, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
	  color: theme.palette[ownerState.color].contrastText,
	  backgroundColor: theme.palette[ownerState.color].main
	}, ownerState.color === 'inherit' && {
	  color: 'inherit',
	  borderColor: 'currentColor'
	}, ownerState.size === 'small' && ownerState.variant === 'text' && {
	  padding: '4px 5px',
	  fontSize: theme.typography.pxToRem(13)
	}, ownerState.size === 'large' && ownerState.variant === 'text' && {
	  padding: '8px 11px',
	  fontSize: theme.typography.pxToRem(15)
	}, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
	  padding: '3px 9px',
	  fontSize: theme.typography.pxToRem(13)
	}, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
	  padding: '7px 21px',
	  fontSize: theme.typography.pxToRem(15)
	}, ownerState.size === 'small' && ownerState.variant === 'contained' && {
	  padding: '4px 10px',
	  fontSize: theme.typography.pxToRem(13)
	}, ownerState.size === 'large' && ownerState.variant === 'contained' && {
	  padding: '8px 22px',
	  fontSize: theme.typography.pxToRem(15)
	}, ownerState.fullWidth && {
	  width: '100%'
	}), ({
	  ownerState
	}) => ownerState.disableElevation && {
	  boxShadow: 'none',
	  '&:hover': {
	    boxShadow: 'none'
	  },
	  [`&.${_buttonClasses.default.focusVisible}`]: {
	    boxShadow: 'none'
	  },
	  '&:active': {
	    boxShadow: 'none'
	  },
	  [`&.${_buttonClasses.default.disabled}`]: {
	    boxShadow: 'none'
	  }
	});
	const ButtonStartIcon = (0, _styled$r.default)('span', {
	  name: 'MuiButton',
	  slot: 'StartIcon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.startIcon, styles[`iconSize${(0, _capitalize$9.default)(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$v.default)({
	  display: 'inherit',
	  marginRight: 8,
	  marginLeft: -4
	}, ownerState.size === 'small' && {
	  marginLeft: -2
	}, commonIconStyles(ownerState)));
	const ButtonEndIcon = (0, _styled$r.default)('span', {
	  name: 'MuiButton',
	  slot: 'EndIcon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.endIcon, styles[`iconSize${(0, _capitalize$9.default)(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$v.default)({
	  display: 'inherit',
	  marginRight: -4,
	  marginLeft: 8
	}, ownerState.size === 'small' && {
	  marginRight: -2
	}, commonIconStyles(ownerState)));
	const Button$1 = /*#__PURE__*/React$v.forwardRef(function Button(inProps, ref) {
	  // props priority: `inProps` > `contextProps` > `themeDefaultProps`
	  const contextProps = React$v.useContext(_ButtonGroupContext.default);
	  const resolvedProps = (0, _utils$i.internal_resolveProps)(contextProps, inProps);
	  const props = (0, _useThemeProps$p.default)({
	    props: resolvedProps,
	    name: 'MuiButton'
	  });
	  const {
	    children,
	    color = 'primary',
	    component = 'button',
	    className,
	    disabled = false,
	    disableElevation = false,
	    disableFocusRipple = false,
	    endIcon: endIconProp,
	    focusVisibleClassName,
	    fullWidth = false,
	    size = 'medium',
	    startIcon: startIconProp,
	    type,
	    variant = 'text'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$u.default)(props, _excluded$u);
	  const ownerState = (0, _extends2$v.default)({}, props, {
	    color,
	    component,
	    disabled,
	    disableElevation,
	    disableFocusRipple,
	    fullWidth,
	    size,
	    type,
	    variant
	  });
	  const classes = useUtilityClasses$p(ownerState);
	  const startIcon = startIconProp && /*#__PURE__*/(0, _jsxRuntime$A.jsx)(ButtonStartIcon, {
	    className: classes.startIcon,
	    ownerState: ownerState,
	    children: startIconProp
	  });
	  const endIcon = endIconProp && /*#__PURE__*/(0, _jsxRuntime$A.jsx)(ButtonEndIcon, {
	    className: classes.endIcon,
	    ownerState: ownerState,
	    children: endIconProp
	  });
	  return /*#__PURE__*/(0, _jsxRuntime$A.jsxs)(ButtonRoot, (0, _extends2$v.default)({
	    ownerState: ownerState,
	    className: (0, _clsx$m.default)(className, contextProps.className),
	    component: component,
	    disabled: disabled,
	    focusRipple: !disableFocusRipple,
	    focusVisibleClassName: (0, _clsx$m.default)(classes.focusVisible, focusVisibleClassName),
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes,
	    children: [startIcon, children, endIcon]
	  }));
	});
	Button$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$v.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$v.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$v.default.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * @default 'primary'
	   */
	  color: _propTypes$v.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$v.default.oneOf(['inherit', 'primary', 'secondary', 'success', 'error', 'info', 'warning']), _propTypes$v.default.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$v.default.elementType,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: _propTypes$v.default.bool,

	  /**
	   * If `true`, no elevation is used.
	   * @default false
	   */
	  disableElevation: _propTypes$v.default.bool,

	  /**
	   * If `true`, the  keyboard focus ripple is disabled.
	   * @default false
	   */
	  disableFocusRipple: _propTypes$v.default.bool,

	  /**
	   * If `true`, the ripple effect is disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
	   * @default false
	   */
	  disableRipple: _propTypes$v.default.bool,

	  /**
	   * Element placed after the children.
	   */
	  endIcon: _propTypes$v.default.node,

	  /**
	   * @ignore
	   */
	  focusVisibleClassName: _propTypes$v.default.string,

	  /**
	   * If `true`, the button will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: _propTypes$v.default.bool,

	  /**
	   * The URL to link to when the button is clicked.
	   * If defined, an `a` element will be used as the root node.
	   */
	  href: _propTypes$v.default.string,

	  /**
	   * The size of the component.
	   * `small` is equivalent to the dense button styling.
	   * @default 'medium'
	   */
	  size: _propTypes$v.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$v.default.oneOf(['small', 'medium', 'large']), _propTypes$v.default.string]),

	  /**
	   * Element placed before the children.
	   */
	  startIcon: _propTypes$v.default.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$v.default.oneOfType([_propTypes$v.default.arrayOf(_propTypes$v.default.oneOfType([_propTypes$v.default.func, _propTypes$v.default.object, _propTypes$v.default.bool])), _propTypes$v.default.func, _propTypes$v.default.object]),

	  /**
	   * @ignore
	   */
	  type: _propTypes$v.default.oneOfType([_propTypes$v.default.oneOf(['button', 'reset', 'submit']), _propTypes$v.default.string]),

	  /**
	   * The variant to use.
	   * @default 'text'
	   */
	  variant: _propTypes$v.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$v.default.oneOf(['contained', 'outlined', 'text']), _propTypes$v.default.string])
	} ;
	var _default$$ = Button$1;
	Button$2.default = _default$$;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  buttonClasses: true
		};
		Object.defineProperty(exports, "buttonClasses", {
		  enumerable: true,
		  get: function () {
		    return _buttonClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Button.default;
		  }
		});

		var _Button = _interopRequireDefault(Button$2);

		var _buttonClasses = _interopRequireWildcard(buttonClasses$1);

		Object.keys(_buttonClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _buttonClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _buttonClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Button$3));

	var Button = /*@__PURE__*/getDefaultExportFromCjs(Button$3);

	var Badge$3 = {};

	var Badge$2 = {};

	var shouldSpreadAdditionalProps$1 = {};

	Object.defineProperty(shouldSpreadAdditionalProps$1, "__esModule", {
	  value: true
	});
	shouldSpreadAdditionalProps$1.default = void 0;

	var _base$O = node$1;

	const shouldSpreadAdditionalProps = Slot => {
	  return !Slot || !(0, _base$O.isHostComponent)(Slot);
	};

	var _default$_ = shouldSpreadAdditionalProps;
	shouldSpreadAdditionalProps$1.default = _default$_;

	var _interopRequireDefault$z = interopRequireDefault.exports;

	Object.defineProperty(Badge$2, "__esModule", {
	  value: true
	});
	Badge$2.default = Badge$2.badgeClasses = void 0;

	var _objectWithoutPropertiesLoose2$t = _interopRequireDefault$z(objectWithoutPropertiesLoose.exports);

	var _extends2$u = _interopRequireDefault$z(_extends$5.exports);

	var React$u = _interopRequireWildcard$w(require$$3);

	var _propTypes$u = _interopRequireDefault$z(propTypes.exports);

	var _clsx$l = _interopRequireDefault$z(clsx$1);

	var _utils$h = utils$h;

	var _base$N = node$1;

	var _BadgeUnstyled = _interopRequireWildcard$w(BadgeUnstyled$2);

	var _styled$q = _interopRequireDefault$z(styled$1);

	var _useThemeProps$o = _interopRequireDefault$z(useThemeProps$1);

	var _shouldSpreadAdditionalProps$1 = _interopRequireDefault$z(shouldSpreadAdditionalProps$1);

	var _capitalize$8 = _interopRequireDefault$z(capitalize);

	var _jsxRuntime$z = jsxRuntime;

	const _excluded$t = ["anchorOrigin", "component", "components", "componentsProps", "overlap", "color", "invisible", "badgeContent", "showZero", "variant"];

	function _getRequireWildcardCache$w(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$w = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$w(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$w(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const badgeClasses = (0, _extends2$u.default)({}, _BadgeUnstyled.badgeUnstyledClasses, (0, _base$N.generateUtilityClasses)('MuiBadge', ['colorError', 'colorInfo', 'colorPrimary', 'colorSecondary', 'colorSuccess', 'colorWarning', 'overlapRectangular', 'overlapCircular', // TODO: v6 remove the overlap value from these class keys
	'anchorOriginTopLeftCircular', 'anchorOriginTopLeftRectangular', 'anchorOriginTopRightCircular', 'anchorOriginTopRightRectangular', 'anchorOriginBottomLeftCircular', 'anchorOriginBottomLeftRectangular', 'anchorOriginBottomRightCircular', 'anchorOriginBottomRightRectangular']));
	Badge$2.badgeClasses = badgeClasses;
	const RADIUS_STANDARD = 10;
	const RADIUS_DOT = 4;

	const extendUtilityClasses$1 = ownerState => {
	  const {
	    color,
	    anchorOrigin,
	    overlap,
	    classes = {}
	  } = ownerState;
	  return (0, _extends2$u.default)({}, classes, {
	    badge: (0, _clsx$l.default)(classes.badge, (0, _BadgeUnstyled.getBadgeUtilityClass)(`anchorOrigin${(0, _capitalize$8.default)(anchorOrigin.vertical)}${(0, _capitalize$8.default)(anchorOrigin.horizontal)}${(0, _capitalize$8.default)(overlap)}`), (0, _BadgeUnstyled.getBadgeUtilityClass)(`overlap${(0, _capitalize$8.default)(overlap)}`), color !== 'default' && [(0, _BadgeUnstyled.getBadgeUtilityClass)(`color${(0, _capitalize$8.default)(color)}`), classes[`color${(0, _capitalize$8.default)(color)}`]])
	  });
	};

	const BadgeRoot = (0, _styled$q.default)('span', {
	  name: 'MuiBadge',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  position: 'relative',
	  display: 'inline-flex',
	  // For correct alignment with the text.
	  verticalAlign: 'middle',
	  flexShrink: 0
	});
	const BadgeBadge = (0, _styled$q.default)('span', {
	  name: 'MuiBadge',
	  slot: 'Badge',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.badge, styles[ownerState.variant], styles[`anchorOrigin${(0, _capitalize$8.default)(ownerState.anchorOrigin.vertical)}${(0, _capitalize$8.default)(ownerState.anchorOrigin.horizontal)}${(0, _capitalize$8.default)(ownerState.overlap)}`], ownerState.color !== 'default' && styles[`color${(0, _capitalize$8.default)(ownerState.color)}`], ownerState.invisible && styles.invisible];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$u.default)({
	  display: 'flex',
	  flexDirection: 'row',
	  flexWrap: 'wrap',
	  justifyContent: 'center',
	  alignContent: 'center',
	  alignItems: 'center',
	  position: 'absolute',
	  boxSizing: 'border-box',
	  fontFamily: theme.typography.fontFamily,
	  fontWeight: theme.typography.fontWeightMedium,
	  fontSize: theme.typography.pxToRem(12),
	  minWidth: RADIUS_STANDARD * 2,
	  lineHeight: 1,
	  padding: '0 6px',
	  height: RADIUS_STANDARD * 2,
	  borderRadius: RADIUS_STANDARD,
	  zIndex: 1,
	  // Render the badge on top of potential ripples.
	  transition: theme.transitions.create('transform', {
	    easing: theme.transitions.easing.easeInOut,
	    duration: theme.transitions.duration.enteringScreen
	  })
	}, ownerState.color !== 'default' && {
	  backgroundColor: theme.palette[ownerState.color].main,
	  color: theme.palette[ownerState.color].contrastText
	}, ownerState.variant === 'dot' && {
	  borderRadius: RADIUS_DOT,
	  height: RADIUS_DOT * 2,
	  minWidth: RADIUS_DOT * 2,
	  padding: 0
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && {
	  top: 0,
	  right: 0,
	  transform: 'scale(1) translate(50%, -50%)',
	  transformOrigin: '100% 0%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && {
	  bottom: 0,
	  right: 0,
	  transform: 'scale(1) translate(50%, 50%)',
	  transformOrigin: '100% 100%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(50%, 50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && {
	  top: 0,
	  left: 0,
	  transform: 'scale(1) translate(-50%, -50%)',
	  transformOrigin: '0% 0%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(-50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && {
	  bottom: 0,
	  left: 0,
	  transform: 'scale(1) translate(-50%, 50%)',
	  transformOrigin: '0% 100%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(-50%, 50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && {
	  top: '14%',
	  right: '14%',
	  transform: 'scale(1) translate(50%, -50%)',
	  transformOrigin: '100% 0%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && {
	  bottom: '14%',
	  right: '14%',
	  transform: 'scale(1) translate(50%, 50%)',
	  transformOrigin: '100% 100%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(50%, 50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && {
	  top: '14%',
	  left: '14%',
	  transform: 'scale(1) translate(-50%, -50%)',
	  transformOrigin: '0% 0%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(-50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && {
	  bottom: '14%',
	  left: '14%',
	  transform: 'scale(1) translate(-50%, 50%)',
	  transformOrigin: '0% 100%',
	  [`&.${badgeClasses.invisible}`]: {
	    transform: 'scale(0) translate(-50%, 50%)'
	  }
	}, ownerState.invisible && {
	  transition: theme.transitions.create('transform', {
	    easing: theme.transitions.easing.easeInOut,
	    duration: theme.transitions.duration.leavingScreen
	  })
	}));
	const Badge$1 = /*#__PURE__*/React$u.forwardRef(function Badge(inProps, ref) {
	  var _componentsProps$root, _componentsProps$badg;

	  const props = (0, _useThemeProps$o.default)({
	    props: inProps,
	    name: 'MuiBadge'
	  });
	  const {
	    anchorOrigin: anchorOriginProp = {
	      vertical: 'top',
	      horizontal: 'right'
	    },
	    component = 'span',
	    components = {},
	    componentsProps = {},
	    overlap: overlapProp = 'rectangular',
	    color: colorProp = 'default',
	    invisible: invisibleProp,
	    badgeContent: badgeContentProp,
	    showZero = false,
	    variant: variantProp = 'standard'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$t.default)(props, _excluded$t);
	  const prevProps = (0, _utils$h.usePreviousProps)({
	    anchorOrigin: anchorOriginProp,
	    color: colorProp,
	    overlap: overlapProp
	  });
	  let invisible = invisibleProp;

	  if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {
	    invisible = true;
	  }

	  const {
	    color = colorProp,
	    overlap = overlapProp,
	    anchorOrigin = anchorOriginProp
	  } = invisible ? prevProps : props;
	  const ownerState = (0, _extends2$u.default)({}, props, {
	    anchorOrigin,
	    invisible,
	    color,
	    overlap
	  });
	  const classes = extendUtilityClasses$1(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$z.jsx)(_BadgeUnstyled.default, (0, _extends2$u.default)({
	    anchorOrigin: anchorOrigin,
	    invisible: invisibleProp,
	    badgeContent: badgeContentProp,
	    showZero: showZero,
	    variant: variantProp
	  }, other, {
	    components: (0, _extends2$u.default)({
	      Root: BadgeRoot,
	      Badge: BadgeBadge
	    }, components),
	    componentsProps: {
	      root: (0, _extends2$u.default)({}, componentsProps.root, (0, _shouldSpreadAdditionalProps$1.default)(components.Root) && {
	        as: component,
	        ownerState: (0, _extends2$u.default)({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState, {
	          color,
	          overlap
	        })
	      }),
	      badge: (0, _extends2$u.default)({}, componentsProps.badge, (0, _shouldSpreadAdditionalProps$1.default)(components.Badge) && {
	        ownerState: (0, _extends2$u.default)({}, (_componentsProps$badg = componentsProps.badge) == null ? void 0 : _componentsProps$badg.ownerState, {
	          color,
	          overlap
	        })
	      })
	    },
	    classes: classes,
	    ref: ref
	  }));
	});
	Badge$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The anchor of the badge.
	   * @default {
	   *   vertical: 'top',
	   *   horizontal: 'right',
	   * }
	   */
	  anchorOrigin: _propTypes$u.default.shape({
	    horizontal: _propTypes$u.default.oneOf(['left', 'right']).isRequired,
	    vertical: _propTypes$u.default.oneOf(['bottom', 'top']).isRequired
	  }),

	  /**
	   * The content rendered within the badge.
	   */
	  badgeContent: _propTypes$u.default.node,

	  /**
	   * The badge will be added relative to this node.
	   */
	  children: _propTypes$u.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$u.default.object,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * @default 'default'
	   */
	  color: _propTypes$u.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$u.default.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), _propTypes$u.default.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$u.default.elementType,

	  /**
	   * The components used for each slot inside the Badge.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$u.default.shape({
	    Badge: _propTypes$u.default.elementType,
	    Root: _propTypes$u.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Badge.
	   * @default {}
	   */
	  componentsProps: _propTypes$u.default.shape({
	    badge: _propTypes$u.default.object,
	    root: _propTypes$u.default.object
	  }),

	  /**
	   * If `true`, the badge is invisible.
	   */
	  invisible: _propTypes$u.default.bool,

	  /**
	   * Max count to show.
	   * @default 99
	   */
	  max: _propTypes$u.default.number,

	  /**
	   * Wrapped shape the badge should overlap.
	   * @default 'rectangular'
	   */
	  overlap: _propTypes$u.default.oneOf(['circular', 'rectangular']),

	  /**
	   * Controls whether the badge is hidden when `badgeContent` is zero.
	   * @default false
	   */
	  showZero: _propTypes$u.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$u.default.oneOfType([_propTypes$u.default.arrayOf(_propTypes$u.default.oneOfType([_propTypes$u.default.func, _propTypes$u.default.object, _propTypes$u.default.bool])), _propTypes$u.default.func, _propTypes$u.default.object]),

	  /**
	   * The variant to use.
	   * @default 'standard'
	   */
	  variant: _propTypes$u.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$u.default.oneOf(['dot', 'standard']), _propTypes$u.default.string])
	} ;
	var _default$Z = Badge$1;
	Badge$2.default = _default$Z;

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Badge.default;
		  }
		});

		var _Badge = _interopRequireWildcard(Badge$2);

		Object.keys(_Badge).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _Badge[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _Badge[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Badge$3));

	var Badge = /*@__PURE__*/getDefaultExportFromCjs(Badge$3);

	var Notifications = {};

	var _interopRequireDefault$y = interopRequireDefault.exports;

	Object.defineProperty(Notifications, "__esModule", {
	  value: true
	});
	var default_1$3 = Notifications.default = void 0;

	var _createSvgIcon$4 = _interopRequireDefault$y(createSvgIcon);

	var _jsxRuntime$y = jsxRuntime;

	var _default$Y = (0, _createSvgIcon$4.default)( /*#__PURE__*/(0, _jsxRuntime$y.jsx)("path", {
	  d: "M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"
	}), 'Notifications');

	default_1$3 = Notifications.default = _default$Y;

	var NotificationsActive = {};

	var _interopRequireDefault$x = interopRequireDefault.exports;

	Object.defineProperty(NotificationsActive, "__esModule", {
	  value: true
	});
	var default_1$2 = NotificationsActive.default = void 0;

	var _createSvgIcon$3 = _interopRequireDefault$x(createSvgIcon);

	var _jsxRuntime$x = jsxRuntime;

	var _default$X = (0, _createSvgIcon$3.default)( /*#__PURE__*/(0, _jsxRuntime$x.jsx)("path", {
	  d: "M7.58 4.08 6.15 2.65C3.75 4.48 2.17 7.3 2.03 10.5h2c.15-2.65 1.51-4.97 3.55-6.42zm12.39 6.42h2c-.15-3.2-1.73-6.02-4.12-7.85l-1.42 1.43c2.02 1.45 3.39 3.77 3.54 6.42zM18 11c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2v-5zm-6 11c.14 0 .27-.01.4-.04.65-.14 1.18-.58 1.44-1.18.1-.24.15-.5.15-.78h-4c.01 1.1.9 2 2.01 2z"
	}), 'NotificationsActive');

	default_1$2 = NotificationsActive.default = _default$X;

	var NotificationsPaused = {};

	var _interopRequireDefault$w = interopRequireDefault.exports;

	Object.defineProperty(NotificationsPaused, "__esModule", {
	  value: true
	});
	var default_1$1 = NotificationsPaused.default = void 0;

	var _createSvgIcon$2 = _interopRequireDefault$w(createSvgIcon);

	var _jsxRuntime$w = jsxRuntime;

	var _default$W = (0, _createSvgIcon$2.default)( /*#__PURE__*/(0, _jsxRuntime$w.jsx)("path", {
	  d: "M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.93 6 11v5l-2 2v1h16v-1l-2-2zm-3.5-6.2-2.8 3.4h2.8V15h-5v-1.8l2.8-3.4H9.5V8h5v1.8z"
	}), 'NotificationsPaused');

	default_1$1 = NotificationsPaused.default = _default$W;

	var Popover$3 = {};

	var Popover$2 = {};

	var Grow$2 = {};

	var Grow$1 = {};

	var _interopRequireDefault$v = interopRequireDefault.exports;

	Object.defineProperty(Grow$1, "__esModule", {
	  value: true
	});
	Grow$1.default = void 0;

	var _extends2$t = _interopRequireDefault$v(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$s = _interopRequireDefault$v(objectWithoutPropertiesLoose.exports);

	var React$t = _interopRequireWildcard$v(require$$3);

	var _propTypes$t = _interopRequireDefault$v(propTypes.exports);

	var _utils$g = utils$h;

	var _reactTransitionGroup = cjs;

	var _useTheme$2 = _interopRequireDefault$v(useTheme$8);

	var _utils2$2 = utils$b;

	var _useForkRef$5 = _interopRequireDefault$v(useForkRef);

	var _jsxRuntime$v = jsxRuntime;

	const _excluded$s = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];

	function _getRequireWildcardCache$v(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$v = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$v(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$v(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function getScale(value) {
	  return `scale(${value}, ${value ** 2})`;
	}

	const styles = {
	  entering: {
	    opacity: 1,
	    transform: getScale(1)
	  },
	  entered: {
	    opacity: 1,
	    transform: 'none'
	  }
	};
	/**
	 * The Grow transition is used by the [Tooltip](/components/tooltips/) and
	 * [Popover](/components/popover/) components.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	const Grow = /*#__PURE__*/React$t.forwardRef(function Grow(props, ref) {
	  const {
	    addEndListener,
	    appear = true,
	    children,
	    easing,
	    in: inProp,
	    onEnter,
	    onEntered,
	    onEntering,
	    onExit,
	    onExited,
	    onExiting,
	    style,
	    timeout = 'auto',
	    // eslint-disable-next-line react/prop-types
	    TransitionComponent = _reactTransitionGroup.Transition
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$s.default)(props, _excluded$s);
	  const timer = React$t.useRef();
	  const autoTimeout = React$t.useRef();
	  const theme = (0, _useTheme$2.default)();
	  const nodeRef = React$t.useRef(null);
	  const foreignRef = (0, _useForkRef$5.default)(children.ref, ref);
	  const handleRef = (0, _useForkRef$5.default)(nodeRef, foreignRef);

	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };

	  const handleEntering = normalizedTransitionCallback(onEntering);
	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    (0, _utils2$2.reflow)(node); // So the animation always start from the start.

	    const {
	      duration: transitionDuration,
	      delay,
	      easing: transitionTimingFunction
	    } = (0, _utils2$2.getTransitionProps)({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });
	    let duration;

	    if (timeout === 'auto') {
	      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	      autoTimeout.current = duration;
	    } else {
	      duration = transitionDuration;
	    }

	    node.style.transition = [theme.transitions.create('opacity', {
	      duration,
	      delay
	    }), theme.transitions.create('transform', {
	      duration: duration * 0.666,
	      delay,
	      easing: transitionTimingFunction
	    })].join(',');

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const {
	      duration: transitionDuration,
	      delay,
	      easing: transitionTimingFunction
	    } = (0, _utils2$2.getTransitionProps)({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });
	    let duration;

	    if (timeout === 'auto') {
	      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	      autoTimeout.current = duration;
	    } else {
	      duration = transitionDuration;
	    }

	    node.style.transition = [theme.transitions.create('opacity', {
	      duration,
	      delay
	    }), theme.transitions.create('transform', {
	      duration: duration * 0.666,
	      delay: delay || duration * 0.333,
	      easing: transitionTimingFunction
	    })].join(',');
	    node.style.opacity = '0';
	    node.style.transform = getScale(0.75);

	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);

	  const handleAddEndListener = next => {
	    if (timeout === 'auto') {
	      timer.current = setTimeout(next, autoTimeout.current || 0);
	    }

	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };

	  React$t.useEffect(() => {
	    return () => {
	      clearTimeout(timer.current);
	    };
	  }, []);
	  return /*#__PURE__*/(0, _jsxRuntime$v.jsx)(TransitionComponent, (0, _extends2$t.default)({
	    appear: appear,
	    in: inProp,
	    nodeRef: nodeRef,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    timeout: timeout === 'auto' ? null : timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/React$t.cloneElement(children, (0, _extends2$t.default)({
	        style: (0, _extends2$t.default)({
	          opacity: 0,
	          transform: getScale(0.75),
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, styles[state], style, children.props.style),
	        ref: handleRef
	      }, childProps));
	    }
	  }));
	});
	Grow.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Add a custom transition end trigger. Called with the transitioning DOM
	   * node and a done callback. Allows for more fine grained transition end
	   * logic. Note: Timeouts are still used as a fallback if provided.
	   */
	  addEndListener: _propTypes$t.default.func,

	  /**
	   * Perform the enter transition when it first mounts if `in` is also `true`.
	   * Set this to `false` to disable this behavior.
	   * @default true
	   */
	  appear: _propTypes$t.default.bool,

	  /**
	   * A single child content element.
	   */
	  children: _utils$g.elementAcceptingRef.isRequired,

	  /**
	   * The transition timing function.
	   * You may specify a single easing or a object containing enter and exit values.
	   */
	  easing: _propTypes$t.default.oneOfType([_propTypes$t.default.shape({
	    enter: _propTypes$t.default.string,
	    exit: _propTypes$t.default.string
	  }), _propTypes$t.default.string]),

	  /**
	   * If `true`, the component will transition in.
	   */
	  in: _propTypes$t.default.bool,

	  /**
	   * @ignore
	   */
	  onEnter: _propTypes$t.default.func,

	  /**
	   * @ignore
	   */
	  onEntered: _propTypes$t.default.func,

	  /**
	   * @ignore
	   */
	  onEntering: _propTypes$t.default.func,

	  /**
	   * @ignore
	   */
	  onExit: _propTypes$t.default.func,

	  /**
	   * @ignore
	   */
	  onExited: _propTypes$t.default.func,

	  /**
	   * @ignore
	   */
	  onExiting: _propTypes$t.default.func,

	  /**
	   * @ignore
	   */
	  style: _propTypes$t.default.object,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   *
	   * Set to 'auto' to automatically calculate transition time based on height.
	   * @default 'auto'
	   */
	  timeout: _propTypes$t.default.oneOfType([_propTypes$t.default.oneOf(['auto']), _propTypes$t.default.number, _propTypes$t.default.shape({
	    appear: _propTypes$t.default.number,
	    enter: _propTypes$t.default.number,
	    exit: _propTypes$t.default.number
	  })])
	} ;
	Grow.muiSupportAuto = true;
	var _default$V = Grow;
	Grow$1.default = _default$V;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Grow.default;
		  }
		});

		var _Grow = _interopRequireDefault(Grow$1);
	} (Grow$2));

	var popoverClasses$1 = {};

	Object.defineProperty(popoverClasses$1, "__esModule", {
	  value: true
	});
	popoverClasses$1.default = void 0;
	popoverClasses$1.getPopoverUtilityClass = getPopoverUtilityClass;

	var _base$M = node$1;

	function getPopoverUtilityClass(slot) {
	  return (0, _base$M.generateUtilityClass)('MuiPopover', slot);
	}

	const popoverClasses = (0, _base$M.generateUtilityClasses)('MuiPopover', ['root', 'paper']);
	var _default$U = popoverClasses;
	popoverClasses$1.default = _default$U;

	var _interopRequireDefault$u = interopRequireDefault.exports;

	Object.defineProperty(Popover$2, "__esModule", {
	  value: true
	});
	Popover$2.default = void 0;
	Popover$2.getOffsetLeft = getOffsetLeft;
	Popover$2.getOffsetTop = getOffsetTop;

	var _extends2$s = _interopRequireDefault$u(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$r = _interopRequireDefault$u(objectWithoutPropertiesLoose.exports);

	var React$s = _interopRequireWildcard$u(require$$3);

	var _propTypes$s = _interopRequireDefault$u(propTypes.exports);

	var _clsx$k = _interopRequireDefault$u(clsx$1);

	var _base$L = node$1;

	var _utils$f = utils$h;

	var _styled$p = _interopRequireDefault$u(styled$1);

	var _useThemeProps$n = _interopRequireDefault$u(useThemeProps$1);

	var _debounce = _interopRequireDefault$u(debounce$1);

	var _ownerDocument$2 = _interopRequireDefault$u(ownerDocument);

	var _ownerWindow = _interopRequireDefault$u(ownerWindow);

	var _useForkRef$4 = _interopRequireDefault$u(useForkRef);

	var _Grow = _interopRequireDefault$u(Grow$2);

	var _Modal$1 = _interopRequireDefault$u(Modal$2);

	var _Paper$4 = _interopRequireDefault$u(Paper$2);

	var _popoverClasses = popoverClasses$1;

	var _jsxRuntime$u = jsxRuntime;

	const _excluded$r = ["onEntering"],
	      _excluded2$1 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];

	function _getRequireWildcardCache$u(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$u = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$u(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$u(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function getOffsetTop(rect, vertical) {
	  let offset = 0;

	  if (typeof vertical === 'number') {
	    offset = vertical;
	  } else if (vertical === 'center') {
	    offset = rect.height / 2;
	  } else if (vertical === 'bottom') {
	    offset = rect.height;
	  }

	  return offset;
	}

	function getOffsetLeft(rect, horizontal) {
	  let offset = 0;

	  if (typeof horizontal === 'number') {
	    offset = horizontal;
	  } else if (horizontal === 'center') {
	    offset = rect.width / 2;
	  } else if (horizontal === 'right') {
	    offset = rect.width;
	  }

	  return offset;
	}

	function getTransformOriginValue(transformOrigin) {
	  return [transformOrigin.horizontal, transformOrigin.vertical].map(n => typeof n === 'number' ? `${n}px` : n).join(' ');
	}

	function resolveAnchorEl(anchorEl) {
	  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
	}

	const useUtilityClasses$o = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    paper: ['paper']
	  };
	  return (0, _base$L.unstable_composeClasses)(slots, _popoverClasses.getPopoverUtilityClass, classes);
	};

	const PopoverRoot = (0, _styled$p.default)(_Modal$1.default, {
	  name: 'MuiPopover',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const PopoverPaper = (0, _styled$p.default)(_Paper$4.default, {
	  name: 'MuiPopover',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})({
	  position: 'absolute',
	  overflowY: 'auto',
	  overflowX: 'hidden',
	  // So we see the popover when it's empty.
	  // It's most likely on issue on userland.
	  minWidth: 16,
	  minHeight: 16,
	  maxWidth: 'calc(100% - 32px)',
	  maxHeight: 'calc(100% - 32px)',
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	});
	const Popover$1 = /*#__PURE__*/React$s.forwardRef(function Popover(inProps, ref) {
	  const props = (0, _useThemeProps$n.default)({
	    props: inProps,
	    name: 'MuiPopover'
	  });
	  const {
	    action,
	    anchorEl,
	    anchorOrigin = {
	      vertical: 'top',
	      horizontal: 'left'
	    },
	    anchorPosition,
	    anchorReference = 'anchorEl',
	    children,
	    className,
	    container: containerProp,
	    elevation = 8,
	    marginThreshold = 16,
	    open,
	    PaperProps = {},
	    transformOrigin = {
	      vertical: 'top',
	      horizontal: 'left'
	    },
	    TransitionComponent = _Grow.default,
	    transitionDuration: transitionDurationProp = 'auto',
	    TransitionProps: {
	      onEntering
	    } = {}
	  } = props,
	        TransitionProps = (0, _objectWithoutPropertiesLoose2$r.default)(props.TransitionProps, _excluded$r),
	        other = (0, _objectWithoutPropertiesLoose2$r.default)(props, _excluded2$1);
	  const paperRef = React$s.useRef();
	  const handlePaperRef = (0, _useForkRef$4.default)(paperRef, PaperProps.ref);
	  const ownerState = (0, _extends2$s.default)({}, props, {
	    anchorOrigin,
	    anchorReference,
	    elevation,
	    marginThreshold,
	    PaperProps,
	    transformOrigin,
	    TransitionComponent,
	    transitionDuration: transitionDurationProp,
	    TransitionProps
	  });
	  const classes = useUtilityClasses$o(ownerState); // Returns the top/left offset of the position
	  // to attach to on the anchor element (or body if none is provided)

	  const getAnchorOffset = React$s.useCallback(() => {
	    if (anchorReference === 'anchorPosition') {
	      {
	        if (!anchorPosition) {
	          console.error('MUI: You need to provide a `anchorPosition` prop when using ' + '<Popover anchorReference="anchorPosition" />.');
	        }
	      }

	      return anchorPosition;
	    }

	    const resolvedAnchorEl = resolveAnchorEl(anchorEl); // If an anchor element wasn't provided, just use the parent body element of this Popover

	    const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : (0, _ownerDocument$2.default)(paperRef.current).body;
	    const anchorRect = anchorElement.getBoundingClientRect();

	    {
	      const box = anchorElement.getBoundingClientRect();

	      if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	        console.warn(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	      }
	    }

	    return {
	      top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
	      left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
	    };
	  }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]); // Returns the base transform origin using the element

	  const getTransformOrigin = React$s.useCallback(elemRect => {
	    return {
	      vertical: getOffsetTop(elemRect, transformOrigin.vertical),
	      horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
	    };
	  }, [transformOrigin.horizontal, transformOrigin.vertical]);
	  const getPositioningStyle = React$s.useCallback(element => {
	    const elemRect = {
	      width: element.offsetWidth,
	      height: element.offsetHeight
	    }; // Get the transform origin point on the element itself

	    const elemTransformOrigin = getTransformOrigin(elemRect);

	    if (anchorReference === 'none') {
	      return {
	        top: null,
	        left: null,
	        transformOrigin: getTransformOriginValue(elemTransformOrigin)
	      };
	    } // Get the offset of the anchoring element


	    const anchorOffset = getAnchorOffset(); // Calculate element positioning

	    let top = anchorOffset.top - elemTransformOrigin.vertical;
	    let left = anchorOffset.left - elemTransformOrigin.horizontal;
	    const bottom = top + elemRect.height;
	    const right = left + elemRect.width; // Use the parent window of the anchorEl if provided

	    const containerWindow = (0, _ownerWindow.default)(resolveAnchorEl(anchorEl)); // Window thresholds taking required margin into account

	    const heightThreshold = containerWindow.innerHeight - marginThreshold;
	    const widthThreshold = containerWindow.innerWidth - marginThreshold; // Check if the vertical axis needs shifting

	    if (top < marginThreshold) {
	      const diff = top - marginThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    } else if (bottom > heightThreshold) {
	      const diff = bottom - heightThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    }

	    {
	      if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
	        console.error(['MUI: The popover component is too tall.', `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, 'Please consider adding a `max-height` to improve the user-experience.'].join('\n'));
	      }
	    } // Check if the horizontal axis needs shifting


	    if (left < marginThreshold) {
	      const diff = left - marginThreshold;
	      left -= diff;
	      elemTransformOrigin.horizontal += diff;
	    } else if (right > widthThreshold) {
	      const diff = right - widthThreshold;
	      left -= diff;
	      elemTransformOrigin.horizontal += diff;
	    }

	    return {
	      top: `${Math.round(top)}px`,
	      left: `${Math.round(left)}px`,
	      transformOrigin: getTransformOriginValue(elemTransformOrigin)
	    };
	  }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
	  const setPositioningStyles = React$s.useCallback(() => {
	    const element = paperRef.current;

	    if (!element) {
	      return;
	    }

	    const positioning = getPositioningStyle(element);

	    if (positioning.top !== null) {
	      element.style.top = positioning.top;
	    }

	    if (positioning.left !== null) {
	      element.style.left = positioning.left;
	    }

	    element.style.transformOrigin = positioning.transformOrigin;
	  }, [getPositioningStyle]);

	  const handleEntering = (element, isAppearing) => {
	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }

	    setPositioningStyles();
	  };

	  React$s.useEffect(() => {
	    if (open) {
	      setPositioningStyles();
	    }
	  });
	  React$s.useImperativeHandle(action, () => open ? {
	    updatePosition: () => {
	      setPositioningStyles();
	    }
	  } : null, [open, setPositioningStyles]);
	  React$s.useEffect(() => {
	    if (!open) {
	      return undefined;
	    }

	    const handleResize = (0, _debounce.default)(() => {
	      setPositioningStyles();
	    });
	    const containerWindow = (0, _ownerWindow.default)(anchorEl);
	    containerWindow.addEventListener('resize', handleResize);
	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	    };
	  }, [anchorEl, open, setPositioningStyles]);
	  let transitionDuration = transitionDurationProp;

	  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
	    transitionDuration = undefined;
	  } // If the container prop is provided, use that
	  // If the anchorEl prop is provided, use its parent body element as the container
	  // If neither are provided let the Modal take care of choosing the container


	  const container = containerProp || (anchorEl ? (0, _ownerDocument$2.default)(resolveAnchorEl(anchorEl)).body : undefined);
	  return /*#__PURE__*/(0, _jsxRuntime$u.jsx)(PopoverRoot, (0, _extends2$s.default)({
	    BackdropProps: {
	      invisible: true
	    },
	    className: (0, _clsx$k.default)(classes.root, className),
	    container: container,
	    open: open,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/(0, _jsxRuntime$u.jsx)(TransitionComponent, (0, _extends2$s.default)({
	      appear: true,
	      in: open,
	      onEntering: handleEntering,
	      timeout: transitionDuration
	    }, TransitionProps, {
	      children: /*#__PURE__*/(0, _jsxRuntime$u.jsx)(PopoverPaper, (0, _extends2$s.default)({
	        elevation: elevation
	      }, PaperProps, {
	        ref: handlePaperRef,
	        className: (0, _clsx$k.default)(classes.paper, PaperProps.className),
	        children: children
	      }))
	    }))
	  }));
	});
	Popover$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A ref for imperative actions.
	   * It currently only supports updatePosition() action.
	   */
	  action: _utils$f.refType,

	  /**
	   * An HTML element, or a function that returns one.
	   * It's used to set the position of the popover.
	   */
	  anchorEl: (0, _utils$f.chainPropTypes)(_propTypes$s.default.oneOfType([_utils$f.HTMLElementType, _propTypes$s.default.func]), props => {
	    if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {
	      const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);

	      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
	        const box = resolvedAnchorEl.getBoundingClientRect();

	        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	          return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	        }
	      } else {
	        return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', `It should be an Element instance but it's \`${resolvedAnchorEl}\` instead.`].join('\n'));
	      }
	    }

	    return null;
	  }),

	  /**
	   * This is the point on the anchor where the popover's
	   * `anchorEl` will attach to. This is not used when the
	   * anchorReference is 'anchorPosition'.
	   *
	   * Options:
	   * vertical: [top, center, bottom];
	   * horizontal: [left, center, right].
	   * @default {
	   *   vertical: 'top',
	   *   horizontal: 'left',
	   * }
	   */
	  anchorOrigin: _propTypes$s.default.shape({
	    horizontal: _propTypes$s.default.oneOfType([_propTypes$s.default.oneOf(['center', 'left', 'right']), _propTypes$s.default.number]).isRequired,
	    vertical: _propTypes$s.default.oneOfType([_propTypes$s.default.oneOf(['bottom', 'center', 'top']), _propTypes$s.default.number]).isRequired
	  }),

	  /**
	   * This is the position that may be used to set the position of the popover.
	   * The coordinates are relative to the application's client area.
	   */
	  anchorPosition: _propTypes$s.default.shape({
	    left: _propTypes$s.default.number.isRequired,
	    top: _propTypes$s.default.number.isRequired
	  }),

	  /**
	   * This determines which anchor prop to refer to when setting
	   * the position of the popover.
	   * @default 'anchorEl'
	   */
	  anchorReference: _propTypes$s.default.oneOf(['anchorEl', 'anchorPosition', 'none']),

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$s.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$s.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$s.default.string,

	  /**
	   * An HTML element, component instance, or function that returns either.
	   * The `container` will passed to the Modal component.
	   *
	   * By default, it uses the body of the anchorEl's top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: _propTypes$s.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_utils$f.HTMLElementType, _propTypes$s.default.func]),

	  /**
	   * The elevation of the popover.
	   * @default 8
	   */
	  elevation: _utils$f.integerPropType,

	  /**
	   * Specifies how close to the edge of the window the popover can appear.
	   * @default 16
	   */
	  marginThreshold: _propTypes$s.default.number,

	  /**
	   * Callback fired when the component requests to be closed.
	   * The `reason` parameter can optionally be used to control the response to `onClose`.
	   */
	  onClose: _propTypes$s.default.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: _propTypes$s.default.bool.isRequired,

	  /**
	   * Props applied to the [`Paper`](/api/paper/) element.
	   * @default {}
	   */
	  PaperProps: _propTypes$s.default
	  /* @typescript-to-proptypes-ignore */
	  .shape({
	    component: _utils$f.elementTypeAcceptingRef
	  }),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$s.default.oneOfType([_propTypes$s.default.arrayOf(_propTypes$s.default.oneOfType([_propTypes$s.default.func, _propTypes$s.default.object, _propTypes$s.default.bool])), _propTypes$s.default.func, _propTypes$s.default.object]),

	  /**
	   * This is the point on the popover which
	   * will attach to the anchor's origin.
	   *
	   * Options:
	   * vertical: [top, center, bottom, x(px)];
	   * horizontal: [left, center, right, x(px)].
	   * @default {
	   *   vertical: 'top',
	   *   horizontal: 'left',
	   * }
	   */
	  transformOrigin: _propTypes$s.default.shape({
	    horizontal: _propTypes$s.default.oneOfType([_propTypes$s.default.oneOf(['center', 'left', 'right']), _propTypes$s.default.number]).isRequired,
	    vertical: _propTypes$s.default.oneOfType([_propTypes$s.default.oneOf(['bottom', 'center', 'top']), _propTypes$s.default.number]).isRequired
	  }),

	  /**
	   * The component used for the transition.
	   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Grow
	   */
	  TransitionComponent: _propTypes$s.default.elementType,

	  /**
	   * Set to 'auto' to automatically calculate transition time based on height.
	   * @default 'auto'
	   */
	  transitionDuration: _propTypes$s.default.oneOfType([_propTypes$s.default.oneOf(['auto']), _propTypes$s.default.number, _propTypes$s.default.shape({
	    appear: _propTypes$s.default.number,
	    enter: _propTypes$s.default.number,
	    exit: _propTypes$s.default.number
	  })]),

	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   * @default {}
	   */
	  TransitionProps: _propTypes$s.default.object
	} ;
	var _default$T = Popover$1;
	Popover$2.default = _default$T;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  popoverClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Popover.default;
		  }
		});
		Object.defineProperty(exports, "popoverClasses", {
		  enumerable: true,
		  get: function () {
		    return _popoverClasses.default;
		  }
		});

		var _Popover = _interopRequireDefault(Popover$2);

		var _popoverClasses = _interopRequireWildcard(popoverClasses$1);

		Object.keys(_popoverClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _popoverClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _popoverClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Popover$3));

	var Popover = /*@__PURE__*/getDefaultExportFromCjs(Popover$3);

	var Accordion$3 = {};

	var Accordion$2 = {};

	var AccordionContext$1 = {};

	Object.defineProperty(AccordionContext$1, "__esModule", {
	  value: true
	});
	AccordionContext$1.default = void 0;

	var React$r = _interopRequireWildcard$t(require$$3);

	function _getRequireWildcardCache$t(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$t = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$t(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$t(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * @ignore - internal component.
	 * @type {React.Context<{} | {expanded: boolean, disabled: boolean, toggle: () => void}>}
	 */
	const AccordionContext = /*#__PURE__*/React$r.createContext({});

	{
	  AccordionContext.displayName = 'AccordionContext';
	}

	var _default$S = AccordionContext;
	AccordionContext$1.default = _default$S;

	var accordionClasses$1 = {};

	Object.defineProperty(accordionClasses$1, "__esModule", {
	  value: true
	});
	accordionClasses$1.default = void 0;
	accordionClasses$1.getAccordionUtilityClass = getAccordionUtilityClass;

	var _base$K = node$1;

	function getAccordionUtilityClass(slot) {
	  return (0, _base$K.generateUtilityClass)('MuiAccordion', slot);
	}

	const accordionClasses = (0, _base$K.generateUtilityClasses)('MuiAccordion', ['root', 'rounded', 'expanded', 'disabled', 'gutters', 'region']);
	var _default$R = accordionClasses;
	accordionClasses$1.default = _default$R;

	var _interopRequireDefault$t = interopRequireDefault.exports;

	Object.defineProperty(Accordion$2, "__esModule", {
	  value: true
	});
	Accordion$2.default = void 0;

	var _objectWithoutPropertiesLoose2$q = _interopRequireDefault$t(objectWithoutPropertiesLoose.exports);

	var _extends2$r = _interopRequireDefault$t(_extends$5.exports);

	var React$q = _interopRequireWildcard$s(require$$3);

	var _reactIs$3 = reactIs.exports;

	var _propTypes$r = _interopRequireDefault$t(propTypes.exports);

	var _clsx$j = _interopRequireDefault$t(clsx$1);

	var _utils$e = utils$h;

	var _base$J = node$1;

	var _styled$o = _interopRequireDefault$t(styled$1);

	var _useThemeProps$m = _interopRequireDefault$t(useThemeProps$1);

	var _Collapse = _interopRequireDefault$t(Collapse$3);

	var _Paper$3 = _interopRequireDefault$t(Paper$2);

	var _AccordionContext$1 = _interopRequireDefault$t(AccordionContext$1);

	var _useControlled$1 = _interopRequireDefault$t(useControlled);

	var _accordionClasses = _interopRequireWildcard$s(accordionClasses$1);

	var _jsxRuntime$t = jsxRuntime;

	const _excluded$q = ["children", "className", "defaultExpanded", "disabled", "disableGutters", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"];

	function _getRequireWildcardCache$s(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$s = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$s(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$s(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$n = ownerState => {
	  const {
	    classes,
	    square,
	    expanded,
	    disabled,
	    disableGutters
	  } = ownerState;
	  const slots = {
	    root: ['root', !square && 'rounded', expanded && 'expanded', disabled && 'disabled', !disableGutters && 'gutters'],
	    region: ['region']
	  };
	  return (0, _base$J.unstable_composeClasses)(slots, _accordionClasses.getAccordionUtilityClass, classes);
	};

	const AccordionRoot = (0, _styled$o.default)(_Paper$3.default, {
	  name: 'MuiAccordion',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${_accordionClasses.default.region}`]: styles.region
	    }, styles.root, !ownerState.square && styles.rounded, !ownerState.disableGutters && styles.gutters];
	  }
	})(({
	  theme
	}) => {
	  const transition = {
	    duration: theme.transitions.duration.shortest
	  };
	  return {
	    position: 'relative',
	    transition: theme.transitions.create(['margin'], transition),
	    overflowAnchor: 'none',
	    // Keep the same scrolling position
	    '&:before': {
	      position: 'absolute',
	      left: 0,
	      top: -1,
	      right: 0,
	      height: 1,
	      content: '""',
	      opacity: 1,
	      backgroundColor: theme.palette.divider,
	      transition: theme.transitions.create(['opacity', 'background-color'], transition)
	    },
	    '&:first-of-type': {
	      '&:before': {
	        display: 'none'
	      }
	    },
	    [`&.${_accordionClasses.default.expanded}`]: {
	      '&:before': {
	        opacity: 0
	      },
	      '&:first-of-type': {
	        marginTop: 0
	      },
	      '&:last-of-type': {
	        marginBottom: 0
	      },
	      '& + &': {
	        '&:before': {
	          display: 'none'
	        }
	      }
	    },
	    [`&.${_accordionClasses.default.disabled}`]: {
	      backgroundColor: theme.palette.action.disabledBackground
	    }
	  };
	}, ({
	  theme,
	  ownerState
	}) => (0, _extends2$r.default)({}, !ownerState.square && {
	  borderRadius: 0,
	  '&:first-of-type': {
	    borderTopLeftRadius: theme.shape.borderRadius,
	    borderTopRightRadius: theme.shape.borderRadius
	  },
	  '&:last-of-type': {
	    borderBottomLeftRadius: theme.shape.borderRadius,
	    borderBottomRightRadius: theme.shape.borderRadius,
	    // Fix a rendering issue on Edge
	    '@supports (-ms-ime-align: auto)': {
	      borderBottomLeftRadius: 0,
	      borderBottomRightRadius: 0
	    }
	  }
	}, !ownerState.disableGutters && {
	  [`&.${_accordionClasses.default.expanded}`]: {
	    margin: '16px 0'
	  }
	}));
	const Accordion$1 = /*#__PURE__*/React$q.forwardRef(function Accordion(inProps, ref) {
	  const props = (0, _useThemeProps$m.default)({
	    props: inProps,
	    name: 'MuiAccordion'
	  });
	  const {
	    children: childrenProp,
	    className,
	    defaultExpanded = false,
	    disabled = false,
	    disableGutters = false,
	    expanded: expandedProp,
	    onChange,
	    square = false,
	    TransitionComponent = _Collapse.default,
	    TransitionProps
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$q.default)(props, _excluded$q);
	  const [expanded, setExpandedState] = (0, _useControlled$1.default)({
	    controlled: expandedProp,
	    default: defaultExpanded,
	    name: 'Accordion',
	    state: 'expanded'
	  });
	  const handleChange = React$q.useCallback(event => {
	    setExpandedState(!expanded);

	    if (onChange) {
	      onChange(event, !expanded);
	    }
	  }, [expanded, onChange, setExpandedState]);
	  const [summary, ...children] = React$q.Children.toArray(childrenProp);
	  const contextValue = React$q.useMemo(() => ({
	    expanded,
	    disabled,
	    disableGutters,
	    toggle: handleChange
	  }), [expanded, disabled, disableGutters, handleChange]);
	  const ownerState = (0, _extends2$r.default)({}, props, {
	    square,
	    disabled,
	    disableGutters,
	    expanded
	  });
	  const classes = useUtilityClasses$n(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$t.jsxs)(AccordionRoot, (0, _extends2$r.default)({
	    className: (0, _clsx$j.default)(classes.root, className),
	    ref: ref,
	    ownerState: ownerState,
	    square: square
	  }, other, {
	    children: [/*#__PURE__*/(0, _jsxRuntime$t.jsx)(_AccordionContext$1.default.Provider, {
	      value: contextValue,
	      children: summary
	    }), /*#__PURE__*/(0, _jsxRuntime$t.jsx)(TransitionComponent, (0, _extends2$r.default)({
	      in: expanded,
	      timeout: "auto"
	    }, TransitionProps, {
	      children: /*#__PURE__*/(0, _jsxRuntime$t.jsx)("div", {
	        "aria-labelledby": summary.props.id,
	        id: summary.props['aria-controls'],
	        role: "region",
	        className: classes.region,
	        children: children
	      })
	    }))]
	  }));
	});
	Accordion$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: (0, _utils$e.chainPropTypes)(_propTypes$r.default.node.isRequired, props => {
	    const summary = React$q.Children.toArray(props.children)[0];

	    if ((0, _reactIs$3.isFragment)(summary)) {
	      return new Error("MUI: The Accordion doesn't accept a Fragment as a child. " + 'Consider providing an array instead.');
	    }

	    if (! /*#__PURE__*/React$q.isValidElement(summary)) {
	      return new Error('MUI: Expected the first child of Accordion to be a valid element.');
	    }

	    return null;
	  }),

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$r.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$r.default.string,

	  /**
	   * If `true`, expands the accordion by default.
	   * @default false
	   */
	  defaultExpanded: _propTypes$r.default.bool,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: _propTypes$r.default.bool,

	  /**
	   * If `true`, it removes the margin between two expanded accordion items and the increase of height.
	   * @default false
	   */
	  disableGutters: _propTypes$r.default.bool,

	  /**
	   * If `true`, expands the accordion, otherwise collapse it.
	   * Setting this prop enables control over the accordion.
	   */
	  expanded: _propTypes$r.default.bool,

	  /**
	   * Callback fired when the expand/collapse state is changed.
	   *
	   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
	   * @param {boolean} expanded The `expanded` state of the accordion.
	   */
	  onChange: _propTypes$r.default.func,

	  /**
	   * If `true`, rounded corners are disabled.
	   * @default false
	   */
	  square: _propTypes$r.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$r.default.oneOfType([_propTypes$r.default.arrayOf(_propTypes$r.default.oneOfType([_propTypes$r.default.func, _propTypes$r.default.object, _propTypes$r.default.bool])), _propTypes$r.default.func, _propTypes$r.default.object]),

	  /**
	   * The component used for the transition.
	   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Collapse
	   */
	  TransitionComponent: _propTypes$r.default.elementType,

	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   */
	  TransitionProps: _propTypes$r.default.object
	} ;
	var _default$Q = Accordion$1;
	Accordion$2.default = _default$Q;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  accordionClasses: true
		};
		Object.defineProperty(exports, "accordionClasses", {
		  enumerable: true,
		  get: function () {
		    return _accordionClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Accordion.default;
		  }
		});

		var _Accordion = _interopRequireDefault(Accordion$2);

		var _accordionClasses = _interopRequireWildcard(accordionClasses$1);

		Object.keys(_accordionClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _accordionClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _accordionClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Accordion$3));

	var Accordion = /*@__PURE__*/getDefaultExportFromCjs(Accordion$3);

	var AccordionSummary$3 = {};

	var AccordionSummary$2 = {};

	var accordionSummaryClasses$1 = {};

	Object.defineProperty(accordionSummaryClasses$1, "__esModule", {
	  value: true
	});
	accordionSummaryClasses$1.default = void 0;
	accordionSummaryClasses$1.getAccordionSummaryUtilityClass = getAccordionSummaryUtilityClass;

	var _base$I = node$1;

	function getAccordionSummaryUtilityClass(slot) {
	  return (0, _base$I.generateUtilityClass)('MuiAccordionSummary', slot);
	}

	const accordionSummaryClasses = (0, _base$I.generateUtilityClasses)('MuiAccordionSummary', ['root', 'expanded', 'focusVisible', 'disabled', 'gutters', 'contentGutters', 'content', 'expandIconWrapper']);
	var _default$P = accordionSummaryClasses;
	accordionSummaryClasses$1.default = _default$P;

	var _interopRequireDefault$s = interopRequireDefault.exports;

	Object.defineProperty(AccordionSummary$2, "__esModule", {
	  value: true
	});
	AccordionSummary$2.default = void 0;

	var _objectWithoutPropertiesLoose2$p = _interopRequireDefault$s(objectWithoutPropertiesLoose.exports);

	var _extends2$q = _interopRequireDefault$s(_extends$5.exports);

	var React$p = _interopRequireWildcard$r(require$$3);

	var _propTypes$q = _interopRequireDefault$s(propTypes.exports);

	var _clsx$i = _interopRequireDefault$s(clsx$1);

	var _base$H = node$1;

	var _styled$n = _interopRequireDefault$s(styled$1);

	var _useThemeProps$l = _interopRequireDefault$s(useThemeProps$1);

	var _ButtonBase = _interopRequireDefault$s(ButtonBase$2);

	var _AccordionContext = _interopRequireDefault$s(AccordionContext$1);

	var _accordionSummaryClasses = _interopRequireWildcard$r(accordionSummaryClasses$1);

	var _jsxRuntime$s = jsxRuntime;

	const _excluded$p = ["children", "className", "expandIcon", "focusVisibleClassName", "onClick"];

	function _getRequireWildcardCache$r(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$r = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$r(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$r(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$m = ownerState => {
	  const {
	    classes,
	    expanded,
	    disabled,
	    disableGutters
	  } = ownerState;
	  const slots = {
	    root: ['root', expanded && 'expanded', disabled && 'disabled', !disableGutters && 'gutters'],
	    focusVisible: ['focusVisible'],
	    content: ['content', expanded && 'expanded', !disableGutters && 'contentGutters'],
	    expandIconWrapper: ['expandIconWrapper', expanded && 'expanded']
	  };
	  return (0, _base$H.unstable_composeClasses)(slots, _accordionSummaryClasses.getAccordionSummaryUtilityClass, classes);
	};

	const AccordionSummaryRoot = (0, _styled$n.default)(_ButtonBase.default, {
	  name: 'MuiAccordionSummary',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme,
	  ownerState
	}) => {
	  const transition = {
	    duration: theme.transitions.duration.shortest
	  };
	  return (0, _extends2$q.default)({
	    display: 'flex',
	    minHeight: 48,
	    padding: theme.spacing(0, 2),
	    transition: theme.transitions.create(['min-height', 'background-color'], transition),
	    [`&.${_accordionSummaryClasses.default.focusVisible}`]: {
	      backgroundColor: theme.palette.action.focus
	    },
	    [`&.${_accordionSummaryClasses.default.disabled}`]: {
	      opacity: theme.palette.action.disabledOpacity
	    },
	    [`&:hover:not(.${_accordionSummaryClasses.default.disabled})`]: {
	      cursor: 'pointer'
	    }
	  }, !ownerState.disableGutters && {
	    [`&.${_accordionSummaryClasses.default.expanded}`]: {
	      minHeight: 64
	    }
	  });
	});
	const AccordionSummaryContent = (0, _styled$n.default)('div', {
	  name: 'MuiAccordionSummary',
	  slot: 'Content',
	  overridesResolver: (props, styles) => styles.content
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$q.default)({
	  display: 'flex',
	  flexGrow: 1,
	  margin: '12px 0'
	}, !ownerState.disableGutters && {
	  transition: theme.transitions.create(['margin'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  [`&.${_accordionSummaryClasses.default.expanded}`]: {
	    margin: '20px 0'
	  }
	}));
	const AccordionSummaryExpandIconWrapper = (0, _styled$n.default)('div', {
	  name: 'MuiAccordionSummary',
	  slot: 'ExpandIconWrapper',
	  overridesResolver: (props, styles) => styles.expandIconWrapper
	})(({
	  theme
	}) => ({
	  display: 'flex',
	  color: theme.palette.action.active,
	  transform: 'rotate(0deg)',
	  transition: theme.transitions.create('transform', {
	    duration: theme.transitions.duration.shortest
	  }),
	  [`&.${_accordionSummaryClasses.default.expanded}`]: {
	    transform: 'rotate(180deg)'
	  }
	}));
	const AccordionSummary$1 = /*#__PURE__*/React$p.forwardRef(function AccordionSummary(inProps, ref) {
	  const props = (0, _useThemeProps$l.default)({
	    props: inProps,
	    name: 'MuiAccordionSummary'
	  });
	  const {
	    children,
	    className,
	    expandIcon,
	    focusVisibleClassName,
	    onClick
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$p.default)(props, _excluded$p);
	  const {
	    disabled = false,
	    disableGutters,
	    expanded,
	    toggle
	  } = React$p.useContext(_AccordionContext.default);

	  const handleChange = event => {
	    if (toggle) {
	      toggle(event);
	    }

	    if (onClick) {
	      onClick(event);
	    }
	  };

	  const ownerState = (0, _extends2$q.default)({}, props, {
	    expanded,
	    disabled,
	    disableGutters
	  });
	  const classes = useUtilityClasses$m(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$s.jsxs)(AccordionSummaryRoot, (0, _extends2$q.default)({
	    focusRipple: false,
	    disableRipple: true,
	    disabled: disabled,
	    component: "div",
	    "aria-expanded": expanded,
	    className: (0, _clsx$i.default)(classes.root, className),
	    focusVisibleClassName: (0, _clsx$i.default)(classes.focusVisible, focusVisibleClassName),
	    onClick: handleChange,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: [/*#__PURE__*/(0, _jsxRuntime$s.jsx)(AccordionSummaryContent, {
	      className: classes.content,
	      ownerState: ownerState,
	      children: children
	    }), expandIcon && /*#__PURE__*/(0, _jsxRuntime$s.jsx)(AccordionSummaryExpandIconWrapper, {
	      className: classes.expandIconWrapper,
	      ownerState: ownerState,
	      children: expandIcon
	    })]
	  }));
	});
	AccordionSummary$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$q.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$q.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$q.default.string,

	  /**
	   * The icon to display as the expand indicator.
	   */
	  expandIcon: _propTypes$q.default.node,

	  /**
	   * This prop can help identify which element has keyboard focus.
	   * The class name will be applied when the element gains the focus through keyboard interaction.
	   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
	   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
	   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
	   * if needed.
	   */
	  focusVisibleClassName: _propTypes$q.default.string,

	  /**
	   * @ignore
	   */
	  onClick: _propTypes$q.default.func,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$q.default.oneOfType([_propTypes$q.default.arrayOf(_propTypes$q.default.oneOfType([_propTypes$q.default.func, _propTypes$q.default.object, _propTypes$q.default.bool])), _propTypes$q.default.func, _propTypes$q.default.object])
	} ;
	var _default$O = AccordionSummary$1;
	AccordionSummary$2.default = _default$O;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  accordionSummaryClasses: true
		};
		Object.defineProperty(exports, "accordionSummaryClasses", {
		  enumerable: true,
		  get: function () {
		    return _accordionSummaryClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _AccordionSummary.default;
		  }
		});

		var _AccordionSummary = _interopRequireDefault(AccordionSummary$2);

		var _accordionSummaryClasses = _interopRequireWildcard(accordionSummaryClasses$1);

		Object.keys(_accordionSummaryClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _accordionSummaryClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _accordionSummaryClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (AccordionSummary$3));

	var AccordionSummary = /*@__PURE__*/getDefaultExportFromCjs(AccordionSummary$3);

	var AccordionDetails$3 = {};

	var AccordionDetails$2 = {};

	var accordionDetailsClasses$1 = {};

	Object.defineProperty(accordionDetailsClasses$1, "__esModule", {
	  value: true
	});
	accordionDetailsClasses$1.default = void 0;
	accordionDetailsClasses$1.getAccordionDetailsUtilityClass = getAccordionDetailsUtilityClass;

	var _base$G = node$1;

	function getAccordionDetailsUtilityClass(slot) {
	  return (0, _base$G.generateUtilityClass)('MuiAccordionDetails', slot);
	}

	const accordionDetailsClasses = (0, _base$G.generateUtilityClasses)('MuiAccordionDetails', ['root']);
	var _default$N = accordionDetailsClasses;
	accordionDetailsClasses$1.default = _default$N;

	var _interopRequireDefault$r = interopRequireDefault.exports;

	Object.defineProperty(AccordionDetails$2, "__esModule", {
	  value: true
	});
	AccordionDetails$2.default = void 0;

	var _extends2$p = _interopRequireDefault$r(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$o = _interopRequireDefault$r(objectWithoutPropertiesLoose.exports);

	var React$o = _interopRequireWildcard$q(require$$3);

	var _propTypes$p = _interopRequireDefault$r(propTypes.exports);

	var _clsx$h = _interopRequireDefault$r(clsx$1);

	var _base$F = node$1;

	var _styled$m = _interopRequireDefault$r(styled$1);

	var _useThemeProps$k = _interopRequireDefault$r(useThemeProps$1);

	var _accordionDetailsClasses = accordionDetailsClasses$1;

	var _jsxRuntime$r = jsxRuntime;

	const _excluded$o = ["className"];

	function _getRequireWildcardCache$q(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$q = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$q(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$q(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$l = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return (0, _base$F.unstable_composeClasses)(slots, _accordionDetailsClasses.getAccordionDetailsUtilityClass, classes);
	};

	const AccordionDetailsRoot = (0, _styled$m.default)('div', {
	  name: 'MuiAccordionDetails',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme
	}) => ({
	  padding: theme.spacing(1, 2, 2)
	}));
	const AccordionDetails$1 = /*#__PURE__*/React$o.forwardRef(function AccordionDetails(inProps, ref) {
	  const props = (0, _useThemeProps$k.default)({
	    props: inProps,
	    name: 'MuiAccordionDetails'
	  });
	  const {
	    className
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$o.default)(props, _excluded$o);
	  const ownerState = props;
	  const classes = useUtilityClasses$l(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$r.jsx)(AccordionDetailsRoot, (0, _extends2$p.default)({
	    className: (0, _clsx$h.default)(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	AccordionDetails$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$p.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$p.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$p.default.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$p.default.oneOfType([_propTypes$p.default.arrayOf(_propTypes$p.default.oneOfType([_propTypes$p.default.func, _propTypes$p.default.object, _propTypes$p.default.bool])), _propTypes$p.default.func, _propTypes$p.default.object])
	} ;
	var _default$M = AccordionDetails$1;
	AccordionDetails$2.default = _default$M;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  accordionDetailsClasses: true
		};
		Object.defineProperty(exports, "accordionDetailsClasses", {
		  enumerable: true,
		  get: function () {
		    return _accordionDetailsClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _AccordionDetails.default;
		  }
		});

		var _AccordionDetails = _interopRequireDefault(AccordionDetails$2);

		var _accordionDetailsClasses = _interopRequireWildcard(accordionDetailsClasses$1);

		Object.keys(_accordionDetailsClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _accordionDetailsClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _accordionDetailsClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (AccordionDetails$3));

	var AccordionDetails = /*@__PURE__*/getDefaultExportFromCjs(AccordionDetails$3);

	var ExpandMore = {};

	var _interopRequireDefault$q = interopRequireDefault.exports;

	Object.defineProperty(ExpandMore, "__esModule", {
	  value: true
	});
	var default_1 = ExpandMore.default = void 0;

	var _createSvgIcon$1 = _interopRequireDefault$q(createSvgIcon);

	var _jsxRuntime$q = jsxRuntime;

	var _default$L = (0, _createSvgIcon$1.default)( /*#__PURE__*/(0, _jsxRuntime$q.jsx)("path", {
	  d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
	}), 'ExpandMore');

	default_1 = ExpandMore.default = _default$L;

	var Card$3 = {};

	var Card$2 = {};

	var cardClasses$1 = {};

	Object.defineProperty(cardClasses$1, "__esModule", {
	  value: true
	});
	cardClasses$1.default = void 0;
	cardClasses$1.getCardUtilityClass = getCardUtilityClass;

	var _base$E = node$1;

	function getCardUtilityClass(slot) {
	  return (0, _base$E.generateUtilityClass)('MuiCard', slot);
	}

	const cardClasses = (0, _base$E.generateUtilityClasses)('MuiCard', ['root']);
	var _default$K = cardClasses;
	cardClasses$1.default = _default$K;

	var _interopRequireDefault$p = interopRequireDefault.exports;

	Object.defineProperty(Card$2, "__esModule", {
	  value: true
	});
	Card$2.default = void 0;

	var _extends2$o = _interopRequireDefault$p(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$n = _interopRequireDefault$p(objectWithoutPropertiesLoose.exports);

	var React$n = _interopRequireWildcard$p(require$$3);

	var _propTypes$o = _interopRequireDefault$p(propTypes.exports);

	var _clsx$g = _interopRequireDefault$p(clsx$1);

	var _utils$d = utils$h;

	var _base$D = node$1;

	var _styled$l = _interopRequireDefault$p(styled$1);

	var _useThemeProps$j = _interopRequireDefault$p(useThemeProps$1);

	var _Paper$2 = _interopRequireDefault$p(Paper$2);

	var _cardClasses = cardClasses$1;

	var _jsxRuntime$p = jsxRuntime;

	const _excluded$n = ["className", "raised"];

	function _getRequireWildcardCache$p(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$p = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$p(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$p(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$k = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return (0, _base$D.unstable_composeClasses)(slots, _cardClasses.getCardUtilityClass, classes);
	};

	const CardRoot = (0, _styled$l.default)(_Paper$2.default, {
	  name: 'MuiCard',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(() => {
	  return {
	    overflow: 'hidden'
	  };
	});
	const Card$1 = /*#__PURE__*/React$n.forwardRef(function Card(inProps, ref) {
	  const props = (0, _useThemeProps$j.default)({
	    props: inProps,
	    name: 'MuiCard'
	  });
	  const {
	    className,
	    raised = false
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$n.default)(props, _excluded$n);
	  const ownerState = (0, _extends2$o.default)({}, props, {
	    raised
	  });
	  const classes = useUtilityClasses$k(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$p.jsx)(CardRoot, (0, _extends2$o.default)({
	    className: (0, _clsx$g.default)(classes.root, className),
	    elevation: raised ? 8 : undefined,
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	Card$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$o.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$o.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$o.default.string,

	  /**
	   * If `true`, the card will use raised styling.
	   * @default false
	   */
	  raised: (0, _utils$d.chainPropTypes)(_propTypes$o.default.bool, props => {
	    if (props.raised && props.variant === 'outlined') {
	      return new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.');
	    }

	    return null;
	  }),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$o.default.oneOfType([_propTypes$o.default.arrayOf(_propTypes$o.default.oneOfType([_propTypes$o.default.func, _propTypes$o.default.object, _propTypes$o.default.bool])), _propTypes$o.default.func, _propTypes$o.default.object])
	} ;
	var _default$J = Card$1;
	Card$2.default = _default$J;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  cardClasses: true
		};
		Object.defineProperty(exports, "cardClasses", {
		  enumerable: true,
		  get: function () {
		    return _cardClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Card.default;
		  }
		});

		var _Card = _interopRequireDefault(Card$2);

		var _cardClasses = _interopRequireWildcard(cardClasses$1);

		Object.keys(_cardClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _cardClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _cardClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Card$3));

	var Card = /*@__PURE__*/getDefaultExportFromCjs(Card$3);

	var CardActions$3 = {};

	var CardActions$2 = {};

	var cardActionsClasses$1 = {};

	Object.defineProperty(cardActionsClasses$1, "__esModule", {
	  value: true
	});
	cardActionsClasses$1.default = void 0;
	cardActionsClasses$1.getCardActionsUtilityClass = getCardActionsUtilityClass;

	var _base$C = node$1;

	function getCardActionsUtilityClass(slot) {
	  return (0, _base$C.generateUtilityClass)('MuiCardActions', slot);
	}

	const cardActionsClasses = (0, _base$C.generateUtilityClasses)('MuiCardActions', ['root', 'spacing']);
	var _default$I = cardActionsClasses;
	cardActionsClasses$1.default = _default$I;

	var _interopRequireDefault$o = interopRequireDefault.exports;

	Object.defineProperty(CardActions$2, "__esModule", {
	  value: true
	});
	CardActions$2.default = void 0;

	var _objectWithoutPropertiesLoose2$m = _interopRequireDefault$o(objectWithoutPropertiesLoose.exports);

	var _extends2$n = _interopRequireDefault$o(_extends$5.exports);

	var React$m = _interopRequireWildcard$o(require$$3);

	var _propTypes$n = _interopRequireDefault$o(propTypes.exports);

	var _clsx$f = _interopRequireDefault$o(clsx$1);

	var _base$B = node$1;

	var _styled$k = _interopRequireDefault$o(styled$1);

	var _useThemeProps$i = _interopRequireDefault$o(useThemeProps$1);

	var _cardActionsClasses = cardActionsClasses$1;

	var _jsxRuntime$o = jsxRuntime;

	const _excluded$m = ["disableSpacing", "className"];

	function _getRequireWildcardCache$o(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$o = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$o(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$o(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$j = ownerState => {
	  const {
	    classes,
	    disableSpacing
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableSpacing && 'spacing']
	  };
	  return (0, _base$B.unstable_composeClasses)(slots, _cardActionsClasses.getCardActionsUtilityClass, classes);
	};

	const CardActionsRoot = (0, _styled$k.default)('div', {
	  name: 'MuiCardActions',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disableSpacing && styles.spacing];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$n.default)({
	  display: 'flex',
	  alignItems: 'center',
	  padding: 8
	}, !ownerState.disableSpacing && {
	  '& > :not(:first-of-type)': {
	    marginLeft: 8
	  }
	}));
	const CardActions$1 = /*#__PURE__*/React$m.forwardRef(function CardActions(inProps, ref) {
	  const props = (0, _useThemeProps$i.default)({
	    props: inProps,
	    name: 'MuiCardActions'
	  });
	  const {
	    disableSpacing = false,
	    className
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$m.default)(props, _excluded$m);
	  const ownerState = (0, _extends2$n.default)({}, props, {
	    disableSpacing
	  });
	  const classes = useUtilityClasses$j(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$o.jsx)(CardActionsRoot, (0, _extends2$n.default)({
	    className: (0, _clsx$f.default)(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	CardActions$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$n.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$n.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$n.default.string,

	  /**
	   * If `true`, the actions do not have additional margin.
	   * @default false
	   */
	  disableSpacing: _propTypes$n.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$n.default.oneOfType([_propTypes$n.default.arrayOf(_propTypes$n.default.oneOfType([_propTypes$n.default.func, _propTypes$n.default.object, _propTypes$n.default.bool])), _propTypes$n.default.func, _propTypes$n.default.object])
	} ;
	var _default$H = CardActions$1;
	CardActions$2.default = _default$H;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  cardActionsClasses: true
		};
		Object.defineProperty(exports, "cardActionsClasses", {
		  enumerable: true,
		  get: function () {
		    return _cardActionsClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _CardActions.default;
		  }
		});

		var _CardActions = _interopRequireDefault(CardActions$2);

		var _cardActionsClasses = _interopRequireWildcard(cardActionsClasses$1);

		Object.keys(_cardActionsClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _cardActionsClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _cardActionsClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (CardActions$3));

	var CardActions = /*@__PURE__*/getDefaultExportFromCjs(CardActions$3);

	var CardContent$3 = {};

	var CardContent$2 = {};

	var cardContentClasses$1 = {};

	Object.defineProperty(cardContentClasses$1, "__esModule", {
	  value: true
	});
	cardContentClasses$1.default = void 0;
	cardContentClasses$1.getCardContentUtilityClass = getCardContentUtilityClass;

	var _base$A = node$1;

	function getCardContentUtilityClass(slot) {
	  return (0, _base$A.generateUtilityClass)('MuiCardContent', slot);
	}

	const cardContentClasses = (0, _base$A.generateUtilityClasses)('MuiCardContent', ['root']);
	var _default$G = cardContentClasses;
	cardContentClasses$1.default = _default$G;

	var _interopRequireDefault$n = interopRequireDefault.exports;

	Object.defineProperty(CardContent$2, "__esModule", {
	  value: true
	});
	CardContent$2.default = void 0;

	var _extends2$m = _interopRequireDefault$n(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$l = _interopRequireDefault$n(objectWithoutPropertiesLoose.exports);

	var React$l = _interopRequireWildcard$n(require$$3);

	var _propTypes$m = _interopRequireDefault$n(propTypes.exports);

	var _clsx$e = _interopRequireDefault$n(clsx$1);

	var _base$z = node$1;

	var _styled$j = _interopRequireDefault$n(styled$1);

	var _useThemeProps$h = _interopRequireDefault$n(useThemeProps$1);

	var _cardContentClasses = cardContentClasses$1;

	var _jsxRuntime$n = jsxRuntime;

	const _excluded$l = ["className", "component"];

	function _getRequireWildcardCache$n(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$n = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$n(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$n(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$i = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return (0, _base$z.unstable_composeClasses)(slots, _cardContentClasses.getCardContentUtilityClass, classes);
	};

	const CardContentRoot = (0, _styled$j.default)('div', {
	  name: 'MuiCardContent',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(() => {
	  return {
	    padding: 16,
	    '&:last-child': {
	      paddingBottom: 24
	    }
	  };
	});
	const CardContent$1 = /*#__PURE__*/React$l.forwardRef(function CardContent(inProps, ref) {
	  const props = (0, _useThemeProps$h.default)({
	    props: inProps,
	    name: 'MuiCardContent'
	  });
	  const {
	    className,
	    component = 'div'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$l.default)(props, _excluded$l);
	  const ownerState = (0, _extends2$m.default)({}, props, {
	    component
	  });
	  const classes = useUtilityClasses$i(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$n.jsx)(CardContentRoot, (0, _extends2$m.default)({
	    as: component,
	    className: (0, _clsx$e.default)(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	CardContent$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$m.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$m.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$m.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$m.default.elementType,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$m.default.oneOfType([_propTypes$m.default.arrayOf(_propTypes$m.default.oneOfType([_propTypes$m.default.func, _propTypes$m.default.object, _propTypes$m.default.bool])), _propTypes$m.default.func, _propTypes$m.default.object])
	} ;
	var _default$F = CardContent$1;
	CardContent$2.default = _default$F;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  cardContentClasses: true
		};
		Object.defineProperty(exports, "cardContentClasses", {
		  enumerable: true,
		  get: function () {
		    return _cardContentClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _CardContent.default;
		  }
		});

		var _CardContent = _interopRequireDefault(CardContent$2);

		var _cardContentClasses = _interopRequireWildcard(cardContentClasses$1);

		Object.keys(_cardContentClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _cardContentClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _cardContentClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (CardContent$3));

	var CardContent = /*@__PURE__*/getDefaultExportFromCjs(CardContent$3);

	var Announcement = g(function () {
	  const [popover, setPopover] = l(null);
	  const open = d(() => !!popover, [popover]);
	  const [storage, setStorage] = useStorage();
	  const handleOpen = A$1(event => setPopover(event.currentTarget), []);
	  const handleClose = A$1(() => setPopover(null), []);
	  const announcementData = lib.useSelector(store => store.remoteConfig.announcements || {});
	  const [list, ignoredList] = d(() => {
	    if (announcementData.length > 0) {
	      const list = announcementData.filter(({
	        id,
	        ignorable
	      }) => !ignorable || !storage.announcement.ignores.includes(id));
	      const ignoredList = announcementData.filter(({
	        id
	      }) => storage.announcement.ignores.includes(id));
	      return [list, ignoredList];
	    } else {
	      return [[], []];
	    }
	  }, [announcementData, storage.announcement.ignores]);
	  const ignore = A$1(id => setStorage({ ...storage,
	    announcement: { ...storage.announcement,
	      ignores: [...storage.announcement.ignores, id]
	    }
	  }), [storage]);
	  const [tab, setTab] = l('list');
	  const handleChangeTab = A$1((_, newValue) => setTab(newValue), []);
	  return v$1(d$1, null, v$1(IconButton, {
	    onClick: handleOpen
	  }, v$1(Badge, {
	    badgeContent: list.length,
	    color: "error"
	  }, v$1(default_1$3, null))), v$1(Popover, {
	    open: open,
	    anchorEl: popover,
	    onClose: handleClose,
	    anchorOrigin: {
	      vertical: 'bottom',
	      horizontal: 'right'
	    },
	    transformOrigin: {
	      vertical: 'top',
	      horizontal: 'right'
	    }
	  }, v$1(TabContext, {
	    value: tab
	  }, v$1(Box, {
	    sx: {
	      borderBottom: 1,
	      borderColor: 'divider'
	    }
	  }, v$1(TabList, {
	    onChange: handleChangeTab,
	    variant: "fullWidth"
	  }, v$1(Tab, {
	    icon: v$1(default_1$2, null),
	    label: message.announcement.list.title,
	    value: "list"
	  }), v$1(Tab, {
	    icon: v$1(default_1$1, null),
	    label: message.announcement.ignoredList.title,
	    value: "ignoredList"
	  }))), v$1(TabPanel, {
	    value: "list",
	    sx: {
	      padding: 0
	    }
	  }, list.map(({
	    id,
	    title,
	    content,
	    ignorable,
	    links
	  }) => v$1(Accordion, {
	    key: id
	  }, v$1(AccordionSummary, {
	    expandIcon: v$1(default_1, null)
	  }, v$1(Typography, {
	    dangerouslySetInnerHTML: {
	      __html: title
	    }
	  })), v$1(AccordionDetails, null, v$1(Card, {
	    elevation: 0
	  }, v$1(CardContent, null, v$1(Typography, {
	    dangerouslySetInnerHTML: {
	      __html: content
	    }
	  })), v$1(CardActions, null, links.map(({
	    href,
	    text
	  }) => v$1(Button, {
	    href: href
	  }, text)), ignorable && v$1(Button, {
	    onClick: () => ignore(id)
	  }, message.announcement.ignore))))))), v$1(TabPanel, {
	    value: "ignoredList",
	    sx: {
	      padding: 0
	    }
	  }, ignoredList.map(({
	    id,
	    title,
	    content,
	    links
	  }) => v$1(Accordion, {
	    key: id
	  }, v$1(AccordionSummary, {
	    expandIcon: v$1(default_1, null)
	  }, v$1(Typography, {
	    dangerouslySetInnerHTML: {
	      __html: title
	    }
	  })), v$1(AccordionDetails, null, v$1(Card, {
	    elevation: 0
	  }, v$1(CardContent, null, v$1(Typography, {
	    dangerouslySetInnerHTML: {
	      __html: content
	    }
	  })), v$1(CardActions, null, links.map(({
	    href,
	    text
	  }) => v$1(Button, {
	    href: href
	  }, text)))))))))));
	});

	var Banner = g(function () {
	  const Wrapper = styles$4.styled('div')({
	    position: 'absolute',
	    display: 'flex',
	    top: '0',
	    height: '52px',
	    justifyContent: 'space-between',
	    alignItems: 'center',
	    right: '60px'
	  });
	  return v$1(Wrapper, {
	    className: "mui-fixed"
	  }, v$1(Support, null), v$1(Setting, null), v$1(Announcement, null));
	});

	var Dialog$4 = {};

	var Dialog$3 = {};

	var dialogClasses$1 = {};

	Object.defineProperty(dialogClasses$1, "__esModule", {
	  value: true
	});
	dialogClasses$1.default = void 0;
	dialogClasses$1.getDialogUtilityClass = getDialogUtilityClass;

	var _base$y = node$1;

	function getDialogUtilityClass(slot) {
	  return (0, _base$y.generateUtilityClass)('MuiDialog', slot);
	}

	const dialogClasses = (0, _base$y.generateUtilityClasses)('MuiDialog', ['root', 'scrollPaper', 'scrollBody', 'container', 'paper', 'paperScrollPaper', 'paperScrollBody', 'paperWidthFalse', 'paperWidthXs', 'paperWidthSm', 'paperWidthMd', 'paperWidthLg', 'paperWidthXl', 'paperFullWidth', 'paperFullScreen']);
	var _default$E = dialogClasses;
	dialogClasses$1.default = _default$E;

	var DialogContext$1 = {};

	Object.defineProperty(DialogContext$1, "__esModule", {
	  value: true
	});
	DialogContext$1.default = void 0;

	var _react = require$$3;

	const DialogContext = /*#__PURE__*/(0, _react.createContext)({});

	{
	  DialogContext.displayName = 'DialogContext';
	}

	var _default$D = DialogContext;
	DialogContext$1.default = _default$D;

	var _interopRequireDefault$m = interopRequireDefault.exports;

	Object.defineProperty(Dialog$3, "__esModule", {
	  value: true
	});
	Dialog$3.default = void 0;

	var _objectWithoutPropertiesLoose2$k = _interopRequireDefault$m(objectWithoutPropertiesLoose.exports);

	var _extends2$l = _interopRequireDefault$m(_extends$5.exports);

	var React$k = _interopRequireWildcard$m(require$$3);

	var _propTypes$l = _interopRequireDefault$m(propTypes.exports);

	var _clsx$d = _interopRequireDefault$m(clsx$1);

	var _base$x = node$1;

	var _utils$c = utils$h;

	var _capitalize$7 = _interopRequireDefault$m(capitalize);

	var _Modal = _interopRequireDefault$m(Modal$2);

	var _Fade = _interopRequireDefault$m(Fade$2);

	var _createTransitions = createTransitions$1;

	var _Paper$1 = _interopRequireDefault$m(Paper$2);

	var _useThemeProps$g = _interopRequireDefault$m(useThemeProps$1);

	var _styled$i = _interopRequireDefault$m(styled$1);

	var _dialogClasses = _interopRequireWildcard$m(dialogClasses$1);

	var _DialogContext$1 = _interopRequireDefault$m(DialogContext$1);

	var _Backdrop = _interopRequireDefault$m(Backdrop$2);

	var _jsxRuntime$m = jsxRuntime;

	const _excluded$k = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];

	function _getRequireWildcardCache$m(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$m = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$m(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$m(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const DialogBackdrop = (0, _styled$i.default)(_Backdrop.default, {
	  name: 'MuiDialog',
	  slot: 'Backdrop',
	  overrides: (props, styles) => styles.backdrop
	})({
	  // Improve scrollable dialog support.
	  zIndex: -1
	});

	const useUtilityClasses$h = ownerState => {
	  const {
	    classes,
	    scroll,
	    maxWidth,
	    fullWidth,
	    fullScreen
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    container: ['container', `scroll${(0, _capitalize$7.default)(scroll)}`],
	    paper: ['paper', `paperScroll${(0, _capitalize$7.default)(scroll)}`, `paperWidth${(0, _capitalize$7.default)(String(maxWidth))}`, fullWidth && 'paperFullWidth', fullScreen && 'paperFullScreen']
	  };
	  return (0, _base$x.unstable_composeClasses)(slots, _dialogClasses.getDialogUtilityClass, classes);
	};

	const DialogRoot = (0, _styled$i.default)(_Modal.default, {
	  name: 'MuiDialog',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  '@media print': {
	    // Use !important to override the Modal inline-style.
	    position: 'absolute !important'
	  }
	});
	const DialogContainer = (0, _styled$i.default)('div', {
	  name: 'MuiDialog',
	  slot: 'Container',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.container, styles[`scroll${(0, _capitalize$7.default)(ownerState.scroll)}`]];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$l.default)({
	  height: '100%',
	  '@media print': {
	    height: 'auto'
	  },
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	}, ownerState.scroll === 'paper' && {
	  display: 'flex',
	  justifyContent: 'center',
	  alignItems: 'center'
	}, ownerState.scroll === 'body' && {
	  overflowY: 'auto',
	  overflowX: 'hidden',
	  textAlign: 'center',
	  '&:after': {
	    content: '""',
	    display: 'inline-block',
	    verticalAlign: 'middle',
	    height: '100%',
	    width: '0'
	  }
	}));
	const DialogPaper = (0, _styled$i.default)(_Paper$1.default, {
	  name: 'MuiDialog',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.paper, styles[`scrollPaper${(0, _capitalize$7.default)(ownerState.scroll)}`], styles[`paperWidth${(0, _capitalize$7.default)(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles.paperFullWidth, ownerState.fullScreen && styles.paperFullScreen];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$l.default)({
	  margin: 32,
	  position: 'relative',
	  overflowY: 'auto',
	  // Fix IE11 issue, to remove at some point.
	  '@media print': {
	    overflowY: 'visible',
	    boxShadow: 'none'
	  }
	}, ownerState.scroll === 'paper' && {
	  display: 'flex',
	  flexDirection: 'column',
	  maxHeight: 'calc(100% - 64px)'
	}, ownerState.scroll === 'body' && {
	  display: 'inline-block',
	  verticalAlign: 'middle',
	  textAlign: 'left' // 'initial' doesn't work on IE11

	}, !ownerState.maxWidth && {
	  maxWidth: 'calc(100% - 64px)'
	}, ownerState.maxWidth === 'xs' && {
	  maxWidth: theme.breakpoints.unit === 'px' ? Math.max(theme.breakpoints.values.xs, 444) : `${theme.breakpoints.values.xs}${theme.breakpoints.unit}`,
	  [`&.${_dialogClasses.default.paperScrollBody}`]: {
	    [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
	      maxWidth: 'calc(100% - 64px)'
	    }
	  }
	}, ownerState.maxWidth !== 'xs' && {
	  maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
	  [`&.${_dialogClasses.default.paperScrollBody}`]: {
	    [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
	      maxWidth: 'calc(100% - 64px)'
	    }
	  }
	}, ownerState.fullWidth && {
	  width: 'calc(100% - 64px)'
	}, ownerState.fullScreen && {
	  margin: 0,
	  width: '100%',
	  maxWidth: '100%',
	  height: '100%',
	  maxHeight: 'none',
	  borderRadius: 0,
	  [`&.${_dialogClasses.default.paperScrollBody}`]: {
	    margin: 0,
	    maxWidth: '100%'
	  }
	}));
	const defaultTransitionDuration = {
	  enter: _createTransitions.duration.enteringScreen,
	  exit: _createTransitions.duration.leavingScreen
	};
	/**
	 * Dialogs are overlaid modal paper based components with a backdrop.
	 */

	const Dialog$2 = /*#__PURE__*/React$k.forwardRef(function Dialog(inProps, ref) {
	  const props = (0, _useThemeProps$g.default)({
	    props: inProps,
	    name: 'MuiDialog'
	  });
	  const {
	    'aria-describedby': ariaDescribedby,
	    'aria-labelledby': ariaLabelledbyProp,
	    BackdropComponent,
	    BackdropProps,
	    children,
	    className,
	    disableEscapeKeyDown = false,
	    fullScreen = false,
	    fullWidth = false,
	    maxWidth = 'sm',
	    onBackdropClick,
	    onClose,
	    open,
	    PaperComponent = _Paper$1.default,
	    PaperProps = {},
	    scroll = 'paper',
	    TransitionComponent = _Fade.default,
	    transitionDuration = defaultTransitionDuration,
	    TransitionProps
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$k.default)(props, _excluded$k);
	  const ownerState = (0, _extends2$l.default)({}, props, {
	    disableEscapeKeyDown,
	    fullScreen,
	    fullWidth,
	    maxWidth,
	    scroll
	  });
	  const classes = useUtilityClasses$h(ownerState);
	  const backdropClick = React$k.useRef();

	  const handleMouseDown = event => {
	    // We don't want to close the dialog when clicking the dialog content.
	    // Make sure the event starts and ends on the same DOM element.
	    backdropClick.current = event.target === event.currentTarget;
	  };

	  const handleBackdropClick = event => {
	    // Ignore the events not coming from the "backdrop".
	    if (!backdropClick.current) {
	      return;
	    }

	    backdropClick.current = null;

	    if (onBackdropClick) {
	      onBackdropClick(event);
	    }

	    if (onClose) {
	      onClose(event, 'backdropClick');
	    }
	  };

	  const ariaLabelledby = (0, _utils$c.unstable_useId)(ariaLabelledbyProp);
	  const dialogContextValue = React$k.useMemo(() => {
	    return {
	      titleId: ariaLabelledby
	    };
	  }, [ariaLabelledby]);
	  return /*#__PURE__*/(0, _jsxRuntime$m.jsx)(DialogRoot, (0, _extends2$l.default)({
	    className: (0, _clsx$d.default)(classes.root, className),
	    BackdropProps: (0, _extends2$l.default)({
	      transitionDuration,
	      as: BackdropComponent
	    }, BackdropProps),
	    closeAfterTransition: true,
	    BackdropComponent: DialogBackdrop,
	    disableEscapeKeyDown: disableEscapeKeyDown,
	    onClose: onClose,
	    open: open,
	    ref: ref,
	    onClick: handleBackdropClick,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/(0, _jsxRuntime$m.jsx)(TransitionComponent, (0, _extends2$l.default)({
	      appear: true,
	      in: open,
	      timeout: transitionDuration,
	      role: "presentation"
	    }, TransitionProps, {
	      children: /*#__PURE__*/(0, _jsxRuntime$m.jsx)(DialogContainer, {
	        className: (0, _clsx$d.default)(classes.container),
	        onMouseDown: handleMouseDown,
	        ownerState: ownerState,
	        children: /*#__PURE__*/(0, _jsxRuntime$m.jsx)(DialogPaper, (0, _extends2$l.default)({
	          as: PaperComponent,
	          elevation: 24,
	          role: "dialog",
	          "aria-describedby": ariaDescribedby,
	          "aria-labelledby": ariaLabelledby
	        }, PaperProps, {
	          className: (0, _clsx$d.default)(classes.paper, PaperProps.className),
	          ownerState: ownerState,
	          children: /*#__PURE__*/(0, _jsxRuntime$m.jsx)(_DialogContext$1.default.Provider, {
	            value: dialogContextValue,
	            children: children
	          })
	        }))
	      })
	    }))
	  }));
	});
	Dialog$2.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The id(s) of the element(s) that describe the dialog.
	   */
	  'aria-describedby': _propTypes$l.default.string,

	  /**
	   * The id(s) of the element(s) that label the dialog.
	   */
	  'aria-labelledby': _propTypes$l.default.string,

	  /**
	   * A backdrop component. This prop enables custom backdrop rendering.
	   * @default styled(Backdrop, {
	   *   name: 'MuiModal',
	   *   slot: 'Backdrop',
	   *   overridesResolver: (props, styles) => {
	   *     return styles.backdrop;
	   *   },
	   * })({
	   *   zIndex: -1,
	   * })
	   */
	  BackdropComponent: _propTypes$l.default.elementType,

	  /**
	   * @ignore
	   */
	  BackdropProps: _propTypes$l.default.object,

	  /**
	   * Dialog children, usually the included sub-components.
	   */
	  children: _propTypes$l.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$l.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$l.default.string,

	  /**
	   * If `true`, hitting escape will not fire the `onClose` callback.
	   * @default false
	   */
	  disableEscapeKeyDown: _propTypes$l.default.bool,

	  /**
	   * If `true`, the dialog is full-screen.
	   * @default false
	   */
	  fullScreen: _propTypes$l.default.bool,

	  /**
	   * If `true`, the dialog stretches to `maxWidth`.
	   *
	   * Notice that the dialog width grow is limited by the default margin.
	   * @default false
	   */
	  fullWidth: _propTypes$l.default.bool,

	  /**
	   * Determine the max-width of the dialog.
	   * The dialog width grows with the size of the screen.
	   * Set to `false` to disable `maxWidth`.
	   * @default 'sm'
	   */
	  maxWidth: _propTypes$l.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$l.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), _propTypes$l.default.string]),

	  /**
	   * Callback fired when the backdrop is clicked.
	   */
	  onBackdropClick: _propTypes$l.default.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
	   */
	  onClose: _propTypes$l.default.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: _propTypes$l.default.bool.isRequired,

	  /**
	   * The component used to render the body of the dialog.
	   * @default Paper
	   */
	  PaperComponent: _propTypes$l.default.elementType,

	  /**
	   * Props applied to the [`Paper`](/api/paper/) element.
	   * @default {}
	   */
	  PaperProps: _propTypes$l.default.object,

	  /**
	   * Determine the container for scrolling the dialog.
	   * @default 'paper'
	   */
	  scroll: _propTypes$l.default.oneOf(['body', 'paper']),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$l.default.oneOfType([_propTypes$l.default.arrayOf(_propTypes$l.default.oneOfType([_propTypes$l.default.func, _propTypes$l.default.object, _propTypes$l.default.bool])), _propTypes$l.default.func, _propTypes$l.default.object]),

	  /**
	   * The component used for the transition.
	   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Fade
	   */
	  TransitionComponent: _propTypes$l.default.elementType,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   * @default { enter: duration.enteringScreen, exit: duration.leavingScreen }
	   */
	  transitionDuration: _propTypes$l.default.oneOfType([_propTypes$l.default.number, _propTypes$l.default.shape({
	    appear: _propTypes$l.default.number,
	    enter: _propTypes$l.default.number,
	    exit: _propTypes$l.default.number
	  })]),

	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   */
	  TransitionProps: _propTypes$l.default.object
	} ;
	var _default$C = Dialog$2;
	Dialog$3.default = _default$C;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  dialogClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Dialog.default;
		  }
		});
		Object.defineProperty(exports, "dialogClasses", {
		  enumerable: true,
		  get: function () {
		    return _dialogClasses.default;
		  }
		});

		var _Dialog = _interopRequireDefault(Dialog$3);

		var _dialogClasses = _interopRequireWildcard(dialogClasses$1);

		Object.keys(_dialogClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _dialogClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _dialogClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Dialog$4));

	var Dialog$1 = /*@__PURE__*/getDefaultExportFromCjs(Dialog$4);

	var DialogActions$3 = {};

	var DialogActions$2 = {};

	var dialogActionsClasses$1 = {};

	Object.defineProperty(dialogActionsClasses$1, "__esModule", {
	  value: true
	});
	dialogActionsClasses$1.default = void 0;
	dialogActionsClasses$1.getDialogActionsUtilityClass = getDialogActionsUtilityClass;

	var _base$w = node$1;

	function getDialogActionsUtilityClass(slot) {
	  return (0, _base$w.generateUtilityClass)('MuiDialogActions', slot);
	}

	const dialogActionsClasses = (0, _base$w.generateUtilityClasses)('MuiDialogActions', ['root', 'spacing']);
	var _default$B = dialogActionsClasses;
	dialogActionsClasses$1.default = _default$B;

	var _interopRequireDefault$l = interopRequireDefault.exports;

	Object.defineProperty(DialogActions$2, "__esModule", {
	  value: true
	});
	DialogActions$2.default = void 0;

	var _objectWithoutPropertiesLoose2$j = _interopRequireDefault$l(objectWithoutPropertiesLoose.exports);

	var _extends2$k = _interopRequireDefault$l(_extends$5.exports);

	var React$j = _interopRequireWildcard$l(require$$3);

	var _propTypes$k = _interopRequireDefault$l(propTypes.exports);

	var _clsx$c = _interopRequireDefault$l(clsx$1);

	var _base$v = node$1;

	var _styled$h = _interopRequireDefault$l(styled$1);

	var _useThemeProps$f = _interopRequireDefault$l(useThemeProps$1);

	var _dialogActionsClasses = dialogActionsClasses$1;

	var _jsxRuntime$l = jsxRuntime;

	const _excluded$j = ["className", "disableSpacing"];

	function _getRequireWildcardCache$l(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$l = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$l(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$l(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$g = ownerState => {
	  const {
	    classes,
	    disableSpacing
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableSpacing && 'spacing']
	  };
	  return (0, _base$v.unstable_composeClasses)(slots, _dialogActionsClasses.getDialogActionsUtilityClass, classes);
	};

	const DialogActionsRoot = (0, _styled$h.default)('div', {
	  name: 'MuiDialogActions',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disableSpacing && styles.spacing];
	  }
	})(({
	  ownerState
	}) => (0, _extends2$k.default)({
	  display: 'flex',
	  alignItems: 'center',
	  padding: 8,
	  justifyContent: 'flex-end',
	  flex: '0 0 auto'
	}, !ownerState.disableSpacing && {
	  '& > :not(:first-of-type)': {
	    marginLeft: 8
	  }
	}));
	const DialogActions$1 = /*#__PURE__*/React$j.forwardRef(function DialogActions(inProps, ref) {
	  const props = (0, _useThemeProps$f.default)({
	    props: inProps,
	    name: 'MuiDialogActions'
	  });
	  const {
	    className,
	    disableSpacing = false
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$j.default)(props, _excluded$j);
	  const ownerState = (0, _extends2$k.default)({}, props, {
	    disableSpacing
	  });
	  const classes = useUtilityClasses$g(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$l.jsx)(DialogActionsRoot, (0, _extends2$k.default)({
	    className: (0, _clsx$c.default)(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	DialogActions$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$k.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$k.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$k.default.string,

	  /**
	   * If `true`, the actions do not have additional margin.
	   * @default false
	   */
	  disableSpacing: _propTypes$k.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$k.default.oneOfType([_propTypes$k.default.arrayOf(_propTypes$k.default.oneOfType([_propTypes$k.default.func, _propTypes$k.default.object, _propTypes$k.default.bool])), _propTypes$k.default.func, _propTypes$k.default.object])
	} ;
	var _default$A = DialogActions$1;
	DialogActions$2.default = _default$A;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  dialogActionsClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _DialogActions.default;
		  }
		});
		Object.defineProperty(exports, "dialogActionsClasses", {
		  enumerable: true,
		  get: function () {
		    return _dialogActionsClasses.default;
		  }
		});

		var _DialogActions = _interopRequireDefault(DialogActions$2);

		var _dialogActionsClasses = _interopRequireWildcard(dialogActionsClasses$1);

		Object.keys(_dialogActionsClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _dialogActionsClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _dialogActionsClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (DialogActions$3));

	var DialogActions = /*@__PURE__*/getDefaultExportFromCjs(DialogActions$3);

	var DialogContent$3 = {};

	var DialogContent$2 = {};

	var dialogContentClasses$1 = {};

	Object.defineProperty(dialogContentClasses$1, "__esModule", {
	  value: true
	});
	dialogContentClasses$1.default = void 0;
	dialogContentClasses$1.getDialogContentUtilityClass = getDialogContentUtilityClass;

	var _base$u = node$1;

	function getDialogContentUtilityClass(slot) {
	  return (0, _base$u.generateUtilityClass)('MuiDialogContent', slot);
	}

	const dialogContentClasses = (0, _base$u.generateUtilityClasses)('MuiDialogContent', ['root', 'dividers']);
	var _default$z = dialogContentClasses;
	dialogContentClasses$1.default = _default$z;

	var dialogTitleClasses$1 = {};

	Object.defineProperty(dialogTitleClasses$1, "__esModule", {
	  value: true
	});
	dialogTitleClasses$1.default = void 0;
	dialogTitleClasses$1.getDialogTitleUtilityClass = getDialogTitleUtilityClass;

	var _base$t = node$1;

	function getDialogTitleUtilityClass(slot) {
	  return (0, _base$t.generateUtilityClass)('MuiDialogTitle', slot);
	}

	const dialogTitleClasses = (0, _base$t.generateUtilityClasses)('MuiDialogTitle', ['root']);
	var _default$y = dialogTitleClasses;
	dialogTitleClasses$1.default = _default$y;

	var _interopRequireDefault$k = interopRequireDefault.exports;

	Object.defineProperty(DialogContent$2, "__esModule", {
	  value: true
	});
	DialogContent$2.default = void 0;

	var _objectWithoutPropertiesLoose2$i = _interopRequireDefault$k(objectWithoutPropertiesLoose.exports);

	var _extends2$j = _interopRequireDefault$k(_extends$5.exports);

	var React$i = _interopRequireWildcard$k(require$$3);

	var _propTypes$j = _interopRequireDefault$k(propTypes.exports);

	var _clsx$b = _interopRequireDefault$k(clsx$1);

	var _base$s = node$1;

	var _styled$g = _interopRequireDefault$k(styled$1);

	var _useThemeProps$e = _interopRequireDefault$k(useThemeProps$1);

	var _dialogContentClasses = dialogContentClasses$1;

	var _dialogTitleClasses$1 = _interopRequireDefault$k(dialogTitleClasses$1);

	var _jsxRuntime$k = jsxRuntime;

	const _excluded$i = ["className", "dividers"];

	function _getRequireWildcardCache$k(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$k = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$k(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$k(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$f = ownerState => {
	  const {
	    classes,
	    dividers
	  } = ownerState;
	  const slots = {
	    root: ['root', dividers && 'dividers']
	  };
	  return (0, _base$s.unstable_composeClasses)(slots, _dialogContentClasses.getDialogContentUtilityClass, classes);
	};

	const DialogContentRoot = (0, _styled$g.default)('div', {
	  name: 'MuiDialogContent',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.dividers && styles.dividers];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$j.default)({
	  flex: '1 1 auto',
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch',
	  overflowY: 'auto',
	  padding: '20px 24px'
	}, ownerState.dividers ? {
	  padding: '16px 24px',
	  borderTop: `1px solid ${theme.palette.divider}`,
	  borderBottom: `1px solid ${theme.palette.divider}`
	} : {
	  [`.${_dialogTitleClasses$1.default.root} + &`]: {
	    paddingTop: 0
	  }
	}));
	const DialogContent$1 = /*#__PURE__*/React$i.forwardRef(function DialogContent(inProps, ref) {
	  const props = (0, _useThemeProps$e.default)({
	    props: inProps,
	    name: 'MuiDialogContent'
	  });
	  const {
	    className,
	    dividers = false
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$i.default)(props, _excluded$i);
	  const ownerState = (0, _extends2$j.default)({}, props, {
	    dividers
	  });
	  const classes = useUtilityClasses$f(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$k.jsx)(DialogContentRoot, (0, _extends2$j.default)({
	    className: (0, _clsx$b.default)(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	DialogContent$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$j.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$j.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$j.default.string,

	  /**
	   * Display the top and bottom dividers.
	   * @default false
	   */
	  dividers: _propTypes$j.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$j.default.oneOfType([_propTypes$j.default.arrayOf(_propTypes$j.default.oneOfType([_propTypes$j.default.func, _propTypes$j.default.object, _propTypes$j.default.bool])), _propTypes$j.default.func, _propTypes$j.default.object])
	} ;
	var _default$x = DialogContent$1;
	DialogContent$2.default = _default$x;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  dialogContentClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _DialogContent.default;
		  }
		});
		Object.defineProperty(exports, "dialogContentClasses", {
		  enumerable: true,
		  get: function () {
		    return _dialogContentClasses.default;
		  }
		});

		var _DialogContent = _interopRequireDefault(DialogContent$2);

		var _dialogContentClasses = _interopRequireWildcard(dialogContentClasses$1);

		Object.keys(_dialogContentClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _dialogContentClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _dialogContentClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (DialogContent$3));

	var DialogContent = /*@__PURE__*/getDefaultExportFromCjs(DialogContent$3);

	var DialogTitle$3 = {};

	var DialogTitle$2 = {};

	var _interopRequireDefault$j = interopRequireDefault.exports;

	Object.defineProperty(DialogTitle$2, "__esModule", {
	  value: true
	});
	DialogTitle$2.default = void 0;

	var _extends2$i = _interopRequireDefault$j(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$h = _interopRequireDefault$j(objectWithoutPropertiesLoose.exports);

	var React$h = _interopRequireWildcard$j(require$$3);

	var _propTypes$i = _interopRequireDefault$j(propTypes.exports);

	var _clsx$a = _interopRequireDefault$j(clsx$1);

	var _base$r = node$1;

	var _Typography$1 = _interopRequireDefault$j(Typography$3);

	var _styled$f = _interopRequireDefault$j(styled$1);

	var _useThemeProps$d = _interopRequireDefault$j(useThemeProps$1);

	var _dialogTitleClasses = dialogTitleClasses$1;

	var _DialogContext = _interopRequireDefault$j(DialogContext$1);

	var _jsxRuntime$j = jsxRuntime;

	const _excluded$h = ["className", "id"];

	function _getRequireWildcardCache$j(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$j = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$j(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$j(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$e = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return (0, _base$r.unstable_composeClasses)(slots, _dialogTitleClasses.getDialogTitleUtilityClass, classes);
	};

	const DialogTitleRoot = (0, _styled$f.default)(_Typography$1.default, {
	  name: 'MuiDialogTitle',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  padding: '16px 24px',
	  flex: '0 0 auto'
	});
	const DialogTitle$1 = /*#__PURE__*/React$h.forwardRef(function DialogTitle(inProps, ref) {
	  const props = (0, _useThemeProps$d.default)({
	    props: inProps,
	    name: 'MuiDialogTitle'
	  });
	  const {
	    className,
	    id: idProp
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$h.default)(props, _excluded$h);
	  const ownerState = props;
	  const classes = useUtilityClasses$e(ownerState);
	  const {
	    titleId: id = idProp
	  } = React$h.useContext(_DialogContext.default);
	  return /*#__PURE__*/(0, _jsxRuntime$j.jsx)(DialogTitleRoot, (0, _extends2$i.default)({
	    component: "h2",
	    className: (0, _clsx$a.default)(classes.root, className),
	    ownerState: ownerState,
	    ref: ref,
	    variant: "h6",
	    id: id
	  }, other));
	});
	DialogTitle$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$i.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$i.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$i.default.string,

	  /**
	   * @ignore
	   */
	  id: _propTypes$i.default.string,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$i.default.oneOfType([_propTypes$i.default.arrayOf(_propTypes$i.default.oneOfType([_propTypes$i.default.func, _propTypes$i.default.object, _propTypes$i.default.bool])), _propTypes$i.default.func, _propTypes$i.default.object])
	} ;
	var _default$w = DialogTitle$1;
	DialogTitle$2.default = _default$w;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  dialogTitleClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _DialogTitle.default;
		  }
		});
		Object.defineProperty(exports, "dialogTitleClasses", {
		  enumerable: true,
		  get: function () {
		    return _dialogTitleClasses.default;
		  }
		});

		var _DialogTitle = _interopRequireDefault(DialogTitle$2);

		var _dialogTitleClasses = _interopRequireWildcard(dialogTitleClasses$1);

		Object.keys(_dialogTitleClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _dialogTitleClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _dialogTitleClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (DialogTitle$3));

	var DialogTitle = /*@__PURE__*/getDefaultExportFromCjs(DialogTitle$3);

	var DialogContentText$3 = {};

	var DialogContentText$2 = {};

	var dialogContentTextClasses$1 = {};

	Object.defineProperty(dialogContentTextClasses$1, "__esModule", {
	  value: true
	});
	dialogContentTextClasses$1.default = void 0;
	dialogContentTextClasses$1.getDialogContentTextUtilityClass = getDialogContentTextUtilityClass;

	var _base$q = node$1;

	function getDialogContentTextUtilityClass(slot) {
	  return (0, _base$q.generateUtilityClass)('MuiDialogContentText', slot);
	}

	const dialogContentTextClasses = (0, _base$q.generateUtilityClasses)('MuiDialogContentText', ['root']);
	var _default$v = dialogContentTextClasses;
	dialogContentTextClasses$1.default = _default$v;

	var _interopRequireDefault$i = interopRequireDefault.exports;

	Object.defineProperty(DialogContentText$2, "__esModule", {
	  value: true
	});
	DialogContentText$2.default = void 0;

	var _objectWithoutPropertiesLoose2$g = _interopRequireDefault$i(objectWithoutPropertiesLoose.exports);

	var _extends2$h = _interopRequireDefault$i(_extends$5.exports);

	var React$g = _interopRequireWildcard$i(require$$3);

	var _propTypes$h = _interopRequireDefault$i(propTypes.exports);

	var _base$p = node$1;

	var _styled$e = _interopRequireWildcard$i(styled$1);

	var _useThemeProps$c = _interopRequireDefault$i(useThemeProps$1);

	var _Typography = _interopRequireDefault$i(Typography$3);

	var _dialogContentTextClasses = dialogContentTextClasses$1;

	var _jsxRuntime$i = jsxRuntime;

	const _excluded$g = ["children"];

	function _getRequireWildcardCache$i(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$i = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$i(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$i(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$d = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  const composedClasses = (0, _base$p.unstable_composeClasses)(slots, _dialogContentTextClasses.getDialogContentTextUtilityClass, classes);
	  return (0, _extends2$h.default)({}, classes, composedClasses);
	};

	const DialogContentTextRoot = (0, _styled$e.default)(_Typography.default, {
	  shouldForwardProp: prop => (0, _styled$e.rootShouldForwardProp)(prop) || prop === 'classes',
	  name: 'MuiDialogContentText',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const DialogContentText$1 = /*#__PURE__*/React$g.forwardRef(function DialogContentText(inProps, ref) {
	  const props = (0, _useThemeProps$c.default)({
	    props: inProps,
	    name: 'MuiDialogContentText'
	  });
	  const ownerState = (0, _objectWithoutPropertiesLoose2$g.default)(props, _excluded$g);
	  const classes = useUtilityClasses$d(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$i.jsx)(DialogContentTextRoot, (0, _extends2$h.default)({
	    component: "p",
	    variant: "body1",
	    color: "text.secondary",
	    ref: ref,
	    ownerState: ownerState
	  }, props, {
	    classes: classes
	  }));
	});
	DialogContentText$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$h.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$h.default.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$h.default.oneOfType([_propTypes$h.default.arrayOf(_propTypes$h.default.oneOfType([_propTypes$h.default.func, _propTypes$h.default.object, _propTypes$h.default.bool])), _propTypes$h.default.func, _propTypes$h.default.object])
	} ;
	var _default$u = DialogContentText$1;
	DialogContentText$2.default = _default$u;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  dialogContentTextClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _DialogContentText.default;
		  }
		});
		Object.defineProperty(exports, "dialogContentTextClasses", {
		  enumerable: true,
		  get: function () {
		    return _dialogContentTextClasses.default;
		  }
		});

		var _DialogContentText = _interopRequireDefault(DialogContentText$2);

		var _dialogContentTextClasses = _interopRequireWildcard(dialogContentTextClasses$1);

		Object.keys(_dialogContentTextClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _dialogContentTextClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _dialogContentTextClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (DialogContentText$3));

	var DialogContentText = /*@__PURE__*/getDefaultExportFromCjs(DialogContentText$3);

	var Dialog = g(function () {
	  const dispatch = lib.useDispatch();
	  const dialog = lib.useSelector(store => store.dialog || {});
	  const handleClose = A$1(() => dispatch(closeDialog()), []);
	  return v$1(Dialog$1, {
	    open: dialog.open,
	    onClose: handleClose
	  }, v$1(DialogTitle, null, dialog.title || ''), v$1(DialogContent, null, v$1(DialogContentText, null, dialog.content || '')), v$1(DialogActions, null, dialog.actions && dialog.actions.map(action => v$1(Button, {
	    onClick: () => {
	      action.onClick();
	      handleClose();
	    },
	    key: action.label
	  }, action.label))));
	});

	var Snackbar = g(function () {
	  let [displayed, setDisplayed] = l([]);
	  const dispatch = lib.useDispatch();
	  const notifications = lib.useSelector(store => store.snackbar.notifications || []);
	  const {
	    enqueueSnackbar,
	    closeSnackbar
	  } = dist$8.exports.useSnackbar();
	  const storeDisplayed = A$1(id => {
	    setDisplayed(displayed => [...displayed, id]);
	  }, []);
	  const removeDisplayed = A$1(id => {
	    setDisplayed(displayed => [...displayed.filter(key => id !== key)]);
	  }, []);
	  y(() => {
	    notifications.forEach(({
	      key,
	      message,
	      options = {},
	      dismissed = false
	    }) => {
	      if (dismissed) {
	        closeSnackbar(key);
	        return;
	      }

	      if (displayed.includes(key)) return;
	      enqueueSnackbar(message, {
	        key,
	        ...options,
	        onClose: (event, reason, myKey) => {
	          if (options.onClose) {
	            options.onClose(event, reason, myKey);
	          }
	        },
	        onExited: (_, myKey) => {
	          dispatch(removeSnackbar(myKey));
	          removeDisplayed(myKey);
	        }
	      });
	      storeDisplayed(key);
	    });
	  }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);
	  return null;
	});

	var GlobalStyles$3 = {};

	var GlobalStyles$2 = {};

	var _interopRequireDefault$h = interopRequireDefault.exports;

	Object.defineProperty(GlobalStyles$2, "__esModule", {
	  value: true
	});
	GlobalStyles$2.default = void 0;

	var _extends2$g = _interopRequireDefault$h(_extends$5.exports);

	_interopRequireWildcard$h(require$$3);

	var _propTypes$g = _interopRequireDefault$h(propTypes.exports);

	var _system$1 = system;

	var _defaultTheme = _interopRequireDefault$h(defaultTheme$2);

	var _jsxRuntime$h = jsxRuntime;

	function _getRequireWildcardCache$h(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$h = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$h(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$h(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function GlobalStyles$1(props) {
	  return /*#__PURE__*/(0, _jsxRuntime$h.jsx)(_system$1.GlobalStyles, (0, _extends2$g.default)({}, props, {
	    defaultTheme: _defaultTheme.default
	  }));
	}

	GlobalStyles$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The styles you want to apply globally.
	   */
	  styles: _propTypes$g.default.oneOfType([_propTypes$g.default.func, _propTypes$g.default.number, _propTypes$g.default.object, _propTypes$g.default.shape({
	    __emotion_styles: _propTypes$g.default.any.isRequired
	  }), _propTypes$g.default.string, _propTypes$g.default.bool])
	} ;
	var _default$t = GlobalStyles$1;
	GlobalStyles$2.default = _default$t;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _GlobalStyles.default;
		  }
		});

		var _GlobalStyles = _interopRequireDefault(GlobalStyles$2);
	} (GlobalStyles$3));

	var GlobalStyles = /*@__PURE__*/getDefaultExportFromCjs(GlobalStyles$3);

	var ModifyStyle = g(function () {
	  const [storage] = useStorage();
	  const styleList = d(() => {
	    return {
	      'full-editor': {
	        '.mid-container': {
	          maxWidth: '95% !important'
	        },
	        '.SplitPane': {
	          minHeight: 'calc(80vh)'
	        },
	        '#grammar-checker': {
	          minHeight: 'calc(75vh)'
	        },
	        '#inputGridContainerRef': {
	          minHeight: 'calc(75vh)'
	        },
	        '#cgr-container': {
	          minHeight: 'calc(85vh)'
	        }
	      }
	    };
	  }, []);
	  return v$1(d$1, null, Object.keys(styleList).filter(key => storage.settings.find(item => item.id === key && item.enabled)).map(key => v$1(GlobalStyles, {
	    key: key,
	    styles: styleList[key]
	  })));
	});

	var axios$2 = {exports: {}};

	var bind$2 = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};

	var bind$1 = bind$2;

	// utils is a library of generic helper functions non-specific to axios

	var toString = Object.prototype.toString;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return Array.isArray(val);
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is a Buffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Buffer, otherwise false
	 */
	function isBuffer(val) {
	  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
	    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return toString.call(val) === '[object FormData]';
	}

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString$1(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a plain Object
	 *
	 * @param {Object} val The value to test
	 * @return {boolean} True if value is a plain Object, otherwise false
	 */
	function isPlainObject$1(val) {
	  if (toString.call(val) !== '[object Object]') {
	    return false;
	  }

	  var prototype = Object.getPrototypeOf(val);
	  return prototype === null || prototype === Object.prototype;
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}

	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}

	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return toString.call(val) === '[object URLSearchParams]';
	}

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim$2(str) {
	  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 * nativescript
	 *  navigator.product -> 'NativeScript' or 'NS'
	 */
	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
	                                           navigator.product === 'NativeScript' ||
	                                           navigator.product === 'NS')) {
	    return false;
	  }
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (isPlainObject$1(result[key]) && isPlainObject$1(val)) {
	      result[key] = merge(result[key], val);
	    } else if (isPlainObject$1(val)) {
	      result[key] = merge({}, val);
	    } else if (isArray(val)) {
	      result[key] = val.slice();
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind$1(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}

	/**
	 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
	 *
	 * @param {string} content with BOM
	 * @return {string} content value without BOM
	 */
	function stripBOM(content) {
	  if (content.charCodeAt(0) === 0xFEFF) {
	    content = content.slice(1);
	  }
	  return content;
	}

	var utils$9 = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString$1,
	  isNumber: isNumber,
	  isObject: isObject,
	  isPlainObject: isPlainObject$1,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim$2,
	  stripBOM: stripBOM
	};

	var utils$8 = utils$9;

	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	var buildURL$1 = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils$8.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];

	    utils$8.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils$8.isArray(val)) {
	        key = key + '[]';
	      } else {
	        val = [val];
	      }

	      utils$8.forEach(val, function parseValue(v) {
	        if (utils$8.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils$8.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    var hashmarkIndex = url.indexOf('#');
	    if (hashmarkIndex !== -1) {
	      url = url.slice(0, hashmarkIndex);
	    }

	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};

	var utils$7 = utils$9;

	function InterceptorManager$1() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected,
	    synchronous: options ? options.synchronous : false,
	    runWhen: options ? options.runWhen : null
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager$1.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager$1.prototype.forEach = function forEach(fn) {
	  utils$7.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	var InterceptorManager_1 = InterceptorManager$1;

	var utils$6 = utils$9;

	var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
	  utils$6.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};

	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	var enhanceError = function enhanceError(error, config, code, request, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }

	  error.request = request;
	  error.response = response;
	  error.isAxiosError = true;

	  error.toJSON = function toJSON() {
	    return {
	      // Standard
	      message: this.message,
	      name: this.name,
	      // Microsoft
	      description: this.description,
	      number: this.number,
	      // Mozilla
	      fileName: this.fileName,
	      lineNumber: this.lineNumber,
	      columnNumber: this.columnNumber,
	      stack: this.stack,
	      // Axios
	      config: this.config,
	      code: this.code,
	      status: this.response && this.response.status ? this.response.status : null
	    };
	  };
	  return error;
	};

	var createError;
	var hasRequiredCreateError;

	function requireCreateError () {
		if (hasRequiredCreateError) return createError;
		hasRequiredCreateError = 1;

		var enhanceError$1 = enhanceError;

		/**
		 * Create an Error with the specified message, config, error code, request and response.
		 *
		 * @param {string} message The error message.
		 * @param {Object} config The config.
		 * @param {string} [code] The error code (for example, 'ECONNABORTED').
		 * @param {Object} [request] The request.
		 * @param {Object} [response] The response.
		 * @returns {Error} The created error.
		 */
		createError = function createError(message, config, code, request, response) {
		  var error = new Error(message);
		  return enhanceError$1(error, config, code, request, response);
		};
		return createError;
	}

	var settle;
	var hasRequiredSettle;

	function requireSettle () {
		if (hasRequiredSettle) return settle;
		hasRequiredSettle = 1;

		var createError = requireCreateError();

		/**
		 * Resolve or reject a Promise based on response status.
		 *
		 * @param {Function} resolve A function that resolves the promise.
		 * @param {Function} reject A function that rejects the promise.
		 * @param {object} response The response.
		 */
		settle = function settle(resolve, reject, response) {
		  var validateStatus = response.config.validateStatus;
		  if (!response.status || !validateStatus || validateStatus(response.status)) {
		    resolve(response);
		  } else {
		    reject(createError(
		      'Request failed with status code ' + response.status,
		      response.config,
		      null,
		      response.request,
		      response
		    ));
		  }
		};
		return settle;
	}

	var cookies;
	var hasRequiredCookies;

	function requireCookies () {
		if (hasRequiredCookies) return cookies;
		hasRequiredCookies = 1;

		var utils = utils$9;

		cookies = (
		  utils.isStandardBrowserEnv() ?

		  // Standard browser envs support document.cookie
		    (function standardBrowserEnv() {
		      return {
		        write: function write(name, value, expires, path, domain, secure) {
		          var cookie = [];
		          cookie.push(name + '=' + encodeURIComponent(value));

		          if (utils.isNumber(expires)) {
		            cookie.push('expires=' + new Date(expires).toGMTString());
		          }

		          if (utils.isString(path)) {
		            cookie.push('path=' + path);
		          }

		          if (utils.isString(domain)) {
		            cookie.push('domain=' + domain);
		          }

		          if (secure === true) {
		            cookie.push('secure');
		          }

		          document.cookie = cookie.join('; ');
		        },

		        read: function read(name) {
		          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
		          return (match ? decodeURIComponent(match[3]) : null);
		        },

		        remove: function remove(name) {
		          this.write(name, '', Date.now() - 86400000);
		        }
		      };
		    })() :

		  // Non standard browser env (web workers, react-native) lack needed support.
		    (function nonStandardBrowserEnv() {
		      return {
		        write: function write() {},
		        read: function read() { return null; },
		        remove: function remove() {}
		      };
		    })()
		);
		return cookies;
	}

	var isAbsoluteURL;
	var hasRequiredIsAbsoluteURL;

	function requireIsAbsoluteURL () {
		if (hasRequiredIsAbsoluteURL) return isAbsoluteURL;
		hasRequiredIsAbsoluteURL = 1;

		/**
		 * Determines whether the specified URL is absolute
		 *
		 * @param {string} url The URL to test
		 * @returns {boolean} True if the specified URL is absolute, otherwise false
		 */
		isAbsoluteURL = function isAbsoluteURL(url) {
		  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
		  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
		  // by any combination of letters, digits, plus, period, or hyphen.
		  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
		};
		return isAbsoluteURL;
	}

	var combineURLs;
	var hasRequiredCombineURLs;

	function requireCombineURLs () {
		if (hasRequiredCombineURLs) return combineURLs;
		hasRequiredCombineURLs = 1;

		/**
		 * Creates a new URL by combining the specified URLs
		 *
		 * @param {string} baseURL The base URL
		 * @param {string} relativeURL The relative URL
		 * @returns {string} The combined URL
		 */
		combineURLs = function combineURLs(baseURL, relativeURL) {
		  return relativeURL
		    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
		    : baseURL;
		};
		return combineURLs;
	}

	var buildFullPath;
	var hasRequiredBuildFullPath;

	function requireBuildFullPath () {
		if (hasRequiredBuildFullPath) return buildFullPath;
		hasRequiredBuildFullPath = 1;

		var isAbsoluteURL = requireIsAbsoluteURL();
		var combineURLs = requireCombineURLs();

		/**
		 * Creates a new URL by combining the baseURL with the requestedURL,
		 * only when the requestedURL is not already an absolute URL.
		 * If the requestURL is absolute, this function returns the requestedURL untouched.
		 *
		 * @param {string} baseURL The base URL
		 * @param {string} requestedURL Absolute or relative URL to combine
		 * @returns {string} The combined full path
		 */
		buildFullPath = function buildFullPath(baseURL, requestedURL) {
		  if (baseURL && !isAbsoluteURL(requestedURL)) {
		    return combineURLs(baseURL, requestedURL);
		  }
		  return requestedURL;
		};
		return buildFullPath;
	}

	var parseHeaders;
	var hasRequiredParseHeaders;

	function requireParseHeaders () {
		if (hasRequiredParseHeaders) return parseHeaders;
		hasRequiredParseHeaders = 1;

		var utils = utils$9;

		// Headers whose duplicates are ignored by node
		// c.f. https://nodejs.org/api/http.html#http_message_headers
		var ignoreDuplicateOf = [
		  'age', 'authorization', 'content-length', 'content-type', 'etag',
		  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
		  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
		  'referer', 'retry-after', 'user-agent'
		];

		/**
		 * Parse headers into an object
		 *
		 * ```
		 * Date: Wed, 27 Aug 2014 08:58:49 GMT
		 * Content-Type: application/json
		 * Connection: keep-alive
		 * Transfer-Encoding: chunked
		 * ```
		 *
		 * @param {String} headers Headers needing to be parsed
		 * @returns {Object} Headers parsed into an object
		 */
		parseHeaders = function parseHeaders(headers) {
		  var parsed = {};
		  var key;
		  var val;
		  var i;

		  if (!headers) { return parsed; }

		  utils.forEach(headers.split('\n'), function parser(line) {
		    i = line.indexOf(':');
		    key = utils.trim(line.substr(0, i)).toLowerCase();
		    val = utils.trim(line.substr(i + 1));

		    if (key) {
		      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
		        return;
		      }
		      if (key === 'set-cookie') {
		        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
		      } else {
		        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
		      }
		    }
		  });

		  return parsed;
		};
		return parseHeaders;
	}

	var isURLSameOrigin;
	var hasRequiredIsURLSameOrigin;

	function requireIsURLSameOrigin () {
		if (hasRequiredIsURLSameOrigin) return isURLSameOrigin;
		hasRequiredIsURLSameOrigin = 1;

		var utils = utils$9;

		isURLSameOrigin = (
		  utils.isStandardBrowserEnv() ?

		  // Standard browser envs have full support of the APIs needed to test
		  // whether the request URL is of the same origin as current location.
		    (function standardBrowserEnv() {
		      var msie = /(msie|trident)/i.test(navigator.userAgent);
		      var urlParsingNode = document.createElement('a');
		      var originURL;

		      /**
		    * Parse a URL to discover it's components
		    *
		    * @param {String} url The URL to be parsed
		    * @returns {Object}
		    */
		      function resolveURL(url) {
		        var href = url;

		        if (msie) {
		        // IE needs attribute set twice to normalize properties
		          urlParsingNode.setAttribute('href', href);
		          href = urlParsingNode.href;
		        }

		        urlParsingNode.setAttribute('href', href);

		        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
		        return {
		          href: urlParsingNode.href,
		          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
		          host: urlParsingNode.host,
		          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
		          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
		          hostname: urlParsingNode.hostname,
		          port: urlParsingNode.port,
		          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
		            urlParsingNode.pathname :
		            '/' + urlParsingNode.pathname
		        };
		      }

		      originURL = resolveURL(window.location.href);

		      /**
		    * Determine if a URL shares the same origin as the current location
		    *
		    * @param {String} requestURL The URL to test
		    * @returns {boolean} True if URL shares the same origin, otherwise false
		    */
		      return function isURLSameOrigin(requestURL) {
		        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
		        return (parsed.protocol === originURL.protocol &&
		            parsed.host === originURL.host);
		      };
		    })() :

		  // Non standard browser envs (web workers, react-native) lack needed support.
		    (function nonStandardBrowserEnv() {
		      return function isURLSameOrigin() {
		        return true;
		      };
		    })()
		);
		return isURLSameOrigin;
	}

	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel$1(message) {
	  this.message = message;
	}

	Cancel$1.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};

	Cancel$1.prototype.__CANCEL__ = true;

	var Cancel_1 = Cancel$1;

	var xhr$1;
	var hasRequiredXhr;

	function requireXhr () {
		if (hasRequiredXhr) return xhr$1;
		hasRequiredXhr = 1;

		var utils = utils$9;
		var settle = requireSettle();
		var cookies = requireCookies();
		var buildURL = buildURL$1;
		var buildFullPath = requireBuildFullPath();
		var parseHeaders = requireParseHeaders();
		var isURLSameOrigin = requireIsURLSameOrigin();
		var createError = requireCreateError();
		var defaults = requireDefaults();
		var Cancel = Cancel_1;

		xhr$1 = function xhrAdapter(config) {
		  return new Promise(function dispatchXhrRequest(resolve, reject) {
		    var requestData = config.data;
		    var requestHeaders = config.headers;
		    var responseType = config.responseType;
		    var onCanceled;
		    function done() {
		      if (config.cancelToken) {
		        config.cancelToken.unsubscribe(onCanceled);
		      }

		      if (config.signal) {
		        config.signal.removeEventListener('abort', onCanceled);
		      }
		    }

		    if (utils.isFormData(requestData)) {
		      delete requestHeaders['Content-Type']; // Let the browser set it
		    }

		    var request = new XMLHttpRequest();

		    // HTTP basic authentication
		    if (config.auth) {
		      var username = config.auth.username || '';
		      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
		      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
		    }

		    var fullPath = buildFullPath(config.baseURL, config.url);
		    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

		    // Set the request timeout in MS
		    request.timeout = config.timeout;

		    function onloadend() {
		      if (!request) {
		        return;
		      }
		      // Prepare the response
		      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
		      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
		        request.responseText : request.response;
		      var response = {
		        data: responseData,
		        status: request.status,
		        statusText: request.statusText,
		        headers: responseHeaders,
		        config: config,
		        request: request
		      };

		      settle(function _resolve(value) {
		        resolve(value);
		        done();
		      }, function _reject(err) {
		        reject(err);
		        done();
		      }, response);

		      // Clean up request
		      request = null;
		    }

		    if ('onloadend' in request) {
		      // Use onloadend if available
		      request.onloadend = onloadend;
		    } else {
		      // Listen for ready state to emulate onloadend
		      request.onreadystatechange = function handleLoad() {
		        if (!request || request.readyState !== 4) {
		          return;
		        }

		        // The request errored out and we didn't get a response, this will be
		        // handled by onerror instead
		        // With one exception: request that using file: protocol, most browsers
		        // will return status as 0 even though it's a successful request
		        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
		          return;
		        }
		        // readystate handler is calling before onerror or ontimeout handlers,
		        // so we should call onloadend on the next 'tick'
		        setTimeout(onloadend);
		      };
		    }

		    // Handle browser request cancellation (as opposed to a manual cancellation)
		    request.onabort = function handleAbort() {
		      if (!request) {
		        return;
		      }

		      reject(createError('Request aborted', config, 'ECONNABORTED', request));

		      // Clean up request
		      request = null;
		    };

		    // Handle low level network errors
		    request.onerror = function handleError() {
		      // Real errors are hidden from us by the browser
		      // onerror should only fire if it's a network error
		      reject(createError('Network Error', config, null, request));

		      // Clean up request
		      request = null;
		    };

		    // Handle timeout
		    request.ontimeout = function handleTimeout() {
		      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
		      var transitional = config.transitional || defaults.transitional;
		      if (config.timeoutErrorMessage) {
		        timeoutErrorMessage = config.timeoutErrorMessage;
		      }
		      reject(createError(
		        timeoutErrorMessage,
		        config,
		        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
		        request));

		      // Clean up request
		      request = null;
		    };

		    // Add xsrf header
		    // This is only done if running in a standard browser environment.
		    // Specifically not if we're in a web worker, or react-native.
		    if (utils.isStandardBrowserEnv()) {
		      // Add xsrf header
		      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
		        cookies.read(config.xsrfCookieName) :
		        undefined;

		      if (xsrfValue) {
		        requestHeaders[config.xsrfHeaderName] = xsrfValue;
		      }
		    }

		    // Add headers to the request
		    if ('setRequestHeader' in request) {
		      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
		        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
		          // Remove Content-Type if data is undefined
		          delete requestHeaders[key];
		        } else {
		          // Otherwise add header to the request
		          request.setRequestHeader(key, val);
		        }
		      });
		    }

		    // Add withCredentials to request if needed
		    if (!utils.isUndefined(config.withCredentials)) {
		      request.withCredentials = !!config.withCredentials;
		    }

		    // Add responseType to request if needed
		    if (responseType && responseType !== 'json') {
		      request.responseType = config.responseType;
		    }

		    // Handle progress if needed
		    if (typeof config.onDownloadProgress === 'function') {
		      request.addEventListener('progress', config.onDownloadProgress);
		    }

		    // Not all browsers support upload events
		    if (typeof config.onUploadProgress === 'function' && request.upload) {
		      request.upload.addEventListener('progress', config.onUploadProgress);
		    }

		    if (config.cancelToken || config.signal) {
		      // Handle cancellation
		      // eslint-disable-next-line func-names
		      onCanceled = function(cancel) {
		        if (!request) {
		          return;
		        }
		        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
		        request.abort();
		        request = null;
		      };

		      config.cancelToken && config.cancelToken.subscribe(onCanceled);
		      if (config.signal) {
		        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
		      }
		    }

		    if (!requestData) {
		      requestData = null;
		    }

		    // Send the request
		    request.send(requestData);
		  });
		};
		return xhr$1;
	}

	var defaults_1;
	var hasRequiredDefaults;

	function requireDefaults () {
		if (hasRequiredDefaults) return defaults_1;
		hasRequiredDefaults = 1;

		var utils = utils$9;
		var normalizeHeaderName$1 = normalizeHeaderName;
		var enhanceError$1 = enhanceError;

		var DEFAULT_CONTENT_TYPE = {
		  'Content-Type': 'application/x-www-form-urlencoded'
		};

		function setContentTypeIfUnset(headers, value) {
		  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
		    headers['Content-Type'] = value;
		  }
		}

		function getDefaultAdapter() {
		  var adapter;
		  if (typeof XMLHttpRequest !== 'undefined') {
		    // For browsers use XHR adapter
		    adapter = requireXhr();
		  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
		    // For node use HTTP adapter
		    adapter = requireXhr();
		  }
		  return adapter;
		}

		function stringifySafely(rawValue, parser, encoder) {
		  if (utils.isString(rawValue)) {
		    try {
		      (parser || JSON.parse)(rawValue);
		      return utils.trim(rawValue);
		    } catch (e) {
		      if (e.name !== 'SyntaxError') {
		        throw e;
		      }
		    }
		  }

		  return (encoder || JSON.stringify)(rawValue);
		}

		var defaults = {

		  transitional: {
		    silentJSONParsing: true,
		    forcedJSONParsing: true,
		    clarifyTimeoutError: false
		  },

		  adapter: getDefaultAdapter(),

		  transformRequest: [function transformRequest(data, headers) {
		    normalizeHeaderName$1(headers, 'Accept');
		    normalizeHeaderName$1(headers, 'Content-Type');

		    if (utils.isFormData(data) ||
		      utils.isArrayBuffer(data) ||
		      utils.isBuffer(data) ||
		      utils.isStream(data) ||
		      utils.isFile(data) ||
		      utils.isBlob(data)
		    ) {
		      return data;
		    }
		    if (utils.isArrayBufferView(data)) {
		      return data.buffer;
		    }
		    if (utils.isURLSearchParams(data)) {
		      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
		      return data.toString();
		    }
		    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
		      setContentTypeIfUnset(headers, 'application/json');
		      return stringifySafely(data);
		    }
		    return data;
		  }],

		  transformResponse: [function transformResponse(data) {
		    var transitional = this.transitional || defaults.transitional;
		    var silentJSONParsing = transitional && transitional.silentJSONParsing;
		    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
		    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

		    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
		      try {
		        return JSON.parse(data);
		      } catch (e) {
		        if (strictJSONParsing) {
		          if (e.name === 'SyntaxError') {
		            throw enhanceError$1(e, this, 'E_JSON_PARSE');
		          }
		          throw e;
		        }
		      }
		    }

		    return data;
		  }],

		  /**
		   * A timeout in milliseconds to abort a request. If set to 0 (default) a
		   * timeout is not created.
		   */
		  timeout: 0,

		  xsrfCookieName: 'XSRF-TOKEN',
		  xsrfHeaderName: 'X-XSRF-TOKEN',

		  maxContentLength: -1,
		  maxBodyLength: -1,

		  validateStatus: function validateStatus(status) {
		    return status >= 200 && status < 300;
		  },

		  headers: {
		    common: {
		      'Accept': 'application/json, text/plain, */*'
		    }
		  }
		};

		utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
		  defaults.headers[method] = {};
		});

		utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
		  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
		});

		defaults_1 = defaults;
		return defaults_1;
	}

	var transformData;
	var hasRequiredTransformData;

	function requireTransformData () {
		if (hasRequiredTransformData) return transformData;
		hasRequiredTransformData = 1;

		var utils = utils$9;
		var defaults = requireDefaults();

		/**
		 * Transform the data for a request or a response
		 *
		 * @param {Object|String} data The data to be transformed
		 * @param {Array} headers The headers for the request or response
		 * @param {Array|Function} fns A single function or Array of functions
		 * @returns {*} The resulting transformed data
		 */
		transformData = function transformData(data, headers, fns) {
		  var context = this || defaults;
		  /*eslint no-param-reassign:0*/
		  utils.forEach(fns, function transform(fn) {
		    data = fn.call(context, data, headers);
		  });

		  return data;
		};
		return transformData;
	}

	var isCancel = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};

	var dispatchRequest$1;
	var hasRequiredDispatchRequest;

	function requireDispatchRequest () {
		if (hasRequiredDispatchRequest) return dispatchRequest$1;
		hasRequiredDispatchRequest = 1;

		var utils = utils$9;
		var transformData = requireTransformData();
		var isCancel$1 = isCancel;
		var defaults = requireDefaults();
		var Cancel = Cancel_1;

		/**
		 * Throws a `Cancel` if cancellation has been requested.
		 */
		function throwIfCancellationRequested(config) {
		  if (config.cancelToken) {
		    config.cancelToken.throwIfRequested();
		  }

		  if (config.signal && config.signal.aborted) {
		    throw new Cancel('canceled');
		  }
		}

		/**
		 * Dispatch a request to the server using the configured adapter.
		 *
		 * @param {object} config The config that is to be used for the request
		 * @returns {Promise} The Promise to be fulfilled
		 */
		dispatchRequest$1 = function dispatchRequest(config) {
		  throwIfCancellationRequested(config);

		  // Ensure headers exist
		  config.headers = config.headers || {};

		  // Transform request data
		  config.data = transformData.call(
		    config,
		    config.data,
		    config.headers,
		    config.transformRequest
		  );

		  // Flatten headers
		  config.headers = utils.merge(
		    config.headers.common || {},
		    config.headers[config.method] || {},
		    config.headers
		  );

		  utils.forEach(
		    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
		    function cleanHeaderConfig(method) {
		      delete config.headers[method];
		    }
		  );

		  var adapter = config.adapter || defaults.adapter;

		  return adapter(config).then(function onAdapterResolution(response) {
		    throwIfCancellationRequested(config);

		    // Transform response data
		    response.data = transformData.call(
		      config,
		      response.data,
		      response.headers,
		      config.transformResponse
		    );

		    return response;
		  }, function onAdapterRejection(reason) {
		    if (!isCancel$1(reason)) {
		      throwIfCancellationRequested(config);

		      // Transform response data
		      if (reason && reason.response) {
		        reason.response.data = transformData.call(
		          config,
		          reason.response.data,
		          reason.response.headers,
		          config.transformResponse
		        );
		      }
		    }

		    return Promise.reject(reason);
		  });
		};
		return dispatchRequest$1;
	}

	var utils$5 = utils$9;

	/**
	 * Config-specific merge-function which creates a new config-object
	 * by merging two configuration objects together.
	 *
	 * @param {Object} config1
	 * @param {Object} config2
	 * @returns {Object} New object resulting from merging config2 to config1
	 */
	var mergeConfig$2 = function mergeConfig(config1, config2) {
	  // eslint-disable-next-line no-param-reassign
	  config2 = config2 || {};
	  var config = {};

	  function getMergedValue(target, source) {
	    if (utils$5.isPlainObject(target) && utils$5.isPlainObject(source)) {
	      return utils$5.merge(target, source);
	    } else if (utils$5.isPlainObject(source)) {
	      return utils$5.merge({}, source);
	    } else if (utils$5.isArray(source)) {
	      return source.slice();
	    }
	    return source;
	  }

	  // eslint-disable-next-line consistent-return
	  function mergeDeepProperties(prop) {
	    if (!utils$5.isUndefined(config2[prop])) {
	      return getMergedValue(config1[prop], config2[prop]);
	    } else if (!utils$5.isUndefined(config1[prop])) {
	      return getMergedValue(undefined, config1[prop]);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function valueFromConfig2(prop) {
	    if (!utils$5.isUndefined(config2[prop])) {
	      return getMergedValue(undefined, config2[prop]);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function defaultToConfig2(prop) {
	    if (!utils$5.isUndefined(config2[prop])) {
	      return getMergedValue(undefined, config2[prop]);
	    } else if (!utils$5.isUndefined(config1[prop])) {
	      return getMergedValue(undefined, config1[prop]);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function mergeDirectKeys(prop) {
	    if (prop in config2) {
	      return getMergedValue(config1[prop], config2[prop]);
	    } else if (prop in config1) {
	      return getMergedValue(undefined, config1[prop]);
	    }
	  }

	  var mergeMap = {
	    'url': valueFromConfig2,
	    'method': valueFromConfig2,
	    'data': valueFromConfig2,
	    'baseURL': defaultToConfig2,
	    'transformRequest': defaultToConfig2,
	    'transformResponse': defaultToConfig2,
	    'paramsSerializer': defaultToConfig2,
	    'timeout': defaultToConfig2,
	    'timeoutMessage': defaultToConfig2,
	    'withCredentials': defaultToConfig2,
	    'adapter': defaultToConfig2,
	    'responseType': defaultToConfig2,
	    'xsrfCookieName': defaultToConfig2,
	    'xsrfHeaderName': defaultToConfig2,
	    'onUploadProgress': defaultToConfig2,
	    'onDownloadProgress': defaultToConfig2,
	    'decompress': defaultToConfig2,
	    'maxContentLength': defaultToConfig2,
	    'maxBodyLength': defaultToConfig2,
	    'transport': defaultToConfig2,
	    'httpAgent': defaultToConfig2,
	    'httpsAgent': defaultToConfig2,
	    'cancelToken': defaultToConfig2,
	    'socketPath': defaultToConfig2,
	    'responseEncoding': defaultToConfig2,
	    'validateStatus': mergeDirectKeys
	  };

	  utils$5.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
	    var merge = mergeMap[prop] || mergeDeepProperties;
	    var configValue = merge(prop);
	    (utils$5.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
	  });

	  return config;
	};

	var data = {
	  "version": "0.25.0"
	};

	var VERSION = data.version;

	var validators$1 = {};

	// eslint-disable-next-line func-names
	['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
	  validators$1[type] = function validator(thing) {
	    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
	  };
	});

	var deprecatedWarnings = {};

	/**
	 * Transitional option validator
	 * @param {function|boolean?} validator - set to false if the transitional option has been removed
	 * @param {string?} version - deprecated version / removed since version
	 * @param {string?} message - some message with additional info
	 * @returns {function}
	 */
	validators$1.transitional = function transitional(validator, version, message) {
	  function formatMessage(opt, desc) {
	    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
	  }

	  // eslint-disable-next-line func-names
	  return function(value, opt, opts) {
	    if (validator === false) {
	      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
	    }

	    if (version && !deprecatedWarnings[opt]) {
	      deprecatedWarnings[opt] = true;
	      // eslint-disable-next-line no-console
	      console.warn(
	        formatMessage(
	          opt,
	          ' has been deprecated since v' + version + ' and will be removed in the near future'
	        )
	      );
	    }

	    return validator ? validator(value, opt, opts) : true;
	  };
	};

	/**
	 * Assert object's properties type
	 * @param {object} options
	 * @param {object} schema
	 * @param {boolean?} allowUnknown
	 */

	function assertOptions(options, schema, allowUnknown) {
	  if (typeof options !== 'object') {
	    throw new TypeError('options must be an object');
	  }
	  var keys = Object.keys(options);
	  var i = keys.length;
	  while (i-- > 0) {
	    var opt = keys[i];
	    var validator = schema[opt];
	    if (validator) {
	      var value = options[opt];
	      var result = value === undefined || validator(value, opt, options);
	      if (result !== true) {
	        throw new TypeError('option ' + opt + ' must be ' + result);
	      }
	      continue;
	    }
	    if (allowUnknown !== true) {
	      throw Error('Unknown option ' + opt);
	    }
	  }
	}

	var validator$1 = {
	  assertOptions: assertOptions,
	  validators: validators$1
	};

	var utils$4 = utils$9;
	var buildURL = buildURL$1;
	var InterceptorManager = InterceptorManager_1;
	var dispatchRequest = requireDispatchRequest();
	var mergeConfig$1 = mergeConfig$2;
	var validator = validator$1;

	var validators = validator.validators;
	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios$1(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}

	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios$1.prototype.request = function request(configOrUrl, config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof configOrUrl === 'string') {
	    config = config || {};
	    config.url = configOrUrl;
	  } else {
	    config = configOrUrl || {};
	  }

	  if (!config.url) {
	    throw new Error('Provided config url is not valid');
	  }

	  config = mergeConfig$1(this.defaults, config);

	  // Set config.method
	  if (config.method) {
	    config.method = config.method.toLowerCase();
	  } else if (this.defaults.method) {
	    config.method = this.defaults.method.toLowerCase();
	  } else {
	    config.method = 'get';
	  }

	  var transitional = config.transitional;

	  if (transitional !== undefined) {
	    validator.assertOptions(transitional, {
	      silentJSONParsing: validators.transitional(validators.boolean),
	      forcedJSONParsing: validators.transitional(validators.boolean),
	      clarifyTimeoutError: validators.transitional(validators.boolean)
	    }, false);
	  }

	  // filter out skipped interceptors
	  var requestInterceptorChain = [];
	  var synchronousRequestInterceptors = true;
	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
	      return;
	    }

	    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

	    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  var responseInterceptorChain = [];
	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  var promise;

	  if (!synchronousRequestInterceptors) {
	    var chain = [dispatchRequest, undefined];

	    Array.prototype.unshift.apply(chain, requestInterceptorChain);
	    chain = chain.concat(responseInterceptorChain);

	    promise = Promise.resolve(config);
	    while (chain.length) {
	      promise = promise.then(chain.shift(), chain.shift());
	    }

	    return promise;
	  }


	  var newConfig = config;
	  while (requestInterceptorChain.length) {
	    var onFulfilled = requestInterceptorChain.shift();
	    var onRejected = requestInterceptorChain.shift();
	    try {
	      newConfig = onFulfilled(newConfig);
	    } catch (error) {
	      onRejected(error);
	      break;
	    }
	  }

	  try {
	    promise = dispatchRequest(newConfig);
	  } catch (error) {
	    return Promise.reject(error);
	  }

	  while (responseInterceptorChain.length) {
	    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
	  }

	  return promise;
	};

	Axios$1.prototype.getUri = function getUri(config) {
	  if (!config.url) {
	    throw new Error('Provided config url is not valid');
	  }
	  config = mergeConfig$1(this.defaults, config);
	  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
	};

	// Provide aliases for supported request methods
	utils$4.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios$1.prototype[method] = function(url, config) {
	    return this.request(mergeConfig$1(config || {}, {
	      method: method,
	      url: url,
	      data: (config || {}).data
	    }));
	  };
	});

	utils$4.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios$1.prototype[method] = function(url, data, config) {
	    return this.request(mergeConfig$1(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});

	var Axios_1 = Axios$1;

	var Cancel = Cancel_1;

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }

	  var resolvePromise;

	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });

	  var token = this;

	  // eslint-disable-next-line func-names
	  this.promise.then(function(cancel) {
	    if (!token._listeners) return;

	    var i;
	    var l = token._listeners.length;

	    for (i = 0; i < l; i++) {
	      token._listeners[i](cancel);
	    }
	    token._listeners = null;
	  });

	  // eslint-disable-next-line func-names
	  this.promise.then = function(onfulfilled) {
	    var _resolve;
	    // eslint-disable-next-line func-names
	    var promise = new Promise(function(resolve) {
	      token.subscribe(resolve);
	      _resolve = resolve;
	    }).then(onfulfilled);

	    promise.cancel = function reject() {
	      token.unsubscribe(_resolve);
	    };

	    return promise;
	  };

	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }

	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};

	/**
	 * Subscribe to the cancel signal
	 */

	CancelToken.prototype.subscribe = function subscribe(listener) {
	  if (this.reason) {
	    listener(this.reason);
	    return;
	  }

	  if (this._listeners) {
	    this._listeners.push(listener);
	  } else {
	    this._listeners = [listener];
	  }
	};

	/**
	 * Unsubscribe from the cancel signal
	 */

	CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
	  if (!this._listeners) {
	    return;
	  }
	  var index = this._listeners.indexOf(listener);
	  if (index !== -1) {
	    this._listeners.splice(index, 1);
	  }
	};

	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};

	var CancelToken_1 = CancelToken;

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	var spread = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};

	var utils$3 = utils$9;

	/**
	 * Determines whether the payload is an error thrown by Axios
	 *
	 * @param {*} payload The value to test
	 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
	 */
	var isAxiosError = function isAxiosError(payload) {
	  return utils$3.isObject(payload) && (payload.isAxiosError === true);
	};

	var utils$2 = utils$9;
	var bind = bind$2;
	var Axios = Axios_1;
	var mergeConfig = mergeConfig$2;
	var defaults = requireDefaults();

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils$2.extend(instance, Axios.prototype, context);

	  // Copy context to instance
	  utils$2.extend(instance, context);

	  // Factory for creating new instances
	  instance.create = function create(instanceConfig) {
	    return createInstance(mergeConfig(defaultConfig, instanceConfig));
	  };

	  return instance;
	}

	// Create the default instance to be exported
	var axios$1 = createInstance(defaults);

	// Expose Axios class to allow class inheritance
	axios$1.Axios = Axios;

	// Expose Cancel & CancelToken
	axios$1.Cancel = Cancel_1;
	axios$1.CancelToken = CancelToken_1;
	axios$1.isCancel = isCancel;
	axios$1.VERSION = data.version;

	// Expose all/spread
	axios$1.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios$1.spread = spread;

	// Expose isAxiosError
	axios$1.isAxiosError = isAxiosError;

	axios$2.exports = axios$1;

	// Allow use of default import syntax in TypeScript
	axios$2.exports.default = axios$1;

	var axios = axios$2.exports;

	var TextField$3 = {};

	var TextField$2 = {};

	var Input$2 = {};

	var Input$1 = {};

	var InputBase$2 = {};

	var InputBase$1 = {};

	var formControlState$1 = {};

	Object.defineProperty(formControlState$1, "__esModule", {
	  value: true
	});
	formControlState$1.default = formControlState;

	function formControlState({
	  props,
	  states,
	  muiFormControl
	}) {
	  return states.reduce((acc, state) => {
	    acc[state] = props[state];

	    if (muiFormControl) {
	      if (typeof props[state] === 'undefined') {
	        acc[state] = muiFormControl[state];
	      }
	    }

	    return acc;
	  }, {});
	}

	var utils$1 = {};

	Object.defineProperty(utils$1, "__esModule", {
	  value: true
	});
	utils$1.hasValue = hasValue;
	utils$1.isAdornedStart = isAdornedStart;
	utils$1.isFilled = isFilled;

	// Supports determination of isControlled().
	// Controlled input accepts its current value as a prop.
	//
	// @see https://facebook.github.io/react/docs/forms.html#controlled-components
	// @param value
	// @returns {boolean} true if string (including '') or number (including zero)
	function hasValue(value) {
	  return value != null && !(Array.isArray(value) && value.length === 0);
	} // Determine if field is empty or filled.
	// Response determines if label is presented above field or as placeholder.
	//
	// @param obj
	// @param SSR
	// @returns {boolean} False when not present or empty string.
	//                    True when any number or string with length.


	function isFilled(obj, SSR = false) {
	  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
	} // Determine if an Input is adorned on start.
	// It's corresponding to the left with LTR.
	//
	// @param obj
	// @returns {boolean} False when no adornments.
	//                    True when adorned at the start.


	function isAdornedStart(obj) {
	  return obj.startAdornment;
	}

	var inputBaseClasses$1 = {};

	Object.defineProperty(inputBaseClasses$1, "__esModule", {
	  value: true
	});
	inputBaseClasses$1.default = void 0;
	inputBaseClasses$1.getInputBaseUtilityClass = getInputBaseUtilityClass;

	var _base$o = node$1;

	function getInputBaseUtilityClass(slot) {
	  return (0, _base$o.generateUtilityClass)('MuiInputBase', slot);
	}

	const inputBaseClasses = (0, _base$o.generateUtilityClasses)('MuiInputBase', ['root', 'formControl', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'colorSecondary', 'fullWidth', 'hiddenLabel', 'input', 'inputSizeSmall', 'inputMultiline', 'inputTypeSearch', 'inputAdornedStart', 'inputAdornedEnd', 'inputHiddenLabel']);
	var _default$s = inputBaseClasses;
	inputBaseClasses$1.default = _default$s;

	var _interopRequireDefault$g = interopRequireDefault.exports;

	Object.defineProperty(InputBase$1, "__esModule", {
	  value: true
	});
	InputBase$1.rootOverridesResolver = InputBase$1.inputOverridesResolver = InputBase$1.default = InputBase$1.InputBaseRoot = InputBase$1.InputBaseComponent = void 0;

	var _objectWithoutPropertiesLoose2$f = _interopRequireDefault$g(objectWithoutPropertiesLoose.exports);

	var _extends2$f = _interopRequireDefault$g(_extends$5.exports);

	var _utils$b = utils$h;

	var React$f = _interopRequireWildcard$g(require$$3);

	var _propTypes$f = _interopRequireDefault$g(propTypes.exports);

	var _clsx$9 = _interopRequireDefault$g(clsx$1);

	var _base$n = node$1;

	var _formControlState$5 = _interopRequireDefault$g(formControlState$1);

	var _FormControlContext$1 = _interopRequireDefault$g(FormControlContext$1);

	var _useFormControl$5 = _interopRequireDefault$g(useFormControl$1);

	var _styled$d = _interopRequireDefault$g(styled$1);

	var _useThemeProps$b = _interopRequireDefault$g(useThemeProps$1);

	var _capitalize$6 = _interopRequireDefault$g(capitalize);

	var _useForkRef$3 = _interopRequireDefault$g(useForkRef);

	var _useEnhancedEffect$1 = _interopRequireDefault$g(useEnhancedEffect$1);

	var _GlobalStyles = _interopRequireDefault$g(GlobalStyles$3);

	var _utils2$1 = utils$1;

	var _inputBaseClasses = _interopRequireWildcard$g(inputBaseClasses$1);

	var _jsxRuntime$g = jsxRuntime;

	const _excluded$f = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "startAdornment", "type", "value"];

	function _getRequireWildcardCache$g(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$g = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$g(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$g(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const rootOverridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.formControl && styles.formControl, ownerState.startAdornment && styles.adornedStart, ownerState.endAdornment && styles.adornedEnd, ownerState.error && styles.error, ownerState.size === 'small' && styles.sizeSmall, ownerState.multiline && styles.multiline, ownerState.color && styles[`color${(0, _capitalize$6.default)(ownerState.color)}`], ownerState.fullWidth && styles.fullWidth, ownerState.hiddenLabel && styles.hiddenLabel];
	};

	InputBase$1.rootOverridesResolver = rootOverridesResolver;

	const inputOverridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.input, ownerState.size === 'small' && styles.inputSizeSmall, ownerState.multiline && styles.inputMultiline, ownerState.type === 'search' && styles.inputTypeSearch, ownerState.startAdornment && styles.inputAdornedStart, ownerState.endAdornment && styles.inputAdornedEnd, ownerState.hiddenLabel && styles.inputHiddenLabel];
	};

	InputBase$1.inputOverridesResolver = inputOverridesResolver;

	const useUtilityClasses$c = ownerState => {
	  const {
	    classes,
	    color,
	    disabled,
	    error,
	    endAdornment,
	    focused,
	    formControl,
	    fullWidth,
	    hiddenLabel,
	    multiline,
	    size,
	    startAdornment,
	    type
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${(0, _capitalize$6.default)(color)}`, disabled && 'disabled', error && 'error', fullWidth && 'fullWidth', focused && 'focused', formControl && 'formControl', size === 'small' && 'sizeSmall', multiline && 'multiline', startAdornment && 'adornedStart', endAdornment && 'adornedEnd', hiddenLabel && 'hiddenLabel'],
	    input: ['input', disabled && 'disabled', type === 'search' && 'inputTypeSearch', multiline && 'inputMultiline', size === 'small' && 'inputSizeSmall', hiddenLabel && 'inputHiddenLabel', startAdornment && 'inputAdornedStart', endAdornment && 'inputAdornedEnd']
	  };
	  return (0, _base$n.unstable_composeClasses)(slots, _inputBaseClasses.getInputBaseUtilityClass, classes);
	};

	const InputBaseRoot = (0, _styled$d.default)('div', {
	  name: 'MuiInputBase',
	  slot: 'Root',
	  overridesResolver: rootOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$f.default)({}, theme.typography.body1, {
	  color: theme.palette.text.primary,
	  lineHeight: '1.4375em',
	  // 23px
	  boxSizing: 'border-box',
	  // Prevent padding issue with fullWidth.
	  position: 'relative',
	  cursor: 'text',
	  display: 'inline-flex',
	  alignItems: 'center',
	  [`&.${_inputBaseClasses.default.disabled}`]: {
	    color: theme.palette.text.disabled,
	    cursor: 'default'
	  }
	}, ownerState.multiline && (0, _extends2$f.default)({
	  padding: '4px 0 5px'
	}, ownerState.size === 'small' && {
	  paddingTop: 1
	}), ownerState.fullWidth && {
	  width: '100%'
	}));
	InputBase$1.InputBaseRoot = InputBaseRoot;
	const InputBaseComponent = (0, _styled$d.default)('input', {
	  name: 'MuiInputBase',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => {
	  const light = theme.palette.mode === 'light';
	  const placeholder = {
	    color: 'currentColor',
	    opacity: light ? 0.42 : 0.5,
	    transition: theme.transitions.create('opacity', {
	      duration: theme.transitions.duration.shorter
	    })
	  };
	  const placeholderHidden = {
	    opacity: '0 !important'
	  };
	  const placeholderVisible = {
	    opacity: light ? 0.42 : 0.5
	  };
	  return (0, _extends2$f.default)({
	    font: 'inherit',
	    letterSpacing: 'inherit',
	    color: 'currentColor',
	    padding: '4px 0 5px',
	    border: 0,
	    boxSizing: 'content-box',
	    background: 'none',
	    height: '1.4375em',
	    // Reset 23pxthe native input line-height
	    margin: 0,
	    // Reset for Safari
	    WebkitTapHighlightColor: 'transparent',
	    display: 'block',
	    // Make the flex item shrink with Firefox
	    minWidth: 0,
	    width: '100%',
	    // Fix IE11 width issue
	    animationName: 'mui-auto-fill-cancel',
	    animationDuration: '10ms',
	    '&::-webkit-input-placeholder': placeholder,
	    '&::-moz-placeholder': placeholder,
	    // Firefox 19+
	    '&:-ms-input-placeholder': placeholder,
	    // IE11
	    '&::-ms-input-placeholder': placeholder,
	    // Edge
	    '&:focus': {
	      outline: 0
	    },
	    // Reset Firefox invalid required input style
	    '&:invalid': {
	      boxShadow: 'none'
	    },
	    '&::-webkit-search-decoration': {
	      // Remove the padding when type=search.
	      WebkitAppearance: 'none'
	    },
	    // Show and hide the placeholder logic
	    [`label[data-shrink=false] + .${_inputBaseClasses.default.formControl} &`]: {
	      '&::-webkit-input-placeholder': placeholderHidden,
	      '&::-moz-placeholder': placeholderHidden,
	      // Firefox 19+
	      '&:-ms-input-placeholder': placeholderHidden,
	      // IE11
	      '&::-ms-input-placeholder': placeholderHidden,
	      // Edge
	      '&:focus::-webkit-input-placeholder': placeholderVisible,
	      '&:focus::-moz-placeholder': placeholderVisible,
	      // Firefox 19+
	      '&:focus:-ms-input-placeholder': placeholderVisible,
	      // IE11
	      '&:focus::-ms-input-placeholder': placeholderVisible // Edge

	    },
	    [`&.${_inputBaseClasses.default.disabled}`]: {
	      opacity: 1,
	      // Reset iOS opacity
	      WebkitTextFillColor: theme.palette.text.disabled // Fix opacity Safari bug

	    },
	    '&:-webkit-autofill': {
	      animationDuration: '5000s',
	      animationName: 'mui-auto-fill'
	    }
	  }, ownerState.size === 'small' && {
	    paddingTop: 1
	  }, ownerState.multiline && {
	    height: 'auto',
	    resize: 'none',
	    padding: 0,
	    paddingTop: 0
	  }, ownerState.type === 'search' && {
	    // Improve type search style.
	    MozAppearance: 'textfield'
	  });
	});
	InputBase$1.InputBaseComponent = InputBaseComponent;
	const inputGlobalStyles = /*#__PURE__*/(0, _jsxRuntime$g.jsx)(_GlobalStyles.default, {
	  styles: {
	    '@keyframes mui-auto-fill': {
	      from: {
	        display: 'block'
	      }
	    },
	    '@keyframes mui-auto-fill-cancel': {
	      from: {
	        display: 'block'
	      }
	    }
	  }
	});
	/**
	 * `InputBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating an input.
	 * It contains a load of style reset and some state logic.
	 */

	const InputBase = /*#__PURE__*/React$f.forwardRef(function InputBase(inProps, ref) {
	  const props = (0, _useThemeProps$b.default)({
	    props: inProps,
	    name: 'MuiInputBase'
	  });
	  const {
	    'aria-describedby': ariaDescribedby,
	    autoComplete,
	    autoFocus,
	    className,
	    components = {},
	    componentsProps = {},
	    defaultValue,
	    disabled,
	    disableInjectingGlobalStyles,
	    endAdornment,
	    fullWidth = false,
	    id,
	    inputComponent = 'input',
	    inputProps: inputPropsProp = {},
	    inputRef: inputRefProp,
	    maxRows,
	    minRows,
	    multiline = false,
	    name,
	    onBlur,
	    onChange,
	    onClick,
	    onFocus,
	    onKeyDown,
	    onKeyUp,
	    placeholder,
	    readOnly,
	    renderSuffix,
	    rows,
	    startAdornment,
	    type = 'text',
	    value: valueProp
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$f.default)(props, _excluded$f);
	  const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
	  const {
	    current: isControlled
	  } = React$f.useRef(value != null);
	  const inputRef = React$f.useRef();
	  const handleInputRefWarning = React$f.useCallback(instance => {
	    {
	      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
	        console.error(['MUI: You have provided a `inputComponent` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\n'));
	      }
	    }
	  }, []);
	  const handleInputPropsRefProp = (0, _useForkRef$3.default)(inputPropsProp.ref, handleInputRefWarning);
	  const handleInputRefProp = (0, _useForkRef$3.default)(inputRefProp, handleInputPropsRefProp);
	  const handleInputRef = (0, _useForkRef$3.default)(inputRef, handleInputRefProp);
	  const [focused, setFocused] = React$f.useState(false);
	  const muiFormControl = (0, _useFormControl$5.default)();

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React$f.useEffect(() => {
	      if (muiFormControl) {
	        return muiFormControl.registerEffect();
	      }

	      return undefined;
	    }, [muiFormControl]);
	  }

	  const fcs = (0, _formControlState$5.default)({
	    props,
	    muiFormControl,
	    states: ['color', 'disabled', 'error', 'hiddenLabel', 'size', 'required', 'filled']
	  });
	  fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.
	  // We need to book keep the focused state manually.

	  React$f.useEffect(() => {
	    if (!muiFormControl && disabled && focused) {
	      setFocused(false);

	      if (onBlur) {
	        onBlur();
	      }
	    }
	  }, [muiFormControl, disabled, focused, onBlur]);
	  const onFilled = muiFormControl && muiFormControl.onFilled;
	  const onEmpty = muiFormControl && muiFormControl.onEmpty;
	  const checkDirty = React$f.useCallback(obj => {
	    if ((0, _utils2$1.isFilled)(obj)) {
	      if (onFilled) {
	        onFilled();
	      }
	    } else if (onEmpty) {
	      onEmpty();
	    }
	  }, [onFilled, onEmpty]);
	  (0, _useEnhancedEffect$1.default)(() => {
	    if (isControlled) {
	      checkDirty({
	        value
	      });
	    }
	  }, [value, checkDirty, isControlled]);

	  const handleFocus = event => {
	    // Fix a bug with IE11 where the focus/blur events are triggered
	    // while the component is disabled.
	    if (fcs.disabled) {
	      event.stopPropagation();
	      return;
	    }

	    if (onFocus) {
	      onFocus(event);
	    }

	    if (inputPropsProp.onFocus) {
	      inputPropsProp.onFocus(event);
	    }

	    if (muiFormControl && muiFormControl.onFocus) {
	      muiFormControl.onFocus(event);
	    } else {
	      setFocused(true);
	    }
	  };

	  const handleBlur = event => {
	    if (onBlur) {
	      onBlur(event);
	    }

	    if (inputPropsProp.onBlur) {
	      inputPropsProp.onBlur(event);
	    }

	    if (muiFormControl && muiFormControl.onBlur) {
	      muiFormControl.onBlur(event);
	    } else {
	      setFocused(false);
	    }
	  };

	  const handleChange = (event, ...args) => {
	    if (!isControlled) {
	      const element = event.target || inputRef.current;

	      if (element == null) {
	        throw new Error(`MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` );
	      }

	      checkDirty({
	        value: element.value
	      });
	    }

	    if (inputPropsProp.onChange) {
	      inputPropsProp.onChange(event, ...args);
	    } // Perform in the willUpdate


	    if (onChange) {
	      onChange(event, ...args);
	    }
	  }; // Check the input state on mount, in case it was filled by the user
	  // or auto filled by the browser before the hydration (for SSR).


	  React$f.useEffect(() => {
	    checkDirty(inputRef.current); // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);

	  const handleClick = event => {
	    if (inputRef.current && event.currentTarget === event.target) {
	      inputRef.current.focus();
	    }

	    if (onClick) {
	      onClick(event);
	    }
	  };

	  let InputComponent = inputComponent;
	  let inputProps = inputPropsProp;

	  if (multiline && InputComponent === 'input') {
	    if (rows) {
	      {
	        if (minRows || maxRows) {
	          console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
	        }
	      }

	      inputProps = (0, _extends2$f.default)({
	        type: undefined,
	        minRows: rows,
	        maxRows: rows
	      }, inputProps);
	    } else {
	      inputProps = (0, _extends2$f.default)({
	        type: undefined,
	        maxRows,
	        minRows
	      }, inputProps);
	    }

	    InputComponent = _base$n.TextareaAutosize;
	  }

	  const handleAutoFill = event => {
	    // Provide a fake value as Chrome might not let you access it for security reasons.
	    checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
	      value: 'x'
	    });
	  };

	  React$f.useEffect(() => {
	    if (muiFormControl) {
	      muiFormControl.setAdornedStart(Boolean(startAdornment));
	    }
	  }, [muiFormControl, startAdornment]);
	  const ownerState = (0, _extends2$f.default)({}, props, {
	    color: fcs.color || 'primary',
	    disabled: fcs.disabled,
	    endAdornment,
	    error: fcs.error,
	    focused: fcs.focused,
	    formControl: muiFormControl,
	    fullWidth,
	    hiddenLabel: fcs.hiddenLabel,
	    multiline,
	    size: fcs.size,
	    startAdornment,
	    type
	  });
	  const classes = useUtilityClasses$c(ownerState);
	  const Root = components.Root || InputBaseRoot;
	  const rootProps = componentsProps.root || {};
	  const Input = components.Input || InputBaseComponent;
	  inputProps = (0, _extends2$f.default)({}, inputProps, componentsProps.input);
	  return /*#__PURE__*/(0, _jsxRuntime$g.jsxs)(React$f.Fragment, {
	    children: [!disableInjectingGlobalStyles && inputGlobalStyles, /*#__PURE__*/(0, _jsxRuntime$g.jsxs)(Root, (0, _extends2$f.default)({}, rootProps, !(0, _base$n.isHostComponent)(Root) && {
	      ownerState: (0, _extends2$f.default)({}, ownerState, rootProps.ownerState)
	    }, {
	      ref: ref,
	      onClick: handleClick
	    }, other, {
	      className: (0, _clsx$9.default)(classes.root, rootProps.className, className),
	      children: [startAdornment, /*#__PURE__*/(0, _jsxRuntime$g.jsx)(_FormControlContext$1.default.Provider, {
	        value: null,
	        children: /*#__PURE__*/(0, _jsxRuntime$g.jsx)(Input, (0, _extends2$f.default)({
	          ownerState: ownerState,
	          "aria-invalid": fcs.error,
	          "aria-describedby": ariaDescribedby,
	          autoComplete: autoComplete,
	          autoFocus: autoFocus,
	          defaultValue: defaultValue,
	          disabled: fcs.disabled,
	          id: id,
	          onAnimationStart: handleAutoFill,
	          name: name,
	          placeholder: placeholder,
	          readOnly: readOnly,
	          required: fcs.required,
	          rows: rows,
	          value: value,
	          onKeyDown: onKeyDown,
	          onKeyUp: onKeyUp,
	          type: type
	        }, inputProps, !(0, _base$n.isHostComponent)(Input) && {
	          as: InputComponent,
	          ownerState: (0, _extends2$f.default)({}, ownerState, inputProps.ownerState)
	        }, {
	          ref: handleInputRef,
	          className: (0, _clsx$9.default)(classes.input, inputProps.className),
	          onBlur: handleBlur,
	          onChange: handleChange,
	          onFocus: handleFocus
	        }))
	      }), endAdornment, renderSuffix ? renderSuffix((0, _extends2$f.default)({}, fcs, {
	        startAdornment
	      })) : null]
	    }))]
	  });
	});
	InputBase.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  'aria-describedby': _propTypes$f.default.string,

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: _propTypes$f.default.string,

	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   */
	  autoFocus: _propTypes$f.default.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$f.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$f.default.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
	   */
	  color: _propTypes$f.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$f.default.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), _propTypes$f.default.string]),

	  /**
	   * The components used for each slot inside the InputBase.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$f.default.shape({
	    Input: _propTypes$f.default.elementType,
	    Root: _propTypes$f.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: _propTypes$f.default.shape({
	    input: _propTypes$f.default.object,
	    root: _propTypes$f.default.object
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: _propTypes$f.default.any,

	  /**
	   * If `true`, the component is disabled.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  disabled: _propTypes$f.default.bool,

	  /**
	   * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
	   * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
	   * @default false
	   */
	  disableInjectingGlobalStyles: _propTypes$f.default.bool,

	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: _propTypes$f.default.node,

	  /**
	   * If `true`, the `input` will indicate an error.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  error: _propTypes$f.default.bool,

	  /**
	   * If `true`, the `input` will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: _propTypes$f.default.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: _propTypes$f.default.string,

	  /**
	   * The component used for the `input` element.
	   * Either a string to use a HTML element or a component.
	   * @default 'input'
	   */
	  inputComponent: _utils$b.elementTypeAcceptingRef,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   * @default {}
	   */
	  inputProps: _propTypes$f.default.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: _utils$b.refType,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
	   */
	  margin: _propTypes$f.default.oneOf(['dense', 'none']),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  maxRows: _propTypes$f.default.oneOfType([_propTypes$f.default.number, _propTypes$f.default.string]),

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  minRows: _propTypes$f.default.oneOfType([_propTypes$f.default.number, _propTypes$f.default.string]),

	  /**
	   * If `true`, a `textarea` element is rendered.
	   * @default false
	   */
	  multiline: _propTypes$f.default.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: _propTypes$f.default.string,

	  /**
	   * Callback fired when the `input` is blurred.
	   *
	   * Notice that the first argument (event) might be undefined.
	   */
	  onBlur: _propTypes$f.default.func,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: _propTypes$f.default.func,

	  /**
	   * @ignore
	   */
	  onClick: _propTypes$f.default.func,

	  /**
	   * @ignore
	   */
	  onFocus: _propTypes$f.default.func,

	  /**
	   * @ignore
	   */
	  onKeyDown: _propTypes$f.default.func,

	  /**
	   * @ignore
	   */
	  onKeyUp: _propTypes$f.default.func,

	  /**
	   * The short hint displayed in the `input` before the user enters a value.
	   */
	  placeholder: _propTypes$f.default.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: _propTypes$f.default.bool,

	  /**
	   * @ignore
	   */
	  renderSuffix: _propTypes$f.default.func,

	  /**
	   * If `true`, the `input` element is required.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  required: _propTypes$f.default.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: _propTypes$f.default.oneOfType([_propTypes$f.default.number, _propTypes$f.default.string]),

	  /**
	   * The size of the component.
	   */
	  size: _propTypes$f.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$f.default.oneOf(['medium', 'small']), _propTypes$f.default.string]),

	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: _propTypes$f.default.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$f.default.oneOfType([_propTypes$f.default.arrayOf(_propTypes$f.default.oneOfType([_propTypes$f.default.func, _propTypes$f.default.object, _propTypes$f.default.bool])), _propTypes$f.default.func, _propTypes$f.default.object]),

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   * @default 'text'
	   */
	  type: _propTypes$f.default.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: _propTypes$f.default.any
	} ;
	var _default$r = InputBase;
	InputBase$1.default = _default$r;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  inputBaseClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _InputBase.default;
		  }
		});
		Object.defineProperty(exports, "inputBaseClasses", {
		  enumerable: true,
		  get: function () {
		    return _inputBaseClasses.default;
		  }
		});

		var _InputBase = _interopRequireDefault(InputBase$1);

		var _inputBaseClasses = _interopRequireWildcard(inputBaseClasses$1);

		Object.keys(_inputBaseClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _inputBaseClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _inputBaseClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (InputBase$2));

	var inputClasses$1 = {};

	Object.defineProperty(inputClasses$1, "__esModule", {
	  value: true
	});
	inputClasses$1.default = void 0;
	inputClasses$1.getInputUtilityClass = getInputUtilityClass;

	var _base$m = node$1;

	function getInputUtilityClass(slot) {
	  return (0, _base$m.generateUtilityClass)('MuiInput', slot);
	}

	const inputClasses = (0, _base$m.generateUtilityClasses)('MuiInput', ['root', 'formControl', 'focused', 'disabled', 'colorSecondary', 'underline', 'error', 'sizeSmall', 'multiline', 'fullWidth', 'input', 'inputSizeSmall', 'inputMultiline', 'inputTypeSearch']);
	var _default$q = inputClasses;
	inputClasses$1.default = _default$q;

	var _interopRequireDefault$f = interopRequireDefault.exports;

	Object.defineProperty(Input$1, "__esModule", {
	  value: true
	});
	Input$1.default = void 0;

	var _objectWithoutPropertiesLoose2$e = _interopRequireDefault$f(objectWithoutPropertiesLoose.exports);

	var _extends2$e = _interopRequireDefault$f(_extends$5.exports);

	var React$e = _interopRequireWildcard$f(require$$3);

	var _propTypes$e = _interopRequireDefault$f(propTypes.exports);

	var _base$l = node$1;

	var _utils$a = utils$h;

	var _InputBase$2 = _interopRequireDefault$f(InputBase$2);

	var _styled$c = _interopRequireWildcard$f(styled$1);

	var _useThemeProps$a = _interopRequireDefault$f(useThemeProps$1);

	var _inputClasses = _interopRequireWildcard$f(inputClasses$1);

	var _InputBase2$1 = InputBase$1;

	var _jsxRuntime$f = jsxRuntime;

	const _excluded$e = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "type"];

	function _getRequireWildcardCache$f(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$f = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$f(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$f(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$b = ownerState => {
	  const {
	    classes,
	    disableUnderline
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableUnderline && 'underline'],
	    input: ['input']
	  };
	  const composedClasses = (0, _base$l.unstable_composeClasses)(slots, _inputClasses.getInputUtilityClass, classes);
	  return (0, _extends2$e.default)({}, classes, composedClasses);
	};

	const InputRoot = (0, _styled$c.default)(_InputBase2$1.InputBaseRoot, {
	  shouldForwardProp: prop => (0, _styled$c.rootShouldForwardProp)(prop) || prop === 'classes',
	  name: 'MuiInput',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [...(0, _InputBase2$1.rootOverridesResolver)(props, styles), !ownerState.disableUnderline && styles.underline];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const light = theme.palette.mode === 'light';
	  const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
	  return (0, _extends2$e.default)({
	    position: 'relative'
	  }, ownerState.formControl && {
	    'label + &': {
	      marginTop: 16
	    }
	  }, !ownerState.disableUnderline && {
	    '&:after': {
	      borderBottom: `2px solid ${theme.palette[ownerState.color].main}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '""',
	      position: 'absolute',
	      right: 0,
	      transform: 'scaleX(0)',
	      transition: theme.transitions.create('transform', {
	        duration: theme.transitions.duration.shorter,
	        easing: theme.transitions.easing.easeOut
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.

	    },
	    [`&.${_inputClasses.default.focused}:after`]: {
	      transform: 'scaleX(1)'
	    },
	    [`&.${_inputClasses.default.error}:after`]: {
	      borderBottomColor: theme.palette.error.main,
	      transform: 'scaleX(1)' // error is always underlined in red

	    },
	    '&:before': {
	      borderBottom: `1px solid ${bottomLineColor}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '"\\00a0"',
	      position: 'absolute',
	      right: 0,
	      transition: theme.transitions.create('border-bottom-color', {
	        duration: theme.transitions.duration.shorter
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.

	    },
	    [`&:hover:not(.${_inputClasses.default.disabled}):before`]: {
	      borderBottom: `2px solid ${theme.palette.text.primary}`,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        borderBottom: `1px solid ${bottomLineColor}`
	      }
	    },
	    [`&.${_inputClasses.default.disabled}:before`]: {
	      borderBottomStyle: 'dotted'
	    }
	  });
	});
	const InputInput = (0, _styled$c.default)(_InputBase2$1.InputBaseComponent, {
	  name: 'MuiInput',
	  slot: 'Input',
	  overridesResolver: _InputBase2$1.inputOverridesResolver
	})({});
	const Input = /*#__PURE__*/React$e.forwardRef(function Input(inProps, ref) {
	  const props = (0, _useThemeProps$a.default)({
	    props: inProps,
	    name: 'MuiInput'
	  });
	  const {
	    disableUnderline,
	    components = {},
	    componentsProps: componentsPropsProp,
	    fullWidth = false,
	    inputComponent = 'input',
	    multiline = false,
	    type = 'text'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$e.default)(props, _excluded$e);
	  const classes = useUtilityClasses$b(props);
	  const ownerState = {
	    disableUnderline
	  };
	  const inputComponentsProps = {
	    root: {
	      ownerState
	    }
	  };
	  const componentsProps = componentsPropsProp ? (0, _utils$a.deepmerge)(componentsPropsProp, inputComponentsProps) : inputComponentsProps;
	  return /*#__PURE__*/(0, _jsxRuntime$f.jsx)(_InputBase$2.default, (0, _extends2$e.default)({
	    components: (0, _extends2$e.default)({
	      Root: InputRoot,
	      Input: InputInput
	    }, components),
	    componentsProps: componentsProps,
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes
	  }));
	});
	Input.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: _propTypes$e.default.string,

	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   */
	  autoFocus: _propTypes$e.default.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$e.default.object,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
	   */
	  color: _propTypes$e.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$e.default.oneOf(['primary', 'secondary']), _propTypes$e.default.string]),

	  /**
	   * The components used for each slot inside the InputBase.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$e.default.shape({
	    Input: _propTypes$e.default.elementType,
	    Root: _propTypes$e.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: _propTypes$e.default.shape({
	    input: _propTypes$e.default.object,
	    root: _propTypes$e.default.object
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: _propTypes$e.default.any,

	  /**
	   * If `true`, the component is disabled.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  disabled: _propTypes$e.default.bool,

	  /**
	   * If `true`, the `input` will not have an underline.
	   */
	  disableUnderline: _propTypes$e.default.bool,

	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: _propTypes$e.default.node,

	  /**
	   * If `true`, the `input` will indicate an error.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  error: _propTypes$e.default.bool,

	  /**
	   * If `true`, the `input` will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: _propTypes$e.default.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: _propTypes$e.default.string,

	  /**
	   * The component used for the `input` element.
	   * Either a string to use a HTML element or a component.
	   * @default 'input'
	   */
	  inputComponent: _propTypes$e.default.elementType,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   * @default {}
	   */
	  inputProps: _propTypes$e.default.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: _utils$a.refType,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
	   */
	  margin: _propTypes$e.default.oneOf(['dense', 'none']),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  maxRows: _propTypes$e.default.oneOfType([_propTypes$e.default.number, _propTypes$e.default.string]),

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  minRows: _propTypes$e.default.oneOfType([_propTypes$e.default.number, _propTypes$e.default.string]),

	  /**
	   * If `true`, a `textarea` element is rendered.
	   * @default false
	   */
	  multiline: _propTypes$e.default.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: _propTypes$e.default.string,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: _propTypes$e.default.func,

	  /**
	   * The short hint displayed in the `input` before the user enters a value.
	   */
	  placeholder: _propTypes$e.default.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: _propTypes$e.default.bool,

	  /**
	   * If `true`, the `input` element is required.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  required: _propTypes$e.default.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: _propTypes$e.default.oneOfType([_propTypes$e.default.number, _propTypes$e.default.string]),

	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: _propTypes$e.default.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$e.default.oneOfType([_propTypes$e.default.arrayOf(_propTypes$e.default.oneOfType([_propTypes$e.default.func, _propTypes$e.default.object, _propTypes$e.default.bool])), _propTypes$e.default.func, _propTypes$e.default.object]),

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   * @default 'text'
	   */
	  type: _propTypes$e.default.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: _propTypes$e.default.any
	} ;
	Input.muiName = 'Input';
	var _default$p = Input;
	Input$1.default = _default$p;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  inputClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Input.default;
		  }
		});
		Object.defineProperty(exports, "inputClasses", {
		  enumerable: true,
		  get: function () {
		    return _inputClasses.default;
		  }
		});

		var _Input = _interopRequireDefault(Input$1);

		var _inputClasses = _interopRequireWildcard(inputClasses$1);

		Object.keys(_inputClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _inputClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _inputClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Input$2));

	var FilledInput$2 = {};

	var FilledInput$1 = {};

	var filledInputClasses$1 = {};

	Object.defineProperty(filledInputClasses$1, "__esModule", {
	  value: true
	});
	filledInputClasses$1.default = void 0;
	filledInputClasses$1.getFilledInputUtilityClass = getFilledInputUtilityClass;

	var _base$k = node$1;

	function getFilledInputUtilityClass(slot) {
	  return (0, _base$k.generateUtilityClass)('MuiFilledInput', slot);
	}

	const filledInputClasses = (0, _base$k.generateUtilityClasses)('MuiFilledInput', ['root', 'colorSecondary', 'underline', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'hiddenLabel', 'input', 'inputSizeSmall', 'inputHiddenLabel', 'inputMultiline', 'inputAdornedStart', 'inputAdornedEnd']);
	var _default$o = filledInputClasses;
	filledInputClasses$1.default = _default$o;

	var _interopRequireDefault$e = interopRequireDefault.exports;

	Object.defineProperty(FilledInput$1, "__esModule", {
	  value: true
	});
	FilledInput$1.default = void 0;

	var _objectWithoutPropertiesLoose2$d = _interopRequireDefault$e(objectWithoutPropertiesLoose.exports);

	var _extends2$d = _interopRequireDefault$e(_extends$5.exports);

	var React$d = _interopRequireWildcard$e(require$$3);

	var _utils$9 = utils$h;

	var _propTypes$d = _interopRequireDefault$e(propTypes.exports);

	var _base$j = node$1;

	var _InputBase$1 = _interopRequireDefault$e(InputBase$2);

	var _styled$b = _interopRequireWildcard$e(styled$1);

	var _useThemeProps$9 = _interopRequireDefault$e(useThemeProps$1);

	var _filledInputClasses = _interopRequireWildcard$e(filledInputClasses$1);

	var _InputBase2 = InputBase$1;

	var _jsxRuntime$e = jsxRuntime;

	const _excluded$d = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "type"];

	function _getRequireWildcardCache$e(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$e = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$e(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$e(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$a = ownerState => {
	  const {
	    classes,
	    disableUnderline
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableUnderline && 'underline'],
	    input: ['input']
	  };
	  const composedClasses = (0, _base$j.unstable_composeClasses)(slots, _filledInputClasses.getFilledInputUtilityClass, classes);
	  return (0, _extends2$d.default)({}, classes, composedClasses);
	};

	const FilledInputRoot = (0, _styled$b.default)(_InputBase2.InputBaseRoot, {
	  shouldForwardProp: prop => (0, _styled$b.rootShouldForwardProp)(prop) || prop === 'classes',
	  name: 'MuiFilledInput',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [...(0, _InputBase2.rootOverridesResolver)(props, styles), !ownerState.disableUnderline && styles.underline];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const light = theme.palette.mode === 'light';
	  const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
	  const backgroundColor = light ? 'rgba(0, 0, 0, 0.06)' : 'rgba(255, 255, 255, 0.09)';
	  return (0, _extends2$d.default)({
	    position: 'relative',
	    backgroundColor,
	    borderTopLeftRadius: theme.shape.borderRadius,
	    borderTopRightRadius: theme.shape.borderRadius,
	    transition: theme.transitions.create('background-color', {
	      duration: theme.transitions.duration.shorter,
	      easing: theme.transitions.easing.easeOut
	    }),
	    '&:hover': {
	      backgroundColor: light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.13)',
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor
	      }
	    },
	    [`&.${_filledInputClasses.default.focused}`]: {
	      backgroundColor
	    },
	    [`&.${_filledInputClasses.default.disabled}`]: {
	      backgroundColor: light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)'
	    }
	  }, !ownerState.disableUnderline && {
	    '&:after': {
	      borderBottom: `2px solid ${theme.palette[ownerState.color].main}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '""',
	      position: 'absolute',
	      right: 0,
	      transform: 'scaleX(0)',
	      transition: theme.transitions.create('transform', {
	        duration: theme.transitions.duration.shorter,
	        easing: theme.transitions.easing.easeOut
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.

	    },
	    [`&.${_filledInputClasses.default.focused}:after`]: {
	      transform: 'scaleX(1)'
	    },
	    [`&.${_filledInputClasses.default.error}:after`]: {
	      borderBottomColor: theme.palette.error.main,
	      transform: 'scaleX(1)' // error is always underlined in red

	    },
	    '&:before': {
	      borderBottom: `1px solid ${bottomLineColor}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '"\\00a0"',
	      position: 'absolute',
	      right: 0,
	      transition: theme.transitions.create('border-bottom-color', {
	        duration: theme.transitions.duration.shorter
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.

	    },
	    [`&:hover:not(.${_filledInputClasses.default.disabled}):before`]: {
	      borderBottom: `1px solid ${theme.palette.text.primary}`
	    },
	    [`&.${_filledInputClasses.default.disabled}:before`]: {
	      borderBottomStyle: 'dotted'
	    }
	  }, ownerState.startAdornment && {
	    paddingLeft: 12
	  }, ownerState.endAdornment && {
	    paddingRight: 12
	  }, ownerState.multiline && (0, _extends2$d.default)({
	    padding: '25px 12px 8px'
	  }, ownerState.size === 'small' && {
	    paddingTop: 21,
	    paddingBottom: 4
	  }, ownerState.hiddenLabel && {
	    paddingTop: 16,
	    paddingBottom: 17
	  }));
	});
	const FilledInputInput = (0, _styled$b.default)(_InputBase2.InputBaseComponent, {
	  name: 'MuiFilledInput',
	  slot: 'Input',
	  overridesResolver: _InputBase2.inputOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$d.default)({
	  paddingTop: 25,
	  paddingRight: 12,
	  paddingBottom: 8,
	  paddingLeft: 12,
	  '&:-webkit-autofill': {
	    WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
	    WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
	    caretColor: theme.palette.mode === 'light' ? null : '#fff',
	    borderTopLeftRadius: 'inherit',
	    borderTopRightRadius: 'inherit'
	  }
	}, ownerState.size === 'small' && {
	  paddingTop: 21,
	  paddingBottom: 4
	}, ownerState.hiddenLabel && {
	  paddingTop: 16,
	  paddingBottom: 17
	}, ownerState.multiline && {
	  paddingTop: 0,
	  paddingBottom: 0,
	  paddingLeft: 0,
	  paddingRight: 0
	}, ownerState.startAdornment && {
	  paddingLeft: 0
	}, ownerState.endAdornment && {
	  paddingRight: 0
	}, ownerState.hiddenLabel && ownerState.size === 'small' && {
	  paddingTop: 8,
	  paddingBottom: 9
	}));
	const FilledInput = /*#__PURE__*/React$d.forwardRef(function FilledInput(inProps, ref) {
	  const props = (0, _useThemeProps$9.default)({
	    props: inProps,
	    name: 'MuiFilledInput'
	  });
	  const {
	    components = {},
	    componentsProps: componentsPropsProp,
	    fullWidth = false,
	    // declare here to prevent spreading to DOM
	    inputComponent = 'input',
	    multiline = false,
	    type = 'text'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$d.default)(props, _excluded$d);
	  const ownerState = (0, _extends2$d.default)({}, props, {
	    fullWidth,
	    inputComponent,
	    multiline,
	    type
	  });
	  const classes = useUtilityClasses$a(props);
	  const filledInputComponentsProps = {
	    root: {
	      ownerState
	    },
	    input: {
	      ownerState
	    }
	  };
	  const componentsProps = componentsPropsProp ? (0, _utils$9.deepmerge)(componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
	  return /*#__PURE__*/(0, _jsxRuntime$e.jsx)(_InputBase$1.default, (0, _extends2$d.default)({
	    components: (0, _extends2$d.default)({
	      Root: FilledInputRoot,
	      Input: FilledInputInput
	    }, components),
	    componentsProps: componentsProps,
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes
	  }));
	});
	FilledInput.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: _propTypes$d.default.string,

	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   */
	  autoFocus: _propTypes$d.default.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$d.default.object,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
	   */
	  color: _propTypes$d.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$d.default.oneOf(['primary', 'secondary']), _propTypes$d.default.string]),

	  /**
	   * The components used for each slot inside the InputBase.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$d.default.shape({
	    Input: _propTypes$d.default.elementType,
	    Root: _propTypes$d.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Input.
	   * @default {}
	   */
	  componentsProps: _propTypes$d.default.shape({
	    input: _propTypes$d.default.object,
	    root: _propTypes$d.default.object
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: _propTypes$d.default.any,

	  /**
	   * If `true`, the component is disabled.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  disabled: _propTypes$d.default.bool,

	  /**
	   * If `true`, the input will not have an underline.
	   */
	  disableUnderline: _propTypes$d.default.bool,

	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: _propTypes$d.default.node,

	  /**
	   * If `true`, the `input` will indicate an error.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  error: _propTypes$d.default.bool,

	  /**
	   * If `true`, the `input` will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: _propTypes$d.default.bool,

	  /**
	   * If `true`, the label is hidden.
	   * This is used to increase density for a `FilledInput`.
	   * Be sure to add `aria-label` to the `input` element.
	   * @default false
	   */
	  hiddenLabel: _propTypes$d.default.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: _propTypes$d.default.string,

	  /**
	   * The component used for the `input` element.
	   * Either a string to use a HTML element or a component.
	   * @default 'input'
	   */
	  inputComponent: _propTypes$d.default.elementType,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   * @default {}
	   */
	  inputProps: _propTypes$d.default.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: _utils$9.refType,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
	   */
	  margin: _propTypes$d.default.oneOf(['dense', 'none']),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  maxRows: _propTypes$d.default.oneOfType([_propTypes$d.default.number, _propTypes$d.default.string]),

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  minRows: _propTypes$d.default.oneOfType([_propTypes$d.default.number, _propTypes$d.default.string]),

	  /**
	   * If `true`, a `textarea` element is rendered.
	   * @default false
	   */
	  multiline: _propTypes$d.default.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: _propTypes$d.default.string,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: _propTypes$d.default.func,

	  /**
	   * The short hint displayed in the `input` before the user enters a value.
	   */
	  placeholder: _propTypes$d.default.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: _propTypes$d.default.bool,

	  /**
	   * If `true`, the `input` element is required.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  required: _propTypes$d.default.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: _propTypes$d.default.oneOfType([_propTypes$d.default.number, _propTypes$d.default.string]),

	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: _propTypes$d.default.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$d.default.oneOfType([_propTypes$d.default.arrayOf(_propTypes$d.default.oneOfType([_propTypes$d.default.func, _propTypes$d.default.object, _propTypes$d.default.bool])), _propTypes$d.default.func, _propTypes$d.default.object]),

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   * @default 'text'
	   */
	  type: _propTypes$d.default.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: _propTypes$d.default.any
	} ;
	FilledInput.muiName = 'Input';
	var _default$n = FilledInput;
	FilledInput$1.default = _default$n;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  filledInputClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _FilledInput.default;
		  }
		});
		Object.defineProperty(exports, "filledInputClasses", {
		  enumerable: true,
		  get: function () {
		    return _filledInputClasses.default;
		  }
		});

		var _FilledInput = _interopRequireDefault(FilledInput$1);

		var _filledInputClasses = _interopRequireWildcard(filledInputClasses$1);

		Object.keys(_filledInputClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _filledInputClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _filledInputClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (FilledInput$2));

	var OutlinedInput$2 = {};

	var OutlinedInput$1 = {};

	var NotchedOutline$1 = {};

	var _interopRequireDefault$d = interopRequireDefault.exports;

	Object.defineProperty(NotchedOutline$1, "__esModule", {
	  value: true
	});
	NotchedOutline$1.default = NotchedOutline;

	var _objectWithoutPropertiesLoose2$c = _interopRequireDefault$d(objectWithoutPropertiesLoose.exports);

	var _extends2$c = _interopRequireDefault$d(_extends$5.exports);

	_interopRequireWildcard$d(require$$3);

	var _propTypes$c = _interopRequireDefault$d(propTypes.exports);

	var _styled$a = _interopRequireDefault$d(styled$1);

	var _jsxRuntime$d = jsxRuntime;

	var _span$2;

	const _excluded$c = ["children", "classes", "className", "label", "notched"];

	function _getRequireWildcardCache$d(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$d = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$d(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$d(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const NotchedOutlineRoot$1 = (0, _styled$a.default)('fieldset')({
	  textAlign: 'left',
	  position: 'absolute',
	  bottom: 0,
	  right: 0,
	  top: -5,
	  left: 0,
	  margin: 0,
	  padding: '0 8px',
	  pointerEvents: 'none',
	  borderRadius: 'inherit',
	  borderStyle: 'solid',
	  borderWidth: 1,
	  overflow: 'hidden',
	  minWidth: '0%'
	});
	const NotchedOutlineLegend = (0, _styled$a.default)('legend')(({
	  ownerState,
	  theme
	}) => (0, _extends2$c.default)({
	  float: 'unset'
	}, !ownerState.withLabel && {
	  padding: 0,
	  lineHeight: '11px',
	  // sync with `height` in `legend` styles
	  transition: theme.transitions.create('width', {
	    duration: 150,
	    easing: theme.transitions.easing.easeOut
	  })
	}, ownerState.withLabel && (0, _extends2$c.default)({
	  display: 'block',
	  // Fix conflict with normalize.css and sanitize.css
	  width: 'auto',
	  // Fix conflict with bootstrap
	  padding: 0,
	  height: 11,
	  // sync with `lineHeight` in `legend` styles
	  fontSize: '0.75em',
	  visibility: 'hidden',
	  maxWidth: 0.01,
	  transition: theme.transitions.create('max-width', {
	    duration: 50,
	    easing: theme.transitions.easing.easeOut
	  }),
	  whiteSpace: 'nowrap',
	  '& > span': {
	    paddingLeft: 5,
	    paddingRight: 5,
	    display: 'inline-block'
	  }
	}, ownerState.notched && {
	  maxWidth: '100%',
	  transition: theme.transitions.create('max-width', {
	    duration: 100,
	    easing: theme.transitions.easing.easeOut,
	    delay: 50
	  })
	})));
	/**
	 * @ignore - internal component.
	 */

	function NotchedOutline(props) {
	  const {
	    className,
	    label,
	    notched
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$c.default)(props, _excluded$c);
	  const withLabel = label != null && label !== '';
	  const ownerState = (0, _extends2$c.default)({}, props, {
	    notched,
	    withLabel
	  });
	  return /*#__PURE__*/(0, _jsxRuntime$d.jsx)(NotchedOutlineRoot$1, (0, _extends2$c.default)({
	    "aria-hidden": true,
	    className: className,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/(0, _jsxRuntime$d.jsx)(NotchedOutlineLegend, {
	      ownerState: ownerState,
	      children: withLabel ? /*#__PURE__*/(0, _jsxRuntime$d.jsx)("span", {
	        children: label
	      }) : // notranslate needed while Google Translate will not fix zero-width space issue
	      _span$2 || (_span$2 = /*#__PURE__*/(0, _jsxRuntime$d.jsx)("span", {
	        className: "notranslate",
	        children: "\u200B"
	      }))
	    })
	  }));
	}

	NotchedOutline.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: _propTypes$c.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: _propTypes$c.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$c.default.string,

	  /**
	   * The label.
	   */
	  label: _propTypes$c.default.node,

	  /**
	   * If `true`, the outline is notched to accommodate the label.
	   */
	  notched: _propTypes$c.default.bool.isRequired,

	  /**
	   * @ignore
	   */
	  style: _propTypes$c.default.object
	} ;

	var outlinedInputClasses$1 = {};

	Object.defineProperty(outlinedInputClasses$1, "__esModule", {
	  value: true
	});
	outlinedInputClasses$1.default = void 0;
	outlinedInputClasses$1.getOutlinedInputUtilityClass = getOutlinedInputUtilityClass;

	var _base$i = node$1;

	function getOutlinedInputUtilityClass(slot) {
	  return (0, _base$i.generateUtilityClass)('MuiOutlinedInput', slot);
	}

	const outlinedInputClasses = (0, _base$i.generateUtilityClasses)('MuiOutlinedInput', ['root', 'colorSecondary', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'notchedOutline', 'input', 'inputSizeSmall', 'inputMultiline', 'inputAdornedStart', 'inputAdornedEnd']);
	var _default$m = outlinedInputClasses;
	outlinedInputClasses$1.default = _default$m;

	var _interopRequireDefault$c = interopRequireDefault.exports;

	Object.defineProperty(OutlinedInput$1, "__esModule", {
	  value: true
	});
	OutlinedInput$1.default = void 0;

	var _objectWithoutPropertiesLoose2$b = _interopRequireDefault$c(objectWithoutPropertiesLoose.exports);

	var _extends2$b = _interopRequireDefault$c(_extends$5.exports);

	var React$c = _interopRequireWildcard$c(require$$3);

	var _propTypes$b = _interopRequireDefault$c(propTypes.exports);

	var _utils$8 = utils$h;

	var _base$h = node$1;

	var _NotchedOutline = _interopRequireDefault$c(NotchedOutline$1);

	var _useFormControl$4 = _interopRequireDefault$c(useFormControl$1);

	var _formControlState$4 = _interopRequireDefault$c(formControlState$1);

	var _styled$9 = _interopRequireWildcard$c(styled$1);

	var _outlinedInputClasses = _interopRequireWildcard$c(outlinedInputClasses$1);

	var _InputBase = _interopRequireWildcard$c(InputBase$1);

	var _useThemeProps$8 = _interopRequireDefault$c(useThemeProps$1);

	var _jsxRuntime$c = jsxRuntime;

	const _excluded$b = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "type"];

	function _getRequireWildcardCache$c(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$c = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$c(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$c(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$9 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    notchedOutline: ['notchedOutline'],
	    input: ['input']
	  };
	  const composedClasses = (0, _base$h.unstable_composeClasses)(slots, _outlinedInputClasses.getOutlinedInputUtilityClass, classes);
	  return (0, _extends2$b.default)({}, classes, composedClasses);
	};

	const OutlinedInputRoot = (0, _styled$9.default)(_InputBase.InputBaseRoot, {
	  shouldForwardProp: prop => (0, _styled$9.rootShouldForwardProp)(prop) || prop === 'classes',
	  name: 'MuiOutlinedInput',
	  slot: 'Root',
	  overridesResolver: _InputBase.rootOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => {
	  const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
	  return (0, _extends2$b.default)({
	    position: 'relative',
	    borderRadius: theme.shape.borderRadius,
	    [`&:hover .${_outlinedInputClasses.default.notchedOutline}`]: {
	      borderColor: theme.palette.text.primary
	    },
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      [`&:hover .${_outlinedInputClasses.default.notchedOutline}`]: {
	        borderColor
	      }
	    },
	    [`&.${_outlinedInputClasses.default.focused} .${_outlinedInputClasses.default.notchedOutline}`]: {
	      borderColor: theme.palette[ownerState.color].main,
	      borderWidth: 2
	    },
	    [`&.${_outlinedInputClasses.default.error} .${_outlinedInputClasses.default.notchedOutline}`]: {
	      borderColor: theme.palette.error.main
	    },
	    [`&.${_outlinedInputClasses.default.disabled} .${_outlinedInputClasses.default.notchedOutline}`]: {
	      borderColor: theme.palette.action.disabled
	    }
	  }, ownerState.startAdornment && {
	    paddingLeft: 14
	  }, ownerState.endAdornment && {
	    paddingRight: 14
	  }, ownerState.multiline && (0, _extends2$b.default)({
	    padding: '16.5px 14px'
	  }, ownerState.size === 'small' && {
	    padding: '8.5px 14px'
	  }));
	});
	const NotchedOutlineRoot = (0, _styled$9.default)(_NotchedOutline.default, {
	  name: 'MuiOutlinedInput',
	  slot: 'NotchedOutline',
	  overridesResolver: (props, styles) => styles.notchedOutline
	})(({
	  theme
	}) => ({
	  borderColor: theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'
	}));
	const OutlinedInputInput = (0, _styled$9.default)(_InputBase.InputBaseComponent, {
	  name: 'MuiOutlinedInput',
	  slot: 'Input',
	  overridesResolver: _InputBase.inputOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$b.default)({
	  padding: '16.5px 14px',
	  '&:-webkit-autofill': {
	    WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
	    WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
	    caretColor: theme.palette.mode === 'light' ? null : '#fff',
	    borderRadius: 'inherit'
	  }
	}, ownerState.size === 'small' && {
	  padding: '8.5px 14px'
	}, ownerState.multiline && {
	  padding: 0
	}, ownerState.startAdornment && {
	  paddingLeft: 0
	}, ownerState.endAdornment && {
	  paddingRight: 0
	}));
	const OutlinedInput = /*#__PURE__*/React$c.forwardRef(function OutlinedInput(inProps, ref) {
	  var _React$Fragment;

	  const props = (0, _useThemeProps$8.default)({
	    props: inProps,
	    name: 'MuiOutlinedInput'
	  });
	  const {
	    components = {},
	    fullWidth = false,
	    inputComponent = 'input',
	    label,
	    multiline = false,
	    notched,
	    type = 'text'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$b.default)(props, _excluded$b);
	  const classes = useUtilityClasses$9(props);
	  const muiFormControl = (0, _useFormControl$4.default)();
	  const fcs = (0, _formControlState$4.default)({
	    props,
	    muiFormControl,
	    states: ['required']
	  });
	  return /*#__PURE__*/(0, _jsxRuntime$c.jsx)(_InputBase.default, (0, _extends2$b.default)({
	    components: (0, _extends2$b.default)({
	      Root: OutlinedInputRoot,
	      Input: OutlinedInputInput
	    }, components),
	    renderSuffix: state => /*#__PURE__*/(0, _jsxRuntime$c.jsx)(NotchedOutlineRoot, {
	      className: classes.notchedOutline,
	      label: label != null && label !== '' && fcs.required ? _React$Fragment || (_React$Fragment = /*#__PURE__*/(0, _jsxRuntime$c.jsxs)(React$c.Fragment, {
	        children: [label, "\xA0", '*']
	      })) : label,
	      notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
	    }),
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other, {
	    classes: (0, _extends2$b.default)({}, classes, {
	      notchedOutline: null
	    })
	  }));
	});
	OutlinedInput.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: _propTypes$b.default.string,

	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   */
	  autoFocus: _propTypes$b.default.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$b.default.object,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
	   */
	  color: _propTypes$b.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$b.default.oneOf(['primary', 'secondary']), _propTypes$b.default.string]),

	  /**
	   * The components used for each slot inside the InputBase.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes$b.default.shape({
	    Input: _propTypes$b.default.elementType,
	    Root: _propTypes$b.default.elementType
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: _propTypes$b.default.any,

	  /**
	   * If `true`, the component is disabled.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  disabled: _propTypes$b.default.bool,

	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: _propTypes$b.default.node,

	  /**
	   * If `true`, the `input` will indicate an error.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  error: _propTypes$b.default.bool,

	  /**
	   * If `true`, the `input` will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: _propTypes$b.default.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: _propTypes$b.default.string,

	  /**
	   * The component used for the `input` element.
	   * Either a string to use a HTML element or a component.
	   * @default 'input'
	   */
	  inputComponent: _propTypes$b.default.elementType,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   * @default {}
	   */
	  inputProps: _propTypes$b.default.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: _utils$8.refType,

	  /**
	   * The label of the `input`. It is only used for layout. The actual labelling
	   * is handled by `InputLabel`.
	   */
	  label: _propTypes$b.default.node,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
	   */
	  margin: _propTypes$b.default.oneOf(['dense', 'none']),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  maxRows: _propTypes$b.default.oneOfType([_propTypes$b.default.number, _propTypes$b.default.string]),

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  minRows: _propTypes$b.default.oneOfType([_propTypes$b.default.number, _propTypes$b.default.string]),

	  /**
	   * If `true`, a `textarea` element is rendered.
	   * @default false
	   */
	  multiline: _propTypes$b.default.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: _propTypes$b.default.string,

	  /**
	   * If `true`, the outline is notched to accommodate the label.
	   */
	  notched: _propTypes$b.default.bool,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: _propTypes$b.default.func,

	  /**
	   * The short hint displayed in the `input` before the user enters a value.
	   */
	  placeholder: _propTypes$b.default.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: _propTypes$b.default.bool,

	  /**
	   * If `true`, the `input` element is required.
	   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
	   */
	  required: _propTypes$b.default.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: _propTypes$b.default.oneOfType([_propTypes$b.default.number, _propTypes$b.default.string]),

	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: _propTypes$b.default.node,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$b.default.oneOfType([_propTypes$b.default.arrayOf(_propTypes$b.default.oneOfType([_propTypes$b.default.func, _propTypes$b.default.object, _propTypes$b.default.bool])), _propTypes$b.default.func, _propTypes$b.default.object]),

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   * @default 'text'
	   */
	  type: _propTypes$b.default.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: _propTypes$b.default.any
	} ;
	OutlinedInput.muiName = 'Input';
	var _default$l = OutlinedInput;
	OutlinedInput$1.default = _default$l;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  outlinedInputClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _OutlinedInput.default;
		  }
		});
		Object.defineProperty(exports, "outlinedInputClasses", {
		  enumerable: true,
		  get: function () {
		    return _outlinedInputClasses.default;
		  }
		});

		var _OutlinedInput = _interopRequireDefault(OutlinedInput$1);

		var _outlinedInputClasses = _interopRequireWildcard(outlinedInputClasses$1);

		Object.keys(_outlinedInputClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _outlinedInputClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _outlinedInputClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (OutlinedInput$2));

	var InputLabel$2 = {};

	var InputLabel$1 = {};

	var FormLabel$2 = {};

	var FormLabel$1 = {};

	var formLabelClasses$1 = {};

	Object.defineProperty(formLabelClasses$1, "__esModule", {
	  value: true
	});
	formLabelClasses$1.default = void 0;
	formLabelClasses$1.getFormLabelUtilityClasses = getFormLabelUtilityClasses;

	var _base$g = node$1;

	function getFormLabelUtilityClasses(slot) {
	  return (0, _base$g.generateUtilityClass)('MuiFormLabel', slot);
	}

	const formLabelClasses = (0, _base$g.generateUtilityClasses)('MuiFormLabel', ['root', 'colorSecondary', 'focused', 'disabled', 'error', 'filled', 'required', 'asterisk']);
	var _default$k = formLabelClasses;
	formLabelClasses$1.default = _default$k;

	var _interopRequireDefault$b = interopRequireDefault.exports;

	Object.defineProperty(FormLabel$1, "__esModule", {
	  value: true
	});
	FormLabel$1.default = FormLabel$1.FormLabelRoot = void 0;

	var _objectWithoutPropertiesLoose2$a = _interopRequireDefault$b(objectWithoutPropertiesLoose.exports);

	var _extends2$a = _interopRequireDefault$b(_extends$5.exports);

	var React$b = _interopRequireWildcard$b(require$$3);

	var _propTypes$a = _interopRequireDefault$b(propTypes.exports);

	var _clsx$8 = _interopRequireDefault$b(clsx$1);

	var _base$f = node$1;

	var _formControlState$3 = _interopRequireDefault$b(formControlState$1);

	var _useFormControl$3 = _interopRequireDefault$b(useFormControl$1);

	var _capitalize$5 = _interopRequireDefault$b(capitalize);

	var _useThemeProps$7 = _interopRequireDefault$b(useThemeProps$1);

	var _styled$8 = _interopRequireDefault$b(styled$1);

	var _formLabelClasses = _interopRequireWildcard$b(formLabelClasses$1);

	var _jsxRuntime$b = jsxRuntime;

	const _excluded$a = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];

	function _getRequireWildcardCache$b(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$b = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$b(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$b(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$8 = ownerState => {
	  const {
	    classes,
	    color,
	    focused,
	    disabled,
	    error,
	    filled,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${(0, _capitalize$5.default)(color)}`, disabled && 'disabled', error && 'error', filled && 'filled', focused && 'focused', required && 'required'],
	    asterisk: ['asterisk', error && 'error']
	  };
	  return (0, _base$f.unstable_composeClasses)(slots, _formLabelClasses.getFormLabelUtilityClasses, classes);
	};

	const FormLabelRoot = (0, _styled$8.default)('label', {
	  name: 'MuiFormLabel',
	  slot: 'Root',
	  overridesResolver: ({
	    ownerState
	  }, styles) => {
	    return (0, _extends2$a.default)({}, styles.root, ownerState.color === 'secondary' && styles.colorSecondary, ownerState.filled && styles.filled);
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$a.default)({
	  color: theme.palette.text.secondary
	}, theme.typography.body1, {
	  lineHeight: '1.4375em',
	  padding: 0,
	  position: 'relative',
	  [`&.${_formLabelClasses.default.focused}`]: {
	    color: theme.palette[ownerState.color].main
	  },
	  [`&.${_formLabelClasses.default.disabled}`]: {
	    color: theme.palette.text.disabled
	  },
	  [`&.${_formLabelClasses.default.error}`]: {
	    color: theme.palette.error.main
	  }
	}));
	FormLabel$1.FormLabelRoot = FormLabelRoot;
	const AsteriskComponent = (0, _styled$8.default)('span', {
	  name: 'MuiFormLabel',
	  slot: 'Asterisk',
	  overridesResolver: (props, styles) => styles.asterisk
	})(({
	  theme
	}) => ({
	  [`&.${_formLabelClasses.default.error}`]: {
	    color: theme.palette.error.main
	  }
	}));
	const FormLabel = /*#__PURE__*/React$b.forwardRef(function FormLabel(inProps, ref) {
	  const props = (0, _useThemeProps$7.default)({
	    props: inProps,
	    name: 'MuiFormLabel'
	  });
	  const {
	    children,
	    className,
	    component = 'label'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$a.default)(props, _excluded$a);
	  const muiFormControl = (0, _useFormControl$3.default)();
	  const fcs = (0, _formControlState$3.default)({
	    props,
	    muiFormControl,
	    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']
	  });
	  const ownerState = (0, _extends2$a.default)({}, props, {
	    color: fcs.color || 'primary',
	    component,
	    disabled: fcs.disabled,
	    error: fcs.error,
	    filled: fcs.filled,
	    focused: fcs.focused,
	    required: fcs.required
	  });
	  const classes = useUtilityClasses$8(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$b.jsxs)(FormLabelRoot, (0, _extends2$a.default)({
	    as: component,
	    ownerState: ownerState,
	    className: (0, _clsx$8.default)(classes.root, className),
	    ref: ref
	  }, other, {
	    children: [children, fcs.required && /*#__PURE__*/(0, _jsxRuntime$b.jsxs)(AsteriskComponent, {
	      ownerState: ownerState,
	      "aria-hidden": true,
	      className: classes.asterisk,
	      children: ["\u2009", '*']
	    })]
	  }));
	});
	FormLabel.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$a.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$a.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$a.default.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: _propTypes$a.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$a.default.oneOf(['error', 'info', 'primary', 'secondary', 'success', 'warning']), _propTypes$a.default.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$a.default.elementType,

	  /**
	   * If `true`, the label should be displayed in a disabled state.
	   */
	  disabled: _propTypes$a.default.bool,

	  /**
	   * If `true`, the label is displayed in an error state.
	   */
	  error: _propTypes$a.default.bool,

	  /**
	   * If `true`, the label should use filled classes key.
	   */
	  filled: _propTypes$a.default.bool,

	  /**
	   * If `true`, the input of this label is focused (used by `FormGroup` components).
	   */
	  focused: _propTypes$a.default.bool,

	  /**
	   * If `true`, the label will indicate that the `input` is required.
	   */
	  required: _propTypes$a.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$a.default.oneOfType([_propTypes$a.default.arrayOf(_propTypes$a.default.oneOfType([_propTypes$a.default.func, _propTypes$a.default.object, _propTypes$a.default.bool])), _propTypes$a.default.func, _propTypes$a.default.object])
	} ;
	var _default$j = FormLabel;
	FormLabel$1.default = _default$j;

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  formLabelClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _FormLabel.default;
		  }
		});
		Object.defineProperty(exports, "formLabelClasses", {
		  enumerable: true,
		  get: function () {
		    return _formLabelClasses.default;
		  }
		});

		var _FormLabel = _interopRequireWildcard(FormLabel$1);

		Object.keys(_FormLabel).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _FormLabel[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _FormLabel[key];
		    }
		  });
		});

		var _formLabelClasses = _interopRequireWildcard(formLabelClasses$1);

		Object.keys(_formLabelClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _formLabelClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _formLabelClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (FormLabel$2));

	var inputLabelClasses$1 = {};

	Object.defineProperty(inputLabelClasses$1, "__esModule", {
	  value: true
	});
	inputLabelClasses$1.default = void 0;
	inputLabelClasses$1.getInputLabelUtilityClasses = getInputLabelUtilityClasses;

	var _base$e = node$1;

	function getInputLabelUtilityClasses(slot) {
	  return (0, _base$e.generateUtilityClass)('MuiInputLabel', slot);
	}

	const inputLabelClasses = (0, _base$e.generateUtilityClasses)('MuiInputLabel', ['root', 'focused', 'disabled', 'error', 'required', 'asterisk', 'formControl', 'sizeSmall', 'shrink', 'animated', 'standard', 'filled', 'outlined']);
	var _default$i = inputLabelClasses;
	inputLabelClasses$1.default = _default$i;

	var _interopRequireDefault$a = interopRequireDefault.exports;

	Object.defineProperty(InputLabel$1, "__esModule", {
	  value: true
	});
	InputLabel$1.default = void 0;

	var _objectWithoutPropertiesLoose2$9 = _interopRequireDefault$a(objectWithoutPropertiesLoose.exports);

	var _extends2$9 = _interopRequireDefault$a(_extends$5.exports);

	var React$a = _interopRequireWildcard$a(require$$3);

	var _propTypes$9 = _interopRequireDefault$a(propTypes.exports);

	var _base$d = node$1;

	var _formControlState$2 = _interopRequireDefault$a(formControlState$1);

	var _useFormControl$2 = _interopRequireDefault$a(useFormControl$1);

	var _FormLabel = _interopRequireWildcard$a(FormLabel$2);

	var _useThemeProps$6 = _interopRequireDefault$a(useThemeProps$1);

	var _styled$7 = _interopRequireWildcard$a(styled$1);

	var _inputLabelClasses = inputLabelClasses$1;

	var _jsxRuntime$a = jsxRuntime;

	const _excluded$9 = ["disableAnimation", "margin", "shrink", "variant"];

	function _getRequireWildcardCache$a(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$a = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$a(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$a(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$7 = ownerState => {
	  const {
	    classes,
	    formControl,
	    size,
	    shrink,
	    disableAnimation,
	    variant,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', formControl && 'formControl', !disableAnimation && 'animated', shrink && 'shrink', size === 'small' && 'sizeSmall', variant],
	    asterisk: [required && 'asterisk']
	  };
	  const composedClasses = (0, _base$d.unstable_composeClasses)(slots, _inputLabelClasses.getInputLabelUtilityClasses, classes);
	  return (0, _extends2$9.default)({}, classes, composedClasses);
	};

	const InputLabelRoot = (0, _styled$7.default)(_FormLabel.default, {
	  shouldForwardProp: prop => (0, _styled$7.rootShouldForwardProp)(prop) || prop === 'classes',
	  name: 'MuiInputLabel',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${_FormLabel.formLabelClasses.asterisk}`]: styles.asterisk
	    }, styles.root, ownerState.formControl && styles.formControl, ownerState.size === 'small' && styles.sizeSmall, ownerState.shrink && styles.shrink, !ownerState.disableAnimation && styles.animated, styles[ownerState.variant]];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$9.default)({
	  display: 'block',
	  transformOrigin: 'top left',
	  whiteSpace: 'nowrap',
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  maxWidth: '100%'
	}, ownerState.formControl && {
	  position: 'absolute',
	  left: 0,
	  top: 0,
	  // slight alteration to spec spacing to match visual spec result
	  transform: 'translate(0, 20px) scale(1)'
	}, ownerState.size === 'small' && {
	  // Compensation for the `Input.inputSizeSmall` style.
	  transform: 'translate(0, 17px) scale(1)'
	}, ownerState.shrink && {
	  transform: 'translate(0, -1.5px) scale(0.75)',
	  transformOrigin: 'top left',
	  maxWidth: '133%'
	}, !ownerState.disableAnimation && {
	  transition: theme.transitions.create(['color', 'transform', 'max-width'], {
	    duration: theme.transitions.duration.shorter,
	    easing: theme.transitions.easing.easeOut
	  })
	}, ownerState.variant === 'filled' && (0, _extends2$9.default)({
	  // Chrome's autofill feature gives the input field a yellow background.
	  // Since the input field is behind the label in the HTML tree,
	  // the input field is drawn last and hides the label with an opaque background color.
	  // zIndex: 1 will raise the label above opaque background-colors of input.
	  zIndex: 1,
	  pointerEvents: 'none',
	  transform: 'translate(12px, 16px) scale(1)',
	  maxWidth: 'calc(100% - 24px)'
	}, ownerState.size === 'small' && {
	  transform: 'translate(12px, 13px) scale(1)'
	}, ownerState.shrink && (0, _extends2$9.default)({
	  userSelect: 'none',
	  pointerEvents: 'auto',
	  transform: 'translate(12px, 7px) scale(0.75)',
	  maxWidth: 'calc(133% - 24px)'
	}, ownerState.size === 'small' && {
	  transform: 'translate(12px, 4px) scale(0.75)'
	})), ownerState.variant === 'outlined' && (0, _extends2$9.default)({
	  // see comment above on filled.zIndex
	  zIndex: 1,
	  pointerEvents: 'none',
	  transform: 'translate(14px, 16px) scale(1)',
	  maxWidth: 'calc(100% - 24px)'
	}, ownerState.size === 'small' && {
	  transform: 'translate(14px, 9px) scale(1)'
	}, ownerState.shrink && {
	  userSelect: 'none',
	  pointerEvents: 'auto',
	  maxWidth: 'calc(133% - 24px)',
	  transform: 'translate(14px, -9px) scale(0.75)'
	})));
	const InputLabel = /*#__PURE__*/React$a.forwardRef(function InputLabel(inProps, ref) {
	  const props = (0, _useThemeProps$6.default)({
	    name: 'MuiInputLabel',
	    props: inProps
	  });
	  const {
	    disableAnimation = false,
	    shrink: shrinkProp
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$9.default)(props, _excluded$9);
	  const muiFormControl = (0, _useFormControl$2.default)();
	  let shrink = shrinkProp;

	  if (typeof shrink === 'undefined' && muiFormControl) {
	    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
	  }

	  const fcs = (0, _formControlState$2.default)({
	    props,
	    muiFormControl,
	    states: ['size', 'variant', 'required']
	  });
	  const ownerState = (0, _extends2$9.default)({}, props, {
	    disableAnimation,
	    formControl: muiFormControl,
	    shrink,
	    size: fcs.size,
	    variant: fcs.variant,
	    required: fcs.required
	  });
	  const classes = useUtilityClasses$7(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$a.jsx)(InputLabelRoot, (0, _extends2$9.default)({
	    "data-shrink": shrink,
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    classes: classes
	  }));
	});
	InputLabel.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$9.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$9.default.object,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: _propTypes$9.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$9.default.oneOf(['error', 'info', 'primary', 'secondary', 'success', 'warning']), _propTypes$9.default.string]),

	  /**
	   * If `true`, the transition animation is disabled.
	   * @default false
	   */
	  disableAnimation: _propTypes$9.default.bool,

	  /**
	   * If `true`, the component is disabled.
	   */
	  disabled: _propTypes$9.default.bool,

	  /**
	   * If `true`, the label is displayed in an error state.
	   */
	  error: _propTypes$9.default.bool,

	  /**
	   * If `true`, the `input` of this label is focused.
	   */
	  focused: _propTypes$9.default.bool,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: _propTypes$9.default.oneOf(['dense']),

	  /**
	   * if `true`, the label will indicate that the `input` is required.
	   */
	  required: _propTypes$9.default.bool,

	  /**
	   * If `true`, the label is shrunk.
	   */
	  shrink: _propTypes$9.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$9.default.oneOfType([_propTypes$9.default.arrayOf(_propTypes$9.default.oneOfType([_propTypes$9.default.func, _propTypes$9.default.object, _propTypes$9.default.bool])), _propTypes$9.default.func, _propTypes$9.default.object]),

	  /**
	   * The variant to use.
	   */
	  variant: _propTypes$9.default.oneOf(['filled', 'outlined', 'standard'])
	} ;
	var _default$h = InputLabel;
	InputLabel$1.default = _default$h;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  inputLabelClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _InputLabel.default;
		  }
		});
		Object.defineProperty(exports, "inputLabelClasses", {
		  enumerable: true,
		  get: function () {
		    return _inputLabelClasses.default;
		  }
		});

		var _InputLabel = _interopRequireDefault(InputLabel$1);

		var _inputLabelClasses = _interopRequireWildcard(inputLabelClasses$1);

		Object.keys(_inputLabelClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _inputLabelClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _inputLabelClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (InputLabel$2));

	var FormControl$2 = {};

	var FormControl$1 = {};

	var formControlClasses$1 = {};

	Object.defineProperty(formControlClasses$1, "__esModule", {
	  value: true
	});
	formControlClasses$1.default = void 0;
	formControlClasses$1.getFormControlUtilityClasses = getFormControlUtilityClasses;

	var _base$c = node$1;

	function getFormControlUtilityClasses(slot) {
	  return (0, _base$c.generateUtilityClass)('MuiFormControl', slot);
	}

	const formControlClasses = (0, _base$c.generateUtilityClasses)('MuiFormControl', ['root', 'marginNone', 'marginNormal', 'marginDense', 'fullWidth', 'disabled']);
	var _default$g = formControlClasses;
	formControlClasses$1.default = _default$g;

	var _interopRequireDefault$9 = interopRequireDefault.exports;

	Object.defineProperty(FormControl$1, "__esModule", {
	  value: true
	});
	FormControl$1.default = void 0;

	var _objectWithoutPropertiesLoose2$8 = _interopRequireDefault$9(objectWithoutPropertiesLoose.exports);

	var _extends2$8 = _interopRequireDefault$9(_extends$5.exports);

	var React$9 = _interopRequireWildcard$9(require$$3);

	var _propTypes$8 = _interopRequireDefault$9(propTypes.exports);

	var _clsx$7 = _interopRequireDefault$9(clsx$1);

	var _base$b = node$1;

	var _useThemeProps$5 = _interopRequireDefault$9(useThemeProps$1);

	var _styled$6 = _interopRequireDefault$9(styled$1);

	var _utils$7 = utils$1;

	var _capitalize$4 = _interopRequireDefault$9(capitalize);

	var _isMuiElement = _interopRequireDefault$9(isMuiElement);

	var _FormControlContext = _interopRequireDefault$9(FormControlContext$1);

	var _formControlClasses = formControlClasses$1;

	var _jsxRuntime$9 = jsxRuntime;

	const _excluded$8 = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];

	function _getRequireWildcardCache$9(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$9 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$9(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$9(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$6 = ownerState => {
	  const {
	    classes,
	    margin,
	    fullWidth
	  } = ownerState;
	  const slots = {
	    root: ['root', margin !== 'none' && `margin${(0, _capitalize$4.default)(margin)}`, fullWidth && 'fullWidth']
	  };
	  return (0, _base$b.unstable_composeClasses)(slots, _formControlClasses.getFormControlUtilityClasses, classes);
	};

	const FormControlRoot = (0, _styled$6.default)('div', {
	  name: 'MuiFormControl',
	  slot: 'Root',
	  overridesResolver: ({
	    ownerState
	  }, styles) => {
	    return (0, _extends2$8.default)({}, styles.root, styles[`margin${(0, _capitalize$4.default)(ownerState.margin)}`], ownerState.fullWidth && styles.fullWidth);
	  }
	})(({
	  ownerState
	}) => (0, _extends2$8.default)({
	  display: 'inline-flex',
	  flexDirection: 'column',
	  position: 'relative',
	  // Reset fieldset default style.
	  minWidth: 0,
	  padding: 0,
	  margin: 0,
	  border: 0,
	  verticalAlign: 'top'
	}, ownerState.margin === 'normal' && {
	  marginTop: 16,
	  marginBottom: 8
	}, ownerState.margin === 'dense' && {
	  marginTop: 8,
	  marginBottom: 4
	}, ownerState.fullWidth && {
	  width: '100%'
	}));
	/**
	 * Provides context such as filled/focused/error/required for form inputs.
	 * Relying on the context provides high flexibility and ensures that the state always stays
	 * consistent across the children of the `FormControl`.
	 * This context is used by the following components:
	 *
	 *  - FormLabel
	 *  - FormHelperText
	 *  - Input
	 *  - InputLabel
	 *
	 * You can find one composition example below and more going to [the demos](/components/text-fields/#components).
	 *
	 * ```jsx
	 * <FormControl>
	 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
	 *   <Input id="my-input" aria-describedby="my-helper-text" />
	 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
	 * </FormControl>
	 * ```
	 *
	 * ⚠️ Only one `InputBase` can be used within a FormControl because it create visual inconsistencies.
	 * For instance, only one input can be focused at the same time, the state shouldn't be shared.
	 */

	const FormControl = /*#__PURE__*/React$9.forwardRef(function FormControl(inProps, ref) {
	  const props = (0, _useThemeProps$5.default)({
	    props: inProps,
	    name: 'MuiFormControl'
	  });
	  const {
	    children,
	    className,
	    color = 'primary',
	    component = 'div',
	    disabled = false,
	    error = false,
	    focused: visuallyFocused,
	    fullWidth = false,
	    hiddenLabel = false,
	    margin = 'none',
	    required = false,
	    size = 'medium',
	    variant = 'outlined'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$8.default)(props, _excluded$8);
	  const ownerState = (0, _extends2$8.default)({}, props, {
	    color,
	    component,
	    disabled,
	    error,
	    fullWidth,
	    hiddenLabel,
	    margin,
	    required,
	    size,
	    variant
	  });
	  const classes = useUtilityClasses$6(ownerState);
	  const [adornedStart, setAdornedStart] = React$9.useState(() => {
	    // We need to iterate through the children and find the Input in order
	    // to fully support server-side rendering.
	    let initialAdornedStart = false;

	    if (children) {
	      React$9.Children.forEach(children, child => {
	        if (!(0, _isMuiElement.default)(child, ['Input', 'Select'])) {
	          return;
	        }

	        const input = (0, _isMuiElement.default)(child, ['Select']) ? child.props.input : child;

	        if (input && (0, _utils$7.isAdornedStart)(input.props)) {
	          initialAdornedStart = true;
	        }
	      });
	    }

	    return initialAdornedStart;
	  });
	  const [filled, setFilled] = React$9.useState(() => {
	    // We need to iterate through the children and find the Input in order
	    // to fully support server-side rendering.
	    let initialFilled = false;

	    if (children) {
	      React$9.Children.forEach(children, child => {
	        if (!(0, _isMuiElement.default)(child, ['Input', 'Select'])) {
	          return;
	        }

	        if ((0, _utils$7.isFilled)(child.props, true)) {
	          initialFilled = true;
	        }
	      });
	    }

	    return initialFilled;
	  });
	  const [focusedState, setFocused] = React$9.useState(false);

	  if (disabled && focusedState) {
	    setFocused(false);
	  }

	  const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;
	  let registerEffect;

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    const registeredInput = React$9.useRef(false);

	    registerEffect = () => {
	      if (registeredInput.current) {
	        console.error(['MUI: There are multiple `InputBase` components inside a FormControl.', 'This creates visual inconsistencies, only use one `InputBase`.'].join('\n'));
	      }

	      registeredInput.current = true;
	      return () => {
	        registeredInput.current = false;
	      };
	    };
	  }

	  const onFilled = React$9.useCallback(() => {
	    setFilled(true);
	  }, []);
	  const onEmpty = React$9.useCallback(() => {
	    setFilled(false);
	  }, []);
	  const childContext = {
	    adornedStart,
	    setAdornedStart,
	    color,
	    disabled,
	    error,
	    filled,
	    focused,
	    fullWidth,
	    hiddenLabel,
	    size,
	    onBlur: () => {
	      setFocused(false);
	    },
	    onEmpty,
	    onFilled,
	    onFocus: () => {
	      setFocused(true);
	    },
	    registerEffect,
	    required,
	    variant
	  };
	  return /*#__PURE__*/(0, _jsxRuntime$9.jsx)(_FormControlContext.default.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/(0, _jsxRuntime$9.jsx)(FormControlRoot, (0, _extends2$8.default)({
	      as: component,
	      ownerState: ownerState,
	      className: (0, _clsx$7.default)(classes.root, className),
	      ref: ref
	    }, other, {
	      children: children
	    }))
	  });
	});
	FormControl.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: _propTypes$8.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$8.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$8.default.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * @default 'primary'
	   */
	  color: _propTypes$8.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$8.default.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), _propTypes$8.default.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$8.default.elementType,

	  /**
	   * If `true`, the label, input and helper text should be displayed in a disabled state.
	   * @default false
	   */
	  disabled: _propTypes$8.default.bool,

	  /**
	   * If `true`, the label is displayed in an error state.
	   * @default false
	   */
	  error: _propTypes$8.default.bool,

	  /**
	   * If `true`, the component is displayed in focused state.
	   */
	  focused: _propTypes$8.default.bool,

	  /**
	   * If `true`, the component will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: _propTypes$8.default.bool,

	  /**
	   * If `true`, the label is hidden.
	   * This is used to increase density for a `FilledInput`.
	   * Be sure to add `aria-label` to the `input` element.
	   * @default false
	   */
	  hiddenLabel: _propTypes$8.default.bool,

	  /**
	   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
	   * @default 'none'
	   */
	  margin: _propTypes$8.default.oneOf(['dense', 'none', 'normal']),

	  /**
	   * If `true`, the label will indicate that the `input` is required.
	   * @default false
	   */
	  required: _propTypes$8.default.bool,

	  /**
	   * The size of the component.
	   * @default 'medium'
	   */
	  size: _propTypes$8.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$8.default.oneOf(['medium', 'small']), _propTypes$8.default.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$8.default.oneOfType([_propTypes$8.default.arrayOf(_propTypes$8.default.oneOfType([_propTypes$8.default.func, _propTypes$8.default.object, _propTypes$8.default.bool])), _propTypes$8.default.func, _propTypes$8.default.object]),

	  /**
	   * The variant to use.
	   * @default 'outlined'
	   */
	  variant: _propTypes$8.default.oneOf(['filled', 'outlined', 'standard'])
	} ;
	var _default$f = FormControl;
	FormControl$1.default = _default$f;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  useFormControl: true,
		  formControlClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _FormControl.default;
		  }
		});
		Object.defineProperty(exports, "formControlClasses", {
		  enumerable: true,
		  get: function () {
		    return _formControlClasses.default;
		  }
		});
		Object.defineProperty(exports, "useFormControl", {
		  enumerable: true,
		  get: function () {
		    return _useFormControl.default;
		  }
		});

		var _FormControl = _interopRequireDefault(FormControl$1);

		var _useFormControl = _interopRequireDefault(useFormControl$1);

		var _formControlClasses = _interopRequireWildcard(formControlClasses$1);

		Object.keys(_formControlClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _formControlClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _formControlClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (FormControl$2));

	var FormHelperText$2 = {};

	var FormHelperText$1 = {};

	var formHelperTextClasses$1 = {};

	Object.defineProperty(formHelperTextClasses$1, "__esModule", {
	  value: true
	});
	formHelperTextClasses$1.default = void 0;
	formHelperTextClasses$1.getFormHelperTextUtilityClasses = getFormHelperTextUtilityClasses;

	var _base$a = node$1;

	function getFormHelperTextUtilityClasses(slot) {
	  return (0, _base$a.generateUtilityClass)('MuiFormHelperText', slot);
	}

	const formHelperTextClasses = (0, _base$a.generateUtilityClasses)('MuiFormHelperText', ['root', 'error', 'disabled', 'sizeSmall', 'sizeMedium', 'contained', 'focused', 'filled', 'required']);
	var _default$e = formHelperTextClasses;
	formHelperTextClasses$1.default = _default$e;

	var _interopRequireDefault$8 = interopRequireDefault.exports;

	Object.defineProperty(FormHelperText$1, "__esModule", {
	  value: true
	});
	FormHelperText$1.default = void 0;

	var _objectWithoutPropertiesLoose2$7 = _interopRequireDefault$8(objectWithoutPropertiesLoose.exports);

	var _extends2$7 = _interopRequireDefault$8(_extends$5.exports);

	var React$8 = _interopRequireWildcard$8(require$$3);

	var _propTypes$7 = _interopRequireDefault$8(propTypes.exports);

	var _clsx$6 = _interopRequireDefault$8(clsx$1);

	var _base$9 = node$1;

	var _formControlState$1 = _interopRequireDefault$8(formControlState$1);

	var _useFormControl$1 = _interopRequireDefault$8(useFormControl$1);

	var _styled$5 = _interopRequireDefault$8(styled$1);

	var _capitalize$3 = _interopRequireDefault$8(capitalize);

	var _formHelperTextClasses = _interopRequireWildcard$8(formHelperTextClasses$1);

	var _useThemeProps$4 = _interopRequireDefault$8(useThemeProps$1);

	var _jsxRuntime$8 = jsxRuntime;

	var _span$1;

	const _excluded$7 = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];

	function _getRequireWildcardCache$8(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$8 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$8(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$8(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$5 = ownerState => {
	  const {
	    classes,
	    contained,
	    size,
	    disabled,
	    error,
	    filled,
	    focused,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', error && 'error', size && `size${(0, _capitalize$3.default)(size)}`, contained && 'contained', focused && 'focused', filled && 'filled', required && 'required']
	  };
	  return (0, _base$9.unstable_composeClasses)(slots, _formHelperTextClasses.getFormHelperTextUtilityClasses, classes);
	};

	const FormHelperTextRoot = (0, _styled$5.default)('p', {
	  name: 'MuiFormHelperText',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.size && styles[`size${(0, _capitalize$3.default)(ownerState.size)}`], ownerState.contained && styles.contained, ownerState.filled && styles.filled];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2$7.default)({
	  color: theme.palette.text.secondary
	}, theme.typography.caption, {
	  textAlign: 'left',
	  marginTop: 3,
	  marginRight: 0,
	  marginBottom: 0,
	  marginLeft: 0,
	  [`&.${_formHelperTextClasses.default.disabled}`]: {
	    color: theme.palette.text.disabled
	  },
	  [`&.${_formHelperTextClasses.default.error}`]: {
	    color: theme.palette.error.main
	  }
	}, ownerState.size === 'small' && {
	  marginTop: 4
	}, ownerState.contained && {
	  marginLeft: 14,
	  marginRight: 14
	}));
	const FormHelperText = /*#__PURE__*/React$8.forwardRef(function FormHelperText(inProps, ref) {
	  const props = (0, _useThemeProps$4.default)({
	    props: inProps,
	    name: 'MuiFormHelperText'
	  });
	  const {
	    children,
	    className,
	    component = 'p'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$7.default)(props, _excluded$7);
	  const muiFormControl = (0, _useFormControl$1.default)();
	  const fcs = (0, _formControlState$1.default)({
	    props,
	    muiFormControl,
	    states: ['variant', 'size', 'disabled', 'error', 'filled', 'focused', 'required']
	  });
	  const ownerState = (0, _extends2$7.default)({}, props, {
	    component,
	    contained: fcs.variant === 'filled' || fcs.variant === 'outlined',
	    variant: fcs.variant,
	    size: fcs.size,
	    disabled: fcs.disabled,
	    error: fcs.error,
	    filled: fcs.filled,
	    focused: fcs.focused,
	    required: fcs.required
	  });
	  const classes = useUtilityClasses$5(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$8.jsx)(FormHelperTextRoot, (0, _extends2$7.default)({
	    as: component,
	    ownerState: ownerState,
	    className: (0, _clsx$6.default)(classes.root, className),
	    ref: ref
	  }, other, {
	    children: children === ' ' ? // notranslate needed while Google Translate will not fix zero-width space issue
	    _span$1 || (_span$1 = /*#__PURE__*/(0, _jsxRuntime$8.jsx)("span", {
	      className: "notranslate",
	      children: "\u200B"
	    })) : children
	  }));
	});
	FormHelperText.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   *
	   * If `' '` is provided, the component reserves one line height for displaying a future message.
	   */
	  children: _propTypes$7.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$7.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$7.default.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: _propTypes$7.default.elementType,

	  /**
	   * If `true`, the helper text should be displayed in a disabled state.
	   */
	  disabled: _propTypes$7.default.bool,

	  /**
	   * If `true`, helper text should be displayed in an error state.
	   */
	  error: _propTypes$7.default.bool,

	  /**
	   * If `true`, the helper text should use filled classes key.
	   */
	  filled: _propTypes$7.default.bool,

	  /**
	   * If `true`, the helper text should use focused classes key.
	   */
	  focused: _propTypes$7.default.bool,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: _propTypes$7.default.oneOf(['dense']),

	  /**
	   * If `true`, the helper text should use required classes key.
	   */
	  required: _propTypes$7.default.bool,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$7.default.oneOfType([_propTypes$7.default.arrayOf(_propTypes$7.default.oneOfType([_propTypes$7.default.func, _propTypes$7.default.object, _propTypes$7.default.bool])), _propTypes$7.default.func, _propTypes$7.default.object]),

	  /**
	   * The variant to use.
	   */
	  variant: _propTypes$7.default.oneOf(['filled', 'outlined', 'standard'])
	} ;
	var _default$d = FormHelperText;
	FormHelperText$1.default = _default$d;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  formHelperTextClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _FormHelperText.default;
		  }
		});
		Object.defineProperty(exports, "formHelperTextClasses", {
		  enumerable: true,
		  get: function () {
		    return _formHelperTextClasses.default;
		  }
		});

		var _FormHelperText = _interopRequireDefault(FormHelperText$1);

		var _formHelperTextClasses = _interopRequireWildcard(formHelperTextClasses$1);

		Object.keys(_formHelperTextClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _formHelperTextClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _formHelperTextClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (FormHelperText$2));

	var Select$2 = {};

	var Select$1 = {};

	var SelectInput$1 = {};

	var Menu$1 = {};

	var MenuList$2 = {};

	var MenuList$1 = {};

	var getScrollbarSize = {};

	Object.defineProperty(getScrollbarSize, "__esModule", {
	  value: true
	});
	getScrollbarSize.default = void 0;

	var _utils$6 = utils$h;

	var _default$c = _utils$6.unstable_getScrollbarSize;
	getScrollbarSize.default = _default$c;

	var _interopRequireDefault$7 = interopRequireDefault.exports;

	Object.defineProperty(MenuList$1, "__esModule", {
	  value: true
	});
	MenuList$1.default = void 0;

	var _extends2$6 = _interopRequireDefault$7(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$6 = _interopRequireDefault$7(objectWithoutPropertiesLoose.exports);

	var React$7 = _interopRequireWildcard$7(require$$3);

	var _reactIs$2 = reactIs.exports;

	var _propTypes$6 = _interopRequireDefault$7(propTypes.exports);

	var _ownerDocument$1 = _interopRequireDefault$7(ownerDocument);

	var _List = _interopRequireDefault$7(List$3);

	var _getScrollbarSize = _interopRequireDefault$7(getScrollbarSize);

	var _useForkRef$2 = _interopRequireDefault$7(useForkRef);

	var _useEnhancedEffect = _interopRequireDefault$7(useEnhancedEffect$1);

	var _jsxRuntime$7 = jsxRuntime;

	const _excluded$6 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];

	function _getRequireWildcardCache$7(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$7 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$7(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$7(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function nextItem(list, item, disableListWrap) {
	  if (list === item) {
	    return list.firstChild;
	  }

	  if (item && item.nextElementSibling) {
	    return item.nextElementSibling;
	  }

	  return disableListWrap ? null : list.firstChild;
	}

	function previousItem(list, item, disableListWrap) {
	  if (list === item) {
	    return disableListWrap ? list.firstChild : list.lastChild;
	  }

	  if (item && item.previousElementSibling) {
	    return item.previousElementSibling;
	  }

	  return disableListWrap ? null : list.lastChild;
	}

	function textCriteriaMatches(nextFocus, textCriteria) {
	  if (textCriteria === undefined) {
	    return true;
	  }

	  let text = nextFocus.innerText;

	  if (text === undefined) {
	    // jsdom doesn't support innerText
	    text = nextFocus.textContent;
	  }

	  text = text.trim().toLowerCase();

	  if (text.length === 0) {
	    return false;
	  }

	  if (textCriteria.repeating) {
	    return text[0] === textCriteria.keys[0];
	  }

	  return text.indexOf(textCriteria.keys.join('')) === 0;
	}

	function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
	  let wrappedOnce = false;
	  let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);

	  while (nextFocus) {
	    // Prevent infinite loop.
	    if (nextFocus === list.firstChild) {
	      if (wrappedOnce) {
	        return false;
	      }

	      wrappedOnce = true;
	    } // Same logic as useAutocomplete.js


	    const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';

	    if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
	      // Move to the next element.
	      nextFocus = traversalFunction(list, nextFocus, disableListWrap);
	    } else {
	      nextFocus.focus();
	      return true;
	    }
	  }

	  return false;
	}
	/**
	 * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.
	 * It's exposed to help customization of the [`Menu`](/api/menu/) component if you
	 * use it separately you need to move focus into the component manually. Once
	 * the focus is placed inside the component it is fully keyboard accessible.
	 */


	const MenuList = /*#__PURE__*/React$7.forwardRef(function MenuList(props, ref) {
	  const {
	    // private
	    // eslint-disable-next-line react/prop-types
	    actions,
	    autoFocus = false,
	    autoFocusItem = false,
	    children,
	    className,
	    disabledItemsFocusable = false,
	    disableListWrap = false,
	    onKeyDown,
	    variant = 'selectedMenu'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$6.default)(props, _excluded$6);
	  const listRef = React$7.useRef(null);
	  const textCriteriaRef = React$7.useRef({
	    keys: [],
	    repeating: true,
	    previousKeyMatched: true,
	    lastTime: null
	  });
	  (0, _useEnhancedEffect.default)(() => {
	    if (autoFocus) {
	      listRef.current.focus();
	    }
	  }, [autoFocus]);
	  React$7.useImperativeHandle(actions, () => ({
	    adjustStyleForScrollbar: (containerElement, theme) => {
	      // Let's ignore that piece of logic if users are already overriding the width
	      // of the menu.
	      const noExplicitWidth = !listRef.current.style.width;

	      if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
	        const scrollbarSize = `${(0, _getScrollbarSize.default)((0, _ownerDocument$1.default)(containerElement))}px`;
	        listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
	        listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
	      }

	      return listRef.current;
	    }
	  }), []);

	  const handleKeyDown = event => {
	    const list = listRef.current;
	    const key = event.key;
	    /**
	     * @type {Element} - will always be defined since we are in a keydown handler
	     * attached to an element. A keydown event is either dispatched to the activeElement
	     * or document.body or document.documentElement. Only the first case will
	     * trigger this specific handler.
	     */

	    const currentFocus = (0, _ownerDocument$1.default)(list).activeElement;

	    if (key === 'ArrowDown') {
	      // Prevent scroll of the page
	      event.preventDefault();
	      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
	    } else if (key === 'ArrowUp') {
	      event.preventDefault();
	      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
	    } else if (key === 'Home') {
	      event.preventDefault();
	      moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
	    } else if (key === 'End') {
	      event.preventDefault();
	      moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
	    } else if (key.length === 1) {
	      const criteria = textCriteriaRef.current;
	      const lowerKey = key.toLowerCase();
	      const currTime = performance.now();

	      if (criteria.keys.length > 0) {
	        // Reset
	        if (currTime - criteria.lastTime > 500) {
	          criteria.keys = [];
	          criteria.repeating = true;
	          criteria.previousKeyMatched = true;
	        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
	          criteria.repeating = false;
	        }
	      }

	      criteria.lastTime = currTime;
	      criteria.keys.push(lowerKey);
	      const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);

	      if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
	        event.preventDefault();
	      } else {
	        criteria.previousKeyMatched = false;
	      }
	    }

	    if (onKeyDown) {
	      onKeyDown(event);
	    }
	  };

	  const handleRef = (0, _useForkRef$2.default)(listRef, ref);
	  /**
	   * the index of the item should receive focus
	   * in a `variant="selectedMenu"` it's the first `selected` item
	   * otherwise it's the very first item.
	   */

	  let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
	  // to check if there is a `selected` item. We're looking for the last `selected`
	  // item and use the first valid item as a fallback

	  React$7.Children.forEach(children, (child, index) => {
	    if (! /*#__PURE__*/React$7.isValidElement(child)) {
	      return;
	    }

	    {
	      if ((0, _reactIs$2.isFragment)(child)) {
	        console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    if (!child.props.disabled) {
	      if (variant === 'selectedMenu' && child.props.selected) {
	        activeItemIndex = index;
	      } else if (activeItemIndex === -1) {
	        activeItemIndex = index;
	      }
	    }
	  });
	  const items = React$7.Children.map(children, (child, index) => {
	    if (index === activeItemIndex) {
	      const newChildProps = {};

	      if (autoFocusItem) {
	        newChildProps.autoFocus = true;
	      }

	      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {
	        newChildProps.tabIndex = 0;
	      }

	      return /*#__PURE__*/React$7.cloneElement(child, newChildProps);
	    }

	    return child;
	  });
	  return /*#__PURE__*/(0, _jsxRuntime$7.jsx)(_List.default, (0, _extends2$6.default)({
	    role: "menu",
	    ref: handleRef,
	    className: className,
	    onKeyDown: handleKeyDown,
	    tabIndex: autoFocus ? 0 : -1
	  }, other, {
	    children: items
	  }));
	});
	MenuList.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, will focus the `[role="menu"]` container and move into tab order.
	   * @default false
	   */
	  autoFocus: _propTypes$6.default.bool,

	  /**
	   * If `true`, will focus the first menuitem if `variant="menu"` or selected item
	   * if `variant="selectedMenu"`.
	   * @default false
	   */
	  autoFocusItem: _propTypes$6.default.bool,

	  /**
	   * MenuList contents, normally `MenuItem`s.
	   */
	  children: _propTypes$6.default.node,

	  /**
	   * @ignore
	   */
	  className: _propTypes$6.default.string,

	  /**
	   * If `true`, will allow focus on disabled items.
	   * @default false
	   */
	  disabledItemsFocusable: _propTypes$6.default.bool,

	  /**
	   * If `true`, the menu items will not wrap focus.
	   * @default false
	   */
	  disableListWrap: _propTypes$6.default.bool,

	  /**
	   * @ignore
	   */
	  onKeyDown: _propTypes$6.default.func,

	  /**
	   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
	   * and the vertical alignment relative to the anchor element.
	   * @default 'selectedMenu'
	   */
	  variant: _propTypes$6.default.oneOf(['menu', 'selectedMenu'])
	} ;
	var _default$b = MenuList;
	MenuList$1.default = _default$b;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _MenuList.default;
		  }
		});

		var _MenuList = _interopRequireDefault(MenuList$1);
	} (MenuList$2));

	var menuClasses$1 = {};

	Object.defineProperty(menuClasses$1, "__esModule", {
	  value: true
	});
	menuClasses$1.default = void 0;
	menuClasses$1.getMenuUtilityClass = getMenuUtilityClass;

	var _base$8 = node$1;

	function getMenuUtilityClass(slot) {
	  return (0, _base$8.generateUtilityClass)('MuiMenu', slot);
	}

	const menuClasses = (0, _base$8.generateUtilityClasses)('MuiMenu', ['root', 'paper', 'list']);
	var _default$a = menuClasses;
	menuClasses$1.default = _default$a;

	var _interopRequireDefault$6 = interopRequireDefault.exports;

	Object.defineProperty(Menu$1, "__esModule", {
	  value: true
	});
	Menu$1.default = void 0;

	var _extends2$5 = _interopRequireDefault$6(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$5 = _interopRequireDefault$6(objectWithoutPropertiesLoose.exports);

	var React$6 = _interopRequireWildcard$6(require$$3);

	var _reactIs$1 = reactIs.exports;

	var _propTypes$5 = _interopRequireDefault$6(propTypes.exports);

	var _clsx$5 = _interopRequireDefault$6(clsx$1);

	var _base$7 = node$1;

	var _utils$5 = utils$h;

	var _MenuList = _interopRequireDefault$6(MenuList$2);

	var _Paper = _interopRequireDefault$6(Paper$2);

	var _Popover = _interopRequireDefault$6(Popover$3);

	var _styled$4 = _interopRequireWildcard$6(styled$1);

	var _useTheme$1 = _interopRequireDefault$6(useTheme$8);

	var _useThemeProps$3 = _interopRequireDefault$6(useThemeProps$1);

	var _menuClasses = menuClasses$1;

	var _jsxRuntime$6 = jsxRuntime;

	const _excluded$5 = ["onEntering"],
	      _excluded2 = ["autoFocus", "children", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"];

	function _getRequireWildcardCache$6(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$6 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$6(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$6(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const RTL_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'right'
	};
	const LTR_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'left'
	};

	const useUtilityClasses$4 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    paper: ['paper'],
	    list: ['list']
	  };
	  return (0, _base$7.unstable_composeClasses)(slots, _menuClasses.getMenuUtilityClass, classes);
	};

	const MenuRoot = (0, _styled$4.default)(_Popover.default, {
	  shouldForwardProp: prop => (0, _styled$4.rootShouldForwardProp)(prop) || prop === 'classes',
	  name: 'MuiMenu',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const MenuPaper = (0, _styled$4.default)(_Paper.default, {
	  name: 'MuiMenu',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})({
	  // specZ: The maximum height of a simple menu should be one or more rows less than the view
	  // height. This ensures a tapable area outside of the simple menu with which to dismiss
	  // the menu.
	  maxHeight: 'calc(100% - 96px)',
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch'
	});
	const MenuMenuList = (0, _styled$4.default)(_MenuList.default, {
	  name: 'MuiMenu',
	  slot: 'List',
	  overridesResolver: (props, styles) => styles.list
	})({
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	});
	const Menu = /*#__PURE__*/React$6.forwardRef(function Menu(inProps, ref) {
	  const props = (0, _useThemeProps$3.default)({
	    props: inProps,
	    name: 'MuiMenu'
	  });
	  const {
	    autoFocus = true,
	    children,
	    disableAutoFocusItem = false,
	    MenuListProps = {},
	    onClose,
	    open,
	    PaperProps = {},
	    PopoverClasses,
	    transitionDuration = 'auto',
	    TransitionProps: {
	      onEntering
	    } = {},
	    variant = 'selectedMenu'
	  } = props,
	        TransitionProps = (0, _objectWithoutPropertiesLoose2$5.default)(props.TransitionProps, _excluded$5),
	        other = (0, _objectWithoutPropertiesLoose2$5.default)(props, _excluded2);
	  const theme = (0, _useTheme$1.default)();
	  const isRtl = theme.direction === 'rtl';
	  const ownerState = (0, _extends2$5.default)({}, props, {
	    autoFocus,
	    disableAutoFocusItem,
	    MenuListProps,
	    onEntering,
	    PaperProps,
	    transitionDuration,
	    TransitionProps,
	    variant
	  });
	  const classes = useUtilityClasses$4(ownerState);
	  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
	  const menuListActionsRef = React$6.useRef(null);

	  const handleEntering = (element, isAppearing) => {
	    if (menuListActionsRef.current) {
	      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
	    }

	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }
	  };

	  const handleListKeyDown = event => {
	    if (event.key === 'Tab') {
	      event.preventDefault();

	      if (onClose) {
	        onClose(event, 'tabKeyDown');
	      }
	    }
	  };
	  /**
	   * the index of the item should receive focus
	   * in a `variant="selectedMenu"` it's the first `selected` item
	   * otherwise it's the very first item.
	   */


	  let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
	  // to check if there is a `selected` item. We're looking for the last `selected`
	  // item and use the first valid item as a fallback

	  React$6.Children.map(children, (child, index) => {
	    if (! /*#__PURE__*/React$6.isValidElement(child)) {
	      return;
	    }

	    {
	      if ((0, _reactIs$1.isFragment)(child)) {
	        console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    if (!child.props.disabled) {
	      if (variant === 'selectedMenu' && child.props.selected) {
	        activeItemIndex = index;
	      } else if (activeItemIndex === -1) {
	        activeItemIndex = index;
	      }
	    }
	  });
	  return /*#__PURE__*/(0, _jsxRuntime$6.jsx)(MenuRoot, (0, _extends2$5.default)({
	    classes: PopoverClasses,
	    onClose: onClose,
	    anchorOrigin: {
	      vertical: 'bottom',
	      horizontal: isRtl ? 'right' : 'left'
	    },
	    transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
	    PaperProps: (0, _extends2$5.default)({
	      component: MenuPaper
	    }, PaperProps, {
	      classes: (0, _extends2$5.default)({}, PaperProps.classes, {
	        root: classes.paper
	      })
	    }),
	    className: classes.root,
	    open: open,
	    ref: ref,
	    transitionDuration: transitionDuration,
	    TransitionProps: (0, _extends2$5.default)({
	      onEntering: handleEntering
	    }, TransitionProps),
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/(0, _jsxRuntime$6.jsx)(MenuMenuList, (0, _extends2$5.default)({
	      onKeyDown: handleListKeyDown,
	      actions: menuListActionsRef,
	      autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
	      autoFocusItem: autoFocusItem,
	      variant: variant
	    }, MenuListProps, {
	      className: (0, _clsx$5.default)(classes.list, MenuListProps.className),
	      children: children
	    }))
	  }));
	});
	Menu.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * An HTML element, or a function that returns one.
	   * It's used to set the position of the menu.
	   */
	  anchorEl: _propTypes$5.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_utils$5.HTMLElementType, _propTypes$5.default.func]),

	  /**
	   * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
	   * children are not focusable. If you set this prop to `false` focus will be placed
	   * on the parent modal container. This has severe accessibility implications
	   * and should only be considered if you manage focus otherwise.
	   * @default true
	   */
	  autoFocus: _propTypes$5.default.bool,

	  /**
	   * Menu contents, normally `MenuItem`s.
	   */
	  children: _propTypes$5.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$5.default.object,

	  /**
	   * When opening the menu will not focus the active item but the `[role="menu"]`
	   * unless `autoFocus` is also set to `false`. Not using the default means not
	   * following WAI-ARIA authoring practices. Please be considerate about possible
	   * accessibility implications.
	   * @default false
	   */
	  disableAutoFocusItem: _propTypes$5.default.bool,

	  /**
	   * Props applied to the [`MenuList`](/api/menu-list/) element.
	   * @default {}
	   */
	  MenuListProps: _propTypes$5.default.object,

	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
	   */
	  onClose: _propTypes$5.default.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: _propTypes$5.default.bool.isRequired,

	  /**
	   * @ignore
	   */
	  PaperProps: _propTypes$5.default.object,

	  /**
	   * `classes` prop applied to the [`Popover`](/api/popover/) element.
	   */
	  PopoverClasses: _propTypes$5.default.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$5.default.oneOfType([_propTypes$5.default.arrayOf(_propTypes$5.default.oneOfType([_propTypes$5.default.func, _propTypes$5.default.object, _propTypes$5.default.bool])), _propTypes$5.default.func, _propTypes$5.default.object]),

	  /**
	   * The length of the transition in `ms`, or 'auto'
	   * @default 'auto'
	   */
	  transitionDuration: _propTypes$5.default.oneOfType([_propTypes$5.default.oneOf(['auto']), _propTypes$5.default.number, _propTypes$5.default.shape({
	    appear: _propTypes$5.default.number,
	    enter: _propTypes$5.default.number,
	    exit: _propTypes$5.default.number
	  })]),

	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   * @default {}
	   */
	  TransitionProps: _propTypes$5.default.object,

	  /**
	   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
	   * @default 'selectedMenu'
	   */
	  variant: _propTypes$5.default.oneOf(['menu', 'selectedMenu'])
	} ;
	var _default$9 = Menu;
	Menu$1.default = _default$9;

	var NativeSelectInput$1 = {};

	var nativeSelectClasses$1 = {};

	Object.defineProperty(nativeSelectClasses$1, "__esModule", {
	  value: true
	});
	nativeSelectClasses$1.default = void 0;
	nativeSelectClasses$1.getNativeSelectUtilityClasses = getNativeSelectUtilityClasses;

	var _base$6 = node$1;

	function getNativeSelectUtilityClasses(slot) {
	  return (0, _base$6.generateUtilityClass)('MuiNativeSelect', slot);
	}

	const nativeSelectClasses = (0, _base$6.generateUtilityClasses)('MuiNativeSelect', ['root', 'select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput']);
	var _default$8 = nativeSelectClasses;
	nativeSelectClasses$1.default = _default$8;

	var _interopRequireDefault$5 = interopRequireDefault.exports;

	Object.defineProperty(NativeSelectInput$1, "__esModule", {
	  value: true
	});
	NativeSelectInput$1.nativeSelectSelectStyles = NativeSelectInput$1.nativeSelectIconStyles = NativeSelectInput$1.default = void 0;

	var _objectWithoutPropertiesLoose2$4 = _interopRequireDefault$5(objectWithoutPropertiesLoose.exports);

	var _extends2$4 = _interopRequireDefault$5(_extends$5.exports);

	var React$5 = _interopRequireWildcard$5(require$$3);

	var _propTypes$4 = _interopRequireDefault$5(propTypes.exports);

	var _clsx$4 = _interopRequireDefault$5(clsx$1);

	var _utils$4 = utils$h;

	var _base$5 = node$1;

	var _capitalize$2 = _interopRequireDefault$5(capitalize);

	var _nativeSelectClasses = _interopRequireWildcard$5(nativeSelectClasses$1);

	var _styled$3 = _interopRequireWildcard$5(styled$1);

	var _jsxRuntime$5 = jsxRuntime;

	const _excluded$4 = ["className", "disabled", "IconComponent", "inputRef", "variant"];

	function _getRequireWildcardCache$5(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$5 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$5(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$5(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$3 = ownerState => {
	  const {
	    classes,
	    variant,
	    disabled,
	    multiple,
	    open
	  } = ownerState;
	  const slots = {
	    select: ['select', variant, disabled && 'disabled', multiple && 'multiple'],
	    icon: ['icon', `icon${(0, _capitalize$2.default)(variant)}`, open && 'iconOpen', disabled && 'disabled']
	  };
	  return (0, _base$5.unstable_composeClasses)(slots, _nativeSelectClasses.getNativeSelectUtilityClasses, classes);
	};

	const nativeSelectSelectStyles = ({
	  ownerState,
	  theme
	}) => (0, _extends2$4.default)({
	  MozAppearance: 'none',
	  // Reset
	  WebkitAppearance: 'none',
	  // Reset
	  // When interacting quickly, the text can end up selected.
	  // Native select can't be selected either.
	  userSelect: 'none',
	  borderRadius: 0,
	  // Reset
	  cursor: 'pointer',
	  '&:focus': {
	    // Show that it's not an text input
	    backgroundColor: theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
	    borderRadius: 0 // Reset Chrome style

	  },
	  // Remove IE11 arrow
	  '&::-ms-expand': {
	    display: 'none'
	  },
	  [`&.${_nativeSelectClasses.default.disabled}`]: {
	    cursor: 'default'
	  },
	  '&[multiple]': {
	    height: 'auto'
	  },
	  '&:not([multiple]) option, &:not([multiple]) optgroup': {
	    backgroundColor: theme.palette.background.paper
	  },
	  // Bump specificity to allow extending custom inputs
	  '&&&': {
	    paddingRight: 24,
	    minWidth: 16 // So it doesn't collapse.

	  }
	}, ownerState.variant === 'filled' && {
	  '&&&': {
	    paddingRight: 32
	  }
	}, ownerState.variant === 'outlined' && {
	  borderRadius: theme.shape.borderRadius,
	  '&:focus': {
	    borderRadius: theme.shape.borderRadius // Reset the reset for Chrome style

	  },
	  '&&&': {
	    paddingRight: 32
	  }
	});

	NativeSelectInput$1.nativeSelectSelectStyles = nativeSelectSelectStyles;
	const NativeSelectSelect = (0, _styled$3.default)('select', {
	  name: 'MuiNativeSelect',
	  slot: 'Select',
	  shouldForwardProp: _styled$3.rootShouldForwardProp,
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.select, styles[ownerState.variant], {
	      [`&.${_nativeSelectClasses.default.multiple}`]: styles.multiple
	    }];
	  }
	})(nativeSelectSelectStyles);

	const nativeSelectIconStyles = ({
	  ownerState,
	  theme
	}) => (0, _extends2$4.default)({
	  // We use a position absolute over a flexbox in order to forward the pointer events
	  // to the input and to support wrapping tags..
	  position: 'absolute',
	  right: 0,
	  top: 'calc(50% - .5em)',
	  // Center vertically, height is 1em
	  pointerEvents: 'none',
	  // Don't block pointer events on the select under the icon.
	  color: theme.palette.action.active,
	  [`&.${_nativeSelectClasses.default.disabled}`]: {
	    color: theme.palette.action.disabled
	  }
	}, ownerState.open && {
	  transform: 'rotate(180deg)'
	}, ownerState.variant === 'filled' && {
	  right: 7
	}, ownerState.variant === 'outlined' && {
	  right: 7
	});

	NativeSelectInput$1.nativeSelectIconStyles = nativeSelectIconStyles;
	const NativeSelectIcon = (0, _styled$3.default)('svg', {
	  name: 'MuiNativeSelect',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.icon, ownerState.variant && styles[`icon${(0, _capitalize$2.default)(ownerState.variant)}`], ownerState.open && styles.iconOpen];
	  }
	})(nativeSelectIconStyles);
	/**
	 * @ignore - internal component.
	 */

	const NativeSelectInput = /*#__PURE__*/React$5.forwardRef(function NativeSelectInput(props, ref) {
	  const {
	    className,
	    disabled,
	    IconComponent,
	    inputRef,
	    variant = 'standard'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$4.default)(props, _excluded$4);
	  const ownerState = (0, _extends2$4.default)({}, props, {
	    disabled,
	    variant
	  });
	  const classes = useUtilityClasses$3(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$5.jsxs)(React$5.Fragment, {
	    children: [/*#__PURE__*/(0, _jsxRuntime$5.jsx)(NativeSelectSelect, (0, _extends2$4.default)({
	      ownerState: ownerState,
	      className: (0, _clsx$4.default)(classes.select, className),
	      disabled: disabled,
	      ref: inputRef || ref
	    }, other)), props.multiple ? null : /*#__PURE__*/(0, _jsxRuntime$5.jsx)(NativeSelectIcon, {
	      as: IconComponent,
	      ownerState: ownerState,
	      className: classes.icon
	    })]
	  });
	});
	NativeSelectInput.propTypes = {
	  /**
	   * The option elements to populate the select with.
	   * Can be some `<option>` elements.
	   */
	  children: _propTypes$4.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: _propTypes$4.default.object,

	  /**
	   * The CSS class name of the select element.
	   */
	  className: _propTypes$4.default.string,

	  /**
	   * If `true`, the select is disabled.
	   */
	  disabled: _propTypes$4.default.bool,

	  /**
	   * The icon that displays the arrow.
	   */
	  IconComponent: _propTypes$4.default.elementType.isRequired,

	  /**
	   * Use that prop to pass a ref to the native select element.
	   * @deprecated
	   */
	  inputRef: _utils$4.refType,

	  /**
	   * @ignore
	   */
	  multiple: _propTypes$4.default.bool,

	  /**
	   * Name attribute of the `select` or hidden `input` element.
	   */
	  name: _propTypes$4.default.string,

	  /**
	   * Callback fired when a menu item is selected.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: _propTypes$4.default.func,

	  /**
	   * The input value.
	   */
	  value: _propTypes$4.default.any,

	  /**
	   * The variant to use.
	   */
	  variant: _propTypes$4.default.oneOf(['standard', 'outlined', 'filled'])
	} ;
	var _default$7 = NativeSelectInput;
	NativeSelectInput$1.default = _default$7;

	var selectClasses$1 = {};

	Object.defineProperty(selectClasses$1, "__esModule", {
	  value: true
	});
	selectClasses$1.default = void 0;
	selectClasses$1.getSelectUtilityClasses = getSelectUtilityClasses;

	var _base$4 = node$1;

	function getSelectUtilityClasses(slot) {
	  return (0, _base$4.generateUtilityClass)('MuiSelect', slot);
	}

	const selectClasses = (0, _base$4.generateUtilityClasses)('MuiSelect', ['select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'focused', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput']);
	var _default$6 = selectClasses;
	selectClasses$1.default = _default$6;

	var _interopRequireDefault$4 = interopRequireDefault.exports;

	Object.defineProperty(SelectInput$1, "__esModule", {
	  value: true
	});
	SelectInput$1.default = void 0;

	var _extends2$3 = _interopRequireDefault$4(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$3 = _interopRequireDefault$4(objectWithoutPropertiesLoose.exports);

	var _utils$3 = utils$h;

	var React$4 = _interopRequireWildcard$4(require$$3);

	var _reactIs = reactIs.exports;

	var _propTypes$3 = _interopRequireDefault$4(propTypes.exports);

	var _clsx$3 = _interopRequireDefault$4(clsx$1);

	var _base$3 = node$1;

	var _ownerDocument = _interopRequireDefault$4(ownerDocument);

	var _capitalize$1 = _interopRequireDefault$4(capitalize);

	var _Menu = _interopRequireDefault$4(Menu$1);

	var _NativeSelectInput$1 = NativeSelectInput$1;

	var _utils2 = utils$1;

	var _styled$2 = _interopRequireWildcard$4(styled$1);

	var _useForkRef$1 = _interopRequireDefault$4(useForkRef);

	var _useControlled = _interopRequireDefault$4(useControlled);

	var _selectClasses = _interopRequireWildcard$4(selectClasses$1);

	var _jsxRuntime$4 = jsxRuntime;

	var _span;

	const _excluded$3 = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];

	function _getRequireWildcardCache$4(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$4 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$4(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$4(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const SelectSelect = (0, _styled$2.default)('div', {
	  name: 'MuiSelect',
	  slot: 'Select',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [// Win specificity over the input base
	    {
	      [`&.${_selectClasses.default.select}`]: styles.select
	    }, {
	      [`&.${_selectClasses.default.select}`]: styles[ownerState.variant]
	    }, {
	      [`&.${_selectClasses.default.multiple}`]: styles.multiple
	    }];
	  }
	})(_NativeSelectInput$1.nativeSelectSelectStyles, {
	  // Win specificity over the input base
	  [`&.${_selectClasses.default.select}`]: {
	    height: 'auto',
	    // Resets for multiple select with chips
	    minHeight: '1.4375em',
	    // Required for select\text-field height consistency
	    textOverflow: 'ellipsis',
	    whiteSpace: 'nowrap',
	    overflow: 'hidden'
	  }
	});
	const SelectIcon = (0, _styled$2.default)('svg', {
	  name: 'MuiSelect',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.icon, ownerState.variant && styles[`icon${(0, _capitalize$1.default)(ownerState.variant)}`], ownerState.open && styles.iconOpen];
	  }
	})(_NativeSelectInput$1.nativeSelectIconStyles);
	const SelectNativeInput = (0, _styled$2.default)('input', {
	  shouldForwardProp: prop => (0, _styled$2.slotShouldForwardProp)(prop) && prop !== 'classes',
	  name: 'MuiSelect',
	  slot: 'NativeInput',
	  overridesResolver: (props, styles) => styles.nativeInput
	})({
	  bottom: 0,
	  left: 0,
	  position: 'absolute',
	  opacity: 0,
	  pointerEvents: 'none',
	  width: '100%',
	  boxSizing: 'border-box'
	});

	function areEqualValues(a, b) {
	  if (typeof b === 'object' && b !== null) {
	    return a === b;
	  } // The value could be a number, the DOM will stringify it anyway.


	  return String(a) === String(b);
	}

	function isEmpty(display) {
	  return display == null || typeof display === 'string' && !display.trim();
	}

	const useUtilityClasses$2 = ownerState => {
	  const {
	    classes,
	    variant,
	    disabled,
	    multiple,
	    open
	  } = ownerState;
	  const slots = {
	    select: ['select', variant, disabled && 'disabled', multiple && 'multiple'],
	    icon: ['icon', `icon${(0, _capitalize$1.default)(variant)}`, open && 'iconOpen', disabled && 'disabled'],
	    nativeInput: ['nativeInput']
	  };
	  return (0, _base$3.unstable_composeClasses)(slots, _selectClasses.getSelectUtilityClasses, classes);
	};
	/**
	 * @ignore - internal component.
	 */


	const SelectInput = /*#__PURE__*/React$4.forwardRef(function SelectInput(props, ref) {
	  const {
	    'aria-describedby': ariaDescribedby,
	    'aria-label': ariaLabel,
	    autoFocus,
	    autoWidth,
	    children,
	    className,
	    defaultOpen,
	    defaultValue,
	    disabled,
	    displayEmpty,
	    IconComponent,
	    inputRef: inputRefProp,
	    labelId,
	    MenuProps = {},
	    multiple,
	    name,
	    onBlur,
	    onChange,
	    onClose,
	    onFocus,
	    onOpen,
	    open: openProp,
	    readOnly,
	    renderValue,
	    SelectDisplayProps = {},
	    tabIndex: tabIndexProp,
	    value: valueProp,
	    variant = 'standard'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$3.default)(props, _excluded$3);
	  const [value, setValueState] = (0, _useControlled.default)({
	    controlled: valueProp,
	    default: defaultValue,
	    name: 'Select'
	  });
	  const [openState, setOpenState] = (0, _useControlled.default)({
	    controlled: openProp,
	    default: defaultOpen,
	    name: 'Select'
	  });
	  const inputRef = React$4.useRef(null);
	  const displayRef = React$4.useRef(null);
	  const [displayNode, setDisplayNode] = React$4.useState(null);
	  const {
	    current: isOpenControlled
	  } = React$4.useRef(openProp != null);
	  const [menuMinWidthState, setMenuMinWidthState] = React$4.useState();
	  const handleRef = (0, _useForkRef$1.default)(ref, inputRefProp);
	  const handleDisplayRef = React$4.useCallback(node => {
	    displayRef.current = node;

	    if (node) {
	      setDisplayNode(node);
	    }
	  }, []);
	  React$4.useImperativeHandle(handleRef, () => ({
	    focus: () => {
	      displayRef.current.focus();
	    },
	    node: inputRef.current,
	    value
	  }), [value]); // Resize menu on `defaultOpen` automatic toggle.

	  React$4.useEffect(() => {
	    if (defaultOpen && openState && displayNode && !isOpenControlled) {
	      setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
	      displayRef.current.focus();
	    } // eslint-disable-next-line react-hooks/exhaustive-deps

	  }, [displayNode, autoWidth]); // `isOpenControlled` is ignored because the component should never switch between controlled and uncontrolled modes.
	  // `defaultOpen` and `openState` are ignored to avoid unnecessary callbacks.

	  React$4.useEffect(() => {
	    if (autoFocus) {
	      displayRef.current.focus();
	    }
	  }, [autoFocus]);
	  React$4.useEffect(() => {
	    const label = (0, _ownerDocument.default)(displayRef.current).getElementById(labelId);

	    if (label) {
	      const handler = () => {
	        if (getSelection().isCollapsed) {
	          displayRef.current.focus();
	        }
	      };

	      label.addEventListener('click', handler);
	      return () => {
	        label.removeEventListener('click', handler);
	      };
	    }

	    return undefined;
	  }, [labelId]);

	  const update = (open, event) => {
	    if (open) {
	      if (onOpen) {
	        onOpen(event);
	      }
	    } else if (onClose) {
	      onClose(event);
	    }

	    if (!isOpenControlled) {
	      setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
	      setOpenState(open);
	    }
	  };

	  const handleMouseDown = event => {
	    // Ignore everything but left-click
	    if (event.button !== 0) {
	      return;
	    } // Hijack the default focus behavior.


	    event.preventDefault();
	    displayRef.current.focus();
	    update(true, event);
	  };

	  const handleClose = event => {
	    update(false, event);
	  };

	  const childrenArray = React$4.Children.toArray(children); // Support autofill.

	  const handleChange = event => {
	    const index = childrenArray.map(child => child.props.value).indexOf(event.target.value);

	    if (index === -1) {
	      return;
	    }

	    const child = childrenArray[index];
	    setValueState(child.props.value);

	    if (onChange) {
	      onChange(event, child);
	    }
	  };

	  const handleItemClick = child => event => {
	    let newValue; // We use the tabindex attribute to signal the available options.

	    if (!event.currentTarget.hasAttribute('tabindex')) {
	      return;
	    }

	    if (multiple) {
	      newValue = Array.isArray(value) ? value.slice() : [];
	      const itemIndex = value.indexOf(child.props.value);

	      if (itemIndex === -1) {
	        newValue.push(child.props.value);
	      } else {
	        newValue.splice(itemIndex, 1);
	      }
	    } else {
	      newValue = child.props.value;
	    }

	    if (child.props.onClick) {
	      child.props.onClick(event);
	    }

	    if (value !== newValue) {
	      setValueState(newValue);

	      if (onChange) {
	        // Redefine target to allow name and value to be read.
	        // This allows seamless integration with the most popular form libraries.
	        // https://github.com/mui-org/material-ui/issues/13485#issuecomment-676048492
	        // Clone the event to not override `target` of the original event.
	        const nativeEvent = event.nativeEvent || event;
	        const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
	        Object.defineProperty(clonedEvent, 'target', {
	          writable: true,
	          value: {
	            value: newValue,
	            name
	          }
	        });
	        onChange(clonedEvent, child);
	      }
	    }

	    if (!multiple) {
	      update(false, event);
	    }
	  };

	  const handleKeyDown = event => {
	    if (!readOnly) {
	      const validKeys = [' ', 'ArrowUp', 'ArrowDown', // The native select doesn't respond to enter on MacOS, but it's recommended by
	      // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html
	      'Enter'];

	      if (validKeys.indexOf(event.key) !== -1) {
	        event.preventDefault();
	        update(true, event);
	      }
	    }
	  };

	  const open = displayNode !== null && openState;

	  const handleBlur = event => {
	    // if open event.stopImmediatePropagation
	    if (!open && onBlur) {
	      // Preact support, target is read only property on a native event.
	      Object.defineProperty(event, 'target', {
	        writable: true,
	        value: {
	          value,
	          name
	        }
	      });
	      onBlur(event);
	    }
	  };

	  delete other['aria-invalid'];
	  let display;
	  let displaySingle;
	  const displayMultiple = [];
	  let computeDisplay = false;
	  let foundMatch = false; // No need to display any value if the field is empty.

	  if ((0, _utils2.isFilled)({
	    value
	  }) || displayEmpty) {
	    if (renderValue) {
	      display = renderValue(value);
	    } else {
	      computeDisplay = true;
	    }
	  }

	  const items = childrenArray.map(child => {
	    if (! /*#__PURE__*/React$4.isValidElement(child)) {
	      return null;
	    }

	    {
	      if ((0, _reactIs.isFragment)(child)) {
	        console.error(["MUI: The Select component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    let selected;

	    if (multiple) {
	      if (!Array.isArray(value)) {
	        throw new Error(`MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` );
	      }

	      selected = value.some(v => areEqualValues(v, child.props.value));

	      if (selected && computeDisplay) {
	        displayMultiple.push(child.props.children);
	      }
	    } else {
	      selected = areEqualValues(value, child.props.value);

	      if (selected && computeDisplay) {
	        displaySingle = child.props.children;
	      }
	    }

	    if (selected) {
	      foundMatch = true;
	    }

	    return /*#__PURE__*/React$4.cloneElement(child, {
	      'aria-selected': selected ? 'true' : 'false',
	      onClick: handleItemClick(child),
	      onKeyUp: event => {
	        if (event.key === ' ') {
	          // otherwise our MenuItems dispatches a click event
	          // it's not behavior of the native <option> and causes
	          // the select to close immediately since we open on space keydown
	          event.preventDefault();
	        }

	        if (child.props.onKeyUp) {
	          child.props.onKeyUp(event);
	        }
	      },
	      role: 'option',
	      selected,
	      value: undefined,
	      // The value is most likely not a valid HTML attribute.
	      'data-value': child.props.value // Instead, we provide it as a data attribute.

	    });
	  });

	  {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React$4.useEffect(() => {
	      if (!foundMatch && !multiple && value !== '') {
	        const values = childrenArray.map(child => child.props.value);
	        console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ''}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values.filter(x => x != null).map(x => `\`${x}\``).join(', ') || '""'}.`].join('\n'));
	      }
	    }, [foundMatch, childrenArray, multiple, name, value]);
	  }

	  if (computeDisplay) {
	    if (multiple) {
	      if (displayMultiple.length === 0) {
	        display = null;
	      } else {
	        display = displayMultiple.reduce((output, child, index) => {
	          output.push(child);

	          if (index < displayMultiple.length - 1) {
	            output.push(', ');
	          }

	          return output;
	        }, []);
	      }
	    } else {
	      display = displaySingle;
	    }
	  } // Avoid performing a layout computation in the render method.


	  let menuMinWidth = menuMinWidthState;

	  if (!autoWidth && isOpenControlled && displayNode) {
	    menuMinWidth = displayNode.clientWidth;
	  }

	  let tabIndex;

	  if (typeof tabIndexProp !== 'undefined') {
	    tabIndex = tabIndexProp;
	  } else {
	    tabIndex = disabled ? null : 0;
	  }

	  const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : undefined);
	  const ownerState = (0, _extends2$3.default)({}, props, {
	    variant,
	    value,
	    open
	  });
	  const classes = useUtilityClasses$2(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime$4.jsxs)(React$4.Fragment, {
	    children: [/*#__PURE__*/(0, _jsxRuntime$4.jsx)(SelectSelect, (0, _extends2$3.default)({
	      ref: handleDisplayRef,
	      tabIndex: tabIndex,
	      role: "button",
	      "aria-disabled": disabled ? 'true' : undefined,
	      "aria-expanded": open ? 'true' : 'false',
	      "aria-haspopup": "listbox",
	      "aria-label": ariaLabel,
	      "aria-labelledby": [labelId, buttonId].filter(Boolean).join(' ') || undefined,
	      "aria-describedby": ariaDescribedby,
	      onKeyDown: handleKeyDown,
	      onMouseDown: disabled || readOnly ? null : handleMouseDown,
	      onBlur: handleBlur,
	      onFocus: onFocus
	    }, SelectDisplayProps, {
	      ownerState: ownerState,
	      className: (0, _clsx$3.default)(classes.select, className, SelectDisplayProps.className) // The id is required for proper a11y
	      ,
	      id: buttonId,
	      children: isEmpty(display) ? // notranslate needed while Google Translate will not fix zero-width space issue
	      _span || (_span = /*#__PURE__*/(0, _jsxRuntime$4.jsx)("span", {
	        className: "notranslate",
	        children: "\u200B"
	      })) : display
	    })), /*#__PURE__*/(0, _jsxRuntime$4.jsx)(SelectNativeInput, (0, _extends2$3.default)({
	      value: Array.isArray(value) ? value.join(',') : value,
	      name: name,
	      ref: inputRef,
	      "aria-hidden": true,
	      onChange: handleChange,
	      tabIndex: -1,
	      disabled: disabled,
	      className: classes.nativeInput,
	      autoFocus: autoFocus,
	      ownerState: ownerState
	    }, other)), /*#__PURE__*/(0, _jsxRuntime$4.jsx)(SelectIcon, {
	      as: IconComponent,
	      className: classes.icon,
	      ownerState: ownerState
	    }), /*#__PURE__*/(0, _jsxRuntime$4.jsx)(_Menu.default, (0, _extends2$3.default)({
	      id: `menu-${name || ''}`,
	      anchorEl: displayNode,
	      open: open,
	      onClose: handleClose,
	      anchorOrigin: {
	        vertical: 'bottom',
	        horizontal: 'center'
	      },
	      transformOrigin: {
	        vertical: 'top',
	        horizontal: 'center'
	      }
	    }, MenuProps, {
	      MenuListProps: (0, _extends2$3.default)({
	        'aria-labelledby': labelId,
	        role: 'listbox',
	        disableListWrap: true
	      }, MenuProps.MenuListProps),
	      PaperProps: (0, _extends2$3.default)({}, MenuProps.PaperProps, {
	        style: (0, _extends2$3.default)({
	          minWidth: menuMinWidth
	        }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
	      }),
	      children: items
	    }))]
	  });
	});
	SelectInput.propTypes = {
	  /**
	   * @ignore
	   */
	  'aria-describedby': _propTypes$3.default.string,

	  /**
	   * @ignore
	   */
	  'aria-label': _propTypes$3.default.string,

	  /**
	   * @ignore
	   */
	  autoFocus: _propTypes$3.default.bool,

	  /**
	   * If `true`, the width of the popover will automatically be set according to the items inside the
	   * menu, otherwise it will be at least the width of the select input.
	   */
	  autoWidth: _propTypes$3.default.bool,

	  /**
	   * The option elements to populate the select with.
	   * Can be some `<MenuItem>` elements.
	   */
	  children: _propTypes$3.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: _propTypes$3.default.object,

	  /**
	   * The CSS class name of the select element.
	   */
	  className: _propTypes$3.default.string,

	  /**
	   * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
	   * You can only use it when the `native` prop is `false` (default).
	   */
	  defaultOpen: _propTypes$3.default.bool,

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: _propTypes$3.default.any,

	  /**
	   * If `true`, the select is disabled.
	   */
	  disabled: _propTypes$3.default.bool,

	  /**
	   * If `true`, the selected item is displayed even if its value is empty.
	   */
	  displayEmpty: _propTypes$3.default.bool,

	  /**
	   * The icon that displays the arrow.
	   */
	  IconComponent: _propTypes$3.default.elementType.isRequired,

	  /**
	   * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
	   * Equivalent to `ref`
	   */
	  inputRef: _utils$3.refType,

	  /**
	   * The ID of an element that acts as an additional label. The Select will
	   * be labelled by the additional label and the selected value.
	   */
	  labelId: _propTypes$3.default.string,

	  /**
	   * Props applied to the [`Menu`](/api/menu/) element.
	   */
	  MenuProps: _propTypes$3.default.object,

	  /**
	   * If `true`, `value` must be an array and the menu will support multiple selections.
	   */
	  multiple: _propTypes$3.default.bool,

	  /**
	   * Name attribute of the `select` or hidden `input` element.
	   */
	  name: _propTypes$3.default.string,

	  /**
	   * @ignore
	   */
	  onBlur: _propTypes$3.default.func,

	  /**
	   * Callback fired when a menu item is selected.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (any).
	   * @param {object} [child] The react element that was selected.
	   */
	  onChange: _propTypes$3.default.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   * Use in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onClose: _propTypes$3.default.func,

	  /**
	   * @ignore
	   */
	  onFocus: _propTypes$3.default.func,

	  /**
	   * Callback fired when the component requests to be opened.
	   * Use in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onOpen: _propTypes$3.default.func,

	  /**
	   * If `true`, the component is shown.
	   */
	  open: _propTypes$3.default.bool,

	  /**
	   * @ignore
	   */
	  readOnly: _propTypes$3.default.bool,

	  /**
	   * Render the selected value.
	   *
	   * @param {any} value The `value` provided to the component.
	   * @returns {ReactNode}
	   */
	  renderValue: _propTypes$3.default.func,

	  /**
	   * Props applied to the clickable div element.
	   */
	  SelectDisplayProps: _propTypes$3.default.object,

	  /**
	   * @ignore
	   */
	  tabIndex: _propTypes$3.default.oneOfType([_propTypes$3.default.number, _propTypes$3.default.string]),

	  /**
	   * @ignore
	   */
	  type: _propTypes$3.default.any,

	  /**
	   * The input value.
	   */
	  value: _propTypes$3.default.any,

	  /**
	   * The variant to use.
	   */
	  variant: _propTypes$3.default.oneOf(['standard', 'outlined', 'filled'])
	} ;
	var _default$5 = SelectInput;
	SelectInput$1.default = _default$5;

	var ArrowDropDown = {};

	var _interopRequireDefault$3 = interopRequireDefault.exports;

	Object.defineProperty(ArrowDropDown, "__esModule", {
	  value: true
	});
	ArrowDropDown.default = void 0;

	_interopRequireWildcard$3(require$$3);

	var _createSvgIcon = _interopRequireDefault$3(createSvgIcon$2);

	var _jsxRuntime$3 = jsxRuntime;

	function _getRequireWildcardCache$3(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$3 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$3(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$3(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	/**
	 * @ignore - internal component.
	 */
	var _default$4 = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime$3.jsx)("path", {
	  d: "M7 10l5 5 5-5z"
	}), 'ArrowDropDown');

	ArrowDropDown.default = _default$4;

	var _interopRequireDefault$2 = interopRequireDefault.exports;

	Object.defineProperty(Select$1, "__esModule", {
	  value: true
	});
	Select$1.default = void 0;

	var _extends2$2 = _interopRequireDefault$2(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$2 = _interopRequireDefault$2(objectWithoutPropertiesLoose.exports);

	var React$3 = _interopRequireWildcard$2(require$$3);

	var _propTypes$2 = _interopRequireDefault$2(propTypes.exports);

	var _clsx$2 = _interopRequireDefault$2(clsx$1);

	var _utils$2 = utils$h;

	var _SelectInput = _interopRequireDefault$2(SelectInput$1);

	var _formControlState = _interopRequireDefault$2(formControlState$1);

	var _useFormControl = _interopRequireDefault$2(useFormControl$1);

	var _ArrowDropDown = _interopRequireDefault$2(ArrowDropDown);

	var _Input2 = _interopRequireDefault$2(Input$2);

	var _NativeSelectInput = _interopRequireDefault$2(NativeSelectInput$1);

	var _FilledInput2 = _interopRequireDefault$2(FilledInput$2);

	var _OutlinedInput$1 = _interopRequireDefault$2(OutlinedInput$2);

	var _useThemeProps$2 = _interopRequireDefault$2(useThemeProps$1);

	var _useForkRef = _interopRequireDefault$2(useForkRef);

	var _jsxRuntime$2 = jsxRuntime;

	var _Input$1, _FilledInput$1;

	const _excluded$2 = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];

	function _getRequireWildcardCache$2(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$2 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$2(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$2(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const useUtilityClasses$1 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  return classes;
	};

	const Select = /*#__PURE__*/React$3.forwardRef(function Select(inProps, ref) {
	  const props = (0, _useThemeProps$2.default)({
	    name: 'MuiSelect',
	    props: inProps
	  });
	  const {
	    autoWidth = false,
	    children,
	    classes: classesProp = {},
	    className,
	    defaultOpen = false,
	    displayEmpty = false,
	    IconComponent = _ArrowDropDown.default,
	    id,
	    input,
	    inputProps,
	    label,
	    labelId,
	    MenuProps,
	    multiple = false,
	    native = false,
	    onClose,
	    onOpen,
	    open,
	    renderValue,
	    SelectDisplayProps,
	    variant: variantProps = 'outlined'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$2.default)(props, _excluded$2);
	  const inputComponent = native ? _NativeSelectInput.default : _SelectInput.default;
	  const muiFormControl = (0, _useFormControl.default)();
	  const fcs = (0, _formControlState.default)({
	    props,
	    muiFormControl,
	    states: ['variant']
	  });
	  const variant = fcs.variant || variantProps;
	  const InputComponent = input || {
	    standard: _Input$1 || (_Input$1 = /*#__PURE__*/(0, _jsxRuntime$2.jsx)(_Input2.default, {})),
	    outlined: /*#__PURE__*/(0, _jsxRuntime$2.jsx)(_OutlinedInput$1.default, {
	      label: label
	    }),
	    filled: _FilledInput$1 || (_FilledInput$1 = /*#__PURE__*/(0, _jsxRuntime$2.jsx)(_FilledInput2.default, {}))
	  }[variant];
	  const ownerState = (0, _extends2$2.default)({}, props, {
	    classes: classesProp
	  });
	  const classes = useUtilityClasses$1(ownerState);
	  const inputComponentRef = (0, _useForkRef.default)(ref, InputComponent.ref);
	  return /*#__PURE__*/React$3.cloneElement(InputComponent, (0, _extends2$2.default)({
	    // Most of the logic is implemented in `SelectInput`.
	    // The `Select` component is a simple API wrapper to expose something better to play with.
	    inputComponent,
	    inputProps: (0, _extends2$2.default)({
	      children,
	      IconComponent,
	      variant,
	      type: undefined,
	      // We render a select. We can ignore the type provided by the `Input`.
	      multiple
	    }, native ? {
	      id
	    } : {
	      autoWidth,
	      defaultOpen,
	      displayEmpty,
	      labelId,
	      MenuProps,
	      onClose,
	      onOpen,
	      open,
	      renderValue,
	      SelectDisplayProps: (0, _extends2$2.default)({
	        id
	      }, SelectDisplayProps)
	    }, inputProps, {
	      classes: inputProps ? (0, _utils$2.deepmerge)(classes, inputProps.classes) : classes
	    }, input ? input.props.inputProps : {})
	  }, multiple && native && variant === 'outlined' ? {
	    notched: true
	  } : {}, {
	    ref: inputComponentRef,
	    className: (0, _clsx$2.default)(InputComponent.props.className, className)
	  }, other));
	});
	Select.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the width of the popover will automatically be set according to the items inside the
	   * menu, otherwise it will be at least the width of the select input.
	   * @default false
	   */
	  autoWidth: _propTypes$2.default.bool,

	  /**
	   * The option elements to populate the select with.
	   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
	   *
	   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
	   */
	  children: _propTypes$2.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * @default {}
	   */
	  classes: _propTypes$2.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$2.default.string,

	  /**
	   * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
	   * You can only use it when the `native` prop is `false` (default).
	   * @default false
	   */
	  defaultOpen: _propTypes$2.default.bool,

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: _propTypes$2.default.any,

	  /**
	   * If `true`, a value is displayed even if no items are selected.
	   *
	   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
	   * returns the value to be displayed when no items are selected.
	   *
	   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
	   * The label should either be hidden or forced to a shrunk state.
	   * @default false
	   */
	  displayEmpty: _propTypes$2.default.bool,

	  /**
	   * The icon that displays the arrow.
	   * @default ArrowDropDownIcon
	   */
	  IconComponent: _propTypes$2.default.elementType,

	  /**
	   * The `id` of the wrapper element or the `select` element when `native`.
	   */
	  id: _propTypes$2.default.string,

	  /**
	   * An `Input` element; does not have to be a material-ui specific `Input`.
	   */
	  input: _propTypes$2.default.element,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   * When `native` is `true`, the attributes are applied on the `select` element.
	   */
	  inputProps: _propTypes$2.default.object,

	  /**
	   * See [OutlinedInput#label](/api/outlined-input/#props)
	   */
	  label: _propTypes$2.default.node,

	  /**
	   * The ID of an element that acts as an additional label. The Select will
	   * be labelled by the additional label and the selected value.
	   */
	  labelId: _propTypes$2.default.string,

	  /**
	   * Props applied to the [`Menu`](/api/menu/) element.
	   */
	  MenuProps: _propTypes$2.default.object,

	  /**
	   * If `true`, `value` must be an array and the menu will support multiple selections.
	   * @default false
	   */
	  multiple: _propTypes$2.default.bool,

	  /**
	   * If `true`, the component uses a native `select` element.
	   * @default false
	   */
	  native: _propTypes$2.default.bool,

	  /**
	   * Callback fired when a menu item is selected.
	   *
	   * @param {SelectChangeEvent<T>} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (any).
	   * **Warning**: This is a generic event not a change event unless the change event is caused by browser autofill.
	   * @param {object} [child] The react element that was selected when `native` is `false` (default).
	   */
	  onChange: _propTypes$2.default.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   * Use in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onClose: _propTypes$2.default.func,

	  /**
	   * Callback fired when the component requests to be opened.
	   * Use in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onOpen: _propTypes$2.default.func,

	  /**
	   * If `true`, the component is shown.
	   * You can only use it when the `native` prop is `false` (default).
	   */
	  open: _propTypes$2.default.bool,

	  /**
	   * Render the selected value.
	   * You can only use it when the `native` prop is `false` (default).
	   *
	   * @param {any} value The `value` provided to the component.
	   * @returns {ReactNode}
	   */
	  renderValue: _propTypes$2.default.func,

	  /**
	   * Props applied to the clickable div element.
	   */
	  SelectDisplayProps: _propTypes$2.default.object,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$2.default.oneOfType([_propTypes$2.default.arrayOf(_propTypes$2.default.oneOfType([_propTypes$2.default.func, _propTypes$2.default.object, _propTypes$2.default.bool])), _propTypes$2.default.func, _propTypes$2.default.object]),

	  /**
	   * The `input` value. Providing an empty string will select no options.
	   * Set to an empty string `''` if you don't want any of the available options to be selected.
	   *
	   * If the value is an object it must have reference equality with the option in order to be selected.
	   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
	   */
	  value: _propTypes$2.default.any,

	  /**
	   * The variant to use.
	   * @default 'outlined'
	   */
	  variant: _propTypes$2.default.oneOf(['filled', 'outlined', 'standard'])
	} ;
	Select.muiName = 'Select';
	var _default$3 = Select;
	Select$1.default = _default$3;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  selectClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Select.default;
		  }
		});
		Object.defineProperty(exports, "selectClasses", {
		  enumerable: true,
		  get: function () {
		    return _selectClasses.default;
		  }
		});

		var _Select = _interopRequireDefault(Select$1);

		var _selectClasses = _interopRequireWildcard(selectClasses$1);

		Object.keys(_selectClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _selectClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _selectClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Select$2));

	var textFieldClasses$1 = {};

	Object.defineProperty(textFieldClasses$1, "__esModule", {
	  value: true
	});
	textFieldClasses$1.default = void 0;
	textFieldClasses$1.getTextFieldUtilityClass = getTextFieldUtilityClass;

	var _base$2 = node$1;

	function getTextFieldUtilityClass(slot) {
	  return (0, _base$2.generateUtilityClass)('MuiTextField', slot);
	}

	const textFieldClasses = (0, _base$2.generateUtilityClasses)('MuiTextField', ['root']);
	var _default$2 = textFieldClasses;
	textFieldClasses$1.default = _default$2;

	var _interopRequireDefault$1 = interopRequireDefault.exports;

	Object.defineProperty(TextField$2, "__esModule", {
	  value: true
	});
	TextField$2.default = void 0;

	var _extends2$1 = _interopRequireDefault$1(_extends$5.exports);

	var _objectWithoutPropertiesLoose2$1 = _interopRequireDefault$1(objectWithoutPropertiesLoose.exports);

	var React$2 = _interopRequireWildcard$1(require$$3);

	var _propTypes$1 = _interopRequireDefault$1(propTypes.exports);

	var _clsx$1 = _interopRequireDefault$1(clsx$1);

	var _base$1 = node$1;

	var _utils$1 = utils$h;

	var _styled$1 = _interopRequireDefault$1(styled$1);

	var _useThemeProps$1 = _interopRequireDefault$1(useThemeProps$1);

	var _Input = _interopRequireDefault$1(Input$2);

	var _FilledInput = _interopRequireDefault$1(FilledInput$2);

	var _OutlinedInput = _interopRequireDefault$1(OutlinedInput$2);

	var _InputLabel = _interopRequireDefault$1(InputLabel$2);

	var _FormControl = _interopRequireDefault$1(FormControl$2);

	var _FormHelperText = _interopRequireDefault$1(FormHelperText$2);

	var _Select = _interopRequireDefault$1(Select$2);

	var _textFieldClasses = textFieldClasses$1;

	var _jsxRuntime$1 = jsxRuntime;

	const _excluded$1 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];

	function _getRequireWildcardCache$1(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1 = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard$1(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const variantComponent = {
	  standard: _Input.default,
	  filled: _FilledInput.default,
	  outlined: _OutlinedInput.default
	};

	const useUtilityClasses = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return (0, _base$1.unstable_composeClasses)(slots, _textFieldClasses.getTextFieldUtilityClass, classes);
	};

	const TextFieldRoot = (0, _styled$1.default)(_FormControl.default, {
	  name: 'MuiTextField',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	/**
	 * The `TextField` is a convenience wrapper for the most common cases (80%).
	 * It cannot be all things to all people, otherwise the API would grow out of control.
	 *
	 * ## Advanced Configuration
	 *
	 * It's important to understand that the text field is a simple abstraction
	 * on top of the following components:
	 *
	 * - [FormControl](/api/form-control/)
	 * - [InputLabel](/api/input-label/)
	 * - [FilledInput](/api/filled-input/)
	 * - [OutlinedInput](/api/outlined-input/)
	 * - [Input](/api/input/)
	 * - [FormHelperText](/api/form-helper-text/)
	 *
	 * If you wish to alter the props applied to the `input` element, you can do so as follows:
	 *
	 * ```jsx
	 * const inputProps = {
	 *   step: 300,
	 * };
	 *
	 * return <TextField id="time" type="time" inputProps={inputProps} />;
	 * ```
	 *
	 * For advanced cases, please look at the source of TextField by clicking on the
	 * "Edit this page" button above. Consider either:
	 *
	 * - using the upper case props for passing values directly to the components
	 * - using the underlying components directly as shown in the demos
	 */

	const TextField$1 = /*#__PURE__*/React$2.forwardRef(function TextField(inProps, ref) {
	  const props = (0, _useThemeProps$1.default)({
	    props: inProps,
	    name: 'MuiTextField'
	  });
	  const {
	    autoComplete,
	    autoFocus = false,
	    children,
	    className,
	    color = 'primary',
	    defaultValue,
	    disabled = false,
	    error = false,
	    FormHelperTextProps,
	    fullWidth = false,
	    helperText,
	    id: idOverride,
	    InputLabelProps,
	    inputProps,
	    InputProps,
	    inputRef,
	    label,
	    maxRows,
	    minRows,
	    multiline = false,
	    name,
	    onBlur,
	    onChange,
	    onFocus,
	    placeholder,
	    required = false,
	    rows,
	    select = false,
	    SelectProps,
	    type,
	    value,
	    variant = 'outlined'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2$1.default)(props, _excluded$1);
	  const ownerState = (0, _extends2$1.default)({}, props, {
	    autoFocus,
	    color,
	    disabled,
	    error,
	    fullWidth,
	    multiline,
	    required,
	    select,
	    variant
	  });
	  const classes = useUtilityClasses(ownerState);

	  {
	    if (select && !children) {
	      console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');
	    }
	  }

	  const InputMore = {};

	  if (variant === 'outlined') {
	    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
	      InputMore.notched = InputLabelProps.shrink;
	    }

	    InputMore.label = label;
	  }

	  if (select) {
	    // unset defaults from textbox inputs
	    if (!SelectProps || !SelectProps.native) {
	      InputMore.id = undefined;
	    }

	    InputMore['aria-describedby'] = undefined;
	  }

	  const id = (0, _utils$1.unstable_useId)(idOverride);
	  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;
	  const inputLabelId = label && id ? `${id}-label` : undefined;
	  const InputComponent = variantComponent[variant];
	  const InputElement = /*#__PURE__*/(0, _jsxRuntime$1.jsx)(InputComponent, (0, _extends2$1.default)({
	    "aria-describedby": helperTextId,
	    autoComplete: autoComplete,
	    autoFocus: autoFocus,
	    defaultValue: defaultValue,
	    fullWidth: fullWidth,
	    multiline: multiline,
	    name: name,
	    rows: rows,
	    maxRows: maxRows,
	    minRows: minRows,
	    type: type,
	    value: value,
	    id: id,
	    inputRef: inputRef,
	    onBlur: onBlur,
	    onChange: onChange,
	    onFocus: onFocus,
	    placeholder: placeholder,
	    inputProps: inputProps
	  }, InputMore, InputProps));
	  return /*#__PURE__*/(0, _jsxRuntime$1.jsxs)(TextFieldRoot, (0, _extends2$1.default)({
	    className: (0, _clsx$1.default)(classes.root, className),
	    disabled: disabled,
	    error: error,
	    fullWidth: fullWidth,
	    ref: ref,
	    required: required,
	    color: color,
	    variant: variant,
	    ownerState: ownerState
	  }, other, {
	    children: [label != null && label !== '' && /*#__PURE__*/(0, _jsxRuntime$1.jsx)(_InputLabel.default, (0, _extends2$1.default)({
	      htmlFor: id,
	      id: inputLabelId
	    }, InputLabelProps, {
	      children: label
	    })), select ? /*#__PURE__*/(0, _jsxRuntime$1.jsx)(_Select.default, (0, _extends2$1.default)({
	      "aria-describedby": helperTextId,
	      id: id,
	      labelId: inputLabelId,
	      value: value,
	      input: InputElement
	    }, SelectProps, {
	      children: children
	    })) : InputElement, helperText && /*#__PURE__*/(0, _jsxRuntime$1.jsx)(_FormHelperText.default, (0, _extends2$1.default)({
	      id: helperTextId
	    }, FormHelperTextProps, {
	      children: helperText
	    }))]
	  }));
	});
	TextField$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: _propTypes$1.default.string,

	  /**
	   * If `true`, the `input` element is focused during the first mount.
	   * @default false
	   */
	  autoFocus: _propTypes$1.default.bool,

	  /**
	   * @ignore
	   */
	  children: _propTypes$1.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes$1.default.object,

	  /**
	   * @ignore
	   */
	  className: _propTypes$1.default.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * @default 'primary'
	   */
	  color: _propTypes$1.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$1.default.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), _propTypes$1.default.string]),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: _propTypes$1.default.any,

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: _propTypes$1.default.bool,

	  /**
	   * If `true`, the label is displayed in an error state.
	   * @default false
	   */
	  error: _propTypes$1.default.bool,

	  /**
	   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.
	   */
	  FormHelperTextProps: _propTypes$1.default.object,

	  /**
	   * If `true`, the input will take up the full width of its container.
	   * @default false
	   */
	  fullWidth: _propTypes$1.default.bool,

	  /**
	   * The helper text content.
	   */
	  helperText: _propTypes$1.default.node,

	  /**
	   * The id of the `input` element.
	   * Use this prop to make `label` and `helperText` accessible for screen readers.
	   */
	  id: _propTypes$1.default.string,

	  /**
	   * Props applied to the [`InputLabel`](/api/input-label/) element.
	   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
	   */
	  InputLabelProps: _propTypes$1.default.object,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: _propTypes$1.default.object,

	  /**
	   * Props applied to the Input element.
	   * It will be a [`FilledInput`](/api/filled-input/),
	   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)
	   * component depending on the `variant` prop value.
	   */
	  InputProps: _propTypes$1.default.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: _utils$1.refType,

	  /**
	   * The label content.
	   */
	  label: _propTypes$1.default.node,

	  /**
	   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
	   * @default 'none'
	   */
	  margin: _propTypes$1.default.oneOf(['dense', 'none', 'normal']),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  maxRows: _propTypes$1.default.oneOfType([_propTypes$1.default.number, _propTypes$1.default.string]),

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  minRows: _propTypes$1.default.oneOfType([_propTypes$1.default.number, _propTypes$1.default.string]),

	  /**
	   * If `true`, a `textarea` element is rendered instead of an input.
	   * @default false
	   */
	  multiline: _propTypes$1.default.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: _propTypes$1.default.string,

	  /**
	   * @ignore
	   */
	  onBlur: _propTypes$1.default.func,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: _propTypes$1.default.func,

	  /**
	   * @ignore
	   */
	  onFocus: _propTypes$1.default.func,

	  /**
	   * The short hint displayed in the `input` before the user enters a value.
	   */
	  placeholder: _propTypes$1.default.string,

	  /**
	   * If `true`, the label is displayed as required and the `input` element is required.
	   * @default false
	   */
	  required: _propTypes$1.default.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: _propTypes$1.default.oneOfType([_propTypes$1.default.number, _propTypes$1.default.string]),

	  /**
	   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.
	   * If this option is set you must pass the options of the select as children.
	   * @default false
	   */
	  select: _propTypes$1.default.bool,

	  /**
	   * Props applied to the [`Select`](/api/select/) element.
	   */
	  SelectProps: _propTypes$1.default.object,

	  /**
	   * The size of the component.
	   */
	  size: _propTypes$1.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes$1.default.oneOf(['medium', 'small']), _propTypes$1.default.string]),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes$1.default.oneOfType([_propTypes$1.default.arrayOf(_propTypes$1.default.oneOfType([_propTypes$1.default.func, _propTypes$1.default.object, _propTypes$1.default.bool])), _propTypes$1.default.func, _propTypes$1.default.object]),

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   */
	  type: _propTypes$1.default
	  /* @typescript-to-proptypes-ignore */
	  .string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: _propTypes$1.default.any,

	  /**
	   * The variant to use.
	   * @default 'outlined'
	   */
	  variant: _propTypes$1.default.oneOf(['filled', 'outlined', 'standard'])
	} ;
	var _default$1 = TextField$1;
	TextField$2.default = _default$1;

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  textFieldClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _TextField.default;
		  }
		});
		Object.defineProperty(exports, "textFieldClasses", {
		  enumerable: true,
		  get: function () {
		    return _textFieldClasses.default;
		  }
		});

		var _TextField = _interopRequireDefault(TextField$2);

		var _textFieldClasses = _interopRequireWildcard(textFieldClasses$1);

		Object.keys(_textFieldClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _textFieldClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _textFieldClasses[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TextField$3));

	var TextField = /*@__PURE__*/getDefaultExportFromCjs(TextField$3);

	var Slider$3 = {};

	var Slider$2 = {};

	var _interopRequireDefault = interopRequireDefault.exports;

	Object.defineProperty(Slider$2, "__esModule", {
	  value: true
	});
	Slider$2.sliderClasses = Slider$2.default = Slider$2.SliderValueLabel = Slider$2.SliderTrack = Slider$2.SliderThumb = Slider$2.SliderRoot = Slider$2.SliderRail = Slider$2.SliderMarkLabel = Slider$2.SliderMark = void 0;

	var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLoose.exports);

	var _extends2 = _interopRequireDefault(_extends$5.exports);

	var React$1 = _interopRequireWildcard(require$$3);

	var _propTypes = _interopRequireDefault(propTypes.exports);

	var _clsx = _interopRequireDefault(clsx$1);

	var _utils = utils$h;

	var _base = node$1;

	var _SliderUnstyled = _interopRequireWildcard(SliderUnstyled$2);

	var _system = system;

	var _useThemeProps = _interopRequireDefault(useThemeProps$1);

	var _styled = _interopRequireWildcard(styled$1);

	var _useTheme = _interopRequireDefault(useTheme$8);

	var _shouldSpreadAdditionalProps = _interopRequireDefault(shouldSpreadAdditionalProps$1);

	var _capitalize = _interopRequireDefault(capitalize);

	var _jsxRuntime = jsxRuntime;

	const _excluded = ["component", "components", "componentsProps", "color", "size"];

	function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

	function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	const sliderClasses = (0, _extends2.default)({}, _SliderUnstyled.sliderUnstyledClasses, (0, _base.generateUtilityClasses)('MuiSlider', ['colorPrimary', 'colorSecondary', 'thumbColorPrimary', 'thumbColorSecondary', 'sizeSmall', 'thumbSizeSmall']));
	Slider$2.sliderClasses = sliderClasses;
	const SliderRoot = (0, _styled.default)('span', {
	  name: 'MuiSlider',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const marks = ownerState.marksProp === true && ownerState.step !== null ? [...Array(Math.floor((ownerState.max - ownerState.min) / ownerState.step) + 1)].map((_, index) => ({
	      value: ownerState.min + ownerState.step * index
	    })) : ownerState.marksProp || [];
	    const marked = marks.length > 0 && marks.some(mark => mark.label);
	    return [styles.root, styles[`color${(0, _capitalize.default)(ownerState.color)}`], ownerState.size !== 'medium' && styles[`size${(0, _capitalize.default)(ownerState.size)}`], marked && styles.marked, ownerState.orientation === 'vertical' && styles.vertical, ownerState.track === 'inverted' && styles.trackInverted, ownerState.track === false && styles.trackFalse];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2.default)({
	  borderRadius: 12,
	  boxSizing: 'content-box',
	  display: 'inline-block',
	  position: 'relative',
	  cursor: 'pointer',
	  touchAction: 'none',
	  color: theme.palette[ownerState.color].main,
	  WebkitTapHighlightColor: 'transparent'
	}, ownerState.orientation === 'horizontal' && (0, _extends2.default)({
	  height: 4,
	  width: '100%',
	  padding: '13px 0',
	  // The primary input mechanism of the device includes a pointing device of limited accuracy.
	  '@media (pointer: coarse)': {
	    // Reach 42px touch target, about ~8mm on screen.
	    padding: '20px 0'
	  }
	}, ownerState.size === 'small' && {
	  height: 2
	}, ownerState.marked && {
	  marginBottom: 20
	}), ownerState.orientation === 'vertical' && (0, _extends2.default)({
	  height: '100%',
	  width: 4,
	  padding: '0 13px',
	  // The primary input mechanism of the device includes a pointing device of limited accuracy.
	  '@media (pointer: coarse)': {
	    // Reach 42px touch target, about ~8mm on screen.
	    padding: '0 20px'
	  }
	}, ownerState.size === 'small' && {
	  width: 2
	}, ownerState.marked && {
	  marginRight: 44
	}), {
	  '@media print': {
	    colorAdjust: 'exact'
	  },
	  [`&.${sliderClasses.disabled}`]: {
	    pointerEvents: 'none',
	    cursor: 'default',
	    color: theme.palette.grey[400]
	  },
	  [`&.${sliderClasses.dragging}`]: {
	    [`& .${sliderClasses.thumb}, & .${sliderClasses.track}`]: {
	      transition: 'none'
	    }
	  }
	}));
	Slider$2.SliderRoot = SliderRoot;
	SliderRoot.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: _propTypes.default.node
	} ;
	const SliderRail = (0, _styled.default)('span', {
	  name: 'MuiSlider',
	  slot: 'Rail',
	  overridesResolver: (props, styles) => styles.rail
	})(({
	  ownerState
	}) => (0, _extends2.default)({
	  display: 'block',
	  position: 'absolute',
	  borderRadius: 'inherit',
	  backgroundColor: 'currentColor',
	  opacity: 0.38
	}, ownerState.orientation === 'horizontal' && {
	  width: '100%',
	  height: 'inherit',
	  top: '50%',
	  transform: 'translateY(-50%)'
	}, ownerState.orientation === 'vertical' && {
	  height: '100%',
	  width: 'inherit',
	  left: '50%',
	  transform: 'translateX(-50%)'
	}, ownerState.track === 'inverted' && {
	  opacity: 1
	}));
	Slider$2.SliderRail = SliderRail;
	SliderRail.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: _propTypes.default.node
	} ;
	const SliderTrack = (0, _styled.default)('span', {
	  name: 'MuiSlider',
	  slot: 'Track',
	  overridesResolver: (props, styles) => styles.track
	})(({
	  theme,
	  ownerState
	}) => {
	  const color = // Same logic as the LinearProgress track color
	  theme.palette.mode === 'light' ? (0, _system.lighten)(theme.palette[ownerState.color].main, 0.62) : (0, _system.darken)(theme.palette[ownerState.color].main, 0.5);
	  return (0, _extends2.default)({
	    display: 'block',
	    position: 'absolute',
	    borderRadius: 'inherit',
	    border: '1px solid currentColor',
	    backgroundColor: 'currentColor',
	    transition: theme.transitions.create(['left', 'width', 'bottom', 'height'], {
	      duration: theme.transitions.duration.shortest
	    })
	  }, ownerState.size === 'small' && {
	    border: 'none'
	  }, ownerState.orientation === 'horizontal' && {
	    height: 'inherit',
	    top: '50%',
	    transform: 'translateY(-50%)'
	  }, ownerState.orientation === 'vertical' && {
	    width: 'inherit',
	    left: '50%',
	    transform: 'translateX(-50%)'
	  }, ownerState.track === false && {
	    display: 'none'
	  }, ownerState.track === 'inverted' && {
	    backgroundColor: color,
	    borderColor: color
	  });
	});
	Slider$2.SliderTrack = SliderTrack;
	SliderTrack.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: _propTypes.default.node
	} ;
	const SliderThumb = (0, _styled.default)('span', {
	  name: 'MuiSlider',
	  slot: 'Thumb',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.thumb, styles[`thumbColor${(0, _capitalize.default)(ownerState.color)}`], ownerState.size !== 'medium' && styles[`thumbSize${(0, _capitalize.default)(ownerState.size)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2.default)({
	  position: 'absolute',
	  width: 20,
	  height: 20,
	  boxSizing: 'border-box',
	  borderRadius: '50%',
	  outline: 0,
	  backgroundColor: 'currentColor',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  transition: theme.transitions.create(['box-shadow', 'left', 'bottom'], {
	    duration: theme.transitions.duration.shortest
	  })
	}, ownerState.size === 'small' && {
	  width: 12,
	  height: 12
	}, ownerState.orientation === 'horizontal' && {
	  top: '50%',
	  transform: 'translate(-50%, -50%)'
	}, ownerState.orientation === 'vertical' && {
	  left: '50%',
	  transform: 'translate(-50%, 50%)'
	}, {
	  '&:before': (0, _extends2.default)({
	    position: 'absolute',
	    content: '""',
	    borderRadius: 'inherit',
	    width: '100%',
	    height: '100%',
	    boxShadow: theme.shadows[2]
	  }, ownerState.size === 'small' && {
	    boxShadow: 'none'
	  }),
	  '&::after': {
	    position: 'absolute',
	    content: '""',
	    borderRadius: '50%',
	    // 42px is the hit target
	    width: 42,
	    height: 42,
	    top: '50%',
	    left: '50%',
	    transform: 'translate(-50%, -50%)'
	  },
	  [`&:hover, &.${sliderClasses.focusVisible}`]: {
	    boxShadow: `0px 0px 0px 8px ${(0, _system.alpha)(theme.palette[ownerState.color].main, 0.16)}`,
	    '@media (hover: none)': {
	      boxShadow: 'none'
	    }
	  },
	  [`&.${sliderClasses.active}`]: {
	    boxShadow: `0px 0px 0px 14px ${(0, _system.alpha)(theme.palette[ownerState.color].main, 0.16)}`
	  },
	  [`&.${sliderClasses.disabled}`]: {
	    '&:hover': {
	      boxShadow: 'none'
	    }
	  }
	}));
	Slider$2.SliderThumb = SliderThumb;
	SliderThumb.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: _propTypes.default.node
	} ;
	const SliderValueLabel = (0, _styled.default)(_SliderUnstyled.SliderValueLabelUnstyled, {
	  name: 'MuiSlider',
	  slot: 'ValueLabel',
	  overridesResolver: (props, styles) => styles.valueLabel
	})(({
	  theme,
	  ownerState
	}) => (0, _extends2.default)({
	  [`&.${sliderClasses.valueLabelOpen}`]: {
	    transform: 'translateY(-100%) scale(1)'
	  },
	  zIndex: 1,
	  whiteSpace: 'nowrap'
	}, theme.typography.body2, {
	  fontWeight: 500,
	  transition: theme.transitions.create(['transform'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  top: -10,
	  transformOrigin: 'bottom center',
	  transform: 'translateY(-100%) scale(0)',
	  position: 'absolute',
	  backgroundColor: theme.palette.grey[600],
	  borderRadius: 2,
	  color: theme.palette.common.white,
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  padding: '0.25rem 0.75rem'
	}, ownerState.size === 'small' && {
	  fontSize: theme.typography.pxToRem(12),
	  padding: '0.25rem 0.5rem'
	}, {
	  '&:before': {
	    position: 'absolute',
	    content: '""',
	    width: 8,
	    height: 8,
	    bottom: 0,
	    left: '50%',
	    transform: 'translate(-50%, 50%) rotate(45deg)',
	    backgroundColor: 'inherit'
	  }
	}));
	Slider$2.SliderValueLabel = SliderValueLabel;
	SliderValueLabel.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: _propTypes.default.node
	} ;
	const SliderMark = (0, _styled.default)('span', {
	  name: 'MuiSlider',
	  slot: 'Mark',
	  shouldForwardProp: prop => (0, _styled.slotShouldForwardProp)(prop) && prop !== 'markActive',
	  overridesResolver: (props, styles) => styles.mark
	})(({
	  theme,
	  ownerState,
	  markActive
	}) => (0, _extends2.default)({
	  position: 'absolute',
	  width: 2,
	  height: 2,
	  borderRadius: 1,
	  backgroundColor: 'currentColor'
	}, ownerState.orientation === 'horizontal' && {
	  top: '50%',
	  transform: 'translate(-1px, -50%)'
	}, ownerState.orientation === 'vertical' && {
	  left: '50%',
	  transform: 'translate(-50%, 1px)'
	}, markActive && {
	  backgroundColor: theme.palette.background.paper,
	  opacity: 0.8
	}));
	Slider$2.SliderMark = SliderMark;
	SliderMark.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: _propTypes.default.node
	} ;
	const SliderMarkLabel = (0, _styled.default)('span', {
	  name: 'MuiSlider',
	  slot: 'MarkLabel',
	  shouldForwardProp: prop => (0, _styled.slotShouldForwardProp)(prop) && prop !== 'markLabelActive',
	  overridesResolver: (props, styles) => styles.markLabel
	})(({
	  theme,
	  ownerState,
	  markLabelActive
	}) => (0, _extends2.default)({}, theme.typography.body2, {
	  color: theme.palette.text.secondary,
	  position: 'absolute',
	  whiteSpace: 'nowrap'
	}, ownerState.orientation === 'horizontal' && {
	  top: 30,
	  transform: 'translateX(-50%)',
	  '@media (pointer: coarse)': {
	    top: 40
	  }
	}, ownerState.orientation === 'vertical' && {
	  left: 36,
	  transform: 'translateY(50%)',
	  '@media (pointer: coarse)': {
	    left: 44
	  }
	}, markLabelActive && {
	  color: theme.palette.text.primary
	}));
	Slider$2.SliderMarkLabel = SliderMarkLabel;
	SliderMarkLabel.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: _propTypes.default.node
	} ;

	const extendUtilityClasses = ownerState => {
	  const {
	    color,
	    size,
	    classes = {}
	  } = ownerState;
	  return (0, _extends2.default)({}, classes, {
	    root: (0, _clsx.default)(classes.root, (0, _SliderUnstyled.getSliderUtilityClass)(`color${(0, _capitalize.default)(color)}`), classes[`color${(0, _capitalize.default)(color)}`], size && [(0, _SliderUnstyled.getSliderUtilityClass)(`size${(0, _capitalize.default)(size)}`), classes[`size${(0, _capitalize.default)(size)}`]]),
	    thumb: (0, _clsx.default)(classes.thumb, (0, _SliderUnstyled.getSliderUtilityClass)(`thumbColor${(0, _capitalize.default)(color)}`), classes[`thumbColor${(0, _capitalize.default)(color)}`], size && [(0, _SliderUnstyled.getSliderUtilityClass)(`thumbSize${(0, _capitalize.default)(size)}`), classes[`thumbSize${(0, _capitalize.default)(size)}`]])
	  });
	};

	const Slider$1 = /*#__PURE__*/React$1.forwardRef(function Slider(inputProps, ref) {
	  var _componentsProps$root, _componentsProps$thum, _componentsProps$trac, _componentsProps$valu;

	  const props = (0, _useThemeProps.default)({
	    props: inputProps,
	    name: 'MuiSlider'
	  });
	  const theme = (0, _useTheme.default)();
	  const isRtl = theme.direction === 'rtl';
	  const {
	    // eslint-disable-next-line react/prop-types
	    component = 'span',
	    components = {},
	    componentsProps = {},
	    color = 'primary',
	    size = 'medium'
	  } = props,
	        other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
	  const ownerState = (0, _extends2.default)({}, props, {
	    color,
	    size
	  });
	  const classes = extendUtilityClasses(ownerState);
	  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SliderUnstyled.default, (0, _extends2.default)({}, other, {
	    isRtl: isRtl,
	    components: (0, _extends2.default)({
	      Root: SliderRoot,
	      Rail: SliderRail,
	      Track: SliderTrack,
	      Thumb: SliderThumb,
	      ValueLabel: SliderValueLabel,
	      Mark: SliderMark,
	      MarkLabel: SliderMarkLabel
	    }, components),
	    componentsProps: (0, _extends2.default)({}, componentsProps, {
	      root: (0, _extends2.default)({}, componentsProps.root, (0, _shouldSpreadAdditionalProps.default)(components.Root) && {
	        as: component,
	        ownerState: (0, _extends2.default)({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState, {
	          color,
	          size
	        })
	      }),
	      thumb: (0, _extends2.default)({}, componentsProps.thumb, (0, _shouldSpreadAdditionalProps.default)(components.Thumb) && {
	        ownerState: (0, _extends2.default)({}, (_componentsProps$thum = componentsProps.thumb) == null ? void 0 : _componentsProps$thum.ownerState, {
	          color,
	          size
	        })
	      }),
	      track: (0, _extends2.default)({}, componentsProps.track, (0, _shouldSpreadAdditionalProps.default)(components.Track) && {
	        ownerState: (0, _extends2.default)({}, (_componentsProps$trac = componentsProps.track) == null ? void 0 : _componentsProps$trac.ownerState, {
	          color,
	          size
	        })
	      }),
	      valueLabel: (0, _extends2.default)({}, componentsProps.valueLabel, (0, _shouldSpreadAdditionalProps.default)(components.ValueLabel) && {
	        ownerState: (0, _extends2.default)({}, (_componentsProps$valu = componentsProps.valueLabel) == null ? void 0 : _componentsProps$valu.ownerState, {
	          color,
	          size
	        })
	      })
	    }),
	    classes: classes,
	    ref: ref
	  }));
	});
	Slider$1.propTypes
	/* remove-proptypes */
	= {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The label of the slider.
	   */
	  'aria-label': (0, _utils.chainPropTypes)(_propTypes.default.string, props => {
	    const range = Array.isArray(props.value || props.defaultValue);

	    if (range && props['aria-label'] != null) {
	      return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
	    }

	    return null;
	  }),

	  /**
	   * The id of the element containing a label for the slider.
	   */
	  'aria-labelledby': _propTypes.default.string,

	  /**
	   * A string value that provides a user-friendly name for the current value of the slider.
	   */
	  'aria-valuetext': (0, _utils.chainPropTypes)(_propTypes.default.string, props => {
	    const range = Array.isArray(props.value || props.defaultValue);

	    if (range && props['aria-valuetext'] != null) {
	      return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
	    }

	    return null;
	  }),

	  /**
	   * @ignore
	   */
	  children: _propTypes.default.node,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes.default.object,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * @default 'primary'
	   */
	  color: _propTypes.default
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([_propTypes.default.oneOf(['primary', 'secondary']), _propTypes.default.string]),

	  /**
	   * The components used for each slot inside the Slider.
	   * Either a string to use a HTML element or a component.
	   * @default {}
	   */
	  components: _propTypes.default.shape({
	    Input: _propTypes.default.elementType,
	    Mark: _propTypes.default.elementType,
	    MarkLabel: _propTypes.default.elementType,
	    Rail: _propTypes.default.elementType,
	    Root: _propTypes.default.elementType,
	    Thumb: _propTypes.default.elementType,
	    Track: _propTypes.default.elementType,
	    ValueLabel: _propTypes.default.elementType
	  }),

	  /**
	   * The props used for each slot inside the Slider.
	   * @default {}
	   */
	  componentsProps: _propTypes.default.shape({
	    input: _propTypes.default.object,
	    mark: _propTypes.default.object,
	    markLabel: _propTypes.default.object,
	    rail: _propTypes.default.object,
	    root: _propTypes.default.object,
	    thumb: _propTypes.default.object,
	    track: _propTypes.default.object,
	    valueLabel: _propTypes.default.shape({
	      className: _propTypes.default.string,
	      components: _propTypes.default.shape({
	        Root: _propTypes.default.elementType
	      }),
	      style: _propTypes.default.object,
	      value: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number]),
	      valueLabelDisplay: _propTypes.default.oneOf(['auto', 'off', 'on'])
	    })
	  }),

	  /**
	   * The default value. Use when the component is not controlled.
	   */
	  defaultValue: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number]),

	  /**
	   * If `true`, the component is disabled.
	   * @default false
	   */
	  disabled: _propTypes.default.bool,

	  /**
	   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
	   * @default false
	   */
	  disableSwap: _propTypes.default.bool,

	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
	   * This is important for screen reader users.
	   * @param {number} index The thumb label's index to format.
	   * @returns {string}
	   */
	  getAriaLabel: _propTypes.default.func,

	  /**
	   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
	   * This is important for screen reader users.
	   * @param {number} value The thumb label's value to format.
	   * @param {number} index The thumb label's index to format.
	   * @returns {string}
	   */
	  getAriaValueText: _propTypes.default.func,

	  /**
	   * Indicates whether the theme context has rtl direction. It is set automatically.
	   * @default false
	   */
	  isRtl: _propTypes.default.bool,

	  /**
	   * Marks indicate predetermined values to which the user can move the slider.
	   * If `true` the marks are spaced according the value of the `step` prop.
	   * If an array, it should contain objects with `value` and an optional `label` keys.
	   * @default false
	   */
	  marks: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.shape({
	    label: _propTypes.default.node,
	    value: _propTypes.default.number.isRequired
	  })), _propTypes.default.bool]),

	  /**
	   * The maximum allowed value of the slider.
	   * Should not be equal to min.
	   * @default 100
	   */
	  max: _propTypes.default.number,

	  /**
	   * The minimum allowed value of the slider.
	   * Should not be equal to max.
	   * @default 0
	   */
	  min: _propTypes.default.number,

	  /**
	   * Name attribute of the hidden `input` element.
	   */
	  name: _propTypes.default.string,

	  /**
	   * Callback function that is fired when the slider's value changed.
	   *
	   * @param {Event} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (any).
	   * **Warning**: This is a generic event not a change event.
	   * @param {number | number[]} value The new value.
	   * @param {number} activeThumb Index of the currently moved thumb.
	   */
	  onChange: _propTypes.default.func,

	  /**
	   * Callback function that is fired when the `mouseup` is triggered.
	   *
	   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
	   * @param {number | number[]} value The new value.
	   */
	  onChangeCommitted: _propTypes.default.func,

	  /**
	   * The component orientation.
	   * @default 'horizontal'
	   */
	  orientation: _propTypes.default.oneOf(['horizontal', 'vertical']),

	  /**
	   * A transformation function, to change the scale of the slider.
	   * @default (x) => x
	   */
	  scale: _propTypes.default.func,

	  /**
	   * The size of the slider.
	   * @default 'medium'
	   */
	  size: _propTypes.default.oneOf(['small', 'medium']),

	  /**
	   * The granularity with which the slider can step through values. (A "discrete" slider.)
	   * The `min` prop serves as the origin for the valid values.
	   * We recommend (max - min) to be evenly divisible by the step.
	   *
	   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
	   * @default 1
	   */
	  step: _propTypes.default.number,

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),

	  /**
	   * Tab index attribute of the hidden `input` element.
	   */
	  tabIndex: _propTypes.default.number,

	  /**
	   * The track presentation:
	   *
	   * - `normal` the track will render a bar representing the slider value.
	   * - `inverted` the track will render a bar representing the remaining slider value.
	   * - `false` the track will render without a bar.
	   * @default 'normal'
	   */
	  track: _propTypes.default.oneOf(['inverted', 'normal', false]),

	  /**
	   * The value of the slider.
	   * For ranged sliders, provide an array with two values.
	   */
	  value: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number]),

	  /**
	   * Controls when the value label is displayed:
	   *
	   * - `auto` the value label will display when the thumb is hovered or focused.
	   * - `on` will display persistently.
	   * - `off` will never display.
	   * @default 'off'
	   */
	  valueLabelDisplay: _propTypes.default.oneOf(['auto', 'off', 'on']),

	  /**
	   * The format function the value label's value.
	   *
	   * When a function is provided, it should have the following signature:
	   *
	   * - {number} value The value label's value to format
	   * - {number} index The value label's index to format
	   * @default (x) => x
	   */
	  valueLabelFormat: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string])
	} ;
	var _default = Slider$1;
	Slider$2.default = _default;

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Slider.default;
		  }
		});

		var _Slider = _interopRequireWildcard(Slider$2);

		Object.keys(_Slider).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _Slider[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _Slider[key];
		    }
		  });
		});

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Slider$3));

	var Slider = /*@__PURE__*/getDefaultExportFromCjs(Slider$3);

	function useInterval(callback, delay) {
	  const savedCallback = s(callback);
	  h(() => {
	    savedCallback.current = callback;
	  }, [callback]);
	  y(() => {
	    if (!delay && delay !== 0) {
	      return;
	    }

	    const id = setInterval(() => savedCallback.current(), delay);
	    return () => clearInterval(id);
	  }, [delay]);
	}

	function randomSliderAnswer() {
	  return Math.floor(Math.random() * (Math.floor(80) - Math.ceil(20))) + Math.ceil(20);
	}

	var RemoteConfig = g(function () {
	  const dispatch = lib.useDispatch();
	  const [storage, setStorage] = useStorage();
	  const {
	    enqueueSnackbar
	  } = dist$8.exports.useSnackbar();
	  const [showVerify, setShowVerify] = l(false);
	  const [code, setCode] = l("code");
	  const [sliderAnswer, setSliderAnswer] = l(100);
	  const [sliderInput, setSliderInput] = l(0);
	  const [codeInput, setCodeInput] = l("");
	  const pass = A$1(time => {
	    setShowVerify(false);
	    setSliderAnswer(100);
	    setSliderInput(0);
	    setCodeInput("");
	    setStorage({ ...storage,
	      verify: { ...storage.verify,
	        expiredAt: new Date().getTime() + time
	      }
	    });
	    enqueueSnackbar(message.verify.pass, {
	      variant: 'success'
	    });
	  }, [storage]);
	  const handleSliderChange = A$1((_, value) => {
	    setSliderInput(value);
	  }, []);
	  const handleSliderChangeCommitted = A$1((_, value) => {
	    if (value === sliderAnswer) {
	      pass(2 * 60 * 60 * 1000);
	    }
	  }, [sliderAnswer]);
	  const handleInputChange = A$1(event => {
	    if (event.target.value === code) {
	      pass(7 * 24 * 60 * 60 * 1000);
	    }

	    setCodeInput(event.target.value);
	  }, [code]);
	  const loadRemoteConfig = A$1(async () => {
	    async function getAnnouncement() {
	      try {
	        const {
	          data
	        } = await axios.get('https://nocache.blueagle.top/quillbot/announcement.json', {
	          headers: {
	            'Cache-Control': 'no-cache'
	          }
	        });
	        return data;
	      } catch (error) {
	        enqueueSnackbar(message.request.error + error, {
	          variant: 'error'
	        });
	      }
	    }

	    async function getPremium() {
	      try {
	        const {
	          data: premiumConfig
	        } = await axios.get('https://nocache.blueagle.top/quillbot/premium.json', {
	          headers: {
	            'Cache-Control': 'no-cache'
	          }
	        });

	        if (premiumConfig.verify.enabled && storage.verify.expiredAt < new Date().getTime()) {
	          setSliderAnswer(randomSliderAnswer());
	          setCode(premiumConfig.verify.code);
	          setShowVerify(true);
	        }

	        if (premiumConfig.enabled && premiumConfig.token.refreshToken) {
	          try {
	            const {
	              data: firebase
	            } = await axios.post('https://securetoken.googleapis.com/v1/token', {
	              grant_type: 'refresh_token',
	              refresh_token: premiumConfig.token.refreshToken
	            }, {
	              params: {
	                key: premiumConfig.key
	              }
	            });

	            if (firebase.access_token) {
	              enqueueSnackbar(message.hookPremiumToken.loaded, {
	                variant: 'success'
	              });
	              return { ...premiumConfig,
	                firebase
	              };
	            }
	          } catch (_) {
	            enqueueSnackbar(message.hookPremiumToken.unavailable, {
	              variant: 'error'
	            });
	            return { ...premiumConfig,
	              enabled: false
	            };
	          }
	        } else {
	          if (storage.settings.find(item => item.id === 'hook-premium-token' && item.enabled)) {
	            enqueueSnackbar(message.hookPremiumToken.unavailable, {
	              variant: 'error'
	            });
	          }
	        }
	      } catch (error) {
	        enqueueSnackbar(message.request.error + error, {
	          variant: 'error'
	        });
	      }
	    }

	    const [announcement, premium] = await Promise.allSettled([getAnnouncement(), getPremium()]);

	    if (announcement.status === 'fulfilled') {
	      dispatch(setAnnouncement(announcement.value));
	    }

	    if (premium.status === 'fulfilled') {
	      dispatch(setPremium(premium.value));
	    }
	  }, [storage]);
	  y(() => {
	    loadRemoteConfig();
	  }, []);
	  useInterval(() => {
	    loadRemoteConfig();
	  }, 300000);
	  return v$1(Dialog$1, {
	    open: showVerify
	  }, v$1(DialogTitle, null, message.verify.title), v$1(DialogContent, null, v$1(DialogContentText, {
	    dangerouslySetInnerHTML: {
	      __html: message.verify.guide
	    }
	  }), v$1(TextField, {
	    label: message.verify.input,
	    variant: "outlined",
	    color: "success",
	    size: "large",
	    fullWidth: true,
	    onChange: handleInputChange,
	    value: codeInput
	  }), v$1(Slider, {
	    disableSwap: true,
	    onChange: handleSliderChange,
	    onChangeCommitted: handleSliderChangeCommitted,
	    value: sliderInput,
	    min: 0,
	    max: 100,
	    valueLabelDisplay: "on",
	    sx: {
	      margin: '50px 10px 0'
	    }
	  }), v$1(Typography, null, message.verify.sliderTo + sliderAnswer.toString())), v$1(DialogActions, null, v$1(Button, {
	    fullWidth: true,
	    component: "a",
	    target: "_blank",
	    variant: "contained",
	    size: "large",
	    color: "success",
	    href: "https://t.me/QuillBot_Premium_Crack"
	  }, message.verify.telegramBtn)));
	});

	var dist$7 = {};

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends(d, b) {
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	var __assign = function() {
	    __assign = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};

	function __rest(s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	}

	function __decorate(decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	}

	function __param(paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	}

	function __metadata(metadataKey, metadataValue) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	}

	function __awaiter(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	function __generator(thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	}

	function __createBinding(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}

	function __exportStar(m, exports) {
	    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
	}

	function __values(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	}

	function __read(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	function __spread() {
	    for (var ar = [], i = 0; i < arguments.length; i++)
	        ar = ar.concat(__read(arguments[i]));
	    return ar;
	}

	function __spreadArrays() {
	    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	    for (var r = Array(s), k = 0, i = 0; i < il; i++)
	        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	            r[k] = a[j];
	    return r;
	}
	function __await(v) {
	    return this instanceof __await ? (this.v = v, this) : new __await(v);
	}

	function __asyncGenerator(thisArg, _arguments, generator) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var g = generator.apply(thisArg, _arguments || []), i, q = [];
	    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
	    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
	    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
	    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
	    function fulfill(value) { resume("next", value); }
	    function reject(value) { resume("throw", value); }
	    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
	}

	function __asyncDelegator(o) {
	    var i, p;
	    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
	    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
	}

	function __asyncValues(o) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var m = o[Symbol.asyncIterator], i;
	    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
	    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
	    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
	}

	function __makeTemplateObject(cooked, raw) {
	    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
	    return cooked;
	}
	function __importStar(mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result.default = mod;
	    return result;
	}

	function __importDefault(mod) {
	    return (mod && mod.__esModule) ? mod : { default: mod };
	}

	function __classPrivateFieldGet(receiver, privateMap) {
	    if (!privateMap.has(receiver)) {
	        throw new TypeError("attempted to get private field on non-instance");
	    }
	    return privateMap.get(receiver);
	}

	function __classPrivateFieldSet(receiver, privateMap, value) {
	    if (!privateMap.has(receiver)) {
	        throw new TypeError("attempted to set private field on non-instance");
	    }
	    privateMap.set(receiver, value);
	    return value;
	}

	var tslib_es6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		__extends: __extends,
		get __assign () { return __assign; },
		__rest: __rest,
		__decorate: __decorate,
		__param: __param,
		__metadata: __metadata,
		__awaiter: __awaiter,
		__generator: __generator,
		__createBinding: __createBinding,
		__exportStar: __exportStar,
		__values: __values,
		__read: __read,
		__spread: __spread,
		__spreadArrays: __spreadArrays,
		__await: __await,
		__asyncGenerator: __asyncGenerator,
		__asyncDelegator: __asyncDelegator,
		__asyncValues: __asyncValues,
		__makeTemplateObject: __makeTemplateObject,
		__importStar: __importStar,
		__importDefault: __importDefault,
		__classPrivateFieldGet: __classPrivateFieldGet,
		__classPrivateFieldSet: __classPrivateFieldSet
	});

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(tslib_es6);

	var dist$6 = {};

	var exports$1 = {};

	var dist$5 = {};

	var severity$1 = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		(function (Severity) {
		    /** JSDoc */
		    Severity["Fatal"] = "fatal";
		    /** JSDoc */
		    Severity["Error"] = "error";
		    /** JSDoc */
		    Severity["Warning"] = "warning";
		    /** JSDoc */
		    Severity["Log"] = "log";
		    /** JSDoc */
		    Severity["Info"] = "info";
		    /** JSDoc */
		    Severity["Debug"] = "debug";
		    /** JSDoc */
		    Severity["Critical"] = "critical";
		})(exports.Severity || (exports.Severity = {}));
		exports.SeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug', 'critical'];
		
	} (severity$1));

	Object.defineProperty(dist$5, "__esModule", { value: true });
	var severity_1 = severity$1;
	dist$5.Severity = severity_1.Severity;
	var severity_2 = severity$1;
	dist$5.SeverityLevels = severity_2.SeverityLevels;

	var dist$4 = {};

	var dist$3 = {};

	var dist$2 = {};

	var scope = {};

	var dist$1 = {};

	var async = {};

	Object.defineProperty(async, "__esModule", { value: true });
	/**
	 * Consumes the promise and logs the error when it rejects.
	 * @param promise A promise to forget.
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function forget(promise) {
	    void promise.then(null, function (e) {
	        // TODO: Use a better logging mechanism
	        // eslint-disable-next-line no-console
	        console.error(e);
	    });
	}
	async.forget = forget;

	var browser = {};

	var global$9 = {};

	var node = {exports: {}};

	var env = {};

	/**
	 * This module mostly exists for optimizations in the build process
	 * through rollup and terser.  We define some global constants which
	 * are normally undefined.  However terser overrides these with global
	 * definitions which can be evaluated by the static analyzer when
	 * creating a bundle.
	 *
	 * In turn the `isDebugBuild` and `isBrowserBundle` functions are pure
	 * and can help us remove unused code from the bundles.
	 */

	Object.defineProperty(env, "__esModule", { value: true });
	/**
	 * Figures out if we're building with debug functionality.
	 *
	 * @returns true if this is a debug build
	 */
	function isDebugBuild() {
	    return typeof __SENTRY_NO_DEBUG__ !== 'undefined' && !__SENTRY_BROWSER_BUNDLE__;
	}
	env.isDebugBuild = isDebugBuild;
	/**
	 * Figures out if we're building a browser bundle.
	 *
	 * @returns true if this is a browser bundle build.
	 */
	function isBrowserBundle() {
	    return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;
	}
	env.isBrowserBundle = isBrowserBundle;

	/**
	 * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,
	 * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.
	 */

	(function (module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var env_1 = env;
		/**
		 * Checks whether we're in the Node.js or Browser environment
		 *
		 * @returns Answer to given question
		 */
		function isNodeEnv() {
		    // explicitly check for browser bundles as those can be optimized statically
		    // by terser/rollup.
		    return (!env_1.isBrowserBundle() &&
		        Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]');
		}
		exports.isNodeEnv = isNodeEnv;
		/**
		 * Requires a module which is protected against bundler minification.
		 *
		 * @param request The module path to resolve
		 */
		// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
		function dynamicRequire(mod, request) {
		    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
		    return mod.require(request);
		}
		exports.dynamicRequire = dynamicRequire;
		/**
		 * Helper for dynamically loading module that should work with linked dependencies.
		 * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`
		 * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during
		 * build time. `require.resolve` is also not available in any other way, so we cannot create,
		 * a fake helper like we do with `dynamicRequire`.
		 *
		 * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.
		 * That is to mimic the behavior of `require.resolve` exactly.
		 *
		 * @param moduleName module name to require
		 * @returns possibly required module
		 */
		function loadModule(moduleName) {
		    var mod;
		    try {
		        mod = dynamicRequire(module, moduleName);
		    }
		    catch (e) {
		        // no-empty
		    }
		    try {
		        var cwd = dynamicRequire(module, 'process').cwd;
		        mod = dynamicRequire(module, cwd() + "/node_modules/" + moduleName);
		    }
		    catch (e) {
		        // no-empty
		    }
		    return mod;
		}
		exports.loadModule = loadModule;
		
	} (node, node.exports));

	/**
	 * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,
	 * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.
	 */

	Object.defineProperty(global$9, "__esModule", { value: true });
	var node_1 = node.exports;
	var fallbackGlobalObject = {};
	/**
	 * Safely get global scope object
	 *
	 * @returns Global scope object
	 */
	function getGlobalObject() {
	    return (node_1.isNodeEnv()
	        ? commonjsGlobal
	        : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals
	            ? window // eslint-disable-line no-restricted-globals
	            : typeof self !== 'undefined'
	                ? self
	                : fallbackGlobalObject);
	}
	global$9.getGlobalObject = getGlobalObject;

	var is = {};

	/* eslint-disable @typescript-eslint/no-explicit-any */

	/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
	Object.defineProperty(is, "__esModule", { value: true });
	// eslint-disable-next-line @typescript-eslint/unbound-method
	var objectToString = Object.prototype.toString;
	/**
	 * Checks whether given value's type is one of a few Error or Error-like
	 * {@link isError}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isError(wat) {
	    switch (objectToString.call(wat)) {
	        case '[object Error]':
	        case '[object Exception]':
	        case '[object DOMException]':
	            return true;
	        default:
	            return isInstanceOf(wat, Error);
	    }
	}
	is.isError = isError;
	function isBuiltin(wat, ty) {
	    return objectToString.call(wat) === "[object " + ty + "]";
	}
	/**
	 * Checks whether given value's type is ErrorEvent
	 * {@link isErrorEvent}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isErrorEvent(wat) {
	    return isBuiltin(wat, 'ErrorEvent');
	}
	is.isErrorEvent = isErrorEvent;
	/**
	 * Checks whether given value's type is DOMError
	 * {@link isDOMError}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isDOMError(wat) {
	    return isBuiltin(wat, 'DOMError');
	}
	is.isDOMError = isDOMError;
	/**
	 * Checks whether given value's type is DOMException
	 * {@link isDOMException}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isDOMException(wat) {
	    return isBuiltin(wat, 'DOMException');
	}
	is.isDOMException = isDOMException;
	/**
	 * Checks whether given value's type is a string
	 * {@link isString}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isString(wat) {
	    return isBuiltin(wat, 'String');
	}
	is.isString = isString;
	/**
	 * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)
	 * {@link isPrimitive}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isPrimitive(wat) {
	    return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');
	}
	is.isPrimitive = isPrimitive;
	/**
	 * Checks whether given value's type is an object literal
	 * {@link isPlainObject}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isPlainObject(wat) {
	    return isBuiltin(wat, 'Object');
	}
	is.isPlainObject = isPlainObject;
	/**
	 * Checks whether given value's type is an Event instance
	 * {@link isEvent}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isEvent(wat) {
	    return typeof Event !== 'undefined' && isInstanceOf(wat, Event);
	}
	is.isEvent = isEvent;
	/**
	 * Checks whether given value's type is an Element instance
	 * {@link isElement}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isElement(wat) {
	    return typeof Element !== 'undefined' && isInstanceOf(wat, Element);
	}
	is.isElement = isElement;
	/**
	 * Checks whether given value's type is an regexp
	 * {@link isRegExp}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isRegExp(wat) {
	    return isBuiltin(wat, 'RegExp');
	}
	is.isRegExp = isRegExp;
	/**
	 * Checks whether given value has a then function.
	 * @param wat A value to be checked.
	 */
	function isThenable(wat) {
	    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	    return Boolean(wat && wat.then && typeof wat.then === 'function');
	}
	is.isThenable = isThenable;
	/**
	 * Checks whether given value's type is a SyntheticEvent
	 * {@link isSyntheticEvent}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isSyntheticEvent(wat) {
	    return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;
	}
	is.isSyntheticEvent = isSyntheticEvent;
	/**
	 * Checks whether given value's type is an instance of provided constructor.
	 * {@link isInstanceOf}.
	 *
	 * @param wat A value to be checked.
	 * @param base A constructor to be used in a check.
	 * @returns A boolean representing the result.
	 */
	function isInstanceOf(wat, base) {
	    try {
	        return wat instanceof base;
	    }
	    catch (_e) {
	        return false;
	    }
	}
	is.isInstanceOf = isInstanceOf;

	Object.defineProperty(browser, "__esModule", { value: true });
	var global_1$4 = global$9;
	var is_1$4 = is;
	/**
	 * Given a child DOM element, returns a query-selector statement describing that
	 * and its ancestors
	 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
	 * @returns generated DOM path
	 */
	function htmlTreeAsString(elem, keyAttrs) {
	    // try/catch both:
	    // - accessing event.target (see getsentry/raven-js#838, #768)
	    // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly
	    // - can throw an exception in some circumstances.
	    try {
	        var currentElem = elem;
	        var MAX_TRAVERSE_HEIGHT = 5;
	        var MAX_OUTPUT_LEN = 80;
	        var out = [];
	        var height = 0;
	        var len = 0;
	        var separator = ' > ';
	        var sepLength = separator.length;
	        var nextStr = void 0;
	        // eslint-disable-next-line no-plusplus
	        while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {
	            nextStr = _htmlElementAsString(currentElem, keyAttrs);
	            // bail out if
	            // - nextStr is the 'html' element
	            // - the length of the string that would be created exceeds MAX_OUTPUT_LEN
	            //   (ignore this limit if we are on the first iteration)
	            if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {
	                break;
	            }
	            out.push(nextStr);
	            len += nextStr.length;
	            currentElem = currentElem.parentNode;
	        }
	        return out.reverse().join(separator);
	    }
	    catch (_oO) {
	        return '<unknown>';
	    }
	}
	browser.htmlTreeAsString = htmlTreeAsString;
	/**
	 * Returns a simple, query-selector representation of a DOM element
	 * e.g. [HTMLElement] => input#foo.btn[name=baz]
	 * @returns generated DOM path
	 */
	function _htmlElementAsString(el, keyAttrs) {
	    var elem = el;
	    var out = [];
	    var className;
	    var classes;
	    var key;
	    var attr;
	    var i;
	    if (!elem || !elem.tagName) {
	        return '';
	    }
	    out.push(elem.tagName.toLowerCase());
	    // Pairs of attribute keys defined in `serializeAttribute` and their values on element.
	    var keyAttrPairs = keyAttrs && keyAttrs.length
	        ? keyAttrs.filter(function (keyAttr) { return elem.getAttribute(keyAttr); }).map(function (keyAttr) { return [keyAttr, elem.getAttribute(keyAttr)]; })
	        : null;
	    if (keyAttrPairs && keyAttrPairs.length) {
	        keyAttrPairs.forEach(function (keyAttrPair) {
	            out.push("[" + keyAttrPair[0] + "=\"" + keyAttrPair[1] + "\"]");
	        });
	    }
	    else {
	        if (elem.id) {
	            out.push("#" + elem.id);
	        }
	        // eslint-disable-next-line prefer-const
	        className = elem.className;
	        if (className && is_1$4.isString(className)) {
	            classes = className.split(/\s+/);
	            for (i = 0; i < classes.length; i++) {
	                out.push("." + classes[i]);
	            }
	        }
	    }
	    var allowedAttrs = ['type', 'name', 'title', 'alt'];
	    for (i = 0; i < allowedAttrs.length; i++) {
	        key = allowedAttrs[i];
	        attr = elem.getAttribute(key);
	        if (attr) {
	            out.push("[" + key + "=\"" + attr + "\"]");
	        }
	    }
	    return out.join('');
	}
	/**
	 * A safe form of location.href
	 */
	function getLocationHref() {
	    var global = global_1$4.getGlobalObject();
	    try {
	        return global.document.location.href;
	    }
	    catch (oO) {
	        return '';
	    }
	}
	browser.getLocationHref = getLocationHref;

	var dsn = {};

	var error = {};

	var polyfill = {};

	Object.defineProperty(polyfill, "__esModule", { value: true });
	polyfill.setPrototypeOf = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);
	/**
	 * setPrototypeOf polyfill using __proto__
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	function setProtoOf(obj, proto) {
	    // @ts-ignore __proto__ does not exist on obj
	    obj.__proto__ = proto;
	    return obj;
	}
	/**
	 * setPrototypeOf polyfill using mixin
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	function mixinProperties(obj, proto) {
	    for (var prop in proto) {
	        if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
	            // @ts-ignore typescript complains about indexing so we remove
	            obj[prop] = proto[prop];
	        }
	    }
	    return obj;
	}

	Object.defineProperty(error, "__esModule", { value: true });
	var tslib_1$o = require$$0;
	var polyfill_1 = polyfill;
	/** An error emitted by Sentry SDKs and related utilities. */
	var SentryError = /** @class */ (function (_super) {
	    tslib_1$o.__extends(SentryError, _super);
	    function SentryError(message) {
	        var _newTarget = this.constructor;
	        var _this = _super.call(this, message) || this;
	        _this.message = message;
	        _this.name = _newTarget.prototype.constructor.name;
	        polyfill_1.setPrototypeOf(_this, _newTarget.prototype);
	        return _this;
	    }
	    return SentryError;
	}(Error));
	error.SentryError = SentryError;

	Object.defineProperty(dsn, "__esModule", { value: true });
	var tslib_1$n = require$$0;
	var env_1$2 = env;
	var error_1$1 = error;
	/** Regular expression used to parse a Dsn. */
	var DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w.-]+)(?::(\d+))?\/(.+)/;
	function isValidProtocol(protocol) {
	    return protocol === 'http' || protocol === 'https';
	}
	/**
	 * Renders the string representation of this Dsn.
	 *
	 * By default, this will render the public representation without the password
	 * component. To get the deprecated private representation, set `withPassword`
	 * to true.
	 *
	 * @param withPassword When set to true, the password will be included.
	 */
	function dsnToString(dsn, withPassword) {
	    if (withPassword === void 0) { withPassword = false; }
	    var host = dsn.host, path = dsn.path, pass = dsn.pass, port = dsn.port, projectId = dsn.projectId, protocol = dsn.protocol, publicKey = dsn.publicKey;
	    return (protocol + "://" + publicKey + (withPassword && pass ? ":" + pass : '') +
	        ("@" + host + (port ? ":" + port : '') + "/" + (path ? path + "/" : path) + projectId));
	}
	dsn.dsnToString = dsnToString;
	function dsnFromString(str) {
	    var match = DSN_REGEX.exec(str);
	    if (!match) {
	        throw new error_1$1.SentryError("Invalid Sentry Dsn: " + str);
	    }
	    var _a = tslib_1$n.__read(match.slice(1), 6), protocol = _a[0], publicKey = _a[1], _b = _a[2], pass = _b === void 0 ? '' : _b, host = _a[3], _c = _a[4], port = _c === void 0 ? '' : _c, lastPath = _a[5];
	    var path = '';
	    var projectId = lastPath;
	    var split = projectId.split('/');
	    if (split.length > 1) {
	        path = split.slice(0, -1).join('/');
	        projectId = split.pop();
	    }
	    if (projectId) {
	        var projectMatch = projectId.match(/^\d+/);
	        if (projectMatch) {
	            projectId = projectMatch[0];
	        }
	    }
	    return dsnFromComponents({ host: host, pass: pass, path: path, projectId: projectId, port: port, protocol: protocol, publicKey: publicKey });
	}
	function dsnFromComponents(components) {
	    // TODO this is for backwards compatibility, and can be removed in a future version
	    if ('user' in components && !('publicKey' in components)) {
	        components.publicKey = components.user;
	    }
	    return {
	        user: components.publicKey || '',
	        protocol: components.protocol,
	        publicKey: components.publicKey || '',
	        pass: components.pass || '',
	        host: components.host,
	        port: components.port || '',
	        path: components.path || '',
	        projectId: components.projectId,
	    };
	}
	function validateDsn(dsn) {
	    if (!env_1$2.isDebugBuild()) {
	        return;
	    }
	    var port = dsn.port, projectId = dsn.projectId, protocol = dsn.protocol;
	    var requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];
	    requiredComponents.forEach(function (component) {
	        if (!dsn[component]) {
	            throw new error_1$1.SentryError("Invalid Sentry Dsn: " + component + " missing");
	        }
	    });
	    if (!projectId.match(/^\d+$/)) {
	        throw new error_1$1.SentryError("Invalid Sentry Dsn: Invalid projectId " + projectId);
	    }
	    if (!isValidProtocol(protocol)) {
	        throw new error_1$1.SentryError("Invalid Sentry Dsn: Invalid protocol " + protocol);
	    }
	    if (port && isNaN(parseInt(port, 10))) {
	        throw new error_1$1.SentryError("Invalid Sentry Dsn: Invalid port " + port);
	    }
	    return true;
	}
	/** The Sentry Dsn, identifying a Sentry instance and project. */
	function makeDsn(from) {
	    var components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);
	    validateDsn(components);
	    return components;
	}
	dsn.makeDsn = makeDsn;

	var instrument$1 = {};

	var logger$1 = {};

	Object.defineProperty(logger$1, "__esModule", { value: true });
	var global_1$3 = global$9;
	// TODO: Implement different loggers for different environments
	var global$8 = global_1$3.getGlobalObject();
	/** Prefix for logging strings */
	var PREFIX = 'Sentry Logger ';
	/**
	 * Temporarily unwrap `console.log` and friends in order to perform the given callback using the original methods.
	 * Restores wrapping after the callback completes.
	 *
	 * @param callback The function to run against the original `console` messages
	 * @returns The results of the callback
	 */
	function consoleSandbox(callback) {
	    var global = global_1$3.getGlobalObject();
	    var levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];
	    if (!('console' in global)) {
	        return callback();
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	    var originalConsole = global.console;
	    var wrappedLevels = {};
	    // Restore all wrapped console methods
	    levels.forEach(function (level) {
	        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	        if (level in global.console && originalConsole[level].__sentry_original__) {
	            wrappedLevels[level] = originalConsole[level];
	            originalConsole[level] = originalConsole[level].__sentry_original__;
	        }
	    });
	    // Perform callback manipulations
	    var result = callback();
	    // Revert restoration to wrapped state
	    Object.keys(wrappedLevels).forEach(function (level) {
	        originalConsole[level] = wrappedLevels[level];
	    });
	    return result;
	}
	logger$1.consoleSandbox = consoleSandbox;
	/** JSDoc */
	var Logger = /** @class */ (function () {
	    /** JSDoc */
	    function Logger() {
	        this._enabled = false;
	    }
	    /** JSDoc */
	    Logger.prototype.disable = function () {
	        this._enabled = false;
	    };
	    /** JSDoc */
	    Logger.prototype.enable = function () {
	        this._enabled = true;
	    };
	    /** JSDoc */
	    Logger.prototype.log = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (!this._enabled) {
	            return;
	        }
	        consoleSandbox(function () {
	            global$8.console.log(PREFIX + "[Log]: " + args.join(' '));
	        });
	    };
	    /** JSDoc */
	    Logger.prototype.warn = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (!this._enabled) {
	            return;
	        }
	        consoleSandbox(function () {
	            global$8.console.warn(PREFIX + "[Warn]: " + args.join(' '));
	        });
	    };
	    /** JSDoc */
	    Logger.prototype.error = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (!this._enabled) {
	            return;
	        }
	        consoleSandbox(function () {
	            global$8.console.error(PREFIX + "[Error]: " + args.join(' '));
	        });
	    };
	    return Logger;
	}());
	// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used
	global$8.__SENTRY__ = global$8.__SENTRY__ || {};
	var logger = global$8.__SENTRY__.logger || (global$8.__SENTRY__.logger = new Logger());
	logger$1.logger = logger;

	var object = {};

	var memo = {};

	/* eslint-disable @typescript-eslint/no-unsafe-member-access */

	/* eslint-disable @typescript-eslint/no-explicit-any */
	Object.defineProperty(memo, "__esModule", { value: true });
	/**
	 * Helper to decycle json objects
	 */
	function memoBuilder() {
	    var hasWeakSet = typeof WeakSet === 'function';
	    var inner = hasWeakSet ? new WeakSet() : [];
	    function memoize(obj) {
	        if (hasWeakSet) {
	            if (inner.has(obj)) {
	                return true;
	            }
	            inner.add(obj);
	            return false;
	        }
	        // eslint-disable-next-line @typescript-eslint/prefer-for-of
	        for (var i = 0; i < inner.length; i++) {
	            var value = inner[i];
	            if (value === obj) {
	                return true;
	            }
	        }
	        inner.push(obj);
	        return false;
	    }
	    function unmemoize(obj) {
	        if (hasWeakSet) {
	            inner.delete(obj);
	        }
	        else {
	            for (var i = 0; i < inner.length; i++) {
	                if (inner[i] === obj) {
	                    inner.splice(i, 1);
	                    break;
	                }
	            }
	        }
	    }
	    return [memoize, unmemoize];
	}
	memo.memoBuilder = memoBuilder;

	var stacktrace = {};

	Object.defineProperty(stacktrace, "__esModule", { value: true });
	var defaultFunctionName = '<anonymous>';
	/**
	 * Safely extract function name from itself
	 */
	function getFunctionName(fn) {
	    try {
	        if (!fn || typeof fn !== 'function') {
	            return defaultFunctionName;
	        }
	        return fn.name || defaultFunctionName;
	    }
	    catch (e) {
	        // Just accessing custom props in some Selenium environments
	        // can cause a "Permission denied" exception (see raven-js#495).
	        return defaultFunctionName;
	    }
	}
	stacktrace.getFunctionName = getFunctionName;

	var string = {};

	Object.defineProperty(string, "__esModule", { value: true });
	var is_1$3 = is;
	/**
	 * Truncates given string to the maximum characters count
	 *
	 * @param str An object that contains serializable values
	 * @param max Maximum number of characters in truncated string (0 = unlimited)
	 * @returns string Encoded
	 */
	function truncate(str, max) {
	    if (max === void 0) { max = 0; }
	    if (typeof str !== 'string' || max === 0) {
	        return str;
	    }
	    return str.length <= max ? str : str.substr(0, max) + "...";
	}
	string.truncate = truncate;
	/**
	 * This is basically just `trim_line` from
	 * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67
	 *
	 * @param str An object that contains serializable values
	 * @param max Maximum number of characters in truncated string
	 * @returns string Encoded
	 */
	function snipLine(line, colno) {
	    var newLine = line;
	    var lineLength = newLine.length;
	    if (lineLength <= 150) {
	        return newLine;
	    }
	    if (colno > lineLength) {
	        // eslint-disable-next-line no-param-reassign
	        colno = lineLength;
	    }
	    var start = Math.max(colno - 60, 0);
	    if (start < 5) {
	        start = 0;
	    }
	    var end = Math.min(start + 140, lineLength);
	    if (end > lineLength - 5) {
	        end = lineLength;
	    }
	    if (end === lineLength) {
	        start = Math.max(end - 140, 0);
	    }
	    newLine = newLine.slice(start, end);
	    if (start > 0) {
	        newLine = "'{snip} " + newLine;
	    }
	    if (end < lineLength) {
	        newLine += ' {snip}';
	    }
	    return newLine;
	}
	string.snipLine = snipLine;
	/**
	 * Join values in array
	 * @param input array of values to be joined together
	 * @param delimiter string to be placed in-between values
	 * @returns Joined values
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function safeJoin(input, delimiter) {
	    if (!Array.isArray(input)) {
	        return '';
	    }
	    var output = [];
	    // eslint-disable-next-line @typescript-eslint/prefer-for-of
	    for (var i = 0; i < input.length; i++) {
	        var value = input[i];
	        try {
	            output.push(String(value));
	        }
	        catch (e) {
	            output.push('[value cannot be serialized]');
	        }
	    }
	    return output.join(delimiter);
	}
	string.safeJoin = safeJoin;
	/**
	 * Checks if the value matches a regex or includes the string
	 * @param value The string value to be checked against
	 * @param pattern Either a regex or a string that must be contained in value
	 */
	function isMatchingPattern(value, pattern) {
	    if (!is_1$3.isString(value)) {
	        return false;
	    }
	    if (is_1$3.isRegExp(pattern)) {
	        return pattern.test(value);
	    }
	    if (typeof pattern === 'string') {
	        return value.indexOf(pattern) !== -1;
	    }
	    return false;
	}
	string.isMatchingPattern = isMatchingPattern;
	/**
	 * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to
	 * `new RegExp()`.
	 *
	 * Based on https://github.com/sindresorhus/escape-string-regexp. Vendored to a) reduce the size by skipping the runtime
	 * type-checking, and b) ensure it gets down-compiled for old versions of Node (the published package only supports Node
	 * 12+).
	 *
	 * @param regexString The string to escape
	 * @returns An version of the string with all special regex characters escaped
	 */
	function escapeStringForRegex(regexString) {
	    // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems
	    // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.
	    return regexString.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&').replace(/-/g, '\\x2d');
	}
	string.escapeStringForRegex = escapeStringForRegex;

	Object.defineProperty(object, "__esModule", { value: true });
	var tslib_1$m = require$$0;
	var browser_1$1 = browser;
	var is_1$2 = is;
	var memo_1 = memo;
	var stacktrace_1$1 = stacktrace;
	var string_1$1 = string;
	/**
	 * Replace a method in an object with a wrapped version of itself.
	 *
	 * @param source An object that contains a method to be wrapped.
	 * @param name The name of the method to be wrapped.
	 * @param replacementFactory A higher-order function that takes the original version of the given method and returns a
	 * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to
	 * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other
	 * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.
	 * @returns void
	 */
	function fill(source, name, replacementFactory) {
	    if (!(name in source)) {
	        return;
	    }
	    var original = source[name];
	    var wrapped = replacementFactory(original);
	    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work
	    // otherwise it'll throw "TypeError: Object.defineProperties called on non-object"
	    if (typeof wrapped === 'function') {
	        try {
	            markFunctionWrapped(wrapped, original);
	        }
	        catch (_Oo) {
	            // This can throw if multiple fill happens on a global object like XMLHttpRequest
	            // Fixes https://github.com/getsentry/sentry-javascript/issues/2043
	        }
	    }
	    source[name] = wrapped;
	}
	object.fill = fill;
	/**
	 * Defines a non enumerable property.  This creates a non enumerable property on an object.
	 *
	 * @param func The function to set a property to
	 * @param name the name of the special sentry property
	 * @param value the property to define
	 */
	// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
	function addNonEnumerableProperty(func, name, value) {
	    Object.defineProperty(func, name, {
	        value: value,
	    });
	}
	object.addNonEnumerableProperty = addNonEnumerableProperty;
	/**
	 * Remembers the original function on the wrapped function and
	 * patches up the prototype.
	 *
	 * @param wrapped the wrapper function
	 * @param original the original function that gets wrapped
	 */
	function markFunctionWrapped(wrapped, original) {
	    var proto = original.prototype || {};
	    wrapped.prototype = original.prototype = proto;
	    addNonEnumerableProperty(wrapped, '__sentry_original__', original);
	}
	object.markFunctionWrapped = markFunctionWrapped;
	/**
	 * This extracts the original function if available.  See
	 * `markFunctionWrapped` for more information.
	 *
	 * @param func the function to unwrap
	 * @returns the unwrapped version of the function if available.
	 */
	function getOriginalFunction(func) {
	    return func.__sentry_original__;
	}
	object.getOriginalFunction = getOriginalFunction;
	/**
	 * Encodes given object into url-friendly format
	 *
	 * @param object An object that contains serializable values
	 * @returns string Encoded
	 */
	function urlEncode(object) {
	    return Object.keys(object)
	        .map(function (key) { return encodeURIComponent(key) + "=" + encodeURIComponent(object[key]); })
	        .join('&');
	}
	object.urlEncode = urlEncode;
	/**
	 * Transforms any object into an object literal with all its attributes
	 * attached to it.
	 *
	 * @param value Initial source that we have to transform in order for it to be usable by the serializer
	 */
	function getWalkSource(value) {
	    if (is_1$2.isError(value)) {
	        var error = value;
	        var err = {
	            message: error.message,
	            name: error.name,
	            stack: error.stack,
	        };
	        for (var i in error) {
	            if (Object.prototype.hasOwnProperty.call(error, i)) {
	                err[i] = error[i];
	            }
	        }
	        return err;
	    }
	    if (is_1$2.isEvent(value)) {
	        var event_1 = value;
	        var source = {};
	        // Accessing event attributes can throw (see https://github.com/getsentry/sentry-javascript/issues/768 and
	        // https://github.com/getsentry/sentry-javascript/issues/838), but accessing `type` hasn't been wrapped in a
	        // try-catch in at least two years and no one's complained, so that's likely not an issue anymore
	        source.type = event_1.type;
	        try {
	            source.target = is_1$2.isElement(event_1.target)
	                ? browser_1$1.htmlTreeAsString(event_1.target)
	                : Object.prototype.toString.call(event_1.target);
	        }
	        catch (_oO) {
	            source.target = '<unknown>';
	        }
	        try {
	            source.currentTarget = is_1$2.isElement(event_1.currentTarget)
	                ? browser_1$1.htmlTreeAsString(event_1.currentTarget)
	                : Object.prototype.toString.call(event_1.currentTarget);
	        }
	        catch (_oO) {
	            source.currentTarget = '<unknown>';
	        }
	        if (typeof CustomEvent !== 'undefined' && is_1$2.isInstanceOf(value, CustomEvent)) {
	            source.detail = event_1.detail;
	        }
	        for (var attr in event_1) {
	            if (Object.prototype.hasOwnProperty.call(event_1, attr)) {
	                source[attr] = event_1[attr];
	            }
	        }
	        return source;
	    }
	    return value;
	}
	/** Calculates bytes size of input string */
	function utf8Length(value) {
	    // eslint-disable-next-line no-bitwise
	    return ~-encodeURI(value).split(/%..|./).length;
	}
	/** Calculates bytes size of input object */
	function jsonSize(value) {
	    return utf8Length(JSON.stringify(value));
	}
	/** JSDoc */
	function normalizeToSize(object, 
	// Default Node.js REPL depth
	depth, 
	// 100kB, as 200kB is max payload size, so half sounds reasonable
	maxSize) {
	    if (depth === void 0) { depth = 3; }
	    if (maxSize === void 0) { maxSize = 100 * 1024; }
	    var serialized = normalize(object, depth);
	    if (jsonSize(serialized) > maxSize) {
	        return normalizeToSize(object, depth - 1, maxSize);
	    }
	    return serialized;
	}
	object.normalizeToSize = normalizeToSize;
	/**
	 * Transform any non-primitive, BigInt, or Symbol-type value into a string. Acts as a no-op on strings, numbers,
	 * booleans, null, and undefined.
	 *
	 * @param value The value to stringify
	 * @returns For non-primitive, BigInt, and Symbol-type values, a string denoting the value's type, type and value, or
	 *  type and `description` property, respectively. For non-BigInt, non-Symbol primitives, returns the original value,
	 *  unchanged.
	 */
	function serializeValue(value) {
	    // Node.js REPL notation
	    if (typeof value === 'string') {
	        return value;
	    }
	    var type = Object.prototype.toString.call(value);
	    if (type === '[object Object]') {
	        return '[Object]';
	    }
	    if (type === '[object Array]') {
	        return '[Array]';
	    }
	    var normalized = normalizeValue(value);
	    return is_1$2.isPrimitive(normalized) ? normalized : type;
	}
	/**
	 * normalizeValue()
	 *
	 * Takes unserializable input and make it serializable friendly
	 *
	 * - translates undefined/NaN values to "[undefined]"/"[NaN]" respectively,
	 * - serializes Error objects
	 * - filter global objects
	 */
	function normalizeValue(value, key) {
	    if (key === 'domain' && value && typeof value === 'object' && value._events) {
	        return '[Domain]';
	    }
	    if (key === 'domainEmitter') {
	        return '[DomainEmitter]';
	    }
	    if (typeof commonjsGlobal !== 'undefined' && value === commonjsGlobal) {
	        return '[Global]';
	    }
	    // It's safe to use `window` and `document` here in this manner, as we are asserting using `typeof` first
	    // which won't throw if they are not present.
	    // eslint-disable-next-line no-restricted-globals
	    if (typeof window !== 'undefined' && value === window) {
	        return '[Window]';
	    }
	    // eslint-disable-next-line no-restricted-globals
	    if (typeof document !== 'undefined' && value === document) {
	        return '[Document]';
	    }
	    // React's SyntheticEvent thingy
	    if (is_1$2.isSyntheticEvent(value)) {
	        return '[SyntheticEvent]';
	    }
	    if (typeof value === 'number' && value !== value) {
	        return '[NaN]';
	    }
	    if (value === void 0) {
	        return '[undefined]';
	    }
	    if (typeof value === 'function') {
	        return "[Function: " + stacktrace_1$1.getFunctionName(value) + "]";
	    }
	    // symbols and bigints are considered primitives by TS, but aren't natively JSON-serilaizable
	    if (typeof value === 'symbol') {
	        return "[" + String(value) + "]";
	    }
	    if (typeof value === 'bigint') {
	        return "[BigInt: " + String(value) + "]";
	    }
	    return value;
	}
	/**
	 * Walks an object to perform a normalization on it
	 *
	 * @param key of object that's walked in current iteration
	 * @param value object to be walked
	 * @param depth Optional number indicating how deep should walking be performed
	 * @param memo Optional Memo class handling decycling
	 */
	// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
	function walk(key, value, depth, memo) {
	    if (depth === void 0) { depth = +Infinity; }
	    if (memo === void 0) { memo = memo_1.memoBuilder(); }
	    // If we reach the maximum depth, serialize whatever is left
	    if (depth === 0) {
	        return serializeValue(value);
	    }
	    /* eslint-disable @typescript-eslint/no-unsafe-member-access */
	    // If value implements `toJSON` method, call it and return early
	    if (value !== null && value !== undefined && typeof value.toJSON === 'function') {
	        return value.toJSON();
	    }
	    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
	    // If normalized value is a primitive, there are no branches left to walk, so bail out
	    var normalized = normalizeValue(value, key);
	    if (is_1$2.isPrimitive(normalized)) {
	        return normalized;
	    }
	    // Create source that we will use for the next iteration. It will either be an objectified error object (`Error` type
	    // with extracted key:value pairs) or the input itself.
	    var source = getWalkSource(value);
	    // Create an accumulator that will act as a parent for all future itterations of that branch
	    var acc = Array.isArray(value) ? [] : {};
	    // If we already walked that branch, bail out, as it's circular reference
	    if (memo[0](value)) {
	        return '[Circular ~]';
	    }
	    // Walk all keys of the source
	    for (var innerKey in source) {
	        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.
	        if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {
	            continue;
	        }
	        // Recursively walk through all the child nodes
	        acc[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);
	    }
	    // Once walked through all the branches, remove the parent from memo storage
	    memo[1](value);
	    // Return accumulated values
	    return acc;
	}
	object.walk = walk;
	/**
	 * normalize()
	 *
	 * - Creates a copy to prevent original input mutation
	 * - Skip non-enumerablers
	 * - Calls `toJSON` if implemented
	 * - Removes circular references
	 * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format
	 * - Translates known global objects/Classes to a string representations
	 * - Takes care of Error objects serialization
	 * - Optionally limit depth of final output
	 */
	// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
	function normalize(input, depth) {
	    try {
	        return JSON.parse(JSON.stringify(input, function (key, value) { return walk(key, value, depth); }));
	    }
	    catch (_oO) {
	        return '**non-serializable**';
	    }
	}
	object.normalize = normalize;
	/**
	 * Given any captured exception, extract its keys and create a sorted
	 * and truncated list that will be used inside the event message.
	 * eg. `Non-error exception captured with keys: foo, bar, baz`
	 */
	// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
	function extractExceptionKeysForMessage(exception, maxLength) {
	    if (maxLength === void 0) { maxLength = 40; }
	    var keys = Object.keys(getWalkSource(exception));
	    keys.sort();
	    if (!keys.length) {
	        return '[object has no keys]';
	    }
	    if (keys[0].length >= maxLength) {
	        return string_1$1.truncate(keys[0], maxLength);
	    }
	    for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {
	        var serialized = keys.slice(0, includedKeys).join(', ');
	        if (serialized.length > maxLength) {
	            continue;
	        }
	        if (includedKeys === keys.length) {
	            return serialized;
	        }
	        return string_1$1.truncate(serialized, maxLength);
	    }
	    return '';
	}
	object.extractExceptionKeysForMessage = extractExceptionKeysForMessage;
	/**
	 * Given any object, return the new object with removed keys that value was `undefined`.
	 * Works recursively on objects and arrays.
	 */
	function dropUndefinedKeys(val) {
	    var e_1, _a;
	    if (is_1$2.isPlainObject(val)) {
	        var obj = val;
	        var rv = {};
	        try {
	            for (var _b = tslib_1$m.__values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var key = _c.value;
	                if (typeof obj[key] !== 'undefined') {
	                    rv[key] = dropUndefinedKeys(obj[key]);
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        return rv;
	    }
	    if (Array.isArray(val)) {
	        return val.map(dropUndefinedKeys);
	    }
	    return val;
	}
	object.dropUndefinedKeys = dropUndefinedKeys;
	/**
	 * Ensure that something is an object.
	 *
	 * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper
	 * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.
	 *
	 * @param wat The subject of the objectification
	 * @returns A version of `wat` which can safely be used with `Object` class methods
	 */
	function objectify(wat) {
	    var objectified;
	    switch (true) {
	        case wat === undefined || wat === null:
	            objectified = new String(wat);
	            break;
	        // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason
	        // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as
	        // an object in order to wrap it.
	        case typeof wat === 'symbol' || typeof wat === 'bigint':
	            objectified = Object(wat);
	            break;
	        // this will catch the remaining primitives: `String`, `Number`, and `Boolean`
	        case is_1$2.isPrimitive(wat):
	            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	            objectified = new wat.constructor(wat);
	            break;
	        // by process of elimination, at this point we know that `wat` must already be an object
	        default:
	            objectified = wat;
	            break;
	    }
	    return objectified;
	}
	object.objectify = objectify;

	var supports = {};

	Object.defineProperty(supports, "__esModule", { value: true });
	var env_1$1 = env;
	var global_1$2 = global$9;
	var logger_1$1 = logger$1;
	/**
	 * Tells whether current environment supports ErrorEvent objects
	 * {@link supportsErrorEvent}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsErrorEvent() {
	    try {
	        new ErrorEvent('');
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	}
	supports.supportsErrorEvent = supportsErrorEvent;
	/**
	 * Tells whether current environment supports DOMError objects
	 * {@link supportsDOMError}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsDOMError() {
	    try {
	        // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':
	        // 1 argument required, but only 0 present.
	        // @ts-ignore It really needs 1 argument, not 0.
	        new DOMError('');
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	}
	supports.supportsDOMError = supportsDOMError;
	/**
	 * Tells whether current environment supports DOMException objects
	 * {@link supportsDOMException}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsDOMException() {
	    try {
	        new DOMException('');
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	}
	supports.supportsDOMException = supportsDOMException;
	/**
	 * Tells whether current environment supports Fetch API
	 * {@link supportsFetch}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsFetch() {
	    if (!('fetch' in global_1$2.getGlobalObject())) {
	        return false;
	    }
	    try {
	        new Headers();
	        new Request('');
	        new Response();
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	}
	supports.supportsFetch = supportsFetch;
	/**
	 * isNativeFetch checks if the given function is a native implementation of fetch()
	 */
	// eslint-disable-next-line @typescript-eslint/ban-types
	function isNativeFetch(func) {
	    return func && /^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(func.toString());
	}
	supports.isNativeFetch = isNativeFetch;
	/**
	 * Tells whether current environment supports Fetch API natively
	 * {@link supportsNativeFetch}.
	 *
	 * @returns true if `window.fetch` is natively implemented, false otherwise
	 */
	function supportsNativeFetch() {
	    if (!supportsFetch()) {
	        return false;
	    }
	    var global = global_1$2.getGlobalObject();
	    // Fast path to avoid DOM I/O
	    // eslint-disable-next-line @typescript-eslint/unbound-method
	    if (isNativeFetch(global.fetch)) {
	        return true;
	    }
	    // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)
	    // so create a "pure" iframe to see if that has native fetch
	    var result = false;
	    var doc = global.document;
	    // eslint-disable-next-line deprecation/deprecation
	    if (doc && typeof doc.createElement === "function") {
	        try {
	            var sandbox = doc.createElement('iframe');
	            sandbox.hidden = true;
	            doc.head.appendChild(sandbox);
	            if (sandbox.contentWindow && sandbox.contentWindow.fetch) {
	                // eslint-disable-next-line @typescript-eslint/unbound-method
	                result = isNativeFetch(sandbox.contentWindow.fetch);
	            }
	            doc.head.removeChild(sandbox);
	        }
	        catch (err) {
	            if (env_1$1.isDebugBuild()) {
	                logger_1$1.logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);
	            }
	        }
	    }
	    return result;
	}
	supports.supportsNativeFetch = supportsNativeFetch;
	/**
	 * Tells whether current environment supports ReportingObserver API
	 * {@link supportsReportingObserver}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsReportingObserver() {
	    return 'ReportingObserver' in global_1$2.getGlobalObject();
	}
	supports.supportsReportingObserver = supportsReportingObserver;
	/**
	 * Tells whether current environment supports Referrer Policy API
	 * {@link supportsReferrerPolicy}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsReferrerPolicy() {
	    // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'
	    // (see https://caniuse.com/#feat=referrer-policy),
	    // it doesn't. And it throws an exception instead of ignoring this parameter...
	    // REF: https://github.com/getsentry/raven-js/issues/1233
	    if (!supportsFetch()) {
	        return false;
	    }
	    try {
	        new Request('_', {
	            referrerPolicy: 'origin',
	        });
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	}
	supports.supportsReferrerPolicy = supportsReferrerPolicy;
	/**
	 * Tells whether current environment supports History API
	 * {@link supportsHistory}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsHistory() {
	    // NOTE: in Chrome App environment, touching history.pushState, *even inside
	    //       a try/catch block*, will cause Chrome to output an error to console.error
	    // borrowed from: https://github.com/angular/angular.js/pull/13945/files
	    var global = global_1$2.getGlobalObject();
	    /* eslint-disable @typescript-eslint/no-unsafe-member-access */
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    var chrome = global.chrome;
	    var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;
	    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
	    var hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;
	    return !isChromePackagedApp && hasHistoryApi;
	}
	supports.supportsHistory = supportsHistory;

	Object.defineProperty(instrument$1, "__esModule", { value: true });
	var tslib_1$l = require$$0;
	var env_1 = env;
	var global_1$1 = global$9;
	var is_1$1 = is;
	var logger_1 = logger$1;
	var object_1$1 = object;
	var stacktrace_1 = stacktrace;
	var supports_1 = supports;
	var global$7 = global_1$1.getGlobalObject();
	/**
	 * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.
	 *  - Console API
	 *  - Fetch API
	 *  - XHR API
	 *  - History API
	 *  - DOM API (click/typing)
	 *  - Error API
	 *  - UnhandledRejection API
	 */
	var handlers = {};
	var instrumented = {};
	/** Instruments given API */
	function instrument(type) {
	    if (instrumented[type]) {
	        return;
	    }
	    instrumented[type] = true;
	    switch (type) {
	        case 'console':
	            instrumentConsole();
	            break;
	        case 'dom':
	            instrumentDOM();
	            break;
	        case 'xhr':
	            instrumentXHR();
	            break;
	        case 'fetch':
	            instrumentFetch();
	            break;
	        case 'history':
	            instrumentHistory();
	            break;
	        case 'error':
	            instrumentError();
	            break;
	        case 'unhandledrejection':
	            instrumentUnhandledRejection();
	            break;
	        default:
	            logger_1.logger.warn('unknown instrumentation type:', type);
	    }
	}
	/**
	 * Add handler that will be called when given type of instrumentation triggers.
	 * Use at your own risk, this might break without changelog notice, only used internally.
	 * @hidden
	 */
	function addInstrumentationHandler(type, callback) {
	    handlers[type] = handlers[type] || [];
	    handlers[type].push(callback);
	    instrument(type);
	}
	instrument$1.addInstrumentationHandler = addInstrumentationHandler;
	/** JSDoc */
	function triggerHandlers(type, data) {
	    var e_1, _a;
	    if (!type || !handlers[type]) {
	        return;
	    }
	    try {
	        for (var _b = tslib_1$l.__values(handlers[type] || []), _c = _b.next(); !_c.done; _c = _b.next()) {
	            var handler = _c.value;
	            try {
	                handler(data);
	            }
	            catch (e) {
	                if (env_1.isDebugBuild()) {
	                    logger_1.logger.error("Error while triggering instrumentation handler.\nType: " + type + "\nName: " + stacktrace_1.getFunctionName(handler) + "\nError: " + e);
	                }
	            }
	        }
	    }
	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
	    finally {
	        try {
	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	        }
	        finally { if (e_1) throw e_1.error; }
	    }
	}
	/** JSDoc */
	function instrumentConsole() {
	    if (!('console' in global$7)) {
	        return;
	    }
	    ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function (level) {
	        if (!(level in global$7.console)) {
	            return;
	        }
	        object_1$1.fill(global$7.console, level, function (originalConsoleLevel) {
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                triggerHandlers('console', { args: args, level: level });
	                // this fails for some browsers. :(
	                if (originalConsoleLevel) {
	                    Function.prototype.apply.call(originalConsoleLevel, global$7.console, args);
	                }
	            };
	        });
	    });
	}
	/** JSDoc */
	function instrumentFetch() {
	    if (!supports_1.supportsNativeFetch()) {
	        return;
	    }
	    object_1$1.fill(global$7, 'fetch', function (originalFetch) {
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var handlerData = {
	                args: args,
	                fetchData: {
	                    method: getFetchMethod(args),
	                    url: getFetchUrl(args),
	                },
	                startTimestamp: Date.now(),
	            };
	            triggerHandlers('fetch', tslib_1$l.__assign({}, handlerData));
	            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	            return originalFetch.apply(global$7, args).then(function (response) {
	                triggerHandlers('fetch', tslib_1$l.__assign(tslib_1$l.__assign({}, handlerData), { endTimestamp: Date.now(), response: response }));
	                return response;
	            }, function (error) {
	                triggerHandlers('fetch', tslib_1$l.__assign(tslib_1$l.__assign({}, handlerData), { endTimestamp: Date.now(), error: error }));
	                // NOTE: If you are a Sentry user, and you are seeing this stack frame,
	                //       it means the sentry.javascript SDK caught an error invoking your application code.
	                //       This is expected behavior and NOT indicative of a bug with sentry.javascript.
	                throw error;
	            });
	        };
	    });
	}
	/* eslint-disable @typescript-eslint/no-unsafe-member-access */
	/** Extract `method` from fetch call arguments */
	function getFetchMethod(fetchArgs) {
	    if (fetchArgs === void 0) { fetchArgs = []; }
	    if ('Request' in global$7 && is_1$1.isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {
	        return String(fetchArgs[0].method).toUpperCase();
	    }
	    if (fetchArgs[1] && fetchArgs[1].method) {
	        return String(fetchArgs[1].method).toUpperCase();
	    }
	    return 'GET';
	}
	/** Extract `url` from fetch call arguments */
	function getFetchUrl(fetchArgs) {
	    if (fetchArgs === void 0) { fetchArgs = []; }
	    if (typeof fetchArgs[0] === 'string') {
	        return fetchArgs[0];
	    }
	    if ('Request' in global$7 && is_1$1.isInstanceOf(fetchArgs[0], Request)) {
	        return fetchArgs[0].url;
	    }
	    return String(fetchArgs[0]);
	}
	/* eslint-enable @typescript-eslint/no-unsafe-member-access */
	/** JSDoc */
	function instrumentXHR() {
	    if (!('XMLHttpRequest' in global$7)) {
	        return;
	    }
	    var xhrproto = XMLHttpRequest.prototype;
	    object_1$1.fill(xhrproto, 'open', function (originalOpen) {
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            // eslint-disable-next-line @typescript-eslint/no-this-alias
	            var xhr = this;
	            var url = args[1];
	            var xhrInfo = (xhr.__sentry_xhr__ = {
	                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	                method: is_1$1.isString(args[0]) ? args[0].toUpperCase() : args[0],
	                url: args[1],
	            });
	            // if Sentry key appears in URL, don't capture it as a request
	            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	            if (is_1$1.isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {
	                xhr.__sentry_own_request__ = true;
	            }
	            var onreadystatechangeHandler = function () {
	                if (xhr.readyState === 4) {
	                    try {
	                        // touching statusCode in some platforms throws
	                        // an exception
	                        xhrInfo.status_code = xhr.status;
	                    }
	                    catch (e) {
	                        /* do nothing */
	                    }
	                    triggerHandlers('xhr', {
	                        args: args,
	                        endTimestamp: Date.now(),
	                        startTimestamp: Date.now(),
	                        xhr: xhr,
	                    });
	                }
	            };
	            if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {
	                object_1$1.fill(xhr, 'onreadystatechange', function (original) {
	                    return function () {
	                        var readyStateArgs = [];
	                        for (var _i = 0; _i < arguments.length; _i++) {
	                            readyStateArgs[_i] = arguments[_i];
	                        }
	                        onreadystatechangeHandler();
	                        return original.apply(xhr, readyStateArgs);
	                    };
	                });
	            }
	            else {
	                xhr.addEventListener('readystatechange', onreadystatechangeHandler);
	            }
	            return originalOpen.apply(xhr, args);
	        };
	    });
	    object_1$1.fill(xhrproto, 'send', function (originalSend) {
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            if (this.__sentry_xhr__ && args[0] !== undefined) {
	                this.__sentry_xhr__.body = args[0];
	            }
	            triggerHandlers('xhr', {
	                args: args,
	                startTimestamp: Date.now(),
	                xhr: this,
	            });
	            return originalSend.apply(this, args);
	        };
	    });
	}
	var lastHref;
	/** JSDoc */
	function instrumentHistory() {
	    if (!supports_1.supportsHistory()) {
	        return;
	    }
	    var oldOnPopState = global$7.onpopstate;
	    global$7.onpopstate = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var to = global$7.location.href;
	        // keep track of the current URL state, as we always receive only the updated state
	        var from = lastHref;
	        lastHref = to;
	        triggerHandlers('history', {
	            from: from,
	            to: to,
	        });
	        if (oldOnPopState) {
	            // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.
	            // https://github.com/getsentry/sentry-javascript/issues/3344
	            // https://github.com/bugsnag/bugsnag-js/issues/469
	            try {
	                return oldOnPopState.apply(this, args);
	            }
	            catch (_oO) {
	                // no-empty
	            }
	        }
	    };
	    /** @hidden */
	    function historyReplacementFunction(originalHistoryFunction) {
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var url = args.length > 2 ? args[2] : undefined;
	            if (url) {
	                // coerce to string (this is what pushState does)
	                var from = lastHref;
	                var to = String(url);
	                // keep track of the current URL state, as we always receive only the updated state
	                lastHref = to;
	                triggerHandlers('history', {
	                    from: from,
	                    to: to,
	                });
	            }
	            return originalHistoryFunction.apply(this, args);
	        };
	    }
	    object_1$1.fill(global$7.history, 'pushState', historyReplacementFunction);
	    object_1$1.fill(global$7.history, 'replaceState', historyReplacementFunction);
	}
	var debounceDuration = 1000;
	var debounceTimerID;
	var lastCapturedEvent;
	/**
	 * Decide whether the current event should finish the debounce of previously captured one.
	 * @param previous previously captured event
	 * @param current event to be captured
	 */
	function shouldShortcircuitPreviousDebounce(previous, current) {
	    // If there was no previous event, it should always be swapped for the new one.
	    if (!previous) {
	        return true;
	    }
	    // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.
	    if (previous.type !== current.type) {
	        return true;
	    }
	    try {
	        // If both events have the same type, it's still possible that actions were performed on different targets.
	        // e.g. 2 clicks on different buttons.
	        if (previous.target !== current.target) {
	            return true;
	        }
	    }
	    catch (e) {
	        // just accessing `target` property can throw an exception in some rare circumstances
	        // see: https://github.com/getsentry/sentry-javascript/issues/838
	    }
	    // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_
	    // to which an event listener was attached), we treat them as the same action, as we want to capture
	    // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.
	    return false;
	}
	/**
	 * Decide whether an event should be captured.
	 * @param event event to be captured
	 */
	function shouldSkipDOMEvent(event) {
	    // We are only interested in filtering `keypress` events for now.
	    if (event.type !== 'keypress') {
	        return false;
	    }
	    try {
	        var target = event.target;
	        if (!target || !target.tagName) {
	            return true;
	        }
	        // Only consider keypress events on actual input elements. This will disregard keypresses targeting body
	        // e.g.tabbing through elements, hotkeys, etc.
	        if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {
	            return false;
	        }
	    }
	    catch (e) {
	        // just accessing `target` property can throw an exception in some rare circumstances
	        // see: https://github.com/getsentry/sentry-javascript/issues/838
	    }
	    return true;
	}
	/**
	 * Wraps addEventListener to capture UI breadcrumbs
	 * @param handler function that will be triggered
	 * @param globalListener indicates whether event was captured by the global event listener
	 * @returns wrapped breadcrumb events handler
	 * @hidden
	 */
	function makeDOMEventHandler(handler, globalListener) {
	    if (globalListener === void 0) { globalListener = false; }
	    return function (event) {
	        // It's possible this handler might trigger multiple times for the same
	        // event (e.g. event propagation through node ancestors).
	        // Ignore if we've already captured that event.
	        if (!event || lastCapturedEvent === event) {
	            return;
	        }
	        // We always want to skip _some_ events.
	        if (shouldSkipDOMEvent(event)) {
	            return;
	        }
	        var name = event.type === 'keypress' ? 'input' : event.type;
	        // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.
	        if (debounceTimerID === undefined) {
	            handler({
	                event: event,
	                name: name,
	                global: globalListener,
	            });
	            lastCapturedEvent = event;
	        }
	        // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.
	        // If that's the case, emit the previous event and store locally the newly-captured DOM event.
	        else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {
	            handler({
	                event: event,
	                name: name,
	                global: globalListener,
	            });
	            lastCapturedEvent = event;
	        }
	        // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.
	        clearTimeout(debounceTimerID);
	        debounceTimerID = global$7.setTimeout(function () {
	            debounceTimerID = undefined;
	        }, debounceDuration);
	    };
	}
	/** JSDoc */
	function instrumentDOM() {
	    if (!('document' in global$7)) {
	        return;
	    }
	    // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom
	    // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before
	    // we instrument `addEventListener` so that we don't end up attaching this handler twice.
	    var triggerDOMHandler = triggerHandlers.bind(null, 'dom');
	    var globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);
	    global$7.document.addEventListener('click', globalDOMEventHandler, false);
	    global$7.document.addEventListener('keypress', globalDOMEventHandler, false);
	    // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled
	    // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That
	    // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler
	    // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still
	    // guaranteed to fire at least once.)
	    ['EventTarget', 'Node'].forEach(function (target) {
	        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	        var proto = global$7[target] && global$7[target].prototype;
	        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins
	        if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {
	            return;
	        }
	        object_1$1.fill(proto, 'addEventListener', function (originalAddEventListener) {
	            return function (type, listener, options) {
	                if (type === 'click' || type == 'keypress') {
	                    try {
	                        var el = this;
	                        var handlers_1 = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});
	                        var handlerForType = (handlers_1[type] = handlers_1[type] || { refCount: 0 });
	                        if (!handlerForType.handler) {
	                            var handler = makeDOMEventHandler(triggerDOMHandler);
	                            handlerForType.handler = handler;
	                            originalAddEventListener.call(this, type, handler, options);
	                        }
	                        handlerForType.refCount += 1;
	                    }
	                    catch (e) {
	                        // Accessing dom properties is always fragile.
	                        // Also allows us to skip `addEventListenrs` calls with no proper `this` context.
	                    }
	                }
	                return originalAddEventListener.call(this, type, listener, options);
	            };
	        });
	        object_1$1.fill(proto, 'removeEventListener', function (originalRemoveEventListener) {
	            return function (type, listener, options) {
	                if (type === 'click' || type == 'keypress') {
	                    try {
	                        var el = this;
	                        var handlers_2 = el.__sentry_instrumentation_handlers__ || {};
	                        var handlerForType = handlers_2[type];
	                        if (handlerForType) {
	                            handlerForType.refCount -= 1;
	                            // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.
	                            if (handlerForType.refCount <= 0) {
	                                originalRemoveEventListener.call(this, type, handlerForType.handler, options);
	                                handlerForType.handler = undefined;
	                                delete handlers_2[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete
	                            }
	                            // If there are no longer any custom handlers of any type on this element, cleanup everything.
	                            if (Object.keys(handlers_2).length === 0) {
	                                delete el.__sentry_instrumentation_handlers__;
	                            }
	                        }
	                    }
	                    catch (e) {
	                        // Accessing dom properties is always fragile.
	                        // Also allows us to skip `addEventListenrs` calls with no proper `this` context.
	                    }
	                }
	                return originalRemoveEventListener.call(this, type, listener, options);
	            };
	        });
	    });
	}
	var _oldOnErrorHandler = null;
	/** JSDoc */
	function instrumentError() {
	    _oldOnErrorHandler = global$7.onerror;
	    global$7.onerror = function (msg, url, line, column, error) {
	        triggerHandlers('error', {
	            column: column,
	            error: error,
	            line: line,
	            msg: msg,
	            url: url,
	        });
	        if (_oldOnErrorHandler) {
	            // eslint-disable-next-line prefer-rest-params
	            return _oldOnErrorHandler.apply(this, arguments);
	        }
	        return false;
	    };
	}
	var _oldOnUnhandledRejectionHandler = null;
	/** JSDoc */
	function instrumentUnhandledRejection() {
	    _oldOnUnhandledRejectionHandler = global$7.onunhandledrejection;
	    global$7.onunhandledrejection = function (e) {
	        triggerHandlers('unhandledrejection', e);
	        if (_oldOnUnhandledRejectionHandler) {
	            // eslint-disable-next-line prefer-rest-params
	            return _oldOnUnhandledRejectionHandler.apply(this, arguments);
	        }
	        return true;
	    };
	}

	var misc = {};

	Object.defineProperty(misc, "__esModule", { value: true });
	var tslib_1$k = require$$0;
	var global_1 = global$9;
	var object_1 = object;
	var string_1 = string;
	/**
	 * UUID4 generator
	 *
	 * @returns string Generated UUID4.
	 */
	function uuid4() {
	    var global = global_1.getGlobalObject();
	    var crypto = global.crypto || global.msCrypto;
	    if (!(crypto === void 0) && crypto.getRandomValues) {
	        // Use window.crypto API if available
	        var arr = new Uint16Array(8);
	        crypto.getRandomValues(arr);
	        // set 4 in byte 7
	        // eslint-disable-next-line no-bitwise
	        arr[3] = (arr[3] & 0xfff) | 0x4000;
	        // set 2 most significant bits of byte 9 to '10'
	        // eslint-disable-next-line no-bitwise
	        arr[4] = (arr[4] & 0x3fff) | 0x8000;
	        var pad = function (num) {
	            var v = num.toString(16);
	            while (v.length < 4) {
	                v = "0" + v;
	            }
	            return v;
	        };
	        return (pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]));
	    }
	    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
	    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	        // eslint-disable-next-line no-bitwise
	        var r = (Math.random() * 16) | 0;
	        // eslint-disable-next-line no-bitwise
	        var v = c === 'x' ? r : (r & 0x3) | 0x8;
	        return v.toString(16);
	    });
	}
	misc.uuid4 = uuid4;
	/**
	 * Parses string form of URL into an object
	 * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B
	 * // intentionally using regex and not <a/> href parsing trick because React Native and other
	 * // environments where DOM might not be available
	 * @returns parsed URL object
	 */
	function parseUrl(url) {
	    if (!url) {
	        return {};
	    }
	    var match = url.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
	    if (!match) {
	        return {};
	    }
	    // coerce to undefined values to empty string so we don't get 'undefined'
	    var query = match[6] || '';
	    var fragment = match[8] || '';
	    return {
	        host: match[4],
	        path: match[5],
	        protocol: match[2],
	        relative: match[5] + query + fragment,
	    };
	}
	misc.parseUrl = parseUrl;
	function getFirstException(event) {
	    return event.exception && event.exception.values ? event.exception.values[0] : undefined;
	}
	/**
	 * Extracts either message or type+value from an event that can be used for user-facing logs
	 * @returns event's description
	 */
	function getEventDescription(event) {
	    var message = event.message, eventId = event.event_id;
	    if (message) {
	        return message;
	    }
	    var firstException = getFirstException(event);
	    if (firstException) {
	        if (firstException.type && firstException.value) {
	            return firstException.type + ": " + firstException.value;
	        }
	        return firstException.type || firstException.value || eventId || '<unknown>';
	    }
	    return eventId || '<unknown>';
	}
	misc.getEventDescription = getEventDescription;
	/**
	 * Adds exception values, type and value to an synthetic Exception.
	 * @param event The event to modify.
	 * @param value Value of the exception.
	 * @param type Type of the exception.
	 * @hidden
	 */
	function addExceptionTypeValue(event, value, type) {
	    var exception = (event.exception = event.exception || {});
	    var values = (exception.values = exception.values || []);
	    var firstException = (values[0] = values[0] || {});
	    if (!firstException.value) {
	        firstException.value = value || '';
	    }
	    if (!firstException.type) {
	        firstException.type = type || 'Error';
	    }
	}
	misc.addExceptionTypeValue = addExceptionTypeValue;
	/**
	 * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.
	 *
	 * @param event The event to modify.
	 * @param newMechanism Mechanism data to add to the event.
	 * @hidden
	 */
	function addExceptionMechanism(event, newMechanism) {
	    var firstException = getFirstException(event);
	    if (!firstException) {
	        return;
	    }
	    var defaultMechanism = { type: 'generic', handled: true };
	    var currentMechanism = firstException.mechanism;
	    firstException.mechanism = tslib_1$k.__assign(tslib_1$k.__assign(tslib_1$k.__assign({}, defaultMechanism), currentMechanism), newMechanism);
	    if (newMechanism && 'data' in newMechanism) {
	        var mergedData = tslib_1$k.__assign(tslib_1$k.__assign({}, (currentMechanism && currentMechanism.data)), newMechanism.data);
	        firstException.mechanism.data = mergedData;
	    }
	}
	misc.addExceptionMechanism = addExceptionMechanism;
	// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
	var SEMVER_REGEXP = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
	/**
	 * Parses input into a SemVer interface
	 * @param input string representation of a semver version
	 */
	function parseSemver(input) {
	    var match = input.match(SEMVER_REGEXP) || [];
	    var major = parseInt(match[1], 10);
	    var minor = parseInt(match[2], 10);
	    var patch = parseInt(match[3], 10);
	    return {
	        buildmetadata: match[5],
	        major: isNaN(major) ? undefined : major,
	        minor: isNaN(minor) ? undefined : minor,
	        patch: isNaN(patch) ? undefined : patch,
	        prerelease: match[4],
	    };
	}
	misc.parseSemver = parseSemver;
	var defaultRetryAfter = 60 * 1000; // 60 seconds
	/**
	 * Extracts Retry-After value from the request header or returns default value
	 * @param now current unix timestamp
	 * @param header string representation of 'Retry-After' header
	 */
	function parseRetryAfterHeader(now, header) {
	    if (!header) {
	        return defaultRetryAfter;
	    }
	    var headerDelay = parseInt("" + header, 10);
	    if (!isNaN(headerDelay)) {
	        return headerDelay * 1000;
	    }
	    var headerDate = Date.parse("" + header);
	    if (!isNaN(headerDate)) {
	        return headerDate - now;
	    }
	    return defaultRetryAfter;
	}
	misc.parseRetryAfterHeader = parseRetryAfterHeader;
	/**
	 * This function adds context (pre/post/line) lines to the provided frame
	 *
	 * @param lines string[] containing all lines
	 * @param frame StackFrame that will be mutated
	 * @param linesOfContext number of context lines we want to add pre/post
	 */
	function addContextToFrame(lines, frame, linesOfContext) {
	    if (linesOfContext === void 0) { linesOfContext = 5; }
	    var lineno = frame.lineno || 0;
	    var maxLines = lines.length;
	    var sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);
	    frame.pre_context = lines
	        .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)
	        .map(function (line) { return string_1.snipLine(line, 0); });
	    frame.context_line = string_1.snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);
	    frame.post_context = lines
	        .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)
	        .map(function (line) { return string_1.snipLine(line, 0); });
	}
	misc.addContextToFrame = addContextToFrame;
	/**
	 * Strip the query string and fragment off of a given URL or path (if present)
	 *
	 * @param urlPath Full URL or path, including possible query string and/or fragment
	 * @returns URL or path without query string or fragment
	 */
	function stripUrlQueryAndFragment(urlPath) {
	    // eslint-disable-next-line no-useless-escape
	    return urlPath.split(/[\?#]/, 1)[0];
	}
	misc.stripUrlQueryAndFragment = stripUrlQueryAndFragment;
	/**
	 * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object
	 * in question), and marks it captured if not.
	 *
	 * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and
	 * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so
	 * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because
	 * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not
	 * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This
	 * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we
	 * see it.
	 *
	 * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on
	 * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent
	 * object wrapper forms so that this check will always work. However, because we need to flag the exact object which
	 * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification
	 * must be done before the exception captured.
	 *
	 * @param A thrown exception to check or flag as having been seen
	 * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)
	 */
	function checkOrSetAlreadyCaught(exception) {
	    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	    if (exception && exception.__sentry_captured__) {
	        return true;
	    }
	    try {
	        // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the
	        // `ExtraErrorData` integration
	        object_1.addNonEnumerableProperty(exception, '__sentry_captured__', true);
	    }
	    catch (err) {
	        // `exception` is a primitive, so we can't mark it seen
	    }
	    return false;
	}
	misc.checkOrSetAlreadyCaught = checkOrSetAlreadyCaught;

	var path = {};

	// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript
	// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js
	Object.defineProperty(path, "__esModule", { value: true });
	/** JSDoc */
	function normalizeArray(parts, allowAboveRoot) {
	    // if the path tries to go above the root, `up` ends up > 0
	    var up = 0;
	    for (var i = parts.length - 1; i >= 0; i--) {
	        var last = parts[i];
	        if (last === '.') {
	            parts.splice(i, 1);
	        }
	        else if (last === '..') {
	            parts.splice(i, 1);
	            // eslint-disable-next-line no-plusplus
	            up++;
	        }
	        else if (up) {
	            parts.splice(i, 1);
	            // eslint-disable-next-line no-plusplus
	            up--;
	        }
	    }
	    // if the path is allowed to go above the root, restore leading ..s
	    if (allowAboveRoot) {
	        // eslint-disable-next-line no-plusplus
	        for (; up--; up) {
	            parts.unshift('..');
	        }
	    }
	    return parts;
	}
	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^/]+?|)(\.[^./]*|))(?:[/]*)$/;
	/** JSDoc */
	function splitPath(filename) {
	    var parts = splitPathRe.exec(filename);
	    return parts ? parts.slice(1) : [];
	}
	// path.resolve([from ...], to)
	// posix version
	/** JSDoc */
	function resolve() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var resolvedPath = '';
	    var resolvedAbsolute = false;
	    for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	        var path = i >= 0 ? args[i] : '/';
	        // Skip empty entries
	        if (!path) {
	            continue;
	        }
	        resolvedPath = path + "/" + resolvedPath;
	        resolvedAbsolute = path.charAt(0) === '/';
	    }
	    // At this point the path should be resolved to a full absolute path, but
	    // handle relative paths to be safe (might happen when process.cwd() fails)
	    // Normalize the path
	    resolvedPath = normalizeArray(resolvedPath.split('/').filter(function (p) { return !!p; }), !resolvedAbsolute).join('/');
	    return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
	}
	path.resolve = resolve;
	/** JSDoc */
	function trim$1(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	        if (arr[start] !== '') {
	            break;
	        }
	    }
	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	        if (arr[end] !== '') {
	            break;
	        }
	    }
	    if (start > end) {
	        return [];
	    }
	    return arr.slice(start, end - start + 1);
	}
	// path.relative(from, to)
	// posix version
	/** JSDoc */
	function relative(from, to) {
	    /* eslint-disable no-param-reassign */
	    from = resolve(from).substr(1);
	    to = resolve(to).substr(1);
	    /* eslint-enable no-param-reassign */
	    var fromParts = trim$1(from.split('/'));
	    var toParts = trim$1(to.split('/'));
	    var length = Math.min(fromParts.length, toParts.length);
	    var samePartsLength = length;
	    for (var i = 0; i < length; i++) {
	        if (fromParts[i] !== toParts[i]) {
	            samePartsLength = i;
	            break;
	        }
	    }
	    var outputParts = [];
	    for (var i = samePartsLength; i < fromParts.length; i++) {
	        outputParts.push('..');
	    }
	    outputParts = outputParts.concat(toParts.slice(samePartsLength));
	    return outputParts.join('/');
	}
	path.relative = relative;
	// path.normalize(path)
	// posix version
	/** JSDoc */
	function normalizePath(path) {
	    var isPathAbsolute = isAbsolute(path);
	    var trailingSlash = path.substr(-1) === '/';
	    // Normalize the path
	    var normalizedPath = normalizeArray(path.split('/').filter(function (p) { return !!p; }), !isPathAbsolute).join('/');
	    if (!normalizedPath && !isPathAbsolute) {
	        normalizedPath = '.';
	    }
	    if (normalizedPath && trailingSlash) {
	        normalizedPath += '/';
	    }
	    return (isPathAbsolute ? '/' : '') + normalizedPath;
	}
	path.normalizePath = normalizePath;
	// posix version
	/** JSDoc */
	function isAbsolute(path) {
	    return path.charAt(0) === '/';
	}
	path.isAbsolute = isAbsolute;
	// posix version
	/** JSDoc */
	function join() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    return normalizePath(args.join('/'));
	}
	path.join = join;
	/** JSDoc */
	function dirname(path) {
	    var result = splitPath(path);
	    var root = result[0];
	    var dir = result[1];
	    if (!root && !dir) {
	        // No dirname whatsoever
	        return '.';
	    }
	    if (dir) {
	        // It has a dirname, strip trailing slash
	        dir = dir.substr(0, dir.length - 1);
	    }
	    return root + dir;
	}
	path.dirname = dirname;
	/** JSDoc */
	function basename(path, ext) {
	    var f = splitPath(path)[2];
	    if (ext && f.substr(ext.length * -1) === ext) {
	        f = f.substr(0, f.length - ext.length);
	    }
	    return f;
	}
	path.basename = basename;

	var promisebuffer = {};

	var syncpromise = {};

	Object.defineProperty(syncpromise, "__esModule", { value: true });
	/* eslint-disable @typescript-eslint/explicit-function-return-type */
	/* eslint-disable @typescript-eslint/typedef */
	/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
	/* eslint-disable @typescript-eslint/no-explicit-any */
	var is_1 = is;
	/**
	 * Creates a resolved sync promise.
	 *
	 * @param value the value to resolve the promise with
	 * @returns the resolved sync promise
	 */
	function resolvedSyncPromise(value) {
	    return new SyncPromise(function (resolve) {
	        resolve(value);
	    });
	}
	syncpromise.resolvedSyncPromise = resolvedSyncPromise;
	/**
	 * Creates a rejected sync promise.
	 *
	 * @param value the value to reject the promise with
	 * @returns the rejected sync promise
	 */
	function rejectedSyncPromise(reason) {
	    return new SyncPromise(function (_, reject) {
	        reject(reason);
	    });
	}
	syncpromise.rejectedSyncPromise = rejectedSyncPromise;
	/**
	 * Thenable class that behaves like a Promise and follows it's interface
	 * but is not async internally
	 */
	var SyncPromise = /** @class */ (function () {
	    function SyncPromise(executor) {
	        var _this = this;
	        this._state = 0 /* PENDING */;
	        this._handlers = [];
	        /** JSDoc */
	        this._resolve = function (value) {
	            _this._setResult(1 /* RESOLVED */, value);
	        };
	        /** JSDoc */
	        this._reject = function (reason) {
	            _this._setResult(2 /* REJECTED */, reason);
	        };
	        /** JSDoc */
	        this._setResult = function (state, value) {
	            if (_this._state !== 0 /* PENDING */) {
	                return;
	            }
	            if (is_1.isThenable(value)) {
	                void value.then(_this._resolve, _this._reject);
	                return;
	            }
	            _this._state = state;
	            _this._value = value;
	            _this._executeHandlers();
	        };
	        /** JSDoc */
	        this._executeHandlers = function () {
	            if (_this._state === 0 /* PENDING */) {
	                return;
	            }
	            var cachedHandlers = _this._handlers.slice();
	            _this._handlers = [];
	            cachedHandlers.forEach(function (handler) {
	                if (handler[0]) {
	                    return;
	                }
	                if (_this._state === 1 /* RESOLVED */) {
	                    // eslint-disable-next-line @typescript-eslint/no-floating-promises
	                    handler[1](_this._value);
	                }
	                if (_this._state === 2 /* REJECTED */) {
	                    handler[2](_this._value);
	                }
	                handler[0] = true;
	            });
	        };
	        try {
	            executor(this._resolve, this._reject);
	        }
	        catch (e) {
	            this._reject(e);
	        }
	    }
	    /** JSDoc */
	    SyncPromise.prototype.then = function (onfulfilled, onrejected) {
	        var _this = this;
	        return new SyncPromise(function (resolve, reject) {
	            _this._handlers.push([
	                false,
	                function (result) {
	                    if (!onfulfilled) {
	                        // TODO: ¯\_(ツ)_/¯
	                        // TODO: FIXME
	                        resolve(result);
	                    }
	                    else {
	                        try {
	                            resolve(onfulfilled(result));
	                        }
	                        catch (e) {
	                            reject(e);
	                        }
	                    }
	                },
	                function (reason) {
	                    if (!onrejected) {
	                        reject(reason);
	                    }
	                    else {
	                        try {
	                            resolve(onrejected(reason));
	                        }
	                        catch (e) {
	                            reject(e);
	                        }
	                    }
	                },
	            ]);
	            _this._executeHandlers();
	        });
	    };
	    /** JSDoc */
	    SyncPromise.prototype.catch = function (onrejected) {
	        return this.then(function (val) { return val; }, onrejected);
	    };
	    /** JSDoc */
	    SyncPromise.prototype.finally = function (onfinally) {
	        var _this = this;
	        return new SyncPromise(function (resolve, reject) {
	            var val;
	            var isRejected;
	            return _this.then(function (value) {
	                isRejected = false;
	                val = value;
	                if (onfinally) {
	                    onfinally();
	                }
	            }, function (reason) {
	                isRejected = true;
	                val = reason;
	                if (onfinally) {
	                    onfinally();
	                }
	            }).then(function () {
	                if (isRejected) {
	                    reject(val);
	                    return;
	                }
	                resolve(val);
	            });
	        });
	    };
	    return SyncPromise;
	}());
	syncpromise.SyncPromise = SyncPromise;

	Object.defineProperty(promisebuffer, "__esModule", { value: true });
	var error_1 = error;
	var syncpromise_1 = syncpromise;
	/**
	 * Creates an new PromiseBuffer object with the specified limit
	 * @param limit max number of promises that can be stored in the buffer
	 */
	function makePromiseBuffer(limit) {
	    var buffer = [];
	    function isReady() {
	        return limit === undefined || buffer.length < limit;
	    }
	    /**
	     * Remove a promise from the queue.
	     *
	     * @param task Can be any PromiseLike<T>
	     * @returns Removed promise.
	     */
	    function remove(task) {
	        return buffer.splice(buffer.indexOf(task), 1)[0];
	    }
	    /**
	     * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.
	     *
	     * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:
	     *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor
	     *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By
	     *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer
	     *        limit check.
	     * @returns The original promise.
	     */
	    function add(taskProducer) {
	        if (!isReady()) {
	            return syncpromise_1.rejectedSyncPromise(new error_1.SentryError('Not adding Promise due to buffer limit reached.'));
	        }
	        // start the task and add its promise to the queue
	        var task = taskProducer();
	        if (buffer.indexOf(task) === -1) {
	            buffer.push(task);
	        }
	        void task
	            .then(function () { return remove(task); })
	            // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`
	            // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't
	            // have promises, so TS has to polyfill when down-compiling.)
	            .then(null, function () {
	            return remove(task).then(null, function () {
	                // We have to add another catch here because `remove()` starts a new promise chain.
	            });
	        });
	        return task;
	    }
	    /**
	     * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.
	     *
	     * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or
	     * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to
	     * `true`.
	     * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and
	     * `false` otherwise
	     */
	    function drain(timeout) {
	        return new syncpromise_1.SyncPromise(function (resolve, reject) {
	            var counter = buffer.length;
	            if (!counter) {
	                return resolve(true);
	            }
	            // wait for `timeout` ms and then resolve to `false` (if not cancelled first)
	            var capturedSetTimeout = setTimeout(function () {
	                if (timeout && timeout > 0) {
	                    resolve(false);
	                }
	            }, timeout);
	            // if all promises resolve in time, cancel the timer and resolve to `true`
	            buffer.forEach(function (item) {
	                void syncpromise_1.resolvedSyncPromise(item).then(function () {
	                    // eslint-disable-next-line no-plusplus
	                    if (!--counter) {
	                        clearTimeout(capturedSetTimeout);
	                        resolve(true);
	                    }
	                }, reject);
	            });
	        });
	    }
	    return {
	        $: buffer,
	        add: add,
	        drain: drain,
	    };
	}
	promisebuffer.makePromiseBuffer = makePromiseBuffer;

	var severity = {};

	Object.defineProperty(severity, "__esModule", { value: true });
	var types_1$5 = dist$5;
	function isSupportedSeverity(level) {
	    return types_1$5.SeverityLevels.indexOf(level) !== -1;
	}
	/**
	 * Converts a string-based level into a {@link Severity}.
	 *
	 * @param level string representation of Severity
	 * @returns Severity
	 */
	function severityFromString(level) {
	    if (level === 'warn')
	        return types_1$5.Severity.Warning;
	    if (isSupportedSeverity(level)) {
	        return level;
	    }
	    return types_1$5.Severity.Log;
	}
	severity.severityFromString = severityFromString;

	var status = {};

	Object.defineProperty(status, "__esModule", { value: true });
	/**
	 * Converts an HTTP status code to sentry status {@link EventStatus}.
	 *
	 * @param code number HTTP status code
	 * @returns EventStatus
	 */
	function eventStatusFromHttpCode(code) {
	    if (code >= 200 && code < 300) {
	        return 'success';
	    }
	    if (code === 429) {
	        return 'rate_limit';
	    }
	    if (code >= 400 && code < 500) {
	        return 'invalid';
	    }
	    if (code >= 500) {
	        return 'failed';
	    }
	    return 'unknown';
	}
	status.eventStatusFromHttpCode = eventStatusFromHttpCode;

	var time = {exports: {}};

	(function (module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var global_1 = global$9;
		var node_1 = node.exports;
		/**
		 * A TimestampSource implementation for environments that do not support the Performance Web API natively.
		 *
		 * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier
		 * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It
		 * is more obvious to explain "why does my span have negative duration" than "why my spans have zero duration".
		 */
		var dateTimestampSource = {
		    nowSeconds: function () { return Date.now() / 1000; },
		};
		/**
		 * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not
		 * support the API.
		 *
		 * Wrapping the native API works around differences in behavior from different browsers.
		 */
		function getBrowserPerformance() {
		    var performance = global_1.getGlobalObject().performance;
		    if (!performance || !performance.now) {
		        return undefined;
		    }
		    // Replace performance.timeOrigin with our own timeOrigin based on Date.now().
		    //
		    // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +
		    // performance.now() gives a date arbitrarily in the past.
		    //
		    // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is
		    // undefined.
		    //
		    // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to
		    // interact with data coming out of performance entries.
		    //
		    // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that
		    // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes
		    // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have
		    // observed skews that can be as long as days, weeks or months.
		    //
		    // See https://github.com/getsentry/sentry-javascript/issues/2590.
		    //
		    // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload
		    // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation
		    // transactions of long-lived web pages.
		    var timeOrigin = Date.now() - performance.now();
		    return {
		        now: function () { return performance.now(); },
		        timeOrigin: timeOrigin,
		    };
		}
		/**
		 * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't
		 * implement the API.
		 */
		function getNodePerformance() {
		    try {
		        var perfHooks = node_1.dynamicRequire(module, 'perf_hooks');
		        return perfHooks.performance;
		    }
		    catch (_) {
		        return undefined;
		    }
		}
		/**
		 * The Performance API implementation for the current platform, if available.
		 */
		var platformPerformance = node_1.isNodeEnv() ? getNodePerformance() : getBrowserPerformance();
		var timestampSource = platformPerformance === undefined
		    ? dateTimestampSource
		    : {
		        nowSeconds: function () { return (platformPerformance.timeOrigin + platformPerformance.now()) / 1000; },
		    };
		/**
		 * Returns a timestamp in seconds since the UNIX epoch using the Date API.
		 */
		exports.dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);
		/**
		 * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the
		 * availability of the Performance API.
		 *
		 * See `usingPerformanceAPI` to test whether the Performance API is used.
		 *
		 * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is
		 * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The
		 * skew can grow to arbitrary amounts like days, weeks or months.
		 * See https://github.com/getsentry/sentry-javascript/issues/2590.
		 */
		exports.timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);
		// Re-exported with an old name for backwards-compatibility.
		exports.timestampWithMs = exports.timestampInSeconds;
		/**
		 * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.
		 */
		exports.usingPerformanceAPI = platformPerformance !== undefined;
		/**
		 * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the
		 * performance API is available.
		 */
		exports.browserPerformanceTimeOrigin = (function () {
		    // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or
		    // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin
		    // data as reliable if they are within a reasonable threshold of the current time.
		    var performance = global_1.getGlobalObject().performance;
		    if (!performance || !performance.now) {
		        exports._browserPerformanceTimeOriginMode = 'none';
		        return undefined;
		    }
		    var threshold = 3600 * 1000;
		    var performanceNow = performance.now();
		    var dateNow = Date.now();
		    // if timeOrigin isn't available set delta to threshold so it isn't used
		    var timeOriginDelta = performance.timeOrigin
		        ? Math.abs(performance.timeOrigin + performanceNow - dateNow)
		        : threshold;
		    var timeOriginIsReliable = timeOriginDelta < threshold;
		    // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin
		    // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.
		    // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always
		    // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the
		    // Date API.
		    // eslint-disable-next-line deprecation/deprecation
		    var navigationStart = performance.timing && performance.timing.navigationStart;
		    var hasNavigationStart = typeof navigationStart === 'number';
		    // if navigationStart isn't available set delta to threshold so it isn't used
		    var navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;
		    var navigationStartIsReliable = navigationStartDelta < threshold;
		    if (timeOriginIsReliable || navigationStartIsReliable) {
		        // Use the more reliable time origin
		        if (timeOriginDelta <= navigationStartDelta) {
		            exports._browserPerformanceTimeOriginMode = 'timeOrigin';
		            return performance.timeOrigin;
		        }
		        else {
		            exports._browserPerformanceTimeOriginMode = 'navigationStart';
		            return navigationStart;
		        }
		    }
		    // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.
		    exports._browserPerformanceTimeOriginMode = 'dateNow';
		    return dateNow;
		})();
		
	} (time, time.exports));

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var tslib_1 = require$$0;
		tslib_1.__exportStar(async, exports);
		tslib_1.__exportStar(browser, exports);
		tslib_1.__exportStar(dsn, exports);
		tslib_1.__exportStar(error, exports);
		tslib_1.__exportStar(global$9, exports);
		tslib_1.__exportStar(instrument$1, exports);
		tslib_1.__exportStar(is, exports);
		tslib_1.__exportStar(logger$1, exports);
		tslib_1.__exportStar(memo, exports);
		tslib_1.__exportStar(misc, exports);
		tslib_1.__exportStar(node.exports, exports);
		tslib_1.__exportStar(object, exports);
		tslib_1.__exportStar(path, exports);
		tslib_1.__exportStar(promisebuffer, exports);
		tslib_1.__exportStar(severity, exports);
		tslib_1.__exportStar(stacktrace, exports);
		tslib_1.__exportStar(status, exports);
		tslib_1.__exportStar(string, exports);
		tslib_1.__exportStar(supports, exports);
		tslib_1.__exportStar(syncpromise, exports);
		tslib_1.__exportStar(time.exports, exports);
		tslib_1.__exportStar(env, exports);
		
	} (dist$1));

	Object.defineProperty(scope, "__esModule", { value: true });
	var tslib_1$j = require$$0;
	var utils_1$r = dist$1;
	/**
	 * Absolute maximum number of breadcrumbs added to an event.
	 * The `maxBreadcrumbs` option cannot be higher than this value.
	 */
	var MAX_BREADCRUMBS = 100;
	/**
	 * Holds additional event information. {@link Scope.applyToEvent} will be
	 * called by the client before an event will be sent.
	 */
	var Scope = /** @class */ (function () {
	    function Scope() {
	        /** Flag if notifying is happening. */
	        this._notifyingListeners = false;
	        /** Callback for client to receive scope changes. */
	        this._scopeListeners = [];
	        /** Callback list that will be called after {@link applyToEvent}. */
	        this._eventProcessors = [];
	        /** Array of breadcrumbs. */
	        this._breadcrumbs = [];
	        /** User */
	        this._user = {};
	        /** Tags */
	        this._tags = {};
	        /** Extra */
	        this._extra = {};
	        /** Contexts */
	        this._contexts = {};
	        /**
	         * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get
	         * sent to Sentry
	         */
	        this._sdkProcessingMetadata = {};
	    }
	    /**
	     * Inherit values from the parent scope.
	     * @param scope to clone.
	     */
	    Scope.clone = function (scope) {
	        var newScope = new Scope();
	        if (scope) {
	            newScope._breadcrumbs = tslib_1$j.__spread(scope._breadcrumbs);
	            newScope._tags = tslib_1$j.__assign({}, scope._tags);
	            newScope._extra = tslib_1$j.__assign({}, scope._extra);
	            newScope._contexts = tslib_1$j.__assign({}, scope._contexts);
	            newScope._user = scope._user;
	            newScope._level = scope._level;
	            newScope._span = scope._span;
	            newScope._session = scope._session;
	            newScope._transactionName = scope._transactionName;
	            newScope._fingerprint = scope._fingerprint;
	            newScope._eventProcessors = tslib_1$j.__spread(scope._eventProcessors);
	            newScope._requestSession = scope._requestSession;
	        }
	        return newScope;
	    };
	    /**
	     * Add internal on change listener. Used for sub SDKs that need to store the scope.
	     * @hidden
	     */
	    Scope.prototype.addScopeListener = function (callback) {
	        this._scopeListeners.push(callback);
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.addEventProcessor = function (callback) {
	        this._eventProcessors.push(callback);
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.setUser = function (user) {
	        this._user = user || {};
	        if (this._session) {
	            this._session.update({ user: user });
	        }
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.getUser = function () {
	        return this._user;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.getRequestSession = function () {
	        return this._requestSession;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.setRequestSession = function (requestSession) {
	        this._requestSession = requestSession;
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.setTags = function (tags) {
	        this._tags = tslib_1$j.__assign(tslib_1$j.__assign({}, this._tags), tags);
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.setTag = function (key, value) {
	        var _a;
	        this._tags = tslib_1$j.__assign(tslib_1$j.__assign({}, this._tags), (_a = {}, _a[key] = value, _a));
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.setExtras = function (extras) {
	        this._extra = tslib_1$j.__assign(tslib_1$j.__assign({}, this._extra), extras);
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.setExtra = function (key, extra) {
	        var _a;
	        this._extra = tslib_1$j.__assign(tslib_1$j.__assign({}, this._extra), (_a = {}, _a[key] = extra, _a));
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.setFingerprint = function (fingerprint) {
	        this._fingerprint = fingerprint;
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.setLevel = function (level) {
	        this._level = level;
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.setTransactionName = function (name) {
	        this._transactionName = name;
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * Can be removed in major version.
	     * @deprecated in favor of {@link this.setTransactionName}
	     */
	    Scope.prototype.setTransaction = function (name) {
	        return this.setTransactionName(name);
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.setContext = function (key, context) {
	        var _a;
	        if (context === null) {
	            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
	            delete this._contexts[key];
	        }
	        else {
	            this._contexts = tslib_1$j.__assign(tslib_1$j.__assign({}, this._contexts), (_a = {}, _a[key] = context, _a));
	        }
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.setSpan = function (span) {
	        this._span = span;
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.getSpan = function () {
	        return this._span;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.getTransaction = function () {
	        // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will
	        // have a pointer to the currently-active transaction.
	        var span = this.getSpan();
	        return span && span.transaction;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.setSession = function (session) {
	        if (!session) {
	            delete this._session;
	        }
	        else {
	            this._session = session;
	        }
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.getSession = function () {
	        return this._session;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.update = function (captureContext) {
	        if (!captureContext) {
	            return this;
	        }
	        if (typeof captureContext === 'function') {
	            var updatedScope = captureContext(this);
	            return updatedScope instanceof Scope ? updatedScope : this;
	        }
	        if (captureContext instanceof Scope) {
	            this._tags = tslib_1$j.__assign(tslib_1$j.__assign({}, this._tags), captureContext._tags);
	            this._extra = tslib_1$j.__assign(tslib_1$j.__assign({}, this._extra), captureContext._extra);
	            this._contexts = tslib_1$j.__assign(tslib_1$j.__assign({}, this._contexts), captureContext._contexts);
	            if (captureContext._user && Object.keys(captureContext._user).length) {
	                this._user = captureContext._user;
	            }
	            if (captureContext._level) {
	                this._level = captureContext._level;
	            }
	            if (captureContext._fingerprint) {
	                this._fingerprint = captureContext._fingerprint;
	            }
	            if (captureContext._requestSession) {
	                this._requestSession = captureContext._requestSession;
	            }
	        }
	        else if (utils_1$r.isPlainObject(captureContext)) {
	            // eslint-disable-next-line no-param-reassign
	            captureContext = captureContext;
	            this._tags = tslib_1$j.__assign(tslib_1$j.__assign({}, this._tags), captureContext.tags);
	            this._extra = tslib_1$j.__assign(tslib_1$j.__assign({}, this._extra), captureContext.extra);
	            this._contexts = tslib_1$j.__assign(tslib_1$j.__assign({}, this._contexts), captureContext.contexts);
	            if (captureContext.user) {
	                this._user = captureContext.user;
	            }
	            if (captureContext.level) {
	                this._level = captureContext.level;
	            }
	            if (captureContext.fingerprint) {
	                this._fingerprint = captureContext.fingerprint;
	            }
	            if (captureContext.requestSession) {
	                this._requestSession = captureContext.requestSession;
	            }
	        }
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.clear = function () {
	        this._breadcrumbs = [];
	        this._tags = {};
	        this._extra = {};
	        this._user = {};
	        this._contexts = {};
	        this._level = undefined;
	        this._transactionName = undefined;
	        this._fingerprint = undefined;
	        this._requestSession = undefined;
	        this._span = undefined;
	        this._session = undefined;
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {
	        var maxCrumbs = typeof maxBreadcrumbs === 'number' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS;
	        // No data has been changed, so don't notify scope listeners
	        if (maxCrumbs <= 0) {
	            return this;
	        }
	        var mergedBreadcrumb = tslib_1$j.__assign({ timestamp: utils_1$r.dateTimestampInSeconds() }, breadcrumb);
	        this._breadcrumbs = tslib_1$j.__spread(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxCrumbs);
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    Scope.prototype.clearBreadcrumbs = function () {
	        this._breadcrumbs = [];
	        this._notifyScopeListeners();
	        return this;
	    };
	    /**
	     * Applies the current context and fingerprint to the event.
	     * Note that breadcrumbs will be added by the client.
	     * Also if the event has already breadcrumbs on it, we do not merge them.
	     * @param event Event
	     * @param hint May contain additional information about the original exception.
	     * @hidden
	     */
	    Scope.prototype.applyToEvent = function (event, hint) {
	        if (this._extra && Object.keys(this._extra).length) {
	            event.extra = tslib_1$j.__assign(tslib_1$j.__assign({}, this._extra), event.extra);
	        }
	        if (this._tags && Object.keys(this._tags).length) {
	            event.tags = tslib_1$j.__assign(tslib_1$j.__assign({}, this._tags), event.tags);
	        }
	        if (this._user && Object.keys(this._user).length) {
	            event.user = tslib_1$j.__assign(tslib_1$j.__assign({}, this._user), event.user);
	        }
	        if (this._contexts && Object.keys(this._contexts).length) {
	            event.contexts = tslib_1$j.__assign(tslib_1$j.__assign({}, this._contexts), event.contexts);
	        }
	        if (this._level) {
	            event.level = this._level;
	        }
	        if (this._transactionName) {
	            event.transaction = this._transactionName;
	        }
	        // We want to set the trace context for normal events only if there isn't already
	        // a trace context on the event. There is a product feature in place where we link
	        // errors with transaction and it relies on that.
	        if (this._span) {
	            event.contexts = tslib_1$j.__assign({ trace: this._span.getTraceContext() }, event.contexts);
	            var transactionName = this._span.transaction && this._span.transaction.name;
	            if (transactionName) {
	                event.tags = tslib_1$j.__assign({ transaction: transactionName }, event.tags);
	            }
	        }
	        this._applyFingerprint(event);
	        event.breadcrumbs = tslib_1$j.__spread((event.breadcrumbs || []), this._breadcrumbs);
	        event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;
	        event.sdkProcessingMetadata = this._sdkProcessingMetadata;
	        return this._notifyEventProcessors(tslib_1$j.__spread(getGlobalEventProcessors(), this._eventProcessors), event, hint);
	    };
	    /**
	     * Add data which will be accessible during event processing but won't get sent to Sentry
	     */
	    Scope.prototype.setSDKProcessingMetadata = function (newData) {
	        this._sdkProcessingMetadata = tslib_1$j.__assign(tslib_1$j.__assign({}, this._sdkProcessingMetadata), newData);
	        return this;
	    };
	    /**
	     * This will be called after {@link applyToEvent} is finished.
	     */
	    Scope.prototype._notifyEventProcessors = function (processors, event, hint, index) {
	        var _this = this;
	        if (index === void 0) { index = 0; }
	        return new utils_1$r.SyncPromise(function (resolve, reject) {
	            var processor = processors[index];
	            if (event === null || typeof processor !== 'function') {
	                resolve(event);
	            }
	            else {
	                var result = processor(tslib_1$j.__assign({}, event), hint);
	                if (utils_1$r.isThenable(result)) {
	                    void result
	                        .then(function (final) { return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve); })
	                        .then(null, reject);
	                }
	                else {
	                    void _this._notifyEventProcessors(processors, result, hint, index + 1)
	                        .then(resolve)
	                        .then(null, reject);
	                }
	            }
	        });
	    };
	    /**
	     * This will be called on every set call.
	     */
	    Scope.prototype._notifyScopeListeners = function () {
	        var _this = this;
	        // We need this check for this._notifyingListeners to be able to work on scope during updates
	        // If this check is not here we'll produce endless recursion when something is done with the scope
	        // during the callback.
	        if (!this._notifyingListeners) {
	            this._notifyingListeners = true;
	            this._scopeListeners.forEach(function (callback) {
	                callback(_this);
	            });
	            this._notifyingListeners = false;
	        }
	    };
	    /**
	     * Applies fingerprint from the scope to the event if there's one,
	     * uses message if there's one instead or get rid of empty fingerprint
	     */
	    Scope.prototype._applyFingerprint = function (event) {
	        // Make sure it's an array first and we actually have something in place
	        event.fingerprint = event.fingerprint
	            ? Array.isArray(event.fingerprint)
	                ? event.fingerprint
	                : [event.fingerprint]
	            : [];
	        // If we have something on the scope, then merge it with event
	        if (this._fingerprint) {
	            event.fingerprint = event.fingerprint.concat(this._fingerprint);
	        }
	        // If we have no data at all, remove empty array default
	        if (event.fingerprint && !event.fingerprint.length) {
	            delete event.fingerprint;
	        }
	    };
	    return Scope;
	}());
	scope.Scope = Scope;
	/**
	 * Returns the global event processors.
	 */
	function getGlobalEventProcessors() {
	    /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */
	    var global = utils_1$r.getGlobalObject();
	    global.__SENTRY__ = global.__SENTRY__ || {};
	    global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];
	    return global.__SENTRY__.globalEventProcessors;
	    /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */
	}
	/**
	 * Add a EventProcessor to be kept globally.
	 * @param callback EventProcessor to add
	 */
	function addGlobalEventProcessor(callback) {
	    getGlobalEventProcessors().push(callback);
	}
	scope.addGlobalEventProcessor = addGlobalEventProcessor;

	var session = {};

	Object.defineProperty(session, "__esModule", { value: true });
	var utils_1$q = dist$1;
	/**
	 * @inheritdoc
	 */
	var Session = /** @class */ (function () {
	    function Session(context) {
	        this.errors = 0;
	        this.sid = utils_1$q.uuid4();
	        this.duration = 0;
	        this.status = 'ok';
	        this.init = true;
	        this.ignoreDuration = false;
	        // Both timestamp and started are in seconds since the UNIX epoch.
	        var startingTime = utils_1$q.timestampInSeconds();
	        this.timestamp = startingTime;
	        this.started = startingTime;
	        if (context) {
	            this.update(context);
	        }
	    }
	    /** JSDoc */
	    // eslint-disable-next-line complexity
	    Session.prototype.update = function (context) {
	        if (context === void 0) { context = {}; }
	        if (context.user) {
	            if (!this.ipAddress && context.user.ip_address) {
	                this.ipAddress = context.user.ip_address;
	            }
	            if (!this.did && !context.did) {
	                this.did = context.user.id || context.user.email || context.user.username;
	            }
	        }
	        this.timestamp = context.timestamp || utils_1$q.timestampInSeconds();
	        if (context.ignoreDuration) {
	            this.ignoreDuration = context.ignoreDuration;
	        }
	        if (context.sid) {
	            // Good enough uuid validation. — Kamil
	            this.sid = context.sid.length === 32 ? context.sid : utils_1$q.uuid4();
	        }
	        if (context.init !== undefined) {
	            this.init = context.init;
	        }
	        if (!this.did && context.did) {
	            this.did = "" + context.did;
	        }
	        if (typeof context.started === 'number') {
	            this.started = context.started;
	        }
	        if (this.ignoreDuration) {
	            this.duration = undefined;
	        }
	        else if (typeof context.duration === 'number') {
	            this.duration = context.duration;
	        }
	        else {
	            var duration = this.timestamp - this.started;
	            this.duration = duration >= 0 ? duration : 0;
	        }
	        if (context.release) {
	            this.release = context.release;
	        }
	        if (context.environment) {
	            this.environment = context.environment;
	        }
	        if (!this.ipAddress && context.ipAddress) {
	            this.ipAddress = context.ipAddress;
	        }
	        if (!this.userAgent && context.userAgent) {
	            this.userAgent = context.userAgent;
	        }
	        if (typeof context.errors === 'number') {
	            this.errors = context.errors;
	        }
	        if (context.status) {
	            this.status = context.status;
	        }
	    };
	    /** JSDoc */
	    Session.prototype.close = function (status) {
	        if (status) {
	            this.update({ status: status });
	        }
	        else if (this.status === 'ok') {
	            this.update({ status: 'exited' });
	        }
	        else {
	            this.update();
	        }
	    };
	    /** JSDoc */
	    Session.prototype.toJSON = function () {
	        return utils_1$q.dropUndefinedKeys({
	            sid: "" + this.sid,
	            init: this.init,
	            // Make sure that sec is converted to ms for date constructor
	            started: new Date(this.started * 1000).toISOString(),
	            timestamp: new Date(this.timestamp * 1000).toISOString(),
	            status: this.status,
	            errors: this.errors,
	            did: typeof this.did === 'number' || typeof this.did === 'string' ? "" + this.did : undefined,
	            duration: this.duration,
	            attrs: {
	                release: this.release,
	                environment: this.environment,
	                ip_address: this.ipAddress,
	                user_agent: this.userAgent,
	            },
	        });
	    };
	    return Session;
	}());
	session.Session = Session;

	var sessionflusher = {};

	var hub = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var tslib_1 = require$$0;
		var utils_1 = dist$1;
		var scope_1 = scope;
		var session_1 = session;
		/**
		 * API compatibility version of this hub.
		 *
		 * WARNING: This number should only be increased when the global interface
		 * changes and new methods are introduced.
		 *
		 * @hidden
		 */
		exports.API_VERSION = 4;
		/**
		 * Default maximum number of breadcrumbs added to an event. Can be overwritten
		 * with {@link Options.maxBreadcrumbs}.
		 */
		var DEFAULT_BREADCRUMBS = 100;
		/**
		 * @inheritDoc
		 */
		var Hub = /** @class */ (function () {
		    /**
		     * Creates a new instance of the hub, will push one {@link Layer} into the
		     * internal stack on creation.
		     *
		     * @param client bound to the hub.
		     * @param scope bound to the hub.
		     * @param version number, higher number means higher priority.
		     */
		    function Hub(client, scope, _version) {
		        if (scope === void 0) { scope = new scope_1.Scope(); }
		        if (_version === void 0) { _version = exports.API_VERSION; }
		        this._version = _version;
		        /** Is a {@link Layer}[] containing the client and scope */
		        this._stack = [{}];
		        this.getStackTop().scope = scope;
		        if (client) {
		            this.bindClient(client);
		        }
		    }
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.isOlderThan = function (version) {
		        return this._version < version;
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.bindClient = function (client) {
		        var top = this.getStackTop();
		        top.client = client;
		        if (client && client.setupIntegrations) {
		            client.setupIntegrations();
		        }
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.pushScope = function () {
		        // We want to clone the content of prev scope
		        var scope = scope_1.Scope.clone(this.getScope());
		        this.getStack().push({
		            client: this.getClient(),
		            scope: scope,
		        });
		        return scope;
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.popScope = function () {
		        if (this.getStack().length <= 1)
		            return false;
		        return !!this.getStack().pop();
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.withScope = function (callback) {
		        var scope = this.pushScope();
		        try {
		            callback(scope);
		        }
		        finally {
		            this.popScope();
		        }
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.getClient = function () {
		        return this.getStackTop().client;
		    };
		    /** Returns the scope of the top stack. */
		    Hub.prototype.getScope = function () {
		        return this.getStackTop().scope;
		    };
		    /** Returns the scope stack for domains or the process. */
		    Hub.prototype.getStack = function () {
		        return this._stack;
		    };
		    /** Returns the topmost scope layer in the order domain > local > process. */
		    Hub.prototype.getStackTop = function () {
		        return this._stack[this._stack.length - 1];
		    };
		    /**
		     * @inheritDoc
		     */
		    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
		    Hub.prototype.captureException = function (exception, hint) {
		        var eventId = (this._lastEventId = utils_1.uuid4());
		        var finalHint = hint;
		        // If there's no explicit hint provided, mimic the same thing that would happen
		        // in the minimal itself to create a consistent behavior.
		        // We don't do this in the client, as it's the lowest level API, and doing this,
		        // would prevent user from having full control over direct calls.
		        if (!hint) {
		            var syntheticException = void 0;
		            try {
		                throw new Error('Sentry syntheticException');
		            }
		            catch (exception) {
		                syntheticException = exception;
		            }
		            finalHint = {
		                originalException: exception,
		                syntheticException: syntheticException,
		            };
		        }
		        this._invokeClient('captureException', exception, tslib_1.__assign(tslib_1.__assign({}, finalHint), { event_id: eventId }));
		        return eventId;
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.captureMessage = function (message, level, hint) {
		        var eventId = (this._lastEventId = utils_1.uuid4());
		        var finalHint = hint;
		        // If there's no explicit hint provided, mimic the same thing that would happen
		        // in the minimal itself to create a consistent behavior.
		        // We don't do this in the client, as it's the lowest level API, and doing this,
		        // would prevent user from having full control over direct calls.
		        if (!hint) {
		            var syntheticException = void 0;
		            try {
		                throw new Error(message);
		            }
		            catch (exception) {
		                syntheticException = exception;
		            }
		            finalHint = {
		                originalException: message,
		                syntheticException: syntheticException,
		            };
		        }
		        this._invokeClient('captureMessage', message, level, tslib_1.__assign(tslib_1.__assign({}, finalHint), { event_id: eventId }));
		        return eventId;
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.captureEvent = function (event, hint) {
		        var eventId = utils_1.uuid4();
		        if (event.type !== 'transaction') {
		            this._lastEventId = eventId;
		        }
		        this._invokeClient('captureEvent', event, tslib_1.__assign(tslib_1.__assign({}, hint), { event_id: eventId }));
		        return eventId;
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.lastEventId = function () {
		        return this._lastEventId;
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.addBreadcrumb = function (breadcrumb, hint) {
		        var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
		        if (!scope || !client)
		            return;
		        // eslint-disable-next-line @typescript-eslint/unbound-method
		        var _b = (client.getOptions && client.getOptions()) || {}, _c = _b.beforeBreadcrumb, beforeBreadcrumb = _c === void 0 ? null : _c, _d = _b.maxBreadcrumbs, maxBreadcrumbs = _d === void 0 ? DEFAULT_BREADCRUMBS : _d;
		        if (maxBreadcrumbs <= 0)
		            return;
		        var timestamp = utils_1.dateTimestampInSeconds();
		        var mergedBreadcrumb = tslib_1.__assign({ timestamp: timestamp }, breadcrumb);
		        var finalBreadcrumb = beforeBreadcrumb
		            ? utils_1.consoleSandbox(function () { return beforeBreadcrumb(mergedBreadcrumb, hint); })
		            : mergedBreadcrumb;
		        if (finalBreadcrumb === null)
		            return;
		        scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.setUser = function (user) {
		        var scope = this.getScope();
		        if (scope)
		            scope.setUser(user);
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.setTags = function (tags) {
		        var scope = this.getScope();
		        if (scope)
		            scope.setTags(tags);
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.setExtras = function (extras) {
		        var scope = this.getScope();
		        if (scope)
		            scope.setExtras(extras);
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.setTag = function (key, value) {
		        var scope = this.getScope();
		        if (scope)
		            scope.setTag(key, value);
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.setExtra = function (key, extra) {
		        var scope = this.getScope();
		        if (scope)
		            scope.setExtra(key, extra);
		    };
		    /**
		     * @inheritDoc
		     */
		    // eslint-disable-next-line @typescript-eslint/no-explicit-any
		    Hub.prototype.setContext = function (name, context) {
		        var scope = this.getScope();
		        if (scope)
		            scope.setContext(name, context);
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.configureScope = function (callback) {
		        var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
		        if (scope && client) {
		            callback(scope);
		        }
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.run = function (callback) {
		        var oldHub = makeMain(this);
		        try {
		            callback(this);
		        }
		        finally {
		            makeMain(oldHub);
		        }
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.getIntegration = function (integration) {
		        var client = this.getClient();
		        if (!client)
		            return null;
		        try {
		            return client.getIntegration(integration);
		        }
		        catch (_oO) {
		            utils_1.logger.warn("Cannot retrieve integration " + integration.id + " from the current Hub");
		            return null;
		        }
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.startSpan = function (context) {
		        return this._callExtensionMethod('startSpan', context);
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.startTransaction = function (context, customSamplingContext) {
		        return this._callExtensionMethod('startTransaction', context, customSamplingContext);
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.traceHeaders = function () {
		        return this._callExtensionMethod('traceHeaders');
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.captureSession = function (endSession) {
		        if (endSession === void 0) { endSession = false; }
		        // both send the update and pull the session from the scope
		        if (endSession) {
		            return this.endSession();
		        }
		        // only send the update
		        this._sendSessionUpdate();
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.endSession = function () {
		        var layer = this.getStackTop();
		        var scope = layer && layer.scope;
		        var session = scope && scope.getSession();
		        if (session) {
		            session.close();
		        }
		        this._sendSessionUpdate();
		        // the session is over; take it off of the scope
		        if (scope) {
		            scope.setSession();
		        }
		    };
		    /**
		     * @inheritDoc
		     */
		    Hub.prototype.startSession = function (context) {
		        var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
		        var _b = (client && client.getOptions()) || {}, release = _b.release, environment = _b.environment;
		        // Will fetch userAgent if called from browser sdk
		        var global = utils_1.getGlobalObject();
		        var userAgent = (global.navigator || {}).userAgent;
		        var session = new session_1.Session(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ release: release,
		            environment: environment }, (scope && { user: scope.getUser() })), (userAgent && { userAgent: userAgent })), context));
		        if (scope) {
		            // End existing session if there's one
		            var currentSession = scope.getSession && scope.getSession();
		            if (currentSession && currentSession.status === 'ok') {
		                currentSession.update({ status: 'exited' });
		            }
		            this.endSession();
		            // Afterwards we set the new session on the scope
		            scope.setSession(session);
		        }
		        return session;
		    };
		    /**
		     * Sends the current Session on the scope
		     */
		    Hub.prototype._sendSessionUpdate = function () {
		        var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
		        if (!scope)
		            return;
		        var session = scope.getSession && scope.getSession();
		        if (session) {
		            if (client && client.captureSession) {
		                client.captureSession(session);
		            }
		        }
		    };
		    /**
		     * Internal helper function to call a method on the top client if it exists.
		     *
		     * @param method The method to call on the client.
		     * @param args Arguments to pass to the client function.
		     */
		    // eslint-disable-next-line @typescript-eslint/no-explicit-any
		    Hub.prototype._invokeClient = function (method) {
		        var _a;
		        var args = [];
		        for (var _i = 1; _i < arguments.length; _i++) {
		            args[_i - 1] = arguments[_i];
		        }
		        var _b = this.getStackTop(), scope = _b.scope, client = _b.client;
		        if (client && client[method]) {
		            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
		            (_a = client)[method].apply(_a, tslib_1.__spread(args, [scope]));
		        }
		    };
		    /**
		     * Calls global extension method and binding current instance to the function call
		     */
		    // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)
		    // eslint-disable-next-line @typescript-eslint/no-explicit-any
		    Hub.prototype._callExtensionMethod = function (method) {
		        var args = [];
		        for (var _i = 1; _i < arguments.length; _i++) {
		            args[_i - 1] = arguments[_i];
		        }
		        var carrier = getMainCarrier();
		        var sentry = carrier.__SENTRY__;
		        if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {
		            return sentry.extensions[method].apply(this, args);
		        }
		        utils_1.logger.warn("Extension method " + method + " couldn't be found, doing nothing.");
		    };
		    return Hub;
		}());
		exports.Hub = Hub;
		/**
		 * Returns the global shim registry.
		 *
		 * FIXME: This function is problematic, because despite always returning a valid Carrier,
		 * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check
		 * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.
		 **/
		function getMainCarrier() {
		    var carrier = utils_1.getGlobalObject();
		    carrier.__SENTRY__ = carrier.__SENTRY__ || {
		        extensions: {},
		        hub: undefined,
		    };
		    return carrier;
		}
		exports.getMainCarrier = getMainCarrier;
		/**
		 * Replaces the current main hub with the passed one on the global object
		 *
		 * @returns The old replaced hub
		 */
		function makeMain(hub) {
		    var registry = getMainCarrier();
		    var oldHub = getHubFromCarrier(registry);
		    setHubOnCarrier(registry, hub);
		    return oldHub;
		}
		exports.makeMain = makeMain;
		/**
		 * Returns the default hub instance.
		 *
		 * If a hub is already registered in the global carrier but this module
		 * contains a more recent version, it replaces the registered version.
		 * Otherwise, the currently registered hub will be returned.
		 */
		function getCurrentHub() {
		    // Get main carrier (global for every environment)
		    var registry = getMainCarrier();
		    // If there's no hub, or its an old API, assign a new one
		    if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(exports.API_VERSION)) {
		        setHubOnCarrier(registry, new Hub());
		    }
		    // Prefer domains over global if they are there (applicable only to Node environment)
		    if (utils_1.isNodeEnv()) {
		        return getHubFromActiveDomain(registry);
		    }
		    // Return hub that lives on a global object
		    return getHubFromCarrier(registry);
		}
		exports.getCurrentHub = getCurrentHub;
		/**
		 * Returns the active domain, if one exists
		 * @deprecated No longer used; remove in v7
		 * @returns The domain, or undefined if there is no active domain
		 */
		// eslint-disable-next-line deprecation/deprecation
		function getActiveDomain() {
		    utils_1.logger.warn('Function `getActiveDomain` is deprecated and will be removed in a future version.');
		    var sentry = getMainCarrier().__SENTRY__;
		    return sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;
		}
		exports.getActiveDomain = getActiveDomain;
		/**
		 * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist
		 * @returns discovered hub
		 */
		function getHubFromActiveDomain(registry) {
		    try {
		        var sentry = getMainCarrier().__SENTRY__;
		        var activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;
		        // If there's no active domain, just return global hub
		        if (!activeDomain) {
		            return getHubFromCarrier(registry);
		        }
		        // If there's no hub on current domain, or it's an old API, assign a new one
		        if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(exports.API_VERSION)) {
		            var registryHubTopStack = getHubFromCarrier(registry).getStackTop();
		            setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, scope_1.Scope.clone(registryHubTopStack.scope)));
		        }
		        // Return hub that lives on a domain
		        return getHubFromCarrier(activeDomain);
		    }
		    catch (_Oo) {
		        // Return hub that lives on a global object
		        return getHubFromCarrier(registry);
		    }
		}
		/**
		 * This will tell whether a carrier has a hub on it or not
		 * @param carrier object
		 */
		function hasHubOnCarrier(carrier) {
		    return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);
		}
		/**
		 * This will create a new {@link Hub} and add to the passed object on
		 * __SENTRY__.hub.
		 * @param carrier object
		 * @hidden
		 */
		function getHubFromCarrier(carrier) {
		    if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub)
		        return carrier.__SENTRY__.hub;
		    carrier.__SENTRY__ = carrier.__SENTRY__ || {};
		    carrier.__SENTRY__.hub = new Hub();
		    return carrier.__SENTRY__.hub;
		}
		exports.getHubFromCarrier = getHubFromCarrier;
		/**
		 * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute
		 * @param carrier object
		 * @param hub Hub
		 * @returns A boolean indicating success or failure
		 */
		function setHubOnCarrier(carrier, hub) {
		    if (!carrier)
		        return false;
		    carrier.__SENTRY__ = carrier.__SENTRY__ || {};
		    carrier.__SENTRY__.hub = hub;
		    return true;
		}
		exports.setHubOnCarrier = setHubOnCarrier;
		
	} (hub));

	Object.defineProperty(sessionflusher, "__esModule", { value: true });
	var utils_1$p = dist$1;
	var hub_1$6 = hub;
	/**
	 * @inheritdoc
	 */
	var SessionFlusher = /** @class */ (function () {
	    function SessionFlusher(transport, attrs) {
	        var _this = this;
	        this.flushTimeout = 60;
	        this._pendingAggregates = {};
	        this._isEnabled = true;
	        this._transport = transport;
	        // Call to setInterval, so that flush is called every 60 seconds
	        this._intervalId = setInterval(function () { return _this.flush(); }, this.flushTimeout * 1000);
	        this._sessionAttrs = attrs;
	    }
	    /** Sends session aggregates to Transport */
	    SessionFlusher.prototype.sendSessionAggregates = function (sessionAggregates) {
	        if (!this._transport.sendSession) {
	            utils_1$p.logger.warn("Dropping session because custom transport doesn't implement sendSession");
	            return;
	        }
	        void this._transport.sendSession(sessionAggregates).then(null, function (reason) {
	            utils_1$p.logger.error("Error while sending session: " + reason);
	        });
	    };
	    /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSessions` */
	    SessionFlusher.prototype.flush = function () {
	        var sessionAggregates = this.getSessionAggregates();
	        if (sessionAggregates.aggregates.length === 0) {
	            return;
	        }
	        this._pendingAggregates = {};
	        this.sendSessionAggregates(sessionAggregates);
	    };
	    /** Massages the entries in `pendingAggregates` and returns aggregated sessions */
	    SessionFlusher.prototype.getSessionAggregates = function () {
	        var _this = this;
	        var aggregates = Object.keys(this._pendingAggregates).map(function (key) {
	            return _this._pendingAggregates[parseInt(key)];
	        });
	        var sessionAggregates = {
	            attrs: this._sessionAttrs,
	            aggregates: aggregates,
	        };
	        return utils_1$p.dropUndefinedKeys(sessionAggregates);
	    };
	    /** JSDoc */
	    SessionFlusher.prototype.close = function () {
	        clearInterval(this._intervalId);
	        this._isEnabled = false;
	        this.flush();
	    };
	    /**
	     * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then
	     * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to
	     * `_incrementSessionStatusCount` along with the start date
	     */
	    SessionFlusher.prototype.incrementSessionStatusCount = function () {
	        if (!this._isEnabled) {
	            return;
	        }
	        var scope = hub_1$6.getCurrentHub().getScope();
	        var requestSession = scope && scope.getRequestSession();
	        if (requestSession && requestSession.status) {
	            this._incrementSessionStatusCount(requestSession.status, new Date());
	            // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in
	            // case captureRequestSession is called more than once to prevent double count
	            if (scope) {
	                scope.setRequestSession(undefined);
	            }
	            /* eslint-enable @typescript-eslint/no-unsafe-member-access */
	        }
	    };
	    /**
	     * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of
	     * the session received
	     */
	    SessionFlusher.prototype._incrementSessionStatusCount = function (status, date) {
	        // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys
	        var sessionStartedTrunc = new Date(date).setSeconds(0, 0);
	        this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};
	        // corresponds to aggregated sessions in one specific minute bucket
	        // for example, {"started":"2021-03-16T08:00:00.000Z","exited":4, "errored": 1}
	        var aggregationCounts = this._pendingAggregates[sessionStartedTrunc];
	        if (!aggregationCounts.started) {
	            aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();
	        }
	        switch (status) {
	            case 'errored':
	                aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;
	                return aggregationCounts.errored;
	            case 'ok':
	                aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;
	                return aggregationCounts.exited;
	            default:
	                aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;
	                return aggregationCounts.crashed;
	        }
	    };
	    return SessionFlusher;
	}());
	sessionflusher.SessionFlusher = SessionFlusher;

	Object.defineProperty(dist$2, "__esModule", { value: true });
	var scope_1 = scope;
	dist$2.addGlobalEventProcessor = scope_1.addGlobalEventProcessor;
	dist$2.Scope = scope_1.Scope;
	var session_1 = session;
	dist$2.Session = session_1.Session;
	var sessionflusher_1 = sessionflusher;
	dist$2.SessionFlusher = sessionflusher_1.SessionFlusher;
	var hub_1$5 = hub;
	// eslint-disable-next-line deprecation/deprecation
	dist$2.getActiveDomain = hub_1$5.getActiveDomain;
	dist$2.getCurrentHub = hub_1$5.getCurrentHub;
	dist$2.getHubFromCarrier = hub_1$5.getHubFromCarrier;
	dist$2.getMainCarrier = hub_1$5.getMainCarrier;
	dist$2.Hub = hub_1$5.Hub;
	dist$2.makeMain = hub_1$5.makeMain;
	dist$2.setHubOnCarrier = hub_1$5.setHubOnCarrier;

	Object.defineProperty(dist$3, "__esModule", { value: true });
	var tslib_1$i = require$$0;
	var hub_1$4 = dist$2;
	/**
	 * This calls a function on the current hub.
	 * @param method function to call on hub.
	 * @param args to pass to function.
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function callOnHub(method) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    var hub = hub_1$4.getCurrentHub();
	    if (hub && hub[method]) {
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        return hub[method].apply(hub, tslib_1$i.__spread(args));
	    }
	    throw new Error("No hub defined or " + method + " was not found on the hub, please open a bug report.");
	}
	/**
	 * Captures an exception event and sends it to Sentry.
	 *
	 * @param exception An exception-like object.
	 * @returns The generated eventId.
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
	function captureException(exception, captureContext) {
	    var syntheticException;
	    try {
	        throw new Error('Sentry syntheticException');
	    }
	    catch (exception) {
	        syntheticException = exception;
	    }
	    return callOnHub('captureException', exception, {
	        captureContext: captureContext,
	        originalException: exception,
	        syntheticException: syntheticException,
	    });
	}
	dist$3.captureException = captureException;
	/**
	 * Captures a message event and sends it to Sentry.
	 *
	 * @param message The message to send to Sentry.
	 * @param Severity Define the level of the message.
	 * @returns The generated eventId.
	 */
	function captureMessage(message, captureContext) {
	    var syntheticException;
	    try {
	        throw new Error(message);
	    }
	    catch (exception) {
	        syntheticException = exception;
	    }
	    // This is necessary to provide explicit scopes upgrade, without changing the original
	    // arity of the `captureMessage(message, level)` method.
	    var level = typeof captureContext === 'string' ? captureContext : undefined;
	    var context = typeof captureContext !== 'string' ? { captureContext: captureContext } : undefined;
	    return callOnHub('captureMessage', message, level, tslib_1$i.__assign({ originalException: message, syntheticException: syntheticException }, context));
	}
	dist$3.captureMessage = captureMessage;
	/**
	 * Captures a manually created event and sends it to Sentry.
	 *
	 * @param event The event to send to Sentry.
	 * @returns The generated eventId.
	 */
	function captureEvent(event) {
	    return callOnHub('captureEvent', event);
	}
	dist$3.captureEvent = captureEvent;
	/**
	 * Callback to set context information onto the scope.
	 * @param callback Callback function that receives Scope.
	 */
	function configureScope(callback) {
	    callOnHub('configureScope', callback);
	}
	dist$3.configureScope = configureScope;
	/**
	 * Records a new breadcrumb which will be attached to future events.
	 *
	 * Breadcrumbs will be added to subsequent events to provide more context on
	 * user's actions prior to an error or crash.
	 *
	 * @param breadcrumb The breadcrumb to record.
	 */
	function addBreadcrumb(breadcrumb) {
	    callOnHub('addBreadcrumb', breadcrumb);
	}
	dist$3.addBreadcrumb = addBreadcrumb;
	/**
	 * Sets context data with the given name.
	 * @param name of the context
	 * @param context Any kind of data. This data will be normalized.
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function setContext(name, context) {
	    callOnHub('setContext', name, context);
	}
	dist$3.setContext = setContext;
	/**
	 * Set an object that will be merged sent as extra data with the event.
	 * @param extras Extras object to merge into current context.
	 */
	function setExtras(extras) {
	    callOnHub('setExtras', extras);
	}
	dist$3.setExtras = setExtras;
	/**
	 * Set an object that will be merged sent as tags data with the event.
	 * @param tags Tags context object to merge into current context.
	 */
	function setTags(tags) {
	    callOnHub('setTags', tags);
	}
	dist$3.setTags = setTags;
	/**
	 * Set key:value that will be sent as extra data with the event.
	 * @param key String of extra
	 * @param extra Any kind of data. This data will be normalized.
	 */
	function setExtra(key, extra) {
	    callOnHub('setExtra', key, extra);
	}
	dist$3.setExtra = setExtra;
	/**
	 * Set key:value that will be sent as tags data with the event.
	 *
	 * Can also be used to unset a tag, by passing `undefined`.
	 *
	 * @param key String key of tag
	 * @param value Value of tag
	 */
	function setTag(key, value) {
	    callOnHub('setTag', key, value);
	}
	dist$3.setTag = setTag;
	/**
	 * Updates user context information for future events.
	 *
	 * @param user User context object to be set in the current context. Pass `null` to unset the user.
	 */
	function setUser(user) {
	    callOnHub('setUser', user);
	}
	dist$3.setUser = setUser;
	/**
	 * Creates a new scope with and executes the given operation within.
	 * The scope is automatically removed once the operation
	 * finishes or throws.
	 *
	 * This is essentially a convenience function for:
	 *
	 *     pushScope();
	 *     callback();
	 *     popScope();
	 *
	 * @param callback that will be enclosed into push/popScope.
	 */
	function withScope(callback) {
	    callOnHub('withScope', callback);
	}
	dist$3.withScope = withScope;
	/**
	 * Calls a function on the latest client. Use this with caution, it's meant as
	 * in "internal" helper so we don't need to expose every possible function in
	 * the shim. It is not guaranteed that the client actually implements the
	 * function.
	 *
	 * @param method The method to call on the client/client.
	 * @param args Arguments to pass to the client/fontend.
	 * @hidden
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function _callOnClient(method) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    callOnHub.apply(void 0, tslib_1$i.__spread(['_invokeClient', method], args));
	}
	dist$3._callOnClient = _callOnClient;
	/**
	 * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.
	 *
	 * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a
	 * new child span within the transaction or any span, call the respective `.startChild()` method.
	 *
	 * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.
	 *
	 * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its
	 * finished child spans will be sent to Sentry.
	 *
	 * @param context Properties of the new `Transaction`.
	 * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent
	 * default values). See {@link Options.tracesSampler}.
	 *
	 * @returns The transaction which was just started
	 */
	function startTransaction(context, customSamplingContext) {
	    return callOnHub('startTransaction', tslib_1$i.__assign({}, context), customSamplingContext);
	}
	dist$3.startTransaction = startTransaction;

	var api = {};

	Object.defineProperty(api, "__esModule", { value: true });
	var utils_1$o = dist$1;
	var SENTRY_API_VERSION = '7';
	/**
	 * Helper class to provide urls, headers and metadata that can be used to form
	 * different types of requests to Sentry endpoints.
	 * Supports both envelopes and regular event requests.
	 *
	 * @deprecated Please use APIDetails
	 **/
	var API = /** @class */ (function () {
	    /** Create a new instance of API */
	    function API(dsn, metadata, tunnel) {
	        if (metadata === void 0) { metadata = {}; }
	        this.dsn = dsn;
	        this._dsnObject = utils_1$o.makeDsn(dsn);
	        this.metadata = metadata;
	        this._tunnel = tunnel;
	    }
	    /** Returns the Dsn object. */
	    API.prototype.getDsn = function () {
	        return this._dsnObject;
	    };
	    /** Does this transport force envelopes? */
	    API.prototype.forceEnvelope = function () {
	        return !!this._tunnel;
	    };
	    /** Returns the prefix to construct Sentry ingestion API endpoints. */
	    API.prototype.getBaseApiEndpoint = function () {
	        return getBaseApiEndpoint(this._dsnObject);
	    };
	    /** Returns the store endpoint URL. */
	    API.prototype.getStoreEndpoint = function () {
	        return getStoreEndpoint(this._dsnObject);
	    };
	    /**
	     * Returns the store endpoint URL with auth in the query string.
	     *
	     * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
	     */
	    API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {
	        return getStoreEndpointWithUrlEncodedAuth(this._dsnObject);
	    };
	    /**
	     * Returns the envelope endpoint URL with auth in the query string.
	     *
	     * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
	     */
	    API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {
	        return getEnvelopeEndpointWithUrlEncodedAuth(this._dsnObject, this._tunnel);
	    };
	    return API;
	}());
	api.API = API;
	/** Initializes API Details */
	function initAPIDetails(dsn, metadata, tunnel) {
	    return {
	        initDsn: dsn,
	        metadata: metadata || {},
	        dsn: utils_1$o.makeDsn(dsn),
	        tunnel: tunnel,
	    };
	}
	api.initAPIDetails = initAPIDetails;
	/** Returns the prefix to construct Sentry ingestion API endpoints. */
	function getBaseApiEndpoint(dsn) {
	    var protocol = dsn.protocol ? dsn.protocol + ":" : '';
	    var port = dsn.port ? ":" + dsn.port : '';
	    return protocol + "//" + dsn.host + port + (dsn.path ? "/" + dsn.path : '') + "/api/";
	}
	/** Returns the ingest API endpoint for target. */
	function _getIngestEndpoint(dsn, target) {
	    return "" + getBaseApiEndpoint(dsn) + dsn.projectId + "/" + target + "/";
	}
	/** Returns a URL-encoded string with auth config suitable for a query string. */
	function _encodedAuth(dsn) {
	    return utils_1$o.urlEncode({
	        // We send only the minimum set of required information. See
	        // https://github.com/getsentry/sentry-javascript/issues/2572.
	        sentry_key: dsn.publicKey,
	        sentry_version: SENTRY_API_VERSION,
	    });
	}
	/** Returns the store endpoint URL. */
	function getStoreEndpoint(dsn) {
	    return _getIngestEndpoint(dsn, 'store');
	}
	/**
	 * Returns the store endpoint URL with auth in the query string.
	 *
	 * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
	 */
	function getStoreEndpointWithUrlEncodedAuth(dsn) {
	    return getStoreEndpoint(dsn) + "?" + _encodedAuth(dsn);
	}
	api.getStoreEndpointWithUrlEncodedAuth = getStoreEndpointWithUrlEncodedAuth;
	/** Returns the envelope endpoint URL. */
	function _getEnvelopeEndpoint(dsn) {
	    return _getIngestEndpoint(dsn, 'envelope');
	}
	/**
	 * Returns the envelope endpoint URL with auth in the query string.
	 *
	 * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
	 */
	function getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel) {
	    return tunnel ? tunnel : _getEnvelopeEndpoint(dsn) + "?" + _encodedAuth(dsn);
	}
	api.getEnvelopeEndpointWithUrlEncodedAuth = getEnvelopeEndpointWithUrlEncodedAuth;
	/**
	 * Returns an object that can be used in request headers.
	 * This is needed for node and the old /store endpoint in sentry
	 */
	function getRequestHeaders(dsn, clientName, clientVersion) {
	    // CHANGE THIS to use metadata but keep clientName and clientVersion compatible
	    var header = ["Sentry sentry_version=" + SENTRY_API_VERSION];
	    header.push("sentry_client=" + clientName + "/" + clientVersion);
	    header.push("sentry_key=" + dsn.publicKey);
	    if (dsn.pass) {
	        header.push("sentry_secret=" + dsn.pass);
	    }
	    return {
	        'Content-Type': 'application/json',
	        'X-Sentry-Auth': header.join(', '),
	    };
	}
	api.getRequestHeaders = getRequestHeaders;
	/** Returns the url to the report dialog endpoint. */
	function getReportDialogEndpoint(dsnLike, dialogOptions) {
	    var dsn = utils_1$o.makeDsn(dsnLike);
	    var endpoint = getBaseApiEndpoint(dsn) + "embed/error-page/";
	    var encodedOptions = "dsn=" + utils_1$o.dsnToString(dsn);
	    for (var key in dialogOptions) {
	        if (key === 'dsn') {
	            continue;
	        }
	        if (key === 'user') {
	            if (!dialogOptions.user) {
	                continue;
	            }
	            if (dialogOptions.user.name) {
	                encodedOptions += "&name=" + encodeURIComponent(dialogOptions.user.name);
	            }
	            if (dialogOptions.user.email) {
	                encodedOptions += "&email=" + encodeURIComponent(dialogOptions.user.email);
	            }
	        }
	        else {
	            encodedOptions += "&" + encodeURIComponent(key) + "=" + encodeURIComponent(dialogOptions[key]);
	        }
	    }
	    return endpoint + "?" + encodedOptions;
	}
	api.getReportDialogEndpoint = getReportDialogEndpoint;

	var baseclient = {};

	var integration = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var tslib_1 = require$$0;
		var hub_1 = dist$2;
		var utils_1 = dist$1;
		exports.installedIntegrations = [];
		/**
		 * @private
		 */
		function filterDuplicates(integrations) {
		    return integrations.reduce(function (acc, integrations) {
		        if (acc.every(function (accIntegration) { return integrations.name !== accIntegration.name; })) {
		            acc.push(integrations);
		        }
		        return acc;
		    }, []);
		}
		/** Gets integration to install */
		function getIntegrationsToSetup(options) {
		    var defaultIntegrations = (options.defaultIntegrations && tslib_1.__spread(options.defaultIntegrations)) || [];
		    var userIntegrations = options.integrations;
		    var integrations = tslib_1.__spread(filterDuplicates(defaultIntegrations));
		    if (Array.isArray(userIntegrations)) {
		        // Filter out integrations that are also included in user options
		        integrations = tslib_1.__spread(integrations.filter(function (integrations) {
		            return userIntegrations.every(function (userIntegration) { return userIntegration.name !== integrations.name; });
		        }), filterDuplicates(userIntegrations));
		    }
		    else if (typeof userIntegrations === 'function') {
		        integrations = userIntegrations(integrations);
		        integrations = Array.isArray(integrations) ? integrations : [integrations];
		    }
		    // Make sure that if present, `Debug` integration will always run last
		    var integrationsNames = integrations.map(function (i) { return i.name; });
		    var alwaysLastToRun = 'Debug';
		    if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {
		        integrations.push.apply(integrations, tslib_1.__spread(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));
		    }
		    return integrations;
		}
		exports.getIntegrationsToSetup = getIntegrationsToSetup;
		/** Setup given integration */
		function setupIntegration(integration) {
		    if (exports.installedIntegrations.indexOf(integration.name) !== -1) {
		        return;
		    }
		    integration.setupOnce(hub_1.addGlobalEventProcessor, hub_1.getCurrentHub);
		    exports.installedIntegrations.push(integration.name);
		    utils_1.logger.log("Integration installed: " + integration.name);
		}
		exports.setupIntegration = setupIntegration;
		/**
		 * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default
		 * integrations are added unless they were already provided before.
		 * @param integrations array of integration instances
		 * @param withDefault should enable default integrations
		 */
		function setupIntegrations(options) {
		    var integrations = {};
		    getIntegrationsToSetup(options).forEach(function (integration) {
		        integrations[integration.name] = integration;
		        setupIntegration(integration);
		    });
		    // set the `initialized` flag so we don't run through the process again unecessarily; use `Object.defineProperty`
		    // because by default it creates a property which is nonenumerable, which we want since `initialized` shouldn't be
		    // considered a member of the index the way the actual integrations are
		    utils_1.addNonEnumerableProperty(integrations, 'initialized', true);
		    return integrations;
		}
		exports.setupIntegrations = setupIntegrations;
		
	} (integration));

	Object.defineProperty(baseclient, "__esModule", { value: true });
	var tslib_1$h = require$$0;
	/* eslint-disable max-lines */
	var hub_1$3 = dist$2;
	var utils_1$n = dist$1;
	var integration_1 = integration;
	var ALREADY_SEEN_ERROR = "Not capturing exception because it's already been captured.";
	/**
	 * Base implementation for all JavaScript SDK clients.
	 *
	 * Call the constructor with the corresponding backend constructor and options
	 * specific to the client subclass. To access these options later, use
	 * {@link Client.getOptions}. Also, the Backend instance is available via
	 * {@link Client.getBackend}.
	 *
	 * If a Dsn is specified in the options, it will be parsed and stored. Use
	 * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is
	 * invalid, the constructor will throw a {@link SentryException}. Note that
	 * without a valid Dsn, the SDK will not send any events to Sentry.
	 *
	 * Before sending an event via the backend, it is passed through
	 * {@link BaseClient._prepareEvent} to add SDK information and scope data
	 * (breadcrumbs and context). To add more custom information, override this
	 * method and extend the resulting prepared event.
	 *
	 * To issue automatically created events (e.g. via instrumentation), use
	 * {@link Client.captureEvent}. It will prepare the event and pass it through
	 * the callback lifecycle. To issue auto-breadcrumbs, use
	 * {@link Client.addBreadcrumb}.
	 *
	 * @example
	 * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {
	 *   public constructor(options: NodeOptions) {
	 *     super(NodeBackend, options);
	 *   }
	 *
	 *   // ...
	 * }
	 */
	var BaseClient = /** @class */ (function () {
	    /**
	     * Initializes this client instance.
	     *
	     * @param backendClass A constructor function to create the backend.
	     * @param options Options for the client.
	     */
	    function BaseClient(backendClass, options) {
	        /** Array of used integrations. */
	        this._integrations = {};
	        /** Number of calls being processed */
	        this._numProcessing = 0;
	        this._backend = new backendClass(options);
	        this._options = options;
	        if (options.dsn) {
	            this._dsn = utils_1$n.makeDsn(options.dsn);
	        }
	    }
	    /**
	     * @inheritDoc
	     */
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
	    BaseClient.prototype.captureException = function (exception, hint, scope) {
	        var _this = this;
	        // ensure we haven't captured this very object before
	        if (utils_1$n.checkOrSetAlreadyCaught(exception)) {
	            utils_1$n.logger.log(ALREADY_SEEN_ERROR);
	            return;
	        }
	        var eventId = hint && hint.event_id;
	        this._process(this._getBackend()
	            .eventFromException(exception, hint)
	            .then(function (event) { return _this._captureEvent(event, hint, scope); })
	            .then(function (result) {
	            eventId = result;
	        }));
	        return eventId;
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.captureMessage = function (message, level, hint, scope) {
	        var _this = this;
	        var eventId = hint && hint.event_id;
	        var promisedEvent = utils_1$n.isPrimitive(message)
	            ? this._getBackend().eventFromMessage(String(message), level, hint)
	            : this._getBackend().eventFromException(message, hint);
	        this._process(promisedEvent
	            .then(function (event) { return _this._captureEvent(event, hint, scope); })
	            .then(function (result) {
	            eventId = result;
	        }));
	        return eventId;
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.captureEvent = function (event, hint, scope) {
	        // ensure we haven't captured this very object before
	        if (hint && hint.originalException && utils_1$n.checkOrSetAlreadyCaught(hint.originalException)) {
	            utils_1$n.logger.log(ALREADY_SEEN_ERROR);
	            return;
	        }
	        var eventId = hint && hint.event_id;
	        this._process(this._captureEvent(event, hint, scope).then(function (result) {
	            eventId = result;
	        }));
	        return eventId;
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.captureSession = function (session) {
	        if (!this._isEnabled()) {
	            if (utils_1$n.isDebugBuild()) {
	                utils_1$n.logger.warn('SDK not enabled, will not capture session.');
	            }
	            return;
	        }
	        if (!(typeof session.release === 'string')) {
	            if (utils_1$n.isDebugBuild()) {
	                utils_1$n.logger.warn('Discarded session because of missing or non-string release');
	            }
	        }
	        else {
	            this._sendSession(session);
	            // After sending, we set init false to indicate it's not the first occurrence
	            session.update({ init: false });
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.getDsn = function () {
	        return this._dsn;
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.getOptions = function () {
	        return this._options;
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.getTransport = function () {
	        return this._getBackend().getTransport();
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.flush = function (timeout) {
	        var _this = this;
	        return this._isClientDoneProcessing(timeout).then(function (clientFinished) {
	            return _this.getTransport()
	                .close(timeout)
	                .then(function (transportFlushed) { return clientFinished && transportFlushed; });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.close = function (timeout) {
	        var _this = this;
	        return this.flush(timeout).then(function (result) {
	            _this.getOptions().enabled = false;
	            return result;
	        });
	    };
	    /**
	     * Sets up the integrations
	     */
	    BaseClient.prototype.setupIntegrations = function () {
	        if (this._isEnabled() && !this._integrations.initialized) {
	            this._integrations = integration_1.setupIntegrations(this._options);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.getIntegration = function (integration) {
	        try {
	            return this._integrations[integration.id] || null;
	        }
	        catch (_oO) {
	            utils_1$n.logger.warn("Cannot retrieve integration " + integration.id + " from the current Client");
	            return null;
	        }
	    };
	    /** Updates existing session based on the provided event */
	    BaseClient.prototype._updateSessionFromEvent = function (session, event) {
	        var e_1, _a;
	        var crashed = false;
	        var errored = false;
	        var exceptions = event.exception && event.exception.values;
	        if (exceptions) {
	            errored = true;
	            try {
	                for (var exceptions_1 = tslib_1$h.__values(exceptions), exceptions_1_1 = exceptions_1.next(); !exceptions_1_1.done; exceptions_1_1 = exceptions_1.next()) {
	                    var ex = exceptions_1_1.value;
	                    var mechanism = ex.mechanism;
	                    if (mechanism && mechanism.handled === false) {
	                        crashed = true;
	                        break;
	                    }
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return)) _a.call(exceptions_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }
	        // A session is updated and that session update is sent in only one of the two following scenarios:
	        // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update
	        // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update
	        var sessionNonTerminal = session.status === 'ok';
	        var shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);
	        if (shouldUpdateAndSend) {
	            session.update(tslib_1$h.__assign(tslib_1$h.__assign({}, (crashed && { status: 'crashed' })), { errors: session.errors || Number(errored || crashed) }));
	            this.captureSession(session);
	        }
	    };
	    /** Deliver captured session to Sentry */
	    BaseClient.prototype._sendSession = function (session) {
	        this._getBackend().sendSession(session);
	    };
	    /**
	     * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying
	     * "no" (resolving to `false`) in order to give the client a chance to potentially finish first.
	     *
	     * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not
	     * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to
	     * `true`.
	     * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and
	     * `false` otherwise
	     */
	    BaseClient.prototype._isClientDoneProcessing = function (timeout) {
	        var _this = this;
	        return new utils_1$n.SyncPromise(function (resolve) {
	            var ticked = 0;
	            var tick = 1;
	            var interval = setInterval(function () {
	                if (_this._numProcessing == 0) {
	                    clearInterval(interval);
	                    resolve(true);
	                }
	                else {
	                    ticked += tick;
	                    if (timeout && ticked >= timeout) {
	                        clearInterval(interval);
	                        resolve(false);
	                    }
	                }
	            }, tick);
	        });
	    };
	    /** Returns the current backend. */
	    BaseClient.prototype._getBackend = function () {
	        return this._backend;
	    };
	    /** Determines whether this SDK is enabled and a valid Dsn is present. */
	    BaseClient.prototype._isEnabled = function () {
	        return this.getOptions().enabled !== false && this._dsn !== undefined;
	    };
	    /**
	     * Adds common information to events.
	     *
	     * The information includes release and environment from `options`,
	     * breadcrumbs and context (extra, tags and user) from the scope.
	     *
	     * Information that is already present in the event is never overwritten. For
	     * nested objects, such as the context, keys are merged.
	     *
	     * @param event The original event.
	     * @param hint May contain additional information about the original exception.
	     * @param scope A scope containing event metadata.
	     * @returns A new event with more information.
	     */
	    BaseClient.prototype._prepareEvent = function (event, scope, hint) {
	        var _this = this;
	        var _a = this.getOptions().normalizeDepth, normalizeDepth = _a === void 0 ? 3 : _a;
	        var prepared = tslib_1$h.__assign(tslib_1$h.__assign({}, event), { event_id: event.event_id || (hint && hint.event_id ? hint.event_id : utils_1$n.uuid4()), timestamp: event.timestamp || utils_1$n.dateTimestampInSeconds() });
	        this._applyClientOptions(prepared);
	        this._applyIntegrationsMetadata(prepared);
	        // If we have scope given to us, use it as the base for further modifications.
	        // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.
	        var finalScope = scope;
	        if (hint && hint.captureContext) {
	            finalScope = hub_1$3.Scope.clone(finalScope).update(hint.captureContext);
	        }
	        // We prepare the result here with a resolved Event.
	        var result = utils_1$n.resolvedSyncPromise(prepared);
	        // This should be the last thing called, since we want that
	        // {@link Hub.addEventProcessor} gets the finished prepared event.
	        if (finalScope) {
	            // In case we have a hub we reassign it.
	            result = finalScope.applyToEvent(prepared, hint);
	        }
	        return result.then(function (evt) {
	            if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {
	                return _this._normalizeEvent(evt, normalizeDepth);
	            }
	            return evt;
	        });
	    };
	    /**
	     * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.
	     * Normalized keys:
	     * - `breadcrumbs.data`
	     * - `user`
	     * - `contexts`
	     * - `extra`
	     * @param event Event
	     * @returns Normalized event
	     */
	    BaseClient.prototype._normalizeEvent = function (event, depth) {
	        if (!event) {
	            return null;
	        }
	        var normalized = tslib_1$h.__assign(tslib_1$h.__assign(tslib_1$h.__assign(tslib_1$h.__assign(tslib_1$h.__assign({}, event), (event.breadcrumbs && {
	            breadcrumbs: event.breadcrumbs.map(function (b) { return (tslib_1$h.__assign(tslib_1$h.__assign({}, b), (b.data && {
	                data: utils_1$n.normalize(b.data, depth),
	            }))); }),
	        })), (event.user && {
	            user: utils_1$n.normalize(event.user, depth),
	        })), (event.contexts && {
	            contexts: utils_1$n.normalize(event.contexts, depth),
	        })), (event.extra && {
	            extra: utils_1$n.normalize(event.extra, depth),
	        }));
	        // event.contexts.trace stores information about a Transaction. Similarly,
	        // event.spans[] stores information about child Spans. Given that a
	        // Transaction is conceptually a Span, normalization should apply to both
	        // Transactions and Spans consistently.
	        // For now the decision is to skip normalization of Transactions and Spans,
	        // so this block overwrites the normalized event to add back the original
	        // Transaction information prior to normalization.
	        if (event.contexts && event.contexts.trace) {
	            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	            normalized.contexts.trace = event.contexts.trace;
	        }
	        event.sdkProcessingMetadata = tslib_1$h.__assign(tslib_1$h.__assign({}, event.sdkProcessingMetadata), { baseClientNormalized: true });
	        return normalized;
	    };
	    /**
	     *  Enhances event using the client configuration.
	     *  It takes care of all "static" values like environment, release and `dist`,
	     *  as well as truncating overly long values.
	     * @param event event instance to be enhanced
	     */
	    BaseClient.prototype._applyClientOptions = function (event) {
	        var options = this.getOptions();
	        var environment = options.environment, release = options.release, dist = options.dist, _a = options.maxValueLength, maxValueLength = _a === void 0 ? 250 : _a;
	        if (!('environment' in event)) {
	            event.environment = 'environment' in options ? environment : 'production';
	        }
	        if (event.release === undefined && release !== undefined) {
	            event.release = release;
	        }
	        if (event.dist === undefined && dist !== undefined) {
	            event.dist = dist;
	        }
	        if (event.message) {
	            event.message = utils_1$n.truncate(event.message, maxValueLength);
	        }
	        var exception = event.exception && event.exception.values && event.exception.values[0];
	        if (exception && exception.value) {
	            exception.value = utils_1$n.truncate(exception.value, maxValueLength);
	        }
	        var request = event.request;
	        if (request && request.url) {
	            request.url = utils_1$n.truncate(request.url, maxValueLength);
	        }
	    };
	    /**
	     * This function adds all used integrations to the SDK info in the event.
	     * @param event The event that will be filled with all integrations.
	     */
	    BaseClient.prototype._applyIntegrationsMetadata = function (event) {
	        var integrationsArray = Object.keys(this._integrations);
	        if (integrationsArray.length > 0) {
	            event.sdk = event.sdk || {};
	            event.sdk.integrations = tslib_1$h.__spread((event.sdk.integrations || []), integrationsArray);
	        }
	    };
	    /**
	     * Tells the backend to send this event
	     * @param event The Sentry event to send
	     */
	    BaseClient.prototype._sendEvent = function (event) {
	        this._getBackend().sendEvent(event);
	    };
	    /**
	     * Processes the event and logs an error in case of rejection
	     * @param event
	     * @param hint
	     * @param scope
	     */
	    BaseClient.prototype._captureEvent = function (event, hint, scope) {
	        return this._processEvent(event, hint, scope).then(function (finalEvent) {
	            return finalEvent.event_id;
	        }, function (reason) {
	            utils_1$n.logger.error(reason);
	            return undefined;
	        });
	    };
	    /**
	     * Processes an event (either error or message) and sends it to Sentry.
	     *
	     * This also adds breadcrumbs and context information to the event. However,
	     * platform specific meta data (such as the User's IP address) must be added
	     * by the SDK implementor.
	     *
	     *
	     * @param event The event to send to Sentry.
	     * @param hint May contain additional information about the original exception.
	     * @param scope A scope containing event metadata.
	     * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.
	     */
	    BaseClient.prototype._processEvent = function (event, hint, scope) {
	        var _this = this;
	        // eslint-disable-next-line @typescript-eslint/unbound-method
	        var _a = this.getOptions(), beforeSend = _a.beforeSend, sampleRate = _a.sampleRate;
	        var transport = this.getTransport();
	        function recordLostEvent(outcome, category) {
	            if (transport.recordLostEvent) {
	                transport.recordLostEvent(outcome, category);
	            }
	        }
	        if (!this._isEnabled()) {
	            return utils_1$n.rejectedSyncPromise(new utils_1$n.SentryError('SDK not enabled, will not capture event.'));
	        }
	        var isTransaction = event.type === 'transaction';
	        // 1.0 === 100% events are sent
	        // 0.0 === 0% events are sent
	        // Sampling for transaction happens somewhere else
	        if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {
	            recordLostEvent('sample_rate', 'event');
	            return utils_1$n.rejectedSyncPromise(new utils_1$n.SentryError("Discarding event because it's not included in the random sample (sampling rate = " + sampleRate + ")"));
	        }
	        return this._prepareEvent(event, scope, hint)
	            .then(function (prepared) {
	            if (prepared === null) {
	                recordLostEvent('event_processor', event.type || 'event');
	                throw new utils_1$n.SentryError('An event processor returned null, will not send event.');
	            }
	            var isInternalException = hint && hint.data && hint.data.__sentry__ === true;
	            if (isInternalException || isTransaction || !beforeSend) {
	                return prepared;
	            }
	            var beforeSendResult = beforeSend(prepared, hint);
	            return _ensureBeforeSendRv(beforeSendResult);
	        })
	            .then(function (processedEvent) {
	            if (processedEvent === null) {
	                recordLostEvent('before_send', event.type || 'event');
	                throw new utils_1$n.SentryError('`beforeSend` returned `null`, will not send event.');
	            }
	            var session = scope && scope.getSession && scope.getSession();
	            if (!isTransaction && session) {
	                _this._updateSessionFromEvent(session, processedEvent);
	            }
	            _this._sendEvent(processedEvent);
	            return processedEvent;
	        })
	            .then(null, function (reason) {
	            if (reason instanceof utils_1$n.SentryError) {
	                throw reason;
	            }
	            _this.captureException(reason, {
	                data: {
	                    __sentry__: true,
	                },
	                originalException: reason,
	            });
	            throw new utils_1$n.SentryError("Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: " + reason);
	        });
	    };
	    /**
	     * Occupies the client with processing and event
	     */
	    BaseClient.prototype._process = function (promise) {
	        var _this = this;
	        this._numProcessing += 1;
	        void promise.then(function (value) {
	            _this._numProcessing -= 1;
	            return value;
	        }, function (reason) {
	            _this._numProcessing -= 1;
	            return reason;
	        });
	    };
	    return BaseClient;
	}());
	baseclient.BaseClient = BaseClient;
	/**
	 * Verifies that return value of configured `beforeSend` is of expected type.
	 */
	function _ensureBeforeSendRv(rv) {
	    var nullErr = '`beforeSend` method has to return `null` or a valid event.';
	    if (utils_1$n.isThenable(rv)) {
	        return rv.then(function (event) {
	            if (!(utils_1$n.isPlainObject(event) || event === null)) {
	                throw new utils_1$n.SentryError(nullErr);
	            }
	            return event;
	        }, function (e) {
	            throw new utils_1$n.SentryError("beforeSend rejected with " + e);
	        });
	    }
	    else if (!(utils_1$n.isPlainObject(rv) || rv === null)) {
	        throw new utils_1$n.SentryError(nullErr);
	    }
	    return rv;
	}

	var basebackend = {};

	var noop = {};

	Object.defineProperty(noop, "__esModule", { value: true });
	var utils_1$m = dist$1;
	/** Noop transport */
	var NoopTransport = /** @class */ (function () {
	    function NoopTransport() {
	    }
	    /**
	     * @inheritDoc
	     */
	    NoopTransport.prototype.sendEvent = function (_) {
	        return utils_1$m.resolvedSyncPromise({
	            reason: "NoopTransport: Event has been skipped because no Dsn is configured.",
	            status: 'skipped',
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    NoopTransport.prototype.close = function (_) {
	        return utils_1$m.resolvedSyncPromise(true);
	    };
	    return NoopTransport;
	}());
	noop.NoopTransport = NoopTransport;

	Object.defineProperty(basebackend, "__esModule", { value: true });
	var utils_1$l = dist$1;
	var noop_1$1 = noop;
	/**
	 * This is the base implemention of a Backend.
	 * @hidden
	 */
	var BaseBackend = /** @class */ (function () {
	    /** Creates a new backend instance. */
	    function BaseBackend(options) {
	        this._options = options;
	        if (!this._options.dsn) {
	            utils_1$l.logger.warn('No DSN provided, backend will not do anything.');
	        }
	        this._transport = this._setupTransport();
	    }
	    /**
	     * @inheritDoc
	     */
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
	    BaseBackend.prototype.eventFromException = function (_exception, _hint) {
	        throw new utils_1$l.SentryError('Backend has to implement `eventFromException` method');
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseBackend.prototype.eventFromMessage = function (_message, _level, _hint) {
	        throw new utils_1$l.SentryError('Backend has to implement `eventFromMessage` method');
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseBackend.prototype.sendEvent = function (event) {
	        void this._transport.sendEvent(event).then(null, function (reason) {
	            if (utils_1$l.isDebugBuild()) {
	                utils_1$l.logger.error("Error while sending event: " + reason);
	            }
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseBackend.prototype.sendSession = function (session) {
	        if (!this._transport.sendSession) {
	            if (utils_1$l.isDebugBuild()) {
	                utils_1$l.logger.warn("Dropping session because custom transport doesn't implement sendSession");
	            }
	            return;
	        }
	        void this._transport.sendSession(session).then(null, function (reason) {
	            if (utils_1$l.isDebugBuild()) {
	                utils_1$l.logger.error("Error while sending session: " + reason);
	            }
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseBackend.prototype.getTransport = function () {
	        return this._transport;
	    };
	    /**
	     * Sets up the transport so it can be used later to send requests.
	     */
	    BaseBackend.prototype._setupTransport = function () {
	        return new noop_1$1.NoopTransport();
	    };
	    return BaseBackend;
	}());
	basebackend.BaseBackend = BaseBackend;

	var request = {};

	Object.defineProperty(request, "__esModule", { value: true });
	var tslib_1$g = require$$0;
	var utils_1$k = dist$1;
	var api_1$1 = api;
	/** Extract sdk info from from the API metadata */
	function getSdkMetadataForEnvelopeHeader(api) {
	    if (!api.metadata || !api.metadata.sdk) {
	        return;
	    }
	    var _a = api.metadata.sdk, name = _a.name, version = _a.version;
	    return { name: name, version: version };
	}
	/**
	 * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.
	 * Merge with existing data if any.
	 **/
	function enhanceEventWithSdkInfo(event, sdkInfo) {
	    if (!sdkInfo) {
	        return event;
	    }
	    event.sdk = event.sdk || {};
	    event.sdk.name = event.sdk.name || sdkInfo.name;
	    event.sdk.version = event.sdk.version || sdkInfo.version;
	    event.sdk.integrations = tslib_1$g.__spread((event.sdk.integrations || []), (sdkInfo.integrations || []));
	    event.sdk.packages = tslib_1$g.__spread((event.sdk.packages || []), (sdkInfo.packages || []));
	    return event;
	}
	/** Creates a SentryRequest from a Session. */
	function sessionToSentryRequest(session, api) {
	    var sdkInfo = getSdkMetadataForEnvelopeHeader(api);
	    var envelopeHeaders = JSON.stringify(tslib_1$g.__assign(tslib_1$g.__assign({ sent_at: new Date().toISOString() }, (sdkInfo && { sdk: sdkInfo })), (!!api.tunnel && { dsn: utils_1$k.dsnToString(api.dsn) })));
	    // I know this is hacky but we don't want to add `session` to request type since it's never rate limited
	    var type = 'aggregates' in session ? 'sessions' : 'session';
	    var itemHeaders = JSON.stringify({
	        type: type,
	    });
	    return {
	        body: envelopeHeaders + "\n" + itemHeaders + "\n" + JSON.stringify(session),
	        type: type,
	        url: api_1$1.getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel),
	    };
	}
	request.sessionToSentryRequest = sessionToSentryRequest;
	/** Creates a SentryRequest from an event. */
	function eventToSentryRequest(event, api) {
	    var sdkInfo = getSdkMetadataForEnvelopeHeader(api);
	    var eventType = event.type || 'event';
	    var useEnvelope = eventType === 'transaction' || !!api.tunnel;
	    var transactionSampling = (event.sdkProcessingMetadata || {}).transactionSampling;
	    var _a = transactionSampling || {}, samplingMethod = _a.method, sampleRate = _a.rate;
	    // TODO: Below is a temporary hack in order to debug a serialization error - see
	    // https://github.com/getsentry/sentry-javascript/issues/2809 and
	    // https://github.com/getsentry/sentry-javascript/pull/4425. TL;DR: even though we normalize all events (which should
	    // prevent this), something is causing `JSON.stringify` to throw a circular reference error.
	    //
	    // When it's time to remove it:
	    // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting
	    //    `sdkProcessingMetadata`
	    // 2. Restore the original version of the request body, which is commented out
	    // 3. Search for `skippedNormalization` and pull out the companion hack in the browser playwright tests
	    enhanceEventWithSdkInfo(event, api.metadata.sdk);
	    event.tags = event.tags || {};
	    event.extra = event.extra || {};
	    // In theory, all events should be marked as having gone through normalization and so
	    // we should never set this tag
	    if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {
	        event.tags.skippedNormalization = true;
	    }
	    // prevent this data from being sent to sentry
	    // TODO: This is NOT part of the hack - DO NOT DELETE
	    delete event.sdkProcessingMetadata;
	    var body;
	    try {
	        // 99.9% of events should get through just fine - no change in behavior for them
	        body = JSON.stringify(event);
	    }
	    catch (err) {
	        // Record data about the error without replacing original event data, then force renormalization
	        event.tags.JSONStringifyError = true;
	        event.extra.JSONStringifyError = err;
	        try {
	            body = JSON.stringify(utils_1$k.normalize(event));
	        }
	        catch (newErr) {
	            // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.
	            // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to
	            // debug with this hack, we won't ever land here.
	            var innerErr = newErr;
	            body = JSON.stringify({
	                message: 'JSON.stringify error after renormalization',
	                // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually
	                extra: { message: innerErr.message, stack: innerErr.stack },
	            });
	        }
	    }
	    var req = {
	        // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved
	        // the mystery
	        // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),
	        body: body,
	        type: eventType,
	        url: useEnvelope
	            ? api_1$1.getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)
	            : api_1$1.getStoreEndpointWithUrlEncodedAuth(api.dsn),
	    };
	    // https://develop.sentry.dev/sdk/envelopes/
	    // Since we don't need to manipulate envelopes nor store them, there is no
	    // exported concept of an Envelope with operations including serialization and
	    // deserialization. Instead, we only implement a minimal subset of the spec to
	    // serialize events inline here.
	    if (useEnvelope) {
	        var envelopeHeaders = JSON.stringify(tslib_1$g.__assign(tslib_1$g.__assign({ event_id: event.event_id, sent_at: new Date().toISOString() }, (sdkInfo && { sdk: sdkInfo })), (!!api.tunnel && { dsn: utils_1$k.dsnToString(api.dsn) })));
	        var itemHeaders = JSON.stringify({
	            type: eventType,
	            // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and
	            // explicitly-set sampling decisions). Are we good with that?
	            sample_rates: [{ id: samplingMethod, rate: sampleRate }],
	        });
	        // The trailing newline is optional. We intentionally don't send it to avoid
	        // sending unnecessary bytes.
	        //
	        // const envelope = `${envelopeHeaders}\n${itemHeaders}\n${req.body}\n`;
	        var envelope = envelopeHeaders + "\n" + itemHeaders + "\n" + req.body;
	        req.body = envelope;
	    }
	    return req;
	}
	request.eventToSentryRequest = eventToSentryRequest;

	var sdk$2 = {};

	Object.defineProperty(sdk$2, "__esModule", { value: true });
	var hub_1$2 = dist$2;
	var utils_1$j = dist$1;
	/**
	 * Internal function to create a new SDK client instance. The client is
	 * installed and then bound to the current scope.
	 *
	 * @param clientClass The client class to instantiate.
	 * @param options Options to pass to the client.
	 */
	function initAndBind(clientClass, options) {
	    if (options.debug === true) {
	        utils_1$j.logger.enable();
	    }
	    var hub = hub_1$2.getCurrentHub();
	    var scope = hub.getScope();
	    if (scope) {
	        scope.update(options.initialScope);
	    }
	    var client = new clientClass(options);
	    hub.bindClient(client);
	}
	sdk$2.initAndBind = initAndBind;

	var version$1 = {};

	Object.defineProperty(version$1, "__esModule", { value: true });
	version$1.SDK_VERSION = '6.17.4';

	var integrations$1 = {};

	var functiontostring = {};

	Object.defineProperty(functiontostring, "__esModule", { value: true });
	var utils_1$i = dist$1;
	var originalFunctionToString;
	/** Patch toString calls to return proper name for wrapped functions */
	var FunctionToString = /** @class */ (function () {
	    function FunctionToString() {
	        /**
	         * @inheritDoc
	         */
	        this.name = FunctionToString.id;
	    }
	    /**
	     * @inheritDoc
	     */
	    FunctionToString.prototype.setupOnce = function () {
	        // eslint-disable-next-line @typescript-eslint/unbound-method
	        originalFunctionToString = Function.prototype.toString;
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        Function.prototype.toString = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var context = utils_1$i.getOriginalFunction(this) || this;
	            return originalFunctionToString.apply(context, args);
	        };
	    };
	    /**
	     * @inheritDoc
	     */
	    FunctionToString.id = 'FunctionToString';
	    return FunctionToString;
	}());
	functiontostring.FunctionToString = FunctionToString;

	var inboundfilters = {};

	Object.defineProperty(inboundfilters, "__esModule", { value: true });
	var tslib_1$f = require$$0;
	var hub_1$1 = dist$2;
	var utils_1$h = dist$1;
	// "Script error." is hard coded into browsers for errors that it can't read.
	// this is the result of a script being pulled in from an external domain and CORS.
	var DEFAULT_IGNORE_ERRORS = [/^Script error\.?$/, /^Javascript error: Script error\.? on line 0$/];
	/** Inbound filters configurable by the user */
	var InboundFilters = /** @class */ (function () {
	    function InboundFilters(_options) {
	        if (_options === void 0) { _options = {}; }
	        this._options = _options;
	        /**
	         * @inheritDoc
	         */
	        this.name = InboundFilters.id;
	    }
	    /**
	     * @inheritDoc
	     */
	    InboundFilters.prototype.setupOnce = function () {
	        hub_1$1.addGlobalEventProcessor(function (event) {
	            var hub = hub_1$1.getCurrentHub();
	            if (!hub) {
	                return event;
	            }
	            var self = hub.getIntegration(InboundFilters);
	            if (self) {
	                var client = hub.getClient();
	                var clientOptions = client ? client.getOptions() : {};
	                // This checks prevents most of the occurrences of the bug linked below:
	                // https://github.com/getsentry/sentry-javascript/issues/2622
	                // The bug is caused by multiple SDK instances, where one is minified and one is using non-mangled code.
	                // Unfortunatelly we cannot fix it reliably (thus reserved property in rollup's terser config),
	                // as we cannot force people using multiple instances in their apps to sync SDK versions.
	                var options = typeof self._mergeOptions === 'function' ? self._mergeOptions(clientOptions) : {};
	                if (typeof self._shouldDropEvent !== 'function') {
	                    return event;
	                }
	                return self._shouldDropEvent(event, options) ? null : event;
	            }
	            return event;
	        });
	    };
	    /** JSDoc */
	    InboundFilters.prototype._shouldDropEvent = function (event, options) {
	        if (this._isSentryError(event, options)) {
	            if (utils_1$h.isDebugBuild()) {
	                utils_1$h.logger.warn("Event dropped due to being internal Sentry Error.\nEvent: " + utils_1$h.getEventDescription(event));
	            }
	            return true;
	        }
	        if (this._isIgnoredError(event, options)) {
	            if (utils_1$h.isDebugBuild()) {
	                utils_1$h.logger.warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: " + utils_1$h.getEventDescription(event));
	            }
	            return true;
	        }
	        if (this._isDeniedUrl(event, options)) {
	            if (utils_1$h.isDebugBuild()) {
	                utils_1$h.logger.warn("Event dropped due to being matched by `denyUrls` option.\nEvent: " + utils_1$h.getEventDescription(event) + ".\nUrl: " + this._getEventFilterUrl(event));
	            }
	            return true;
	        }
	        if (!this._isAllowedUrl(event, options)) {
	            if (utils_1$h.isDebugBuild()) {
	                utils_1$h.logger.warn("Event dropped due to not being matched by `allowUrls` option.\nEvent: " + utils_1$h.getEventDescription(event) + ".\nUrl: " + this._getEventFilterUrl(event));
	            }
	            return true;
	        }
	        return false;
	    };
	    /** JSDoc */
	    InboundFilters.prototype._isSentryError = function (event, options) {
	        if (!options.ignoreInternal) {
	            return false;
	        }
	        try {
	            // @ts-ignore can't be a sentry error if undefined
	            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	            return event.exception.values[0].type === 'SentryError';
	        }
	        catch (e) {
	            // ignore
	        }
	        return false;
	    };
	    /** JSDoc */
	    InboundFilters.prototype._isIgnoredError = function (event, options) {
	        if (!options.ignoreErrors || !options.ignoreErrors.length) {
	            return false;
	        }
	        return this._getPossibleEventMessages(event).some(function (message) {
	            // Not sure why TypeScript complains here...
	            return options.ignoreErrors.some(function (pattern) { return utils_1$h.isMatchingPattern(message, pattern); });
	        });
	    };
	    /** JSDoc */
	    InboundFilters.prototype._isDeniedUrl = function (event, options) {
	        // TODO: Use Glob instead?
	        if (!options.denyUrls || !options.denyUrls.length) {
	            return false;
	        }
	        var url = this._getEventFilterUrl(event);
	        return !url ? false : options.denyUrls.some(function (pattern) { return utils_1$h.isMatchingPattern(url, pattern); });
	    };
	    /** JSDoc */
	    InboundFilters.prototype._isAllowedUrl = function (event, options) {
	        // TODO: Use Glob instead?
	        if (!options.allowUrls || !options.allowUrls.length) {
	            return true;
	        }
	        var url = this._getEventFilterUrl(event);
	        return !url ? true : options.allowUrls.some(function (pattern) { return utils_1$h.isMatchingPattern(url, pattern); });
	    };
	    /** JSDoc */
	    InboundFilters.prototype._mergeOptions = function (clientOptions) {
	        if (clientOptions === void 0) { clientOptions = {}; }
	        return {
	            allowUrls: tslib_1$f.__spread((this._options.whitelistUrls || []), (this._options.allowUrls || []), (clientOptions.whitelistUrls || []), (clientOptions.allowUrls || [])),
	            denyUrls: tslib_1$f.__spread((this._options.blacklistUrls || []), (this._options.denyUrls || []), (clientOptions.blacklistUrls || []), (clientOptions.denyUrls || [])),
	            ignoreErrors: tslib_1$f.__spread((this._options.ignoreErrors || []), (clientOptions.ignoreErrors || []), DEFAULT_IGNORE_ERRORS),
	            ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,
	        };
	    };
	    /** JSDoc */
	    InboundFilters.prototype._getPossibleEventMessages = function (event) {
	        if (event.message) {
	            return [event.message];
	        }
	        if (event.exception) {
	            try {
	                var _a = (event.exception.values && event.exception.values[0]) || {}, _b = _a.type, type = _b === void 0 ? '' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;
	                return ["" + value, type + ": " + value];
	            }
	            catch (oO) {
	                if (utils_1$h.isDebugBuild()) {
	                    utils_1$h.logger.error("Cannot extract message for event " + utils_1$h.getEventDescription(event));
	                }
	                return [];
	            }
	        }
	        return [];
	    };
	    /** JSDoc */
	    InboundFilters.prototype._getLastValidUrl = function (frames) {
	        if (frames === void 0) { frames = []; }
	        for (var i = frames.length - 1; i >= 0; i--) {
	            var frame = frames[i];
	            if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {
	                return frame.filename || null;
	            }
	        }
	        return null;
	    };
	    /** JSDoc */
	    InboundFilters.prototype._getEventFilterUrl = function (event) {
	        try {
	            if (event.stacktrace) {
	                return this._getLastValidUrl(event.stacktrace.frames);
	            }
	            var frames_1;
	            try {
	                // @ts-ignore we only care about frames if the whole thing here is defined
	                frames_1 = event.exception.values[0].stacktrace.frames;
	            }
	            catch (e) {
	                // ignore
	            }
	            return frames_1 ? this._getLastValidUrl(frames_1) : null;
	        }
	        catch (oO) {
	            if (utils_1$h.isDebugBuild()) {
	                utils_1$h.logger.error("Cannot extract url for event " + utils_1$h.getEventDescription(event));
	            }
	            return null;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    InboundFilters.id = 'InboundFilters';
	    return InboundFilters;
	}());
	inboundfilters.InboundFilters = InboundFilters;

	Object.defineProperty(integrations$1, "__esModule", { value: true });
	var functiontostring_1 = functiontostring;
	integrations$1.FunctionToString = functiontostring_1.FunctionToString;
	var inboundfilters_1 = inboundfilters;
	integrations$1.InboundFilters = inboundfilters_1.InboundFilters;

	Object.defineProperty(dist$4, "__esModule", { value: true });
	var minimal_1$1 = dist$3;
	dist$4.addBreadcrumb = minimal_1$1.addBreadcrumb;
	dist$4.captureException = minimal_1$1.captureException;
	dist$4.captureEvent = minimal_1$1.captureEvent;
	dist$4.captureMessage = minimal_1$1.captureMessage;
	dist$4.configureScope = minimal_1$1.configureScope;
	dist$4.startTransaction = minimal_1$1.startTransaction;
	dist$4.setContext = minimal_1$1.setContext;
	dist$4.setExtra = minimal_1$1.setExtra;
	dist$4.setExtras = minimal_1$1.setExtras;
	dist$4.setTag = minimal_1$1.setTag;
	dist$4.setTags = minimal_1$1.setTags;
	dist$4.setUser = minimal_1$1.setUser;
	dist$4.withScope = minimal_1$1.withScope;
	var hub_1 = dist$2;
	dist$4.addGlobalEventProcessor = hub_1.addGlobalEventProcessor;
	dist$4.getCurrentHub = hub_1.getCurrentHub;
	dist$4.getHubFromCarrier = hub_1.getHubFromCarrier;
	dist$4.Hub = hub_1.Hub;
	dist$4.makeMain = hub_1.makeMain;
	dist$4.Scope = hub_1.Scope;
	var api_1 = api;
	// eslint-disable-next-line deprecation/deprecation
	dist$4.API = api_1.API;
	dist$4.getEnvelopeEndpointWithUrlEncodedAuth = api_1.getEnvelopeEndpointWithUrlEncodedAuth;
	dist$4.getStoreEndpointWithUrlEncodedAuth = api_1.getStoreEndpointWithUrlEncodedAuth;
	dist$4.getRequestHeaders = api_1.getRequestHeaders;
	dist$4.initAPIDetails = api_1.initAPIDetails;
	dist$4.getReportDialogEndpoint = api_1.getReportDialogEndpoint;
	var baseclient_1 = baseclient;
	dist$4.BaseClient = baseclient_1.BaseClient;
	var basebackend_1 = basebackend;
	dist$4.BaseBackend = basebackend_1.BaseBackend;
	var request_1 = request;
	dist$4.eventToSentryRequest = request_1.eventToSentryRequest;
	dist$4.sessionToSentryRequest = request_1.sessionToSentryRequest;
	var sdk_1$1 = sdk$2;
	dist$4.initAndBind = sdk_1$1.initAndBind;
	var noop_1 = noop;
	dist$4.NoopTransport = noop_1.NoopTransport;
	var version_1$1 = version$1;
	dist$4.SDK_VERSION = version_1$1.SDK_VERSION;
	var Integrations = integrations$1;
	dist$4.Integrations = Integrations;

	var client = {};

	var backend = {};

	var eventbuilder = {};

	var parsers = {};

	var tracekit = {};

	/**
	 * This was originally forked from https://github.com/occ/TraceKit, but has since been
	 * largely modified and is now maintained as part of Sentry JS SDK.
	 */

	Object.defineProperty(tracekit, "__esModule", { value: true });
	var tslib_1$e = require$$0;
	// global reference to slice
	var UNKNOWN_FUNCTION = '?';
	// Chromium based browsers: Chrome, Brave, new Opera, new Edge
	var chrome = /^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
	// gecko regex: `(?:bundle|\d+\.js)`: `bundle` is for react native, `\d+\.js` also but specifically for ram bundles because it
	// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js
	// We need this specific case for now because we want no other regex to match.
	var gecko = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i;
	var winjs = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
	var geckoEval = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
	var chromeEval = /\((\S*)(?::(\d+))(?::(\d+))\)/;
	// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108
	var reactMinifiedRegexp = /Minified React error #\d+;/i;
	/** JSDoc */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
	function computeStackTrace(ex) {
	    var stack = null;
	    var popSize = 0;
	    if (ex) {
	        if (typeof ex.framesToPop === 'number') {
	            popSize = ex.framesToPop;
	        }
	        else if (reactMinifiedRegexp.test(ex.message)) {
	            popSize = 1;
	        }
	    }
	    try {
	        // This must be tried first because Opera 10 *destroys*
	        // its stacktrace property if you try to access the stack
	        // property first!!
	        stack = computeStackTraceFromStacktraceProp(ex);
	        if (stack) {
	            return popFrames(stack, popSize);
	        }
	    }
	    catch (e) {
	        // no-empty
	    }
	    try {
	        stack = computeStackTraceFromStackProp(ex);
	        if (stack) {
	            return popFrames(stack, popSize);
	        }
	    }
	    catch (e) {
	        // no-empty
	    }
	    return {
	        message: extractMessage(ex),
	        name: ex && ex.name,
	        stack: [],
	        failed: true,
	    };
	}
	tracekit.computeStackTrace = computeStackTrace;
	/** JSDoc */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any, complexity
	function computeStackTraceFromStackProp(ex) {
	    var _a, _b;
	    if (!ex || !ex.stack) {
	        return null;
	    }
	    var stack = [];
	    var lines = ex.stack.split('\n');
	    var isEval;
	    var submatch;
	    var parts;
	    var element;
	    for (var i = 0; i < lines.length; ++i) {
	        if ((parts = chrome.exec(lines[i]))) {
	            var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line
	            isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line
	            if (isEval && (submatch = chromeEval.exec(parts[2]))) {
	                // throw out eval line/column and use top-most line/column number
	                parts[2] = submatch[1]; // url
	                parts[3] = submatch[2]; // line
	                parts[4] = submatch[3]; // column
	            }
	            // Arpad: Working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `
	            // prefix here seems like the quickest solution for now.
	            var url = parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2];
	            // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now
	            // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)
	            var func = parts[1] || UNKNOWN_FUNCTION;
	            _a = tslib_1$e.__read(extractSafariExtensionDetails(func, url), 2), func = _a[0], url = _a[1];
	            element = {
	                url: url,
	                func: func,
	                args: isNative ? [parts[2]] : [],
	                line: parts[3] ? +parts[3] : null,
	                column: parts[4] ? +parts[4] : null,
	            };
	        }
	        else if ((parts = winjs.exec(lines[i]))) {
	            element = {
	                url: parts[2],
	                func: parts[1] || UNKNOWN_FUNCTION,
	                args: [],
	                line: +parts[3],
	                column: parts[4] ? +parts[4] : null,
	            };
	        }
	        else if ((parts = gecko.exec(lines[i]))) {
	            isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
	            if (isEval && (submatch = geckoEval.exec(parts[3]))) {
	                // throw out eval line/column and use top-most line number
	                parts[1] = parts[1] || "eval";
	                parts[3] = submatch[1];
	                parts[4] = submatch[2];
	                parts[5] = ''; // no column when eval
	            }
	            else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {
	                // FireFox uses this awesome columnNumber property for its top frame
	                // Also note, Firefox's column number is 0-based and everything else expects 1-based,
	                // so adding 1
	                // NOTE: this hack doesn't work if top-most frame is eval
	                stack[0].column = ex.columnNumber + 1;
	            }
	            var url = parts[3];
	            var func = parts[1] || UNKNOWN_FUNCTION;
	            _b = tslib_1$e.__read(extractSafariExtensionDetails(func, url), 2), func = _b[0], url = _b[1];
	            element = {
	                url: url,
	                func: func,
	                args: parts[2] ? parts[2].split(',') : [],
	                line: parts[4] ? +parts[4] : null,
	                column: parts[5] ? +parts[5] : null,
	            };
	        }
	        else {
	            continue;
	        }
	        if (!element.func && element.line) {
	            element.func = UNKNOWN_FUNCTION;
	        }
	        stack.push(element);
	    }
	    if (!stack.length) {
	        return null;
	    }
	    return {
	        message: extractMessage(ex),
	        name: ex.name,
	        stack: stack,
	    };
	}
	/** JSDoc */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function computeStackTraceFromStacktraceProp(ex) {
	    if (!ex || !ex.stacktrace) {
	        return null;
	    }
	    // Access and store the stacktrace property before doing ANYTHING
	    // else to it because Opera is not very good at providing it
	    // reliably in other circumstances.
	    var stacktrace = ex.stacktrace;
	    var opera10Regex = / line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i;
	    var opera11Regex = / line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\((.*)\))? in (.*):\s*$/i;
	    var lines = stacktrace.split('\n');
	    var stack = [];
	    var parts;
	    for (var line = 0; line < lines.length; line += 2) {
	        var element = null;
	        if ((parts = opera10Regex.exec(lines[line]))) {
	            element = {
	                url: parts[2],
	                func: parts[3],
	                args: [],
	                line: +parts[1],
	                column: null,
	            };
	        }
	        else if ((parts = opera11Regex.exec(lines[line]))) {
	            element = {
	                url: parts[6],
	                func: parts[3] || parts[4],
	                args: parts[5] ? parts[5].split(',') : [],
	                line: +parts[1],
	                column: +parts[2],
	            };
	        }
	        if (element) {
	            if (!element.func && element.line) {
	                element.func = UNKNOWN_FUNCTION;
	            }
	            stack.push(element);
	        }
	    }
	    if (!stack.length) {
	        return null;
	    }
	    return {
	        message: extractMessage(ex),
	        name: ex.name,
	        stack: stack,
	    };
	}
	/**
	 * Safari web extensions, starting version unknown, can produce "frames-only" stacktraces.
	 * What it means, is that instead of format like:
	 *
	 * Error: wat
	 *   at function@url:row:col
	 *   at function@url:row:col
	 *   at function@url:row:col
	 *
	 * it produces something like:
	 *
	 *   function@url:row:col
	 *   function@url:row:col
	 *   function@url:row:col
	 *
	 * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.
	 * This function is extracted so that we can use it in both places without duplicating the logic.
	 * Unfortunatelly "just" changing RegExp is too complicated now and making it pass all tests
	 * and fix this case seems like an impossible, or at least way too time-consuming task.
	 */
	var extractSafariExtensionDetails = function (func, url) {
	    var isSafariExtension = func.indexOf('safari-extension') !== -1;
	    var isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;
	    return isSafariExtension || isSafariWebExtension
	        ? [
	            func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,
	            isSafariExtension ? "safari-extension:" + url : "safari-web-extension:" + url,
	        ]
	        : [func, url];
	};
	/** Remove N number of frames from the stack */
	function popFrames(stacktrace, popSize) {
	    try {
	        return tslib_1$e.__assign(tslib_1$e.__assign({}, stacktrace), { stack: stacktrace.stack.slice(popSize) });
	    }
	    catch (e) {
	        return stacktrace;
	    }
	}
	/**
	 * There are cases where stacktrace.message is an Event object
	 * https://github.com/getsentry/sentry-javascript/issues/1949
	 * In this specific case we try to extract stacktrace.message.error.message
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function extractMessage(ex) {
	    var message = ex && ex.message;
	    if (!message) {
	        return 'No error message';
	    }
	    if (message.error && typeof message.error.message === 'string') {
	        return message.error.message;
	    }
	    return message;
	}

	Object.defineProperty(parsers, "__esModule", { value: true });
	var utils_1$g = dist$1;
	var tracekit_1$2 = tracekit;
	var STACKTRACE_LIMIT = 50;
	/**
	 * This function creates an exception from an TraceKitStackTrace
	 * @param stacktrace TraceKitStackTrace that will be converted to an exception
	 * @hidden
	 */
	function exceptionFromStacktrace(stacktrace) {
	    var frames = prepareFramesForEvent(stacktrace.stack);
	    var exception = {
	        type: stacktrace.name,
	        value: stacktrace.message,
	    };
	    if (frames && frames.length) {
	        exception.stacktrace = { frames: frames };
	    }
	    if (exception.type === undefined && exception.value === '') {
	        exception.value = 'Unrecoverable error caught';
	    }
	    return exception;
	}
	parsers.exceptionFromStacktrace = exceptionFromStacktrace;
	/**
	 * @hidden
	 */
	function eventFromPlainObject(exception, syntheticException, rejection) {
	    var event = {
	        exception: {
	            values: [
	                {
	                    type: utils_1$g.isEvent(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',
	                    value: "Non-Error " + (rejection ? 'promise rejection' : 'exception') + " captured with keys: " + utils_1$g.extractExceptionKeysForMessage(exception),
	                },
	            ],
	        },
	        extra: {
	            __serialized__: utils_1$g.normalizeToSize(exception),
	        },
	    };
	    if (syntheticException) {
	        var stacktrace = tracekit_1$2.computeStackTrace(syntheticException);
	        var frames_1 = prepareFramesForEvent(stacktrace.stack);
	        event.stacktrace = {
	            frames: frames_1,
	        };
	    }
	    return event;
	}
	parsers.eventFromPlainObject = eventFromPlainObject;
	/**
	 * @hidden
	 */
	function eventFromStacktrace(stacktrace) {
	    var exception = exceptionFromStacktrace(stacktrace);
	    return {
	        exception: {
	            values: [exception],
	        },
	    };
	}
	parsers.eventFromStacktrace = eventFromStacktrace;
	/**
	 * @hidden
	 */
	function prepareFramesForEvent(stack) {
	    if (!stack || !stack.length) {
	        return [];
	    }
	    var localStack = stack;
	    var firstFrameFunction = localStack[0].func || '';
	    var lastFrameFunction = localStack[localStack.length - 1].func || '';
	    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)
	    if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {
	        localStack = localStack.slice(1);
	    }
	    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)
	    if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {
	        localStack = localStack.slice(0, -1);
	    }
	    // The frame where the crash happened, should be the last entry in the array
	    return localStack
	        .slice(0, STACKTRACE_LIMIT)
	        .map(function (frame) { return ({
	        colno: frame.column === null ? undefined : frame.column,
	        filename: frame.url || localStack[0].url,
	        function: frame.func || '?',
	        in_app: true,
	        lineno: frame.line === null ? undefined : frame.line,
	    }); })
	        .reverse();
	}
	parsers.prepareFramesForEvent = prepareFramesForEvent;

	Object.defineProperty(eventbuilder, "__esModule", { value: true });
	var tslib_1$d = require$$0;
	var types_1$4 = dist$5;
	var utils_1$f = dist$1;
	var parsers_1$1 = parsers;
	var tracekit_1$1 = tracekit;
	/**
	 * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.
	 * @hidden
	 */
	function eventFromException(options, exception, hint) {
	    var syntheticException = (hint && hint.syntheticException) || undefined;
	    var event = eventFromUnknownInput(exception, syntheticException, {
	        attachStacktrace: options.attachStacktrace,
	    });
	    utils_1$f.addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }
	    event.level = types_1$4.Severity.Error;
	    if (hint && hint.event_id) {
	        event.event_id = hint.event_id;
	    }
	    return utils_1$f.resolvedSyncPromise(event);
	}
	eventbuilder.eventFromException = eventFromException;
	/**
	 * Builds and Event from a Message
	 * @hidden
	 */
	function eventFromMessage(options, message, level, hint) {
	    if (level === void 0) { level = types_1$4.Severity.Info; }
	    var syntheticException = (hint && hint.syntheticException) || undefined;
	    var event = eventFromString(message, syntheticException, {
	        attachStacktrace: options.attachStacktrace,
	    });
	    event.level = level;
	    if (hint && hint.event_id) {
	        event.event_id = hint.event_id;
	    }
	    return utils_1$f.resolvedSyncPromise(event);
	}
	eventbuilder.eventFromMessage = eventFromMessage;
	/**
	 * @hidden
	 */
	function eventFromUnknownInput(exception, syntheticException, options) {
	    if (options === void 0) { options = {}; }
	    var event;
	    if (utils_1$f.isErrorEvent(exception) && exception.error) {
	        // If it is an ErrorEvent with `error` property, extract it to get actual Error
	        var errorEvent = exception;
	        // eslint-disable-next-line no-param-reassign
	        exception = errorEvent.error;
	        event = parsers_1$1.eventFromStacktrace(tracekit_1$1.computeStackTrace(exception));
	        return event;
	    }
	    // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name
	    // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be
	    // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.
	    //
	    // https://developer.mozilla.org/en-US/docs/Web/API/DOMError
	    // https://developer.mozilla.org/en-US/docs/Web/API/DOMException
	    // https://webidl.spec.whatwg.org/#es-DOMException-specialness
	    if (utils_1$f.isDOMError(exception) || utils_1$f.isDOMException(exception)) {
	        var domException = exception;
	        if ('stack' in exception) {
	            event = parsers_1$1.eventFromStacktrace(tracekit_1$1.computeStackTrace(exception));
	        }
	        else {
	            var name_1 = domException.name || (utils_1$f.isDOMError(domException) ? 'DOMError' : 'DOMException');
	            var message = domException.message ? name_1 + ": " + domException.message : name_1;
	            event = eventFromString(message, syntheticException, options);
	            utils_1$f.addExceptionTypeValue(event, message);
	        }
	        if ('code' in domException) {
	            event.tags = tslib_1$d.__assign(tslib_1$d.__assign({}, event.tags), { 'DOMException.code': "" + domException.code });
	        }
	        return event;
	    }
	    if (utils_1$f.isError(exception)) {
	        // we have a real Error object, do nothing
	        event = parsers_1$1.eventFromStacktrace(tracekit_1$1.computeStackTrace(exception));
	        return event;
	    }
	    if (utils_1$f.isPlainObject(exception) || utils_1$f.isEvent(exception)) {
	        // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize
	        // it manually. This will allow us to group events based on top-level keys which is much better than creating a new
	        // group on any key/value change.
	        var objectException = exception;
	        event = parsers_1$1.eventFromPlainObject(objectException, syntheticException, options.isRejection);
	        utils_1$f.addExceptionMechanism(event, {
	            synthetic: true,
	        });
	        return event;
	    }
	    // If none of previous checks were valid, then it means that it's not:
	    // - an instance of DOMError
	    // - an instance of DOMException
	    // - an instance of Event
	    // - an instance of Error
	    // - a valid ErrorEvent (one with an error property)
	    // - a plain Object
	    //
	    // So bail out and capture it as a simple message:
	    event = eventFromString(exception, syntheticException, options);
	    utils_1$f.addExceptionTypeValue(event, "" + exception, undefined);
	    utils_1$f.addExceptionMechanism(event, {
	        synthetic: true,
	    });
	    return event;
	}
	eventbuilder.eventFromUnknownInput = eventFromUnknownInput;
	/**
	 * @hidden
	 */
	function eventFromString(input, syntheticException, options) {
	    if (options === void 0) { options = {}; }
	    var event = {
	        message: input,
	    };
	    if (options.attachStacktrace && syntheticException) {
	        var stacktrace = tracekit_1$1.computeStackTrace(syntheticException);
	        var frames_1 = parsers_1$1.prepareFramesForEvent(stacktrace.stack);
	        event.stacktrace = {
	            frames: frames_1,
	        };
	    }
	    return event;
	}
	eventbuilder.eventFromString = eventFromString;

	var transports = {};

	var base = {};

	var utils = {};

	Object.defineProperty(utils, "__esModule", { value: true });
	var utils_1$e = dist$1;
	var global$6 = utils_1$e.getGlobalObject();
	var cachedFetchImpl;
	/**
	 * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.
	 * Whenever someone wraps the Fetch API and returns the wrong promise chain,
	 * this chain becomes orphaned and there is no possible way to capture it's rejections
	 * other than allowing it bubble up to this very handler. eg.
	 *
	 * const f = window.fetch;
	 * window.fetch = function () {
	 *   const p = f.apply(this, arguments);
	 *
	 *   p.then(function() {
	 *     console.log('hi.');
	 *   });
	 *
	 *   return p;
	 * }
	 *
	 * `p.then(function () { ... })` is producing a completely separate promise chain,
	 * however, what's returned is `p` - the result of original `fetch` call.
	 *
	 * This mean, that whenever we use the Fetch API to send our own requests, _and_
	 * some ad-blocker blocks it, this orphaned chain will _always_ reject,
	 * effectively causing another event to be captured.
	 * This makes a whole process become an infinite loop, which we need to somehow
	 * deal with, and break it in one way or another.
	 *
	 * To deal with this issue, we are making sure that we _always_ use the real
	 * browser Fetch API, instead of relying on what `window.fetch` exposes.
	 * The only downside to this would be missing our own requests as breadcrumbs,
	 * but because we are already not doing this, it should be just fine.
	 *
	 * Possible failed fetch error messages per-browser:
	 *
	 * Chrome:  Failed to fetch
	 * Edge:    Failed to Fetch
	 * Firefox: NetworkError when attempting to fetch resource
	 * Safari:  resource blocked by content blocker
	 */
	function getNativeFetchImplementation() {
	    if (cachedFetchImpl) {
	        return cachedFetchImpl;
	    }
	    /* eslint-disable @typescript-eslint/unbound-method */
	    // Fast path to avoid DOM I/O
	    if (utils_1$e.isNativeFetch(global$6.fetch)) {
	        return (cachedFetchImpl = global$6.fetch.bind(global$6));
	    }
	    var document = global$6.document;
	    var fetchImpl = global$6.fetch;
	    // eslint-disable-next-line deprecation/deprecation
	    if (document && typeof document.createElement === "function") {
	        try {
	            var sandbox = document.createElement('iframe');
	            sandbox.hidden = true;
	            document.head.appendChild(sandbox);
	            var contentWindow = sandbox.contentWindow;
	            if (contentWindow && contentWindow.fetch) {
	                fetchImpl = contentWindow.fetch;
	            }
	            document.head.removeChild(sandbox);
	        }
	        catch (e) {
	            if (utils_1$e.isDebugBuild()) {
	                utils_1$e.logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);
	            }
	        }
	    }
	    return (cachedFetchImpl = fetchImpl.bind(global$6));
	    /* eslint-enable @typescript-eslint/unbound-method */
	}
	utils.getNativeFetchImplementation = getNativeFetchImplementation;
	/**
	 * Sends sdk client report using sendBeacon or fetch as a fallback if available
	 *
	 * @param url report endpoint
	 * @param body report payload
	 */
	function sendReport(url, body) {
	    var isRealNavigator = Object.prototype.toString.call(global$6 && global$6.navigator) === '[object Navigator]';
	    var hasSendBeacon = isRealNavigator && typeof global$6.navigator.sendBeacon === 'function';
	    if (hasSendBeacon) {
	        // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch
	        var sendBeacon = global$6.navigator.sendBeacon.bind(global$6.navigator);
	        return sendBeacon(url, body);
	    }
	    if (utils_1$e.supportsFetch()) {
	        var fetch_1 = getNativeFetchImplementation();
	        return utils_1$e.forget(fetch_1(url, {
	            body: body,
	            method: 'POST',
	            credentials: 'omit',
	            keepalive: true,
	        }));
	    }
	}
	utils.sendReport = sendReport;

	Object.defineProperty(base, "__esModule", { value: true });
	var tslib_1$c = require$$0;
	var core_1$8 = dist$4;
	var utils_1$d = dist$1;
	var utils_2$1 = utils;
	function requestTypeToCategory(ty) {
	    var tyStr = ty;
	    return tyStr === 'event' ? 'error' : tyStr;
	}
	var global$5 = utils_1$d.getGlobalObject();
	/** Base Transport class implementation */
	var BaseTransport = /** @class */ (function () {
	    function BaseTransport(options) {
	        var _this = this;
	        this.options = options;
	        /** A simple buffer holding all requests. */
	        this._buffer = utils_1$d.makePromiseBuffer(30);
	        /** Locks transport after receiving rate limits in a response */
	        this._rateLimits = {};
	        this._outcomes = {};
	        this._api = core_1$8.initAPIDetails(options.dsn, options._metadata, options.tunnel);
	        // eslint-disable-next-line deprecation/deprecation
	        this.url = core_1$8.getStoreEndpointWithUrlEncodedAuth(this._api.dsn);
	        if (this.options.sendClientReports && global$5.document) {
	            global$5.document.addEventListener('visibilitychange', function () {
	                if (global$5.document.visibilityState === 'hidden') {
	                    _this._flushOutcomes();
	                }
	            });
	        }
	    }
	    /**
	     * @inheritDoc
	     */
	    BaseTransport.prototype.sendEvent = function (event) {
	        return this._sendRequest(core_1$8.eventToSentryRequest(event, this._api), event);
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseTransport.prototype.sendSession = function (session) {
	        return this._sendRequest(core_1$8.sessionToSentryRequest(session, this._api), session);
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseTransport.prototype.close = function (timeout) {
	        return this._buffer.drain(timeout);
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseTransport.prototype.recordLostEvent = function (reason, category) {
	        var _a;
	        if (!this.options.sendClientReports) {
	            return;
	        }
	        // We want to track each category (event, transaction, session) separately
	        // but still keep the distinction between different type of outcomes.
	        // We could use nested maps, but it's much easier to read and type this way.
	        // A correct type for map-based implementation if we want to go that route
	        // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`
	        var key = requestTypeToCategory(category) + ":" + reason;
	        utils_1$d.logger.log("Adding outcome: " + key);
	        this._outcomes[key] = (_a = this._outcomes[key], (_a !== null && _a !== void 0 ? _a : 0)) + 1;
	    };
	    /**
	     * Send outcomes as an envelope
	     */
	    BaseTransport.prototype._flushOutcomes = function () {
	        if (!this.options.sendClientReports) {
	            return;
	        }
	        var outcomes = this._outcomes;
	        this._outcomes = {};
	        // Nothing to send
	        if (!Object.keys(outcomes).length) {
	            utils_1$d.logger.log('No outcomes to flush');
	            return;
	        }
	        utils_1$d.logger.log("Flushing outcomes:\n" + JSON.stringify(outcomes, null, 2));
	        var url = core_1$8.getEnvelopeEndpointWithUrlEncodedAuth(this._api.dsn, this._api.tunnel);
	        // Envelope header is required to be at least an empty object
	        var envelopeHeader = JSON.stringify(tslib_1$c.__assign({}, (this._api.tunnel && { dsn: utils_1$d.dsnToString(this._api.dsn) })));
	        var itemHeaders = JSON.stringify({
	            type: 'client_report',
	        });
	        var item = JSON.stringify({
	            timestamp: utils_1$d.dateTimestampInSeconds(),
	            discarded_events: Object.keys(outcomes).map(function (key) {
	                var _a = tslib_1$c.__read(key.split(':'), 2), category = _a[0], reason = _a[1];
	                return {
	                    reason: reason,
	                    category: category,
	                    quantity: outcomes[key],
	                };
	            }),
	        });
	        var envelope = envelopeHeader + "\n" + itemHeaders + "\n" + item;
	        try {
	            utils_2$1.sendReport(url, envelope);
	        }
	        catch (e) {
	            utils_1$d.logger.error(e);
	        }
	    };
	    /**
	     * Handle Sentry repsonse for promise-based transports.
	     */
	    BaseTransport.prototype._handleResponse = function (_a) {
	        var requestType = _a.requestType, response = _a.response, headers = _a.headers, resolve = _a.resolve, reject = _a.reject;
	        var status = utils_1$d.eventStatusFromHttpCode(response.status);
	        /**
	         * "The name is case-insensitive."
	         * https://developer.mozilla.org/en-US/docs/Web/API/Headers/get
	         */
	        var limited = this._handleRateLimit(headers);
	        if (limited && utils_1$d.isDebugBuild()) {
	            utils_1$d.logger.warn("Too many " + requestType + " requests, backing off until: " + this._disabledUntil(requestType));
	        }
	        if (status === 'success') {
	            resolve({ status: status });
	            return;
	        }
	        reject(response);
	    };
	    /**
	     * Gets the time that given category is disabled until for rate limiting
	     */
	    BaseTransport.prototype._disabledUntil = function (requestType) {
	        var category = requestTypeToCategory(requestType);
	        return this._rateLimits[category] || this._rateLimits.all;
	    };
	    /**
	     * Checks if a category is rate limited
	     */
	    BaseTransport.prototype._isRateLimited = function (requestType) {
	        return this._disabledUntil(requestType) > new Date(Date.now());
	    };
	    /**
	     * Sets internal _rateLimits from incoming headers. Returns true if headers contains a non-empty rate limiting header.
	     */
	    BaseTransport.prototype._handleRateLimit = function (headers) {
	        var e_1, _a, e_2, _b;
	        var now = Date.now();
	        var rlHeader = headers['x-sentry-rate-limits'];
	        var raHeader = headers['retry-after'];
	        if (rlHeader) {
	            try {
	                // rate limit headers are of the form
	                //     <header>,<header>,..
	                // where each <header> is of the form
	                //     <retry_after>: <categories>: <scope>: <reason_code>
	                // where
	                //     <retry_after> is a delay in ms
	                //     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form
	                //         <category>;<category>;...
	                //     <scope> is what's being limited (org, project, or key) - ignored by SDK
	                //     <reason_code> is an arbitrary string like "org_quota" - ignored by SDK
	                for (var _c = tslib_1$c.__values(rlHeader.trim().split(',')), _d = _c.next(); !_d.done; _d = _c.next()) {
	                    var limit = _d.value;
	                    var parameters = limit.split(':', 2);
	                    var headerDelay = parseInt(parameters[0], 10);
	                    var delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default
	                    try {
	                        for (var _e = (e_2 = void 0, tslib_1$c.__values(parameters[1].split(';'))), _f = _e.next(); !_f.done; _f = _e.next()) {
	                            var category = _f.value;
	                            this._rateLimits[category || 'all'] = new Date(now + delay);
	                        }
	                    }
	                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                    finally {
	                        try {
	                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
	                        }
	                        finally { if (e_2) throw e_2.error; }
	                    }
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            return true;
	        }
	        else if (raHeader) {
	            this._rateLimits.all = new Date(now + utils_1$d.parseRetryAfterHeader(now, raHeader));
	            return true;
	        }
	        return false;
	    };
	    return BaseTransport;
	}());
	base.BaseTransport = BaseTransport;

	var fetch = {};

	Object.defineProperty(fetch, "__esModule", { value: true });
	var tslib_1$b = require$$0;
	var utils_1$c = dist$1;
	var base_1$2 = base;
	var utils_2 = utils;
	/** `fetch` based transport */
	var FetchTransport = /** @class */ (function (_super) {
	    tslib_1$b.__extends(FetchTransport, _super);
	    function FetchTransport(options, fetchImpl) {
	        if (fetchImpl === void 0) { fetchImpl = utils_2.getNativeFetchImplementation(); }
	        var _this = _super.call(this, options) || this;
	        _this._fetch = fetchImpl;
	        return _this;
	    }
	    /**
	     * @param sentryRequest Prepared SentryRequest to be delivered
	     * @param originalPayload Original payload used to create SentryRequest
	     */
	    FetchTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {
	        var _this = this;
	        if (this._isRateLimited(sentryRequest.type)) {
	            this.recordLostEvent('ratelimit_backoff', sentryRequest.type);
	            return Promise.reject({
	                event: originalPayload,
	                type: sentryRequest.type,
	                reason: "Transport for " + sentryRequest.type + " requests locked till " + this._disabledUntil(sentryRequest.type) + " due to too many requests.",
	                status: 429,
	            });
	        }
	        var options = {
	            body: sentryRequest.body,
	            method: 'POST',
	            // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'
	            // (see https://caniuse.com/#feat=referrer-policy),
	            // it doesn't. And it throws an exception instead of ignoring this parameter...
	            // REF: https://github.com/getsentry/raven-js/issues/1233
	            referrerPolicy: (utils_1$c.supportsReferrerPolicy() ? 'origin' : ''),
	        };
	        if (this.options.fetchParameters !== undefined) {
	            Object.assign(options, this.options.fetchParameters);
	        }
	        if (this.options.headers !== undefined) {
	            options.headers = this.options.headers;
	        }
	        return this._buffer
	            .add(function () {
	            return new utils_1$c.SyncPromise(function (resolve, reject) {
	                void _this._fetch(sentryRequest.url, options)
	                    .then(function (response) {
	                    var headers = {
	                        'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),
	                        'retry-after': response.headers.get('Retry-After'),
	                    };
	                    _this._handleResponse({
	                        requestType: sentryRequest.type,
	                        response: response,
	                        headers: headers,
	                        resolve: resolve,
	                        reject: reject,
	                    });
	                })
	                    .catch(reject);
	            });
	        })
	            .then(undefined, function (reason) {
	            // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.
	            if (reason instanceof utils_1$c.SentryError) {
	                _this.recordLostEvent('queue_overflow', sentryRequest.type);
	            }
	            else {
	                _this.recordLostEvent('network_error', sentryRequest.type);
	            }
	            throw reason;
	        });
	    };
	    return FetchTransport;
	}(base_1$2.BaseTransport));
	fetch.FetchTransport = FetchTransport;

	var xhr = {};

	Object.defineProperty(xhr, "__esModule", { value: true });
	var tslib_1$a = require$$0;
	var utils_1$b = dist$1;
	var base_1$1 = base;
	/** `XHR` based transport */
	var XHRTransport = /** @class */ (function (_super) {
	    tslib_1$a.__extends(XHRTransport, _super);
	    function XHRTransport() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param sentryRequest Prepared SentryRequest to be delivered
	     * @param originalPayload Original payload used to create SentryRequest
	     */
	    XHRTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {
	        var _this = this;
	        if (this._isRateLimited(sentryRequest.type)) {
	            this.recordLostEvent('ratelimit_backoff', sentryRequest.type);
	            return Promise.reject({
	                event: originalPayload,
	                type: sentryRequest.type,
	                reason: "Transport for " + sentryRequest.type + " requests locked till " + this._disabledUntil(sentryRequest.type) + " due to too many requests.",
	                status: 429,
	            });
	        }
	        return this._buffer
	            .add(function () {
	            return new utils_1$b.SyncPromise(function (resolve, reject) {
	                var request = new XMLHttpRequest();
	                request.onreadystatechange = function () {
	                    if (request.readyState === 4) {
	                        var headers = {
	                            'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),
	                            'retry-after': request.getResponseHeader('Retry-After'),
	                        };
	                        _this._handleResponse({ requestType: sentryRequest.type, response: request, headers: headers, resolve: resolve, reject: reject });
	                    }
	                };
	                request.open('POST', sentryRequest.url);
	                for (var header in _this.options.headers) {
	                    if (Object.prototype.hasOwnProperty.call(_this.options.headers, header)) {
	                        request.setRequestHeader(header, _this.options.headers[header]);
	                    }
	                }
	                request.send(sentryRequest.body);
	            });
	        })
	            .then(undefined, function (reason) {
	            // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.
	            if (reason instanceof utils_1$b.SentryError) {
	                _this.recordLostEvent('queue_overflow', sentryRequest.type);
	            }
	            else {
	                _this.recordLostEvent('network_error', sentryRequest.type);
	            }
	            throw reason;
	        });
	    };
	    return XHRTransport;
	}(base_1$1.BaseTransport));
	xhr.XHRTransport = XHRTransport;

	Object.defineProperty(transports, "__esModule", { value: true });
	var base_1 = base;
	transports.BaseTransport = base_1.BaseTransport;
	var fetch_1 = fetch;
	transports.FetchTransport = fetch_1.FetchTransport;
	var xhr_1 = xhr;
	transports.XHRTransport = xhr_1.XHRTransport;

	Object.defineProperty(backend, "__esModule", { value: true });
	var tslib_1$9 = require$$0;
	var core_1$7 = dist$4;
	var types_1$3 = dist$5;
	var utils_1$a = dist$1;
	var eventbuilder_1$2 = eventbuilder;
	var transports_1 = transports;
	/**
	 * The Sentry Browser SDK Backend.
	 * @hidden
	 */
	var BrowserBackend = /** @class */ (function (_super) {
	    tslib_1$9.__extends(BrowserBackend, _super);
	    function BrowserBackend() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @inheritDoc
	     */
	    BrowserBackend.prototype.eventFromException = function (exception, hint) {
	        return eventbuilder_1$2.eventFromException(this._options, exception, hint);
	    };
	    /**
	     * @inheritDoc
	     */
	    BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {
	        if (level === void 0) { level = types_1$3.Severity.Info; }
	        return eventbuilder_1$2.eventFromMessage(this._options, message, level, hint);
	    };
	    /**
	     * @inheritDoc
	     */
	    BrowserBackend.prototype._setupTransport = function () {
	        if (!this._options.dsn) {
	            // We return the noop transport here in case there is no Dsn.
	            return _super.prototype._setupTransport.call(this);
	        }
	        var transportOptions = tslib_1$9.__assign(tslib_1$9.__assign({}, this._options.transportOptions), { dsn: this._options.dsn, tunnel: this._options.tunnel, sendClientReports: this._options.sendClientReports, _metadata: this._options._metadata });
	        if (this._options.transport) {
	            return new this._options.transport(transportOptions);
	        }
	        if (utils_1$a.supportsFetch()) {
	            return new transports_1.FetchTransport(transportOptions);
	        }
	        return new transports_1.XHRTransport(transportOptions);
	    };
	    return BrowserBackend;
	}(core_1$7.BaseBackend));
	backend.BrowserBackend = BrowserBackend;

	var helpers = {};

	Object.defineProperty(helpers, "__esModule", { value: true });
	var tslib_1$8 = require$$0;
	var core_1$6 = dist$4;
	var utils_1$9 = dist$1;
	var global$4 = utils_1$9.getGlobalObject();
	var ignoreOnError = 0;
	/**
	 * @hidden
	 */
	function shouldIgnoreOnError() {
	    return ignoreOnError > 0;
	}
	helpers.shouldIgnoreOnError = shouldIgnoreOnError;
	/**
	 * @hidden
	 */
	function ignoreNextOnError() {
	    // onerror should trigger before setTimeout
	    ignoreOnError += 1;
	    setTimeout(function () {
	        ignoreOnError -= 1;
	    });
	}
	helpers.ignoreNextOnError = ignoreNextOnError;
	/**
	 * Instruments the given function and sends an event to Sentry every time the
	 * function throws an exception.
	 *
	 * @param fn A function to wrap.
	 * @returns The wrapped function.
	 * @hidden
	 */
	function wrap(fn, options, before) {
	    // for future readers what this does is wrap a function and then create
	    // a bi-directional wrapping between them.
	    //
	    // example: wrapped = wrap(original);
	    //  original.__sentry_wrapped__ -> wrapped
	    //  wrapped.__sentry_original__ -> original
	    if (options === void 0) { options = {}; }
	    if (typeof fn !== 'function') {
	        return fn;
	    }
	    try {
	        // if we're dealing with a function that was previously wrapped, return
	        // the original wrapper.
	        var wrapper = fn.__sentry_wrapped__;
	        if (wrapper) {
	            return wrapper;
	        }
	        // We don't wanna wrap it twice
	        if (utils_1$9.getOriginalFunction(fn)) {
	            return fn;
	        }
	    }
	    catch (e) {
	        // Just accessing custom props in some Selenium environments
	        // can cause a "Permission denied" exception (see raven-js#495).
	        // Bail on wrapping and return the function as-is (defers to window.onerror).
	        return fn;
	    }
	    /* eslint-disable prefer-rest-params */
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    var sentryWrapped = function () {
	        var args = Array.prototype.slice.call(arguments);
	        try {
	            if (before && typeof before === 'function') {
	                before.apply(this, arguments);
	            }
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access
	            var wrappedArguments = args.map(function (arg) { return wrap(arg, options); });
	            // Attempt to invoke user-land function
	            // NOTE: If you are a Sentry user, and you are seeing this stack frame, it
	            //       means the sentry.javascript SDK caught an error invoking your application code. This
	            //       is expected behavior and NOT indicative of a bug with sentry.javascript.
	            return fn.apply(this, wrappedArguments);
	        }
	        catch (ex) {
	            ignoreNextOnError();
	            core_1$6.withScope(function (scope) {
	                scope.addEventProcessor(function (event) {
	                    if (options.mechanism) {
	                        utils_1$9.addExceptionTypeValue(event, undefined, undefined);
	                        utils_1$9.addExceptionMechanism(event, options.mechanism);
	                    }
	                    event.extra = tslib_1$8.__assign(tslib_1$8.__assign({}, event.extra), { arguments: args });
	                    return event;
	                });
	                core_1$6.captureException(ex);
	            });
	            throw ex;
	        }
	    };
	    /* eslint-enable prefer-rest-params */
	    // Accessing some objects may throw
	    // ref: https://github.com/getsentry/sentry-javascript/issues/1168
	    try {
	        for (var property in fn) {
	            if (Object.prototype.hasOwnProperty.call(fn, property)) {
	                sentryWrapped[property] = fn[property];
	            }
	        }
	    }
	    catch (_oO) { } // eslint-disable-line no-empty
	    // Signal that this function has been wrapped/filled already
	    // for both debugging and to prevent it to being wrapped/filled twice
	    utils_1$9.markFunctionWrapped(sentryWrapped, fn);
	    utils_1$9.addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);
	    // Restore original function name (not all browsers allow that)
	    try {
	        var descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name');
	        if (descriptor.configurable) {
	            Object.defineProperty(sentryWrapped, 'name', {
	                get: function () {
	                    return fn.name;
	                },
	            });
	        }
	        // eslint-disable-next-line no-empty
	    }
	    catch (_oO) { }
	    return sentryWrapped;
	}
	helpers.wrap = wrap;
	/**
	 * Injects the Report Dialog script
	 * @hidden
	 */
	function injectReportDialog(options) {
	    if (options === void 0) { options = {}; }
	    if (!global$4.document) {
	        return;
	    }
	    if (!options.eventId) {
	        if (utils_1$9.isDebugBuild()) {
	            utils_1$9.logger.error("Missing eventId option in showReportDialog call");
	        }
	        return;
	    }
	    if (!options.dsn) {
	        if (utils_1$9.isDebugBuild()) {
	            utils_1$9.logger.error("Missing dsn option in showReportDialog call");
	        }
	        return;
	    }
	    var script = global$4.document.createElement('script');
	    script.async = true;
	    script.src = core_1$6.getReportDialogEndpoint(options.dsn, options);
	    if (options.onLoad) {
	        // eslint-disable-next-line @typescript-eslint/unbound-method
	        script.onload = options.onLoad;
	    }
	    var injectionPoint = global$4.document.head || global$4.document.body;
	    if (injectionPoint) {
	        injectionPoint.appendChild(script);
	    }
	}
	helpers.injectReportDialog = injectReportDialog;

	var integrations = {};

	var globalhandlers = {};

	Object.defineProperty(globalhandlers, "__esModule", { value: true });
	var tslib_1$7 = require$$0;
	/* eslint-disable @typescript-eslint/no-unsafe-member-access */
	var core_1$5 = dist$4;
	var types_1$2 = dist$5;
	var utils_1$8 = dist$1;
	var eventbuilder_1$1 = eventbuilder;
	var helpers_1$3 = helpers;
	/** Global handlers */
	var GlobalHandlers = /** @class */ (function () {
	    /** JSDoc */
	    function GlobalHandlers(options) {
	        /**
	         * @inheritDoc
	         */
	        this.name = GlobalHandlers.id;
	        /**
	         * Stores references functions to installing handlers. Will set to undefined
	         * after they have been run so that they are not used twice.
	         */
	        this._installFunc = {
	            onerror: _installGlobalOnErrorHandler,
	            onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,
	        };
	        this._options = tslib_1$7.__assign({ onerror: true, onunhandledrejection: true }, options);
	    }
	    /**
	     * @inheritDoc
	     */
	    GlobalHandlers.prototype.setupOnce = function () {
	        Error.stackTraceLimit = 50;
	        var options = this._options;
	        // We can disable guard-for-in as we construct the options object above + do checks against
	        // `this._installFunc` for the property.
	        // eslint-disable-next-line guard-for-in
	        for (var key in options) {
	            var installFunc = this._installFunc[key];
	            if (installFunc && options[key]) {
	                globalHandlerLog(key);
	                installFunc();
	                this._installFunc[key] = undefined;
	            }
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    GlobalHandlers.id = 'GlobalHandlers';
	    return GlobalHandlers;
	}());
	globalhandlers.GlobalHandlers = GlobalHandlers;
	/** JSDoc */
	function _installGlobalOnErrorHandler() {
	    utils_1$8.addInstrumentationHandler('error', 
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    function (data) {
	        var _a = tslib_1$7.__read(getHubAndAttachStacktrace(), 2), hub = _a[0], attachStacktrace = _a[1];
	        if (!hub.getIntegration(GlobalHandlers)) {
	            return;
	        }
	        var msg = data.msg, url = data.url, line = data.line, column = data.column, error = data.error;
	        if (helpers_1$3.shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {
	            return;
	        }
	        var event = error === undefined && utils_1$8.isString(msg)
	            ? _eventFromIncompleteOnError(msg, url, line, column)
	            : _enhanceEventWithInitialFrame(eventbuilder_1$1.eventFromUnknownInput(error || msg, undefined, {
	                attachStacktrace: attachStacktrace,
	                isRejection: false,
	            }), url, line, column);
	        event.level = types_1$2.Severity.Error;
	        addMechanismAndCapture(hub, error, event, 'onerror');
	    });
	}
	/** JSDoc */
	function _installGlobalOnUnhandledRejectionHandler() {
	    utils_1$8.addInstrumentationHandler('unhandledrejection', 
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    function (e) {
	        var _a = tslib_1$7.__read(getHubAndAttachStacktrace(), 2), hub = _a[0], attachStacktrace = _a[1];
	        if (!hub.getIntegration(GlobalHandlers)) {
	            return;
	        }
	        var error = e;
	        // dig the object of the rejection out of known event types
	        try {
	            // PromiseRejectionEvents store the object of the rejection under 'reason'
	            // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent
	            if ('reason' in e) {
	                error = e.reason;
	            }
	            // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents
	            // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into
	            // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec
	            // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and
	            // https://github.com/getsentry/sentry-javascript/issues/2380
	            else if ('detail' in e && 'reason' in e.detail) {
	                error = e.detail.reason;
	            }
	        }
	        catch (_oO) {
	            // no-empty
	        }
	        if (helpers_1$3.shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {
	            return true;
	        }
	        var event = utils_1$8.isPrimitive(error)
	            ? _eventFromRejectionWithPrimitive(error)
	            : eventbuilder_1$1.eventFromUnknownInput(error, undefined, {
	                attachStacktrace: attachStacktrace,
	                isRejection: true,
	            });
	        event.level = types_1$2.Severity.Error;
	        addMechanismAndCapture(hub, error, event, 'onunhandledrejection');
	        return;
	    });
	}
	/**
	 * Create an event from a promise rejection where the `reason` is a primitive.
	 *
	 * @param reason: The `reason` property of the promise rejection
	 * @returns An Event object with an appropriate `exception` value
	 */
	function _eventFromRejectionWithPrimitive(reason) {
	    return {
	        exception: {
	            values: [
	                {
	                    type: 'UnhandledRejection',
	                    // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)
	                    value: "Non-Error promise rejection captured with value: " + String(reason),
	                },
	            ],
	        },
	    };
	}
	/**
	 * This function creates a stack from an old, error-less onerror handler.
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function _eventFromIncompleteOnError(msg, url, line, column) {
	    var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;
	    // If 'message' is ErrorEvent, get real message from inside
	    var message = utils_1$8.isErrorEvent(msg) ? msg.message : msg;
	    var name = 'Error';
	    var groups = message.match(ERROR_TYPES_RE);
	    if (groups) {
	        name = groups[1];
	        message = groups[2];
	    }
	    var event = {
	        exception: {
	            values: [
	                {
	                    type: name,
	                    value: message,
	                },
	            ],
	        },
	    };
	    return _enhanceEventWithInitialFrame(event, url, line, column);
	}
	/** JSDoc */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function _enhanceEventWithInitialFrame(event, url, line, column) {
	    // event.exception
	    var e = (event.exception = event.exception || {});
	    // event.exception.values
	    var ev = (e.values = e.values || []);
	    // event.exception.values[0]
	    var ev0 = (ev[0] = ev[0] || {});
	    // event.exception.values[0].stacktrace
	    var ev0s = (ev0.stacktrace = ev0.stacktrace || {});
	    // event.exception.values[0].stacktrace.frames
	    var ev0sf = (ev0s.frames = ev0s.frames || []);
	    var colno = isNaN(parseInt(column, 10)) ? undefined : column;
	    var lineno = isNaN(parseInt(line, 10)) ? undefined : line;
	    var filename = utils_1$8.isString(url) && url.length > 0 ? url : utils_1$8.getLocationHref();
	    // event.exception.values[0].stacktrace.frames
	    if (ev0sf.length === 0) {
	        ev0sf.push({
	            colno: colno,
	            filename: filename,
	            function: '?',
	            in_app: true,
	            lineno: lineno,
	        });
	    }
	    return event;
	}
	function globalHandlerLog(type) {
	    if (utils_1$8.isDebugBuild()) {
	        utils_1$8.logger.log("Global Handler attached: " + type);
	    }
	}
	function addMechanismAndCapture(hub, error, event, type) {
	    utils_1$8.addExceptionMechanism(event, {
	        handled: false,
	        type: type,
	    });
	    hub.captureEvent(event, {
	        originalException: error,
	    });
	}
	function getHubAndAttachStacktrace() {
	    var hub = core_1$5.getCurrentHub();
	    var client = hub.getClient();
	    var attachStacktrace = client && client.getOptions().attachStacktrace;
	    return [hub, attachStacktrace];
	}

	var trycatch = {};

	Object.defineProperty(trycatch, "__esModule", { value: true });
	var tslib_1$6 = require$$0;
	var utils_1$7 = dist$1;
	var helpers_1$2 = helpers;
	var DEFAULT_EVENT_TARGET = [
	    'EventTarget',
	    'Window',
	    'Node',
	    'ApplicationCache',
	    'AudioTrackList',
	    'ChannelMergerNode',
	    'CryptoOperation',
	    'EventSource',
	    'FileReader',
	    'HTMLUnknownElement',
	    'IDBDatabase',
	    'IDBRequest',
	    'IDBTransaction',
	    'KeyOperation',
	    'MediaController',
	    'MessagePort',
	    'ModalWindow',
	    'Notification',
	    'SVGElementInstance',
	    'Screen',
	    'TextTrack',
	    'TextTrackCue',
	    'TextTrackList',
	    'WebSocket',
	    'WebSocketWorker',
	    'Worker',
	    'XMLHttpRequest',
	    'XMLHttpRequestEventTarget',
	    'XMLHttpRequestUpload',
	];
	/** Wrap timer functions and event targets to catch errors and provide better meta data */
	var TryCatch = /** @class */ (function () {
	    /**
	     * @inheritDoc
	     */
	    function TryCatch(options) {
	        /**
	         * @inheritDoc
	         */
	        this.name = TryCatch.id;
	        this._options = tslib_1$6.__assign({ XMLHttpRequest: true, eventTarget: true, requestAnimationFrame: true, setInterval: true, setTimeout: true }, options);
	    }
	    /**
	     * Wrap timer functions and event targets to catch errors
	     * and provide better metadata.
	     */
	    TryCatch.prototype.setupOnce = function () {
	        var global = utils_1$7.getGlobalObject();
	        if (this._options.setTimeout) {
	            utils_1$7.fill(global, 'setTimeout', _wrapTimeFunction);
	        }
	        if (this._options.setInterval) {
	            utils_1$7.fill(global, 'setInterval', _wrapTimeFunction);
	        }
	        if (this._options.requestAnimationFrame) {
	            utils_1$7.fill(global, 'requestAnimationFrame', _wrapRAF);
	        }
	        if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {
	            utils_1$7.fill(XMLHttpRequest.prototype, 'send', _wrapXHR);
	        }
	        var eventTargetOption = this._options.eventTarget;
	        if (eventTargetOption) {
	            var eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;
	            eventTarget.forEach(_wrapEventTarget);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    TryCatch.id = 'TryCatch';
	    return TryCatch;
	}());
	trycatch.TryCatch = TryCatch;
	/** JSDoc */
	function _wrapTimeFunction(original) {
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var originalCallback = args[0];
	        args[0] = helpers_1$2.wrap(originalCallback, {
	            mechanism: {
	                data: { function: utils_1$7.getFunctionName(original) },
	                handled: true,
	                type: 'instrument',
	            },
	        });
	        return original.apply(this, args);
	    };
	}
	/** JSDoc */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function _wrapRAF(original) {
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    return function (callback) {
	        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	        return original.call(this, helpers_1$2.wrap(callback, {
	            mechanism: {
	                data: {
	                    function: 'requestAnimationFrame',
	                    handler: utils_1$7.getFunctionName(original),
	                },
	                handled: true,
	                type: 'instrument',
	            },
	        }));
	    };
	}
	/** JSDoc */
	function _wrapXHR(originalSend) {
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        // eslint-disable-next-line @typescript-eslint/no-this-alias
	        var xhr = this;
	        var xmlHttpRequestProps = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];
	        xmlHttpRequestProps.forEach(function (prop) {
	            if (prop in xhr && typeof xhr[prop] === 'function') {
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                utils_1$7.fill(xhr, prop, function (original) {
	                    var wrapOptions = {
	                        mechanism: {
	                            data: {
	                                function: prop,
	                                handler: utils_1$7.getFunctionName(original),
	                            },
	                            handled: true,
	                            type: 'instrument',
	                        },
	                    };
	                    // If Instrument integration has been called before TryCatch, get the name of original function
	                    var originalFunction = utils_1$7.getOriginalFunction(original);
	                    if (originalFunction) {
	                        wrapOptions.mechanism.data.handler = utils_1$7.getFunctionName(originalFunction);
	                    }
	                    // Otherwise wrap directly
	                    return helpers_1$2.wrap(original, wrapOptions);
	                });
	            }
	        });
	        return originalSend.apply(this, args);
	    };
	}
	/** JSDoc */
	function _wrapEventTarget(target) {
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    var global = utils_1$7.getGlobalObject();
	    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	    var proto = global[target] && global[target].prototype;
	    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins
	    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {
	        return;
	    }
	    utils_1$7.fill(proto, 'addEventListener', function (original) {
	        return function (eventName, fn, options) {
	            try {
	                if (typeof fn.handleEvent === 'function') {
	                    fn.handleEvent = helpers_1$2.wrap(fn.handleEvent.bind(fn), {
	                        mechanism: {
	                            data: {
	                                function: 'handleEvent',
	                                handler: utils_1$7.getFunctionName(fn),
	                                target: target,
	                            },
	                            handled: true,
	                            type: 'instrument',
	                        },
	                    });
	                }
	            }
	            catch (err) {
	                // can sometimes get 'Permission denied to access property "handle Event'
	            }
	            return original.call(this, eventName, 
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            helpers_1$2.wrap(fn, {
	                mechanism: {
	                    data: {
	                        function: 'addEventListener',
	                        handler: utils_1$7.getFunctionName(fn),
	                        target: target,
	                    },
	                    handled: true,
	                    type: 'instrument',
	                },
	            }), options);
	        };
	    });
	    utils_1$7.fill(proto, 'removeEventListener', function (originalRemoveEventListener) {
	        return function (eventName, fn, options) {
	            /**
	             * There are 2 possible scenarios here:
	             *
	             * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified
	             * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function
	             * as a pass-through, and call original `removeEventListener` with it.
	             *
	             * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using
	             * our wrapped version of `addEventListener`, which internally calls `wrap` helper.
	             * This helper "wraps" whole callback inside a try/catch statement, and attached appropriate metadata to it,
	             * in order for us to make a distinction between wrapped/non-wrapped functions possible.
	             * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.
	             *
	             * When someone adds a handler prior to initialization, and then do it again, but after,
	             * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible
	             * to get rid of the initial handler and it'd stick there forever.
	             */
	            var wrappedEventHandler = fn;
	            try {
	                var originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;
	                if (originalEventHandler) {
	                    originalRemoveEventListener.call(this, eventName, originalEventHandler, options);
	                }
	            }
	            catch (e) {
	                // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments
	            }
	            return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);
	        };
	    });
	}

	var breadcrumbs = {};

	Object.defineProperty(breadcrumbs, "__esModule", { value: true });
	var tslib_1$5 = require$$0;
	/* eslint-disable @typescript-eslint/no-unsafe-member-access */
	/* eslint-disable max-lines */
	var core_1$4 = dist$4;
	var types_1$1 = dist$5;
	var utils_1$6 = dist$1;
	/**
	 * Default Breadcrumbs instrumentations
	 * TODO: Deprecated - with v6, this will be renamed to `Instrument`
	 */
	var Breadcrumbs = /** @class */ (function () {
	    /**
	     * @inheritDoc
	     */
	    function Breadcrumbs(options) {
	        /**
	         * @inheritDoc
	         */
	        this.name = Breadcrumbs.id;
	        this._options = tslib_1$5.__assign({ console: true, dom: true, fetch: true, history: true, sentry: true, xhr: true }, options);
	    }
	    /**
	     * Create a breadcrumb of `sentry` from the events themselves
	     */
	    Breadcrumbs.prototype.addSentryBreadcrumb = function (event) {
	        if (!this._options.sentry) {
	            return;
	        }
	        core_1$4.getCurrentHub().addBreadcrumb({
	            category: "sentry." + (event.type === 'transaction' ? 'transaction' : 'event'),
	            event_id: event.event_id,
	            level: event.level,
	            message: utils_1$6.getEventDescription(event),
	        }, {
	            event: event,
	        });
	    };
	    /**
	     * Instrument browser built-ins w/ breadcrumb capturing
	     *  - Console API
	     *  - DOM API (click/typing)
	     *  - XMLHttpRequest API
	     *  - Fetch API
	     *  - History API
	     */
	    Breadcrumbs.prototype.setupOnce = function () {
	        if (this._options.console) {
	            utils_1$6.addInstrumentationHandler('console', _consoleBreadcrumb);
	        }
	        if (this._options.dom) {
	            utils_1$6.addInstrumentationHandler('dom', _domBreadcrumb(this._options.dom));
	        }
	        if (this._options.xhr) {
	            utils_1$6.addInstrumentationHandler('xhr', _xhrBreadcrumb);
	        }
	        if (this._options.fetch) {
	            utils_1$6.addInstrumentationHandler('fetch', _fetchBreadcrumb);
	        }
	        if (this._options.history) {
	            utils_1$6.addInstrumentationHandler('history', _historyBreadcrumb);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    Breadcrumbs.id = 'Breadcrumbs';
	    return Breadcrumbs;
	}());
	breadcrumbs.Breadcrumbs = Breadcrumbs;
	/**
	 * A HOC that creaes a function that creates breadcrumbs from DOM API calls.
	 * This is a HOC so that we get access to dom options in the closure.
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function _domBreadcrumb(dom) {
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    function _innerDomBreadcrumb(handlerData) {
	        var target;
	        var keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;
	        if (typeof keyAttrs === 'string') {
	            keyAttrs = [keyAttrs];
	        }
	        // Accessing event.target can throw (see getsentry/raven-js#838, #768)
	        try {
	            target = handlerData.event.target
	                ? utils_1$6.htmlTreeAsString(handlerData.event.target, keyAttrs)
	                : utils_1$6.htmlTreeAsString(handlerData.event, keyAttrs);
	        }
	        catch (e) {
	            target = '<unknown>';
	        }
	        if (target.length === 0) {
	            return;
	        }
	        core_1$4.getCurrentHub().addBreadcrumb({
	            category: "ui." + handlerData.name,
	            message: target,
	        }, {
	            event: handlerData.event,
	            name: handlerData.name,
	            global: handlerData.global,
	        });
	    }
	    return _innerDomBreadcrumb;
	}
	/**
	 * Creates breadcrumbs from console API calls
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function _consoleBreadcrumb(handlerData) {
	    var breadcrumb = {
	        category: 'console',
	        data: {
	            arguments: handlerData.args,
	            logger: 'console',
	        },
	        level: utils_1$6.severityFromString(handlerData.level),
	        message: utils_1$6.safeJoin(handlerData.args, ' '),
	    };
	    if (handlerData.level === 'assert') {
	        if (handlerData.args[0] === false) {
	            breadcrumb.message = "Assertion failed: " + (utils_1$6.safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');
	            breadcrumb.data.arguments = handlerData.args.slice(1);
	        }
	        else {
	            // Don't capture a breadcrumb for passed assertions
	            return;
	        }
	    }
	    core_1$4.getCurrentHub().addBreadcrumb(breadcrumb, {
	        input: handlerData.args,
	        level: handlerData.level,
	    });
	}
	/**
	 * Creates breadcrumbs from XHR API calls
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function _xhrBreadcrumb(handlerData) {
	    if (handlerData.endTimestamp) {
	        // We only capture complete, non-sentry requests
	        if (handlerData.xhr.__sentry_own_request__) {
	            return;
	        }
	        var _a = handlerData.xhr.__sentry_xhr__ || {}, method = _a.method, url = _a.url, status_code = _a.status_code, body = _a.body;
	        core_1$4.getCurrentHub().addBreadcrumb({
	            category: 'xhr',
	            data: {
	                method: method,
	                url: url,
	                status_code: status_code,
	            },
	            type: 'http',
	        }, {
	            xhr: handlerData.xhr,
	            input: body,
	        });
	        return;
	    }
	}
	/**
	 * Creates breadcrumbs from fetch API calls
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function _fetchBreadcrumb(handlerData) {
	    // We only capture complete fetch requests
	    if (!handlerData.endTimestamp) {
	        return;
	    }
	    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {
	        // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)
	        return;
	    }
	    if (handlerData.error) {
	        core_1$4.getCurrentHub().addBreadcrumb({
	            category: 'fetch',
	            data: handlerData.fetchData,
	            level: types_1$1.Severity.Error,
	            type: 'http',
	        }, {
	            data: handlerData.error,
	            input: handlerData.args,
	        });
	    }
	    else {
	        core_1$4.getCurrentHub().addBreadcrumb({
	            category: 'fetch',
	            data: tslib_1$5.__assign(tslib_1$5.__assign({}, handlerData.fetchData), { status_code: handlerData.response.status }),
	            type: 'http',
	        }, {
	            input: handlerData.args,
	            response: handlerData.response,
	        });
	    }
	}
	/**
	 * Creates breadcrumbs from history API calls
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	function _historyBreadcrumb(handlerData) {
	    var global = utils_1$6.getGlobalObject();
	    var from = handlerData.from;
	    var to = handlerData.to;
	    var parsedLoc = utils_1$6.parseUrl(global.location.href);
	    var parsedFrom = utils_1$6.parseUrl(from);
	    var parsedTo = utils_1$6.parseUrl(to);
	    // Initial pushState doesn't provide `from` information
	    if (!parsedFrom.path) {
	        parsedFrom = parsedLoc;
	    }
	    // Use only the path component of the URL if the URL matches the current
	    // document (almost all the time when using pushState)
	    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {
	        to = parsedTo.relative;
	    }
	    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {
	        from = parsedFrom.relative;
	    }
	    core_1$4.getCurrentHub().addBreadcrumb({
	        category: 'navigation',
	        data: {
	            from: from,
	            to: to,
	        },
	    });
	}

	var linkederrors = {};

	Object.defineProperty(linkederrors, "__esModule", { value: true });
	var tslib_1$4 = require$$0;
	var core_1$3 = dist$4;
	var utils_1$5 = dist$1;
	var parsers_1 = parsers;
	var tracekit_1 = tracekit;
	var DEFAULT_KEY = 'cause';
	var DEFAULT_LIMIT = 5;
	/** Adds SDK info to an event. */
	var LinkedErrors = /** @class */ (function () {
	    /**
	     * @inheritDoc
	     */
	    function LinkedErrors(options) {
	        if (options === void 0) { options = {}; }
	        /**
	         * @inheritDoc
	         */
	        this.name = LinkedErrors.id;
	        this._key = options.key || DEFAULT_KEY;
	        this._limit = options.limit || DEFAULT_LIMIT;
	    }
	    /**
	     * @inheritDoc
	     */
	    LinkedErrors.prototype.setupOnce = function () {
	        core_1$3.addGlobalEventProcessor(function (event, hint) {
	            var self = core_1$3.getCurrentHub().getIntegration(LinkedErrors);
	            return self ? _handler(self._key, self._limit, event, hint) : event;
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    LinkedErrors.id = 'LinkedErrors';
	    return LinkedErrors;
	}());
	linkederrors.LinkedErrors = LinkedErrors;
	/**
	 * @inheritDoc
	 */
	function _handler(key, limit, event, hint) {
	    if (!event.exception || !event.exception.values || !hint || !utils_1$5.isInstanceOf(hint.originalException, Error)) {
	        return event;
	    }
	    var linkedErrors = _walkErrorTree(limit, hint.originalException, key);
	    event.exception.values = tslib_1$4.__spread(linkedErrors, event.exception.values);
	    return event;
	}
	linkederrors._handler = _handler;
	/**
	 * JSDOC
	 */
	function _walkErrorTree(limit, error, key, stack) {
	    if (stack === void 0) { stack = []; }
	    if (!utils_1$5.isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {
	        return stack;
	    }
	    var stacktrace = tracekit_1.computeStackTrace(error[key]);
	    var exception = parsers_1.exceptionFromStacktrace(stacktrace);
	    return _walkErrorTree(limit, error[key], key, tslib_1$4.__spread([exception], stack));
	}
	linkederrors._walkErrorTree = _walkErrorTree;

	var useragent = {};

	Object.defineProperty(useragent, "__esModule", { value: true });
	var tslib_1$3 = require$$0;
	var core_1$2 = dist$4;
	var utils_1$4 = dist$1;
	var global$3 = utils_1$4.getGlobalObject();
	/** UserAgent */
	var UserAgent = /** @class */ (function () {
	    function UserAgent() {
	        /**
	         * @inheritDoc
	         */
	        this.name = UserAgent.id;
	    }
	    /**
	     * @inheritDoc
	     */
	    UserAgent.prototype.setupOnce = function () {
	        core_1$2.addGlobalEventProcessor(function (event) {
	            if (core_1$2.getCurrentHub().getIntegration(UserAgent)) {
	                // if none of the information we want exists, don't bother
	                if (!global$3.navigator && !global$3.location && !global$3.document) {
	                    return event;
	                }
	                // grab as much info as exists and add it to the event
	                var url = (event.request && event.request.url) || (global$3.location && global$3.location.href);
	                var referrer = (global$3.document || {}).referrer;
	                var userAgent = (global$3.navigator || {}).userAgent;
	                var headers = tslib_1$3.__assign(tslib_1$3.__assign(tslib_1$3.__assign({}, (event.request && event.request.headers)), (referrer && { Referer: referrer })), (userAgent && { 'User-Agent': userAgent }));
	                var request = tslib_1$3.__assign(tslib_1$3.__assign({}, (url && { url: url })), { headers: headers });
	                return tslib_1$3.__assign(tslib_1$3.__assign({}, event), { request: request });
	            }
	            return event;
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    UserAgent.id = 'UserAgent';
	    return UserAgent;
	}());
	useragent.UserAgent = UserAgent;

	var dedupe = {};

	Object.defineProperty(dedupe, "__esModule", { value: true });
	var utils_1$3 = dist$1;
	/** Deduplication filter */
	var Dedupe = /** @class */ (function () {
	    function Dedupe() {
	        /**
	         * @inheritDoc
	         */
	        this.name = Dedupe.id;
	    }
	    /**
	     * @inheritDoc
	     */
	    Dedupe.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {
	        addGlobalEventProcessor(function (currentEvent) {
	            var self = getCurrentHub().getIntegration(Dedupe);
	            if (self) {
	                // Juuust in case something goes wrong
	                try {
	                    if (_shouldDropEvent(currentEvent, self._previousEvent)) {
	                        utils_1$3.logger.warn("Event dropped due to being a duplicate of previously captured event.");
	                        return null;
	                    }
	                }
	                catch (_oO) {
	                    return (self._previousEvent = currentEvent);
	                }
	                return (self._previousEvent = currentEvent);
	            }
	            return currentEvent;
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    Dedupe.id = 'Dedupe';
	    return Dedupe;
	}());
	dedupe.Dedupe = Dedupe;
	/** JSDoc */
	function _shouldDropEvent(currentEvent, previousEvent) {
	    if (!previousEvent) {
	        return false;
	    }
	    if (_isSameMessageEvent(currentEvent, previousEvent)) {
	        return true;
	    }
	    if (_isSameExceptionEvent(currentEvent, previousEvent)) {
	        return true;
	    }
	    return false;
	}
	/** JSDoc */
	function _isSameMessageEvent(currentEvent, previousEvent) {
	    var currentMessage = currentEvent.message;
	    var previousMessage = previousEvent.message;
	    // If neither event has a message property, they were both exceptions, so bail out
	    if (!currentMessage && !previousMessage) {
	        return false;
	    }
	    // If only one event has a stacktrace, but not the other one, they are not the same
	    if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {
	        return false;
	    }
	    if (currentMessage !== previousMessage) {
	        return false;
	    }
	    if (!_isSameFingerprint(currentEvent, previousEvent)) {
	        return false;
	    }
	    if (!_isSameStacktrace(currentEvent, previousEvent)) {
	        return false;
	    }
	    return true;
	}
	/** JSDoc */
	function _isSameExceptionEvent(currentEvent, previousEvent) {
	    var previousException = _getExceptionFromEvent(previousEvent);
	    var currentException = _getExceptionFromEvent(currentEvent);
	    if (!previousException || !currentException) {
	        return false;
	    }
	    if (previousException.type !== currentException.type || previousException.value !== currentException.value) {
	        return false;
	    }
	    if (!_isSameFingerprint(currentEvent, previousEvent)) {
	        return false;
	    }
	    if (!_isSameStacktrace(currentEvent, previousEvent)) {
	        return false;
	    }
	    return true;
	}
	/** JSDoc */
	function _isSameStacktrace(currentEvent, previousEvent) {
	    var currentFrames = _getFramesFromEvent(currentEvent);
	    var previousFrames = _getFramesFromEvent(previousEvent);
	    // If neither event has a stacktrace, they are assumed to be the same
	    if (!currentFrames && !previousFrames) {
	        return true;
	    }
	    // If only one event has a stacktrace, but not the other one, they are not the same
	    if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {
	        return false;
	    }
	    currentFrames = currentFrames;
	    previousFrames = previousFrames;
	    // If number of frames differ, they are not the same
	    if (previousFrames.length !== currentFrames.length) {
	        return false;
	    }
	    // Otherwise, compare the two
	    for (var i = 0; i < previousFrames.length; i++) {
	        var frameA = previousFrames[i];
	        var frameB = currentFrames[i];
	        if (frameA.filename !== frameB.filename ||
	            frameA.lineno !== frameB.lineno ||
	            frameA.colno !== frameB.colno ||
	            frameA.function !== frameB.function) {
	            return false;
	        }
	    }
	    return true;
	}
	/** JSDoc */
	function _isSameFingerprint(currentEvent, previousEvent) {
	    var currentFingerprint = currentEvent.fingerprint;
	    var previousFingerprint = previousEvent.fingerprint;
	    // If neither event has a fingerprint, they are assumed to be the same
	    if (!currentFingerprint && !previousFingerprint) {
	        return true;
	    }
	    // If only one event has a fingerprint, but not the other one, they are not the same
	    if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {
	        return false;
	    }
	    currentFingerprint = currentFingerprint;
	    previousFingerprint = previousFingerprint;
	    // Otherwise, compare the two
	    try {
	        return !!(currentFingerprint.join('') === previousFingerprint.join(''));
	    }
	    catch (_oO) {
	        return false;
	    }
	}
	/** JSDoc */
	function _getExceptionFromEvent(event) {
	    return event.exception && event.exception.values && event.exception.values[0];
	}
	/** JSDoc */
	function _getFramesFromEvent(event) {
	    var exception = event.exception;
	    if (exception) {
	        try {
	            // @ts-ignore Object could be undefined
	            return exception.values[0].stacktrace.frames;
	        }
	        catch (_oO) {
	            return undefined;
	        }
	    }
	    else if (event.stacktrace) {
	        return event.stacktrace.frames;
	    }
	    return undefined;
	}

	Object.defineProperty(integrations, "__esModule", { value: true });
	var globalhandlers_1 = globalhandlers;
	integrations.GlobalHandlers = globalhandlers_1.GlobalHandlers;
	var trycatch_1 = trycatch;
	integrations.TryCatch = trycatch_1.TryCatch;
	var breadcrumbs_1 = breadcrumbs;
	integrations.Breadcrumbs = breadcrumbs_1.Breadcrumbs;
	var linkederrors_1 = linkederrors;
	integrations.LinkedErrors = linkederrors_1.LinkedErrors;
	var useragent_1 = useragent;
	integrations.UserAgent = useragent_1.UserAgent;
	var dedupe_1 = dedupe;
	integrations.Dedupe = dedupe_1.Dedupe;

	Object.defineProperty(client, "__esModule", { value: true });
	var tslib_1$2 = require$$0;
	var core_1$1 = dist$4;
	var utils_1$2 = dist$1;
	var backend_1 = backend;
	var helpers_1$1 = helpers;
	var integrations_1 = integrations;
	/**
	 * The Sentry Browser SDK Client.
	 *
	 * @see BrowserOptions for documentation on configuration options.
	 * @see SentryClient for usage documentation.
	 */
	var BrowserClient = /** @class */ (function (_super) {
	    tslib_1$2.__extends(BrowserClient, _super);
	    /**
	     * Creates a new Browser SDK instance.
	     *
	     * @param options Configuration options for this SDK.
	     */
	    function BrowserClient(options) {
	        if (options === void 0) { options = {}; }
	        var _this = this;
	        options._metadata = options._metadata || {};
	        options._metadata.sdk = options._metadata.sdk || {
	            name: 'sentry.javascript.browser',
	            packages: [
	                {
	                    name: 'npm:@sentry/browser',
	                    version: core_1$1.SDK_VERSION,
	                },
	            ],
	            version: core_1$1.SDK_VERSION,
	        };
	        _this = _super.call(this, backend_1.BrowserBackend, options) || this;
	        return _this;
	    }
	    /**
	     * Show a report dialog to the user to send feedback to a specific event.
	     *
	     * @param options Set individual options for the dialog
	     */
	    BrowserClient.prototype.showReportDialog = function (options) {
	        if (options === void 0) { options = {}; }
	        // doesn't work without a document (React Native)
	        var document = utils_1$2.getGlobalObject().document;
	        if (!document) {
	            return;
	        }
	        if (!this._isEnabled()) {
	            utils_1$2.logger.error('Trying to call showReportDialog with Sentry Client disabled');
	            return;
	        }
	        helpers_1$1.injectReportDialog(tslib_1$2.__assign(tslib_1$2.__assign({}, options), { dsn: options.dsn || this.getDsn() }));
	    };
	    /**
	     * @inheritDoc
	     */
	    BrowserClient.prototype._prepareEvent = function (event, scope, hint) {
	        event.platform = event.platform || 'javascript';
	        return _super.prototype._prepareEvent.call(this, event, scope, hint);
	    };
	    /**
	     * @inheritDoc
	     */
	    BrowserClient.prototype._sendEvent = function (event) {
	        var integration = this.getIntegration(integrations_1.Breadcrumbs);
	        if (integration) {
	            integration.addSentryBreadcrumb(event);
	        }
	        _super.prototype._sendEvent.call(this, event);
	    };
	    return BrowserClient;
	}(core_1$1.BaseClient));
	client.BrowserClient = BrowserClient;

	var sdk$1 = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var tslib_1 = require$$0;
		var core_1 = dist$4;
		var utils_1 = dist$1;
		var client_1 = client;
		var helpers_1 = helpers;
		var integrations_1 = integrations;
		exports.defaultIntegrations = [
		    new core_1.Integrations.InboundFilters(),
		    new core_1.Integrations.FunctionToString(),
		    new integrations_1.TryCatch(),
		    new integrations_1.Breadcrumbs(),
		    new integrations_1.GlobalHandlers(),
		    new integrations_1.LinkedErrors(),
		    new integrations_1.Dedupe(),
		    new integrations_1.UserAgent(),
		];
		/**
		 * The Sentry Browser SDK Client.
		 *
		 * To use this SDK, call the {@link init} function as early as possible when
		 * loading the web page. To set context information or send manual events, use
		 * the provided methods.
		 *
		 * @example
		 *
		 * ```
		 *
		 * import { init } from '@sentry/browser';
		 *
		 * init({
		 *   dsn: '__DSN__',
		 *   // ...
		 * });
		 * ```
		 *
		 * @example
		 * ```
		 *
		 * import { configureScope } from '@sentry/browser';
		 * configureScope((scope: Scope) => {
		 *   scope.setExtra({ battery: 0.7 });
		 *   scope.setTag({ user_mode: 'admin' });
		 *   scope.setUser({ id: '4711' });
		 * });
		 * ```
		 *
		 * @example
		 * ```
		 *
		 * import { addBreadcrumb } from '@sentry/browser';
		 * addBreadcrumb({
		 *   message: 'My Breadcrumb',
		 *   // ...
		 * });
		 * ```
		 *
		 * @example
		 *
		 * ```
		 *
		 * import * as Sentry from '@sentry/browser';
		 * Sentry.captureMessage('Hello, world!');
		 * Sentry.captureException(new Error('Good bye'));
		 * Sentry.captureEvent({
		 *   message: 'Manual',
		 *   stacktrace: [
		 *     // ...
		 *   ],
		 * });
		 * ```
		 *
		 * @see {@link BrowserOptions} for documentation on configuration options.
		 */
		function init(options) {
		    if (options === void 0) { options = {}; }
		    if (options.defaultIntegrations === undefined) {
		        options.defaultIntegrations = exports.defaultIntegrations;
		    }
		    if (options.release === undefined) {
		        var window_1 = utils_1.getGlobalObject();
		        // This supports the variable that sentry-webpack-plugin injects
		        if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) {
		            options.release = window_1.SENTRY_RELEASE.id;
		        }
		    }
		    if (options.autoSessionTracking === undefined) {
		        options.autoSessionTracking = true;
		    }
		    if (options.sendClientReports === undefined) {
		        options.sendClientReports = true;
		    }
		    core_1.initAndBind(client_1.BrowserClient, options);
		    if (options.autoSessionTracking) {
		        startSessionTracking();
		    }
		}
		exports.init = init;
		/**
		 * Present the user with a report dialog.
		 *
		 * @param options Everything is optional, we try to fetch all info need from the global scope.
		 */
		function showReportDialog(options) {
		    if (options === void 0) { options = {}; }
		    var hub = core_1.getCurrentHub();
		    var scope = hub.getScope();
		    if (scope) {
		        options.user = tslib_1.__assign(tslib_1.__assign({}, scope.getUser()), options.user);
		    }
		    if (!options.eventId) {
		        options.eventId = hub.lastEventId();
		    }
		    var client = hub.getClient();
		    if (client) {
		        client.showReportDialog(options);
		    }
		}
		exports.showReportDialog = showReportDialog;
		/**
		 * This is the getter for lastEventId.
		 *
		 * @returns The last event id of a captured event.
		 */
		function lastEventId() {
		    return core_1.getCurrentHub().lastEventId();
		}
		exports.lastEventId = lastEventId;
		/**
		 * This function is here to be API compatible with the loader.
		 * @hidden
		 */
		function forceLoad() {
		    // Noop
		}
		exports.forceLoad = forceLoad;
		/**
		 * This function is here to be API compatible with the loader.
		 * @hidden
		 */
		function onLoad(callback) {
		    callback();
		}
		exports.onLoad = onLoad;
		/**
		 * Call `flush()` on the current client, if there is one. See {@link Client.flush}.
		 *
		 * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause
		 * the client to wait until all events are sent before resolving the promise.
		 * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it
		 * doesn't (or if there's no client defined).
		 */
		function flush(timeout) {
		    var client = core_1.getCurrentHub().getClient();
		    if (client) {
		        return client.flush(timeout);
		    }
		    if (utils_1.isDebugBuild()) {
		        utils_1.logger.warn('Cannot flush events. No client defined.');
		    }
		    return utils_1.resolvedSyncPromise(false);
		}
		exports.flush = flush;
		/**
		 * Call `close()` on the current client, if there is one. See {@link Client.close}.
		 *
		 * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this
		 * parameter will cause the client to wait until all events are sent before disabling itself.
		 * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it
		 * doesn't (or if there's no client defined).
		 */
		function close(timeout) {
		    var client = core_1.getCurrentHub().getClient();
		    if (client) {
		        return client.close(timeout);
		    }
		    if (utils_1.isDebugBuild()) {
		        utils_1.logger.warn('Cannot flush events and disable SDK. No client defined.');
		    }
		    return utils_1.resolvedSyncPromise(false);
		}
		exports.close = close;
		/**
		 * Wrap code within a try/catch block so the SDK is able to capture errors.
		 *
		 * @param fn A function to wrap.
		 *
		 * @returns The result of wrapped function call.
		 */
		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		function wrap(fn) {
		    return helpers_1.wrap(fn)();
		}
		exports.wrap = wrap;
		function startSessionOnHub(hub) {
		    hub.startSession({ ignoreDuration: true });
		    hub.captureSession();
		}
		/**
		 * Enable automatic Session Tracking for the initial page load.
		 */
		function startSessionTracking() {
		    var window = utils_1.getGlobalObject();
		    var document = window.document;
		    if (typeof document === 'undefined') {
		        if (utils_1.isDebugBuild()) {
		            utils_1.logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');
		        }
		        return;
		    }
		    var hub = core_1.getCurrentHub();
		    // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and
		    // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are
		    // pinned at the same version in package.json, but there are edge cases where it's possible. See
		    // https://github.com/getsentry/sentry-javascript/issues/3207 and
		    // https://github.com/getsentry/sentry-javascript/issues/3234 and
		    // https://github.com/getsentry/sentry-javascript/issues/3278.
		    if (!hub.captureSession) {
		        return;
		    }
		    // The session duration for browser sessions does not track a meaningful
		    // concept that can be used as a metric.
		    // Automatically captured sessions are akin to page views, and thus we
		    // discard their duration.
		    startSessionOnHub(hub);
		    // We want to create a session for every navigation as well
		    utils_1.addInstrumentationHandler('history', function (_a) {
		        var from = _a.from, to = _a.to;
		        // Don't create an additional session for the initial route or if the location did not change
		        if (!(from === undefined || from === to)) {
		            startSessionOnHub(core_1.getCurrentHub());
		        }
		    });
		}
		
	} (sdk$1));

	var version = {};

	Object.defineProperty(version, "__esModule", { value: true });
	// TODO: Remove in the next major release and rely only on @sentry/core SDK_VERSION and SdkInfo metadata
	version.SDK_NAME = 'sentry.javascript.browser';

	Object.defineProperty(exports$1, "__esModule", { value: true });
	var types_1 = dist$5;
	exports$1.Severity = types_1.Severity;
	var core_1 = dist$4;
	exports$1.addGlobalEventProcessor = core_1.addGlobalEventProcessor;
	exports$1.addBreadcrumb = core_1.addBreadcrumb;
	exports$1.captureException = core_1.captureException;
	exports$1.captureEvent = core_1.captureEvent;
	exports$1.captureMessage = core_1.captureMessage;
	exports$1.configureScope = core_1.configureScope;
	exports$1.getHubFromCarrier = core_1.getHubFromCarrier;
	exports$1.getCurrentHub = core_1.getCurrentHub;
	exports$1.Hub = core_1.Hub;
	exports$1.makeMain = core_1.makeMain;
	exports$1.Scope = core_1.Scope;
	exports$1.startTransaction = core_1.startTransaction;
	exports$1.SDK_VERSION = core_1.SDK_VERSION;
	exports$1.setContext = core_1.setContext;
	exports$1.setExtra = core_1.setExtra;
	exports$1.setExtras = core_1.setExtras;
	exports$1.setTag = core_1.setTag;
	exports$1.setTags = core_1.setTags;
	exports$1.setUser = core_1.setUser;
	exports$1.withScope = core_1.withScope;
	var client_1 = client;
	exports$1.BrowserClient = client_1.BrowserClient;
	var helpers_1 = helpers;
	exports$1.injectReportDialog = helpers_1.injectReportDialog;
	var eventbuilder_1 = eventbuilder;
	exports$1.eventFromException = eventbuilder_1.eventFromException;
	exports$1.eventFromMessage = eventbuilder_1.eventFromMessage;
	var sdk_1 = sdk$1;
	exports$1.defaultIntegrations = sdk_1.defaultIntegrations;
	exports$1.forceLoad = sdk_1.forceLoad;
	exports$1.init = sdk_1.init;
	exports$1.lastEventId = sdk_1.lastEventId;
	exports$1.onLoad = sdk_1.onLoad;
	exports$1.showReportDialog = sdk_1.showReportDialog;
	exports$1.flush = sdk_1.flush;
	exports$1.close = sdk_1.close;
	exports$1.wrap = sdk_1.wrap;
	var version_1 = version;
	exports$1.SDK_NAME = version_1.SDK_NAME;

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var tslib_1 = require$$0;
		tslib_1.__exportStar(exports$1, exports);
		var core_1 = dist$4;
		var utils_1 = dist$1;
		var BrowserIntegrations = integrations;
		var Transports = transports;
		exports.Transports = Transports;
		var windowIntegrations = {};
		// This block is needed to add compatibility with the integrations packages when used with a CDN
		var _window = utils_1.getGlobalObject();
		if (_window.Sentry && _window.Sentry.Integrations) {
		    windowIntegrations = _window.Sentry.Integrations;
		}
		var INTEGRATIONS = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, windowIntegrations), core_1.Integrations), BrowserIntegrations);
		exports.Integrations = INTEGRATIONS;
		
	} (dist$6));

	var sdk = {};

	Object.defineProperty(sdk, "__esModule", { value: true });
	var browser_1 = dist$6;
	/**
	 * Inits the React SDK
	 */
	function init$3(options) {
	    options._metadata = options._metadata || {};
	    options._metadata.sdk = options._metadata.sdk || {
	        name: 'sentry.javascript.react',
	        packages: [
	            {
	                name: 'npm:@sentry/react',
	                version: browser_1.SDK_VERSION,
	            },
	        ],
	        version: browser_1.SDK_VERSION,
	    };
	    browser_1.init(options);
	}
	sdk.init = init$3;

	var profiler = {};

	var constants = {};

	Object.defineProperty(constants, "__esModule", { value: true });
	constants.REACT_RENDER_OP = 'ui.react.render';
	constants.REACT_UPDATE_OP = 'ui.react.update';
	constants.REACT_MOUNT_OP = 'ui.react.mount';

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var tslib_1 = require$$0;
		/* eslint-disable @typescript-eslint/no-unsafe-member-access */
		/* eslint-disable @typescript-eslint/no-explicit-any */
		var browser_1 = dist$6;
		var utils_1 = dist$1;
		var hoist_non_react_statics_1 = tslib_1.__importDefault(hoistNonReactStatics_cjs);
		var React = tslib_1.__importStar(require$$3);
		var constants_1 = constants;
		exports.UNKNOWN_COMPONENT = 'unknown';
		var TRACING_GETTER = {
		    id: 'Tracing',
		};
		var globalTracingIntegration = null;
		/** @deprecated remove when @sentry/apm no longer used */
		var getTracingIntegration = function () {
		    if (globalTracingIntegration) {
		        return globalTracingIntegration;
		    }
		    globalTracingIntegration = browser_1.getCurrentHub().getIntegration(TRACING_GETTER);
		    return globalTracingIntegration;
		};
		/**
		 * pushActivity creates an new react activity.
		 * Is a no-op if Tracing integration is not valid
		 * @param name displayName of component that started activity
		 * @deprecated remove when @sentry/apm no longer used
		 */
		function pushActivity(name, op) {
		    if (globalTracingIntegration === null) {
		        return null;
		    }
		    return globalTracingIntegration.constructor.pushActivity(name, {
		        description: "<" + name + ">",
		        op: op,
		    });
		}
		/**
		 * popActivity removes a React activity.
		 * Is a no-op if Tracing integration is not valid.
		 * @param activity id of activity that is being popped
		 * @deprecated remove when @sentry/apm no longer used
		 */
		function popActivity(activity) {
		    if (activity === null || globalTracingIntegration === null) {
		        return;
		    }
		    globalTracingIntegration.constructor.popActivity(activity);
		}
		/**
		 * Obtain a span given an activity id.
		 * Is a no-op if Tracing integration is not valid.
		 * @param activity activity id associated with obtained span
		 * @deprecated remove when @sentry/apm no longer used
		 */
		function getActivitySpan(activity) {
		    if (activity === null || globalTracingIntegration === null) {
		        return undefined;
		    }
		    return globalTracingIntegration.constructor.getActivitySpan(activity);
		}
		/**
		 * The Profiler component leverages Sentry's Tracing integration to generate
		 * spans based on component lifecycles.
		 */
		var Profiler = /** @class */ (function (_super) {
		    tslib_1.__extends(Profiler, _super);
		    function Profiler(props) {
		        var _this = _super.call(this, props) || this;
		        /**
		         * The span of the mount activity
		         * Made protected for the React Native SDK to access
		         */
		        _this._mountSpan = undefined;
		        // The activity representing how long it takes to mount a component.
		        _this._mountActivity = null;
		        var _a = _this.props, name = _a.name, _b = _a.disabled, disabled = _b === void 0 ? false : _b;
		        if (disabled) {
		            return _this;
		        }
		        // If they are using @sentry/apm, we need to push/pop activities
		        // eslint-disable-next-line deprecation/deprecation
		        if (getTracingIntegration()) {
		            // eslint-disable-next-line deprecation/deprecation
		            _this._mountActivity = pushActivity(name, constants_1.REACT_MOUNT_OP);
		        }
		        else {
		            var activeTransaction = getActiveTransaction();
		            if (activeTransaction) {
		                _this._mountSpan = activeTransaction.startChild({
		                    description: "<" + name + ">",
		                    op: constants_1.REACT_MOUNT_OP,
		                });
		            }
		        }
		        return _this;
		    }
		    // If a component mounted, we can finish the mount activity.
		    Profiler.prototype.componentDidMount = function () {
		        if (this._mountSpan) {
		            this._mountSpan.finish();
		        }
		        else {
		            // eslint-disable-next-line deprecation/deprecation
		            this._mountSpan = getActivitySpan(this._mountActivity);
		            // eslint-disable-next-line deprecation/deprecation
		            popActivity(this._mountActivity);
		            this._mountActivity = null;
		        }
		    };
		    Profiler.prototype.componentDidUpdate = function (_a) {
		        var _this = this;
		        var updateProps = _a.updateProps, _b = _a.includeUpdates, includeUpdates = _b === void 0 ? true : _b;
		        // Only generate an update span if hasUpdateSpan is true, if there is a valid mountSpan,
		        // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.
		        // We are just trying to give baseline clues for further investigation.
		        if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {
		            // See what props haved changed between the previous props, and the current props. This is
		            // set as data on the span. We just store the prop keys as the values could be potenially very large.
		            var changedProps = Object.keys(updateProps).filter(function (k) { return updateProps[k] !== _this.props.updateProps[k]; });
		            if (changedProps.length > 0) {
		                // The update span is a point in time span with 0 duration, just signifying that the component
		                // has been updated.
		                var now = utils_1.timestampWithMs();
		                this._mountSpan.startChild({
		                    data: {
		                        changedProps: changedProps,
		                    },
		                    description: "<" + this.props.name + ">",
		                    endTimestamp: now,
		                    op: constants_1.REACT_UPDATE_OP,
		                    startTimestamp: now,
		                });
		            }
		        }
		    };
		    // If a component is unmounted, we can say it is no longer on the screen.
		    // This means we can finish the span representing the component render.
		    Profiler.prototype.componentWillUnmount = function () {
		        var _a = this.props, name = _a.name, _b = _a.includeRender, includeRender = _b === void 0 ? true : _b;
		        if (this._mountSpan && includeRender) {
		            // If we were able to obtain the spanId of the mount activity, we should set the
		            // next activity as a child to the component mount activity.
		            this._mountSpan.startChild({
		                description: "<" + name + ">",
		                endTimestamp: utils_1.timestampWithMs(),
		                op: constants_1.REACT_RENDER_OP,
		                startTimestamp: this._mountSpan.endTimestamp,
		            });
		        }
		    };
		    Profiler.prototype.render = function () {
		        return this.props.children;
		    };
		    // eslint-disable-next-line @typescript-eslint/member-ordering
		    Profiler.defaultProps = {
		        disabled: false,
		        includeRender: true,
		        includeUpdates: true,
		    };
		    return Profiler;
		}(React.Component));
		exports.Profiler = Profiler;
		/**
		 * withProfiler is a higher order component that wraps a
		 * component in a {@link Profiler} component. It is recommended that
		 * the higher order component be used over the regular {@link Profiler} component.
		 *
		 * @param WrappedComponent component that is wrapped by Profiler
		 * @param options the {@link ProfilerProps} you can pass into the Profiler
		 */
		function withProfiler(WrappedComponent, 
		// We do not want to have `updateProps` given in options, it is instead filled through the HOC.
		options) {
		    var componentDisplayName = (options && options.name) || WrappedComponent.displayName || WrappedComponent.name || exports.UNKNOWN_COMPONENT;
		    var Wrapped = function (props) { return (React.createElement(Profiler, tslib_1.__assign({}, options, { name: componentDisplayName, updateProps: props }),
		        React.createElement(WrappedComponent, tslib_1.__assign({}, props)))); };
		    Wrapped.displayName = "profiler(" + componentDisplayName + ")";
		    // Copy over static methods from Wrapped component to Profiler HOC
		    // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over
		    hoist_non_react_statics_1.default(Wrapped, WrappedComponent);
		    return Wrapped;
		}
		exports.withProfiler = withProfiler;
		/**
		 *
		 * `useProfiler` is a React hook that profiles a React component.
		 *
		 * Requires React 16.8 or above.
		 * @param name displayName of component being profiled
		 */
		function useProfiler(name, options) {
		    if (options === void 0) { options = {
		        disabled: false,
		        hasRenderSpan: true,
		    }; }
		    var _a = tslib_1.__read(React.useState(function () {
		        if (options && options.disabled) {
		            return undefined;
		        }
		        var activeTransaction = getActiveTransaction();
		        if (activeTransaction) {
		            return activeTransaction.startChild({
		                description: "<" + name + ">",
		                op: constants_1.REACT_MOUNT_OP,
		            });
		        }
		        return undefined;
		    }), 1), mountSpan = _a[0];
		    React.useEffect(function () {
		        if (mountSpan) {
		            mountSpan.finish();
		        }
		        return function () {
		            if (mountSpan && options.hasRenderSpan) {
		                mountSpan.startChild({
		                    description: "<" + name + ">",
		                    endTimestamp: utils_1.timestampWithMs(),
		                    op: constants_1.REACT_RENDER_OP,
		                    startTimestamp: mountSpan.endTimestamp,
		                });
		            }
		        };
		        // We only want this to run once.
		        // eslint-disable-next-line react-hooks/exhaustive-deps
		    }, []);
		}
		exports.useProfiler = useProfiler;
		/** Grabs active transaction off scope */
		function getActiveTransaction(hub) {
		    if (hub === void 0) { hub = browser_1.getCurrentHub(); }
		    if (hub) {
		        var scope = hub.getScope();
		        if (scope) {
		            return scope.getTransaction();
		        }
		    }
		    return undefined;
		}
		exports.getActiveTransaction = getActiveTransaction;
		
	} (profiler));

	var errorboundary = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var tslib_1 = require$$0;
		var browser_1 = dist$6;
		var utils_1 = dist$1;
		var hoist_non_react_statics_1 = tslib_1.__importDefault(hoistNonReactStatics_cjs);
		var React = tslib_1.__importStar(require$$3);
		function isAtLeastReact17(version) {
		    var major = version.match(/^([^.]+)/);
		    return major !== null && parseInt(major[0]) >= 17;
		}
		exports.isAtLeastReact17 = isAtLeastReact17;
		exports.UNKNOWN_COMPONENT = 'unknown';
		var INITIAL_STATE = {
		    componentStack: null,
		    error: null,
		    eventId: null,
		};
		/**
		 * A ErrorBoundary component that logs errors to Sentry. Requires React >= 16.
		 * NOTE: If you are a Sentry user, and you are seeing this stack frame, it means the
		 * Sentry React SDK ErrorBoundary caught an error invoking your application code. This
		 * is expected behavior and NOT indicative of a bug with the Sentry React SDK.
		 */
		var ErrorBoundary = /** @class */ (function (_super) {
		    tslib_1.__extends(ErrorBoundary, _super);
		    function ErrorBoundary() {
		        var _this = _super !== null && _super.apply(this, arguments) || this;
		        _this.state = INITIAL_STATE;
		        _this.resetErrorBoundary = function () {
		            var onReset = _this.props.onReset;
		            var _a = _this.state, error = _a.error, componentStack = _a.componentStack, eventId = _a.eventId;
		            if (onReset) {
		                onReset(error, componentStack, eventId);
		            }
		            _this.setState(INITIAL_STATE);
		        };
		        return _this;
		    }
		    ErrorBoundary.prototype.componentDidCatch = function (error, _a) {
		        var _this = this;
		        var componentStack = _a.componentStack;
		        var _b = this.props, beforeCapture = _b.beforeCapture, onError = _b.onError, showDialog = _b.showDialog, dialogOptions = _b.dialogOptions;
		        browser_1.withScope(function (scope) {
		            // If on React version >= 17, create stack trace from componentStack param and links
		            // to to the original error using `error.cause` otherwise relies on error param for stacktrace.
		            // Linking errors requires the `LinkedErrors` integration be enabled.
		            if (isAtLeastReact17(React.version)) {
		                var errorBoundaryError = new Error(error.message);
		                errorBoundaryError.name = "React ErrorBoundary " + errorBoundaryError.name;
		                errorBoundaryError.stack = componentStack;
		                // Using the `LinkedErrors` integration to link the errors together.
		                error.cause = errorBoundaryError;
		            }
		            if (beforeCapture) {
		                beforeCapture(scope, error, componentStack);
		            }
		            var eventId = browser_1.captureException(error, { contexts: { react: { componentStack: componentStack } } });
		            if (onError) {
		                onError(error, componentStack, eventId);
		            }
		            if (showDialog) {
		                browser_1.showReportDialog(tslib_1.__assign(tslib_1.__assign({}, dialogOptions), { eventId: eventId }));
		            }
		            // componentDidCatch is used over getDerivedStateFromError
		            // so that componentStack is accessible through state.
		            _this.setState({ error: error, componentStack: componentStack, eventId: eventId });
		        });
		    };
		    ErrorBoundary.prototype.componentDidMount = function () {
		        var onMount = this.props.onMount;
		        if (onMount) {
		            onMount();
		        }
		    };
		    ErrorBoundary.prototype.componentWillUnmount = function () {
		        var _a = this.state, error = _a.error, componentStack = _a.componentStack, eventId = _a.eventId;
		        var onUnmount = this.props.onUnmount;
		        if (onUnmount) {
		            onUnmount(error, componentStack, eventId);
		        }
		    };
		    ErrorBoundary.prototype.render = function () {
		        var _a = this.props, fallback = _a.fallback, children = _a.children;
		        var _b = this.state, error = _b.error, componentStack = _b.componentStack, eventId = _b.eventId;
		        if (error) {
		            var element = undefined;
		            if (typeof fallback === 'function') {
		                element = fallback({ error: error, componentStack: componentStack, resetError: this.resetErrorBoundary, eventId: eventId });
		            }
		            else {
		                element = fallback;
		            }
		            if (React.isValidElement(element)) {
		                return element;
		            }
		            if (fallback) {
		                utils_1.logger.warn('fallback did not produce a valid ReactElement');
		            }
		            // Fail gracefully if no fallback provided or is not valid
		            return null;
		        }
		        if (typeof children === 'function') {
		            return children();
		        }
		        return children;
		    };
		    return ErrorBoundary;
		}(React.Component));
		exports.ErrorBoundary = ErrorBoundary;
		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		function withErrorBoundary(WrappedComponent, errorBoundaryOptions) {
		    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
		    var componentDisplayName = WrappedComponent.displayName || WrappedComponent.name || exports.UNKNOWN_COMPONENT;
		    var Wrapped = function (props) { return (React.createElement(ErrorBoundary, tslib_1.__assign({}, errorBoundaryOptions),
		        React.createElement(WrappedComponent, tslib_1.__assign({}, props)))); };
		    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
		    Wrapped.displayName = "errorBoundary(" + componentDisplayName + ")";
		    // Copy over static methods from Wrapped component to Profiler HOC
		    // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over
		    hoist_non_react_statics_1.default(Wrapped, WrappedComponent);
		    return Wrapped;
		}
		exports.withErrorBoundary = withErrorBoundary;
		
	} (errorboundary));

	var redux = {};

	Object.defineProperty(redux, "__esModule", { value: true });
	var tslib_1$1 = require$$0;
	/* eslint-disable @typescript-eslint/no-explicit-any */
	var minimal_1 = dist$3;
	var ACTION_BREADCRUMB_CATEGORY = 'redux.action';
	var ACTION_BREADCRUMB_TYPE = 'info';
	var STATE_CONTEXT_KEY = 'redux.state';
	var defaultOptions = {
	    actionTransformer: function (action) { return action; },
	    stateTransformer: function (state) { return state || null; },
	};
	/**
	 * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.
	 *
	 * @param enhancerOptions Options to pass to the enhancer
	 */
	function createReduxEnhancer(enhancerOptions) {
	    // Note: We return an any type as to not have type conflicts.
	    var options = tslib_1$1.__assign(tslib_1$1.__assign({}, defaultOptions), enhancerOptions);
	    return function (next) {
	        return function (reducer, initialState) {
	            var sentryReducer = function (state, action) {
	                var newState = reducer(state, action);
	                minimal_1.configureScope(function (scope) {
	                    /* Action breadcrumbs */
	                    var transformedAction = options.actionTransformer(action);
	                    if (typeof transformedAction !== 'undefined' && transformedAction !== null) {
	                        scope.addBreadcrumb({
	                            category: ACTION_BREADCRUMB_CATEGORY,
	                            data: transformedAction,
	                            type: ACTION_BREADCRUMB_TYPE,
	                        });
	                    }
	                    /* Set latest state to scope */
	                    var transformedState = options.stateTransformer(newState);
	                    if (typeof transformedState !== 'undefined' && transformedState !== null) {
	                        scope.setContext(STATE_CONTEXT_KEY, transformedState);
	                    }
	                    else {
	                        scope.setContext(STATE_CONTEXT_KEY, null);
	                    }
	                    /* Allow user to configure scope with latest state */
	                    // eslint-disable-next-line @typescript-eslint/unbound-method
	                    var configureScopeWithState = options.configureScopeWithState;
	                    if (typeof configureScopeWithState === 'function') {
	                        configureScopeWithState(scope, newState);
	                    }
	                });
	                return newState;
	            };
	            return next(sentryReducer, initialState);
	        };
	    };
	}
	redux.createReduxEnhancer = createReduxEnhancer;

	var reactrouterv3 = {};

	Object.defineProperty(reactrouterv3, "__esModule", { value: true });
	var utils_1$1 = dist$1;
	var global$2 = utils_1$1.getGlobalObject();
	/**
	 * Creates routing instrumentation for React Router v3
	 * Works for React Router >= 3.2.0 and < 4.0.0
	 *
	 * @param history object from the `history` library
	 * @param routes a list of all routes, should be
	 * @param match `Router.match` utility
	 */
	function reactRouterV3Instrumentation(history, routes, match) {
	    return function (startTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {
	        if (startTransactionOnPageLoad === void 0) { startTransactionOnPageLoad = true; }
	        if (startTransactionOnLocationChange === void 0) { startTransactionOnLocationChange = true; }
	        var activeTransaction;
	        var prevName;
	        // Have to use global.location because history.location might not be defined.
	        if (startTransactionOnPageLoad && global$2 && global$2.location) {
	            normalizeTransactionName(routes, global$2.location, match, function (localName) {
	                prevName = localName;
	                activeTransaction = startTransaction({
	                    name: prevName,
	                    op: 'pageload',
	                    tags: {
	                        'routing.instrumentation': 'react-router-v3',
	                    },
	                });
	            });
	        }
	        if (startTransactionOnLocationChange && history.listen) {
	            history.listen(function (location) {
	                if (location.action === 'PUSH' || location.action === 'POP') {
	                    if (activeTransaction) {
	                        activeTransaction.finish();
	                    }
	                    var tags_1 = {
	                        'routing.instrumentation': 'react-router-v3',
	                    };
	                    if (prevName) {
	                        tags_1.from = prevName;
	                    }
	                    normalizeTransactionName(routes, location, match, function (localName) {
	                        prevName = localName;
	                        activeTransaction = startTransaction({
	                            name: prevName,
	                            op: 'navigation',
	                            tags: tags_1,
	                        });
	                    });
	                }
	            });
	        }
	    };
	}
	reactrouterv3.reactRouterV3Instrumentation = reactRouterV3Instrumentation;
	/**
	 * Normalize transaction names using `Router.match`
	 */
	function normalizeTransactionName(appRoutes, location, match, callback) {
	    var name = location.pathname;
	    match({
	        location: location,
	        routes: appRoutes,
	    }, function (error, _redirectLocation, renderProps) {
	        if (error || !renderProps) {
	            return callback(name);
	        }
	        var routePath = getRouteStringFromRoutes(renderProps.routes || []);
	        if (routePath.length === 0 || routePath === '/*') {
	            return callback(name);
	        }
	        name = routePath;
	        return callback(name);
	    });
	}
	/**
	 * Generate route name from array of routes
	 */
	function getRouteStringFromRoutes(routes) {
	    if (!Array.isArray(routes) || routes.length === 0) {
	        return '';
	    }
	    var routesWithPaths = routes.filter(function (route) { return !!route.path; });
	    var index = -1;
	    for (var x = routesWithPaths.length - 1; x >= 0; x--) {
	        var route = routesWithPaths[x];
	        if (route.path && route.path.startsWith('/')) {
	            index = x;
	            break;
	        }
	    }
	    return routesWithPaths
	        .slice(index)
	        .filter(function (_a) {
	        var path = _a.path;
	        return !!path;
	    })
	        .map(function (_a) {
	        var path = _a.path;
	        return path;
	    })
	        .join('');
	}

	var reactrouter = {};

	Object.defineProperty(reactrouter, "__esModule", { value: true });
	var tslib_1 = require$$0;
	var utils_1 = dist$1;
	var hoist_non_react_statics_1 = tslib_1.__importDefault(hoistNonReactStatics_cjs);
	var React = tslib_1.__importStar(require$$3);
	/* eslint-enable @typescript-eslint/no-explicit-any */
	var global$1 = utils_1.getGlobalObject();
	var activeTransaction;
	function reactRouterV4Instrumentation(history, routes, matchPath) {
	    return createReactRouterInstrumentation(history, 'react-router-v4', routes, matchPath);
	}
	reactrouter.reactRouterV4Instrumentation = reactRouterV4Instrumentation;
	function reactRouterV5Instrumentation(history, routes, matchPath) {
	    return createReactRouterInstrumentation(history, 'react-router-v5', routes, matchPath);
	}
	reactrouter.reactRouterV5Instrumentation = reactRouterV5Instrumentation;
	function createReactRouterInstrumentation(history, name, allRoutes, matchPath) {
	    if (allRoutes === void 0) { allRoutes = []; }
	    function getInitPathName() {
	        if (history && history.location) {
	            return history.location.pathname;
	        }
	        if (global$1 && global$1.location) {
	            return global$1.location.pathname;
	        }
	        return undefined;
	    }
	    function getTransactionName(pathname) {
	        if (allRoutes.length === 0 || !matchPath) {
	            return pathname;
	        }
	        var branches = matchRoutes(allRoutes, pathname, matchPath);
	        // eslint-disable-next-line @typescript-eslint/prefer-for-of
	        for (var x = 0; x < branches.length; x++) {
	            if (branches[x].match.isExact) {
	                return branches[x].match.path;
	            }
	        }
	        return pathname;
	    }
	    return function (customStartTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {
	        if (startTransactionOnPageLoad === void 0) { startTransactionOnPageLoad = true; }
	        if (startTransactionOnLocationChange === void 0) { startTransactionOnLocationChange = true; }
	        var initPathName = getInitPathName();
	        if (startTransactionOnPageLoad && initPathName) {
	            activeTransaction = customStartTransaction({
	                name: getTransactionName(initPathName),
	                op: 'pageload',
	                tags: {
	                    'routing.instrumentation': name,
	                },
	            });
	        }
	        if (startTransactionOnLocationChange && history.listen) {
	            history.listen(function (location, action) {
	                if (action && (action === 'PUSH' || action === 'POP')) {
	                    if (activeTransaction) {
	                        activeTransaction.finish();
	                    }
	                    var tags = {
	                        'routing.instrumentation': name,
	                    };
	                    activeTransaction = customStartTransaction({
	                        name: getTransactionName(location.pathname),
	                        op: 'navigation',
	                        tags: tags,
	                    });
	                }
	            });
	        }
	    };
	}
	/**
	 * Matches a set of routes to a pathname
	 * Based on implementation from
	 */
	function matchRoutes(routes, pathname, matchPath, branch) {
	    if (branch === void 0) { branch = []; }
	    routes.some(function (route) {
	        var match = route.path
	            ? matchPath(pathname, route)
	            : branch.length
	                ? branch[branch.length - 1].match // use parent match
	                : computeRootMatch(pathname); // use default "root" match
	        if (match) {
	            branch.push({ route: route, match: match });
	            if (route.routes) {
	                matchRoutes(route.routes, pathname, matchPath, branch);
	            }
	        }
	        return !!match;
	    });
	    return branch;
	}
	function computeRootMatch(pathname) {
	    return { path: '/', url: '/', params: {}, isExact: pathname === '/' };
	}
	/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */
	function withSentryRouting(Route) {
	    var componentDisplayName = Route.displayName || Route.name;
	    var WrappedRoute = function (props) {
	        if (activeTransaction && props && props.computedMatch && props.computedMatch.isExact) {
	            activeTransaction.setName(props.computedMatch.path);
	        }
	        // @ts-ignore Setting more specific React Component typing for `R` generic above
	        // will break advanced type inference done by react router params:
	        // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164
	        return React.createElement(Route, tslib_1.__assign({}, props));
	    };
	    WrappedRoute.displayName = "sentryRoute(" + componentDisplayName + ")";
	    hoist_non_react_statics_1.default(WrappedRoute, Route);
	    // @ts-ignore Setting more specific React Component typing for `R` generic above
	    // will break advanced type inference done by react router params:
	    // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164
	    return WrappedRoute;
	}
	reactrouter.withSentryRouting = withSentryRouting;

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var tslib_1 = require$$0;
		tslib_1.__exportStar(dist$6, exports);
		var sdk_1 = sdk;
		exports.init = sdk_1.init;
		var profiler_1 = profiler;
		exports.Profiler = profiler_1.Profiler;
		exports.withProfiler = profiler_1.withProfiler;
		exports.useProfiler = profiler_1.useProfiler;
		var errorboundary_1 = errorboundary;
		exports.ErrorBoundary = errorboundary_1.ErrorBoundary;
		exports.withErrorBoundary = errorboundary_1.withErrorBoundary;
		var redux_1 = redux;
		exports.createReduxEnhancer = redux_1.createReduxEnhancer;
		var reactrouterv3_1 = reactrouterv3;
		exports.reactRouterV3Instrumentation = reactrouterv3_1.reactRouterV3Instrumentation;
		var reactrouter_1 = reactrouter;
		exports.reactRouterV4Instrumentation = reactrouter_1.reactRouterV4Instrumentation;
		exports.reactRouterV5Instrumentation = reactrouter_1.reactRouterV5Instrumentation;
		exports.withSentryRouting = reactrouter_1.withSentryRouting;
		
	} (dist$7));

	var config = {
	  dsn: "https://85e360c77e454ef4b90fc2ee8a6e5fc7@o1050901.ingest.sentry.io/6066382",
	  tracesSampleRate: 0,

	  beforeSend(event) {
	    event.user = window.__NEXT_REDUX_WRAPPER_STORE__ ? window.__NEXT_REDUX_WRAPPER_STORE__.getState().user : 'Don\'t know';
	    return event;
	  }

	};

	async function init$2() {
	  dist$7.init(config);
	}
	async function sentEvent(name, data) {
	  dist$7.captureMessage(name, {
	    contexts: {
	      body: { ...(data instanceof Object ? data : JSON.parse(data))
	      }
	    },
	    level: dist$7.Severity.Info
	  });
	}

	const notify = throttle((message = '', variant = 'info') => {
	  store.dispatch(enqueueSnackbar({
	    message,
	    options: {
	      variant
	    }
	  }));
	}, 2000);
	function dialog({
	  title = message.title,
	  content = '',
	  actions = [{
	    label: 'NO',
	    onClick: () => {}
	  }, {
	    label: 'YES',
	    onClick: () => {}
	  }]
	}) {
	  store.dispatch(openDialog({
	    title,
	    content,
	    actions
	  }));
	}
	function throttle(func, wait) {
	  let lastTime;
	  return function (...rest) {
	    if (!lastTime || new Date().getTime() - lastTime > wait) {
	      lastTime = +new Date();
	      func.apply(this, rest);
	    }
	  };
	}

	const requestHookList = [{
	  match: /rest.quillbot.com\/api/,

	  overrideFunc(config) {
	    config.withCredentials = true;
	    return config;
	  }

	}, {
	  match: /rest.quillbot.com\/api\/paraphraser\/(single-paraphrase|freeze-words)/,

	  overrideFunc(config) {
	    const hookEnabled = getStorageEnable('hook-premium-token') && store.getState().remoteConfig.premium.enabled;

	    if (hookEnabled) {
	      notify(message.hookPremiumToken.success, 'success');
	      config.withCredentials = false;
	      config.headers.useridtoken = store.getState().remoteConfig.premium.firebase.access_token;
	    }

	    return config;
	  }

	}, {
	  match: /api\/utils\/sentence-spiltter/,

	  async captureFunc(config) {
	    sentEvent('paraphrase', config.body);
	  }

	}, {
	  match: /api\/utils\/grammar-check/,

	  async captureFunc(config) {
	    sentEvent('grammar-check', config.body);
	  }

	}];
	const responseHookList = [{
	  match: /get-account-details/,

	  overrideFunc(r) {
	    r = JSON.parse(r);
	    const hookEnabled = getStorageEnable('hook-premium');

	    if (hookEnabled) {
	      r.data.profile.premium = true;
	    }

	    return JSON.stringify(r);
	  }

	}, {
	  match: /api\/(utils\/(sentence-spiltter|grammar-check|bib-search)|summarizer\/summarize-para\/(abs|ext)|paraphraser\/(single-(paraphrase|flip)|segment)|write-assist\/list-projects)/,

	  async captureFunc(r) {
	    const rr = JSON.parse(r);

	    if (rr.code === "SESSION_FAILED") {
	      dialog({
	        content: message.sessionExpired.content,
	        actions: [{
	          label: message.sessionExpired.no,
	          onClick: () => {}
	        }, {
	          label: message.sessionExpired.yes,
	          onClick: () => {
	            indexedDB.databases().then(dbs => dbs.filter(db => db.name.startsWith('firebase')).forEach(db => indexedDB.deleteDatabase(db.name))).then(() => window.location.href = `/login?returnUrl=${window.location.pathname}`).catch(() => notify(message.error.logOut), 'error');
	          }
	        }]
	      });
	    }

	    if (rr.code === "USER_PREMIUM_FORBIDDEN") {
	      if (getStorageEnable('hook-premium-token')) {
	        if (!store.getState().remoteConfig.premium.enabled) {
	          notify(message.hookPremiumToken.unavailable, 'error');
	        }
	      } else {
	        notify(message.hookPremiumToken.disabled, 'warning');
	      }
	    }
	  }

	}];

	/*
	 * author: wendux
	 * email: 824783146@qq.com
	 * source code: https://github.com/wendux/Ajax-hook
	 */

	// Save original XMLHttpRequest as _rxhr
	var realXhr = "_rxhr";

	function configEvent(event, xhrProxy) {
	    var e = {};
	    for (var attr in event) e[attr] = event[attr];
	    // xhrProxy instead
	    e.target = e.currentTarget = xhrProxy;
	    return e;
	}

	function hook(proxy) {
	    // Avoid double hookAjax
	    window[realXhr] = window[realXhr] || XMLHttpRequest;

	    XMLHttpRequest = function () {
	        var xhr = new window[realXhr];
	        // We shouldn't hookAjax XMLHttpRequest.prototype because we can't
	        // guarantee that all attributes are on the prototype。
	        // Instead, hooking XMLHttpRequest instance can avoid this problem.
	        for (var attr in xhr) {
	            var type = "";
	            try {
	                type = typeof xhr[attr]; // May cause exception on some browser
	            } catch (e) {
	            }
	            if (type === "function") {
	                // hookAjax methods of xhr, such as `open`、`send` ...
	                this[attr] = hookFunction(attr);
	            } else {
	                Object.defineProperty(this, attr, {
	                    get: getterFactory(attr),
	                    set: setterFactory(attr),
	                    enumerable: true
	                });
	            }
	        }
	        var that = this;
	        xhr.getProxy = function () {
	            return that
	        };
	        this.xhr = xhr;
	    };

	    // Generate getter for attributes of xhr
	    function getterFactory(attr) {
	        return function () {
	            var v = this.hasOwnProperty(attr + "_") ? this[attr + "_"] : this.xhr[attr];
	            var attrGetterHook = (proxy[attr] || {})["getter"];
	            return attrGetterHook && attrGetterHook(v, this) || v
	        }
	    }

	    // Generate setter for attributes of xhr; by this we have an opportunity
	    // to hookAjax event callbacks （eg: `onload`） of xhr;
	    function setterFactory(attr) {
	        return function (v) {
	            var xhr = this.xhr;
	            var that = this;
	            var hook = proxy[attr];
	            // hookAjax  event callbacks such as `onload`、`onreadystatechange`...
	            if (attr.substring(0, 2) === 'on') {
	                that[attr + "_"] = v;
	                xhr[attr] = function (e) {
	                    e = configEvent(e, that);
	                    var ret = proxy[attr] && proxy[attr].call(that, xhr, e);
	                    ret || v.call(that, e);
	                };
	            } else {
	                //If the attribute isn't writable, generate proxy attribute
	                var attrSetterHook = (hook || {})["setter"];
	                v = attrSetterHook && attrSetterHook(v, that) || v;
	                this[attr + "_"] = v;
	                try {
	                    // Not all attributes of xhr are writable(setter may undefined).
	                    xhr[attr] = v;
	                } catch (e) {
	                }
	            }
	        }
	    }

	    // Hook methods of xhr.
	    function hookFunction(fun) {
	        return function () {
	            var args = [].slice.call(arguments);
	            if (proxy[fun]) {
	                var ret = proxy[fun].call(this, args, this.xhr);
	                // If the proxy return value exists, return it directly,
	                // otherwise call the function of xhr.
	                if (ret) return ret;
	            }
	            return this.xhr[fun].apply(this.xhr, args);
	        }
	    }

	    // Return the real XMLHttpRequest
	    return window[realXhr];
	}

	function unHook() {
	    if (window[realXhr]) XMLHttpRequest = window[realXhr];
	    window[realXhr] = undefined;
	}

	/*
	 * author: wendux
	 * email: 824783146@qq.com
	 * source code: https://github.com/wendux/Ajax-hook
	 */

	var events = ['load', 'loadend', 'timeout', 'error', 'readystatechange', 'abort'];
	var eventLoad = events[0],
	    eventLoadEnd = events[1],
	    eventTimeout = events[2],
	    eventError = events[3],
	    eventReadyStateChange = events[4],
	    eventAbort = events[5];


	var singleton,
	    prototype = 'prototype';


	function proxy$1(proxy) {
	    if (singleton) throw "Proxy already exists";
	    return singleton = new Proxy(proxy);
	}

	function unProxy() {
	    singleton = null;
	    unHook();
	}

	function trim(str) {
	    return str.replace(/^\s+|\s+$/g, '');
	}

	function getEventTarget(xhr) {
	    return xhr.watcher || (xhr.watcher = document.createElement('a'));
	}

	function triggerListener(xhr, name) {
	    var xhrProxy = xhr.getProxy();
	    var callback = 'on' + name + '_';
	    var event = configEvent({type: name}, xhrProxy);
	    xhrProxy[callback] && xhrProxy[callback](event);
	    var evt;
	    if(typeof(Event) === 'function') {
	        evt = new Event(name,{bubbles: false});
	    } else {
	        // https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11
	        evt = document.createEvent('Event');
	        evt.initEvent(name, false, true);
	    }
	    getEventTarget(xhr).dispatchEvent(evt);
	}


	function Handler(xhr) {
	    this.xhr = xhr;
	    this.xhrProxy = xhr.getProxy();
	}

	Handler[prototype] = Object.create({
	    resolve: function resolve(response) {
	        var xhrProxy = this.xhrProxy;
	        var xhr = this.xhr;
	        xhrProxy.readyState = 4;
	        xhr.resHeader = response.headers;
	        xhrProxy.response = xhrProxy.responseText = response.response;
	        xhrProxy.statusText = response.statusText;
	        xhrProxy.status = response.status;
	        triggerListener(xhr, eventReadyStateChange);
	        triggerListener(xhr, eventLoad);
	        triggerListener(xhr, eventLoadEnd);
	    },
	    reject: function reject(error) {
	        this.xhrProxy.status = 0;
	        triggerListener(this.xhr, error.type);
	        triggerListener(this.xhr, eventLoadEnd);
	    }
	});

	function makeHandler(next) {
	    function sub(xhr) {
	        Handler.call(this, xhr);
	    }

	    sub[prototype] = Object.create(Handler[prototype]);
	    sub[prototype].next = next;
	    return sub;
	}

	var RequestHandler = makeHandler(function (rq) {
	    var xhr = this.xhr;
	    rq = rq || xhr.config;
	    xhr.withCredentials = rq.withCredentials;
	    xhr.open(rq.method, rq.url, rq.async !== false, rq.user, rq.password);
	    for (var key in rq.headers) {
	        xhr.setRequestHeader(key, rq.headers[key]);
	    }
	    xhr.send(rq.body);
	});

	var ResponseHandler = makeHandler(function (response) {
	    this.resolve(response);
	});

	var ErrorHandler = makeHandler(function (error) {
	    this.reject(error);
	});

	function Proxy(proxy) {
	    var onRequest = proxy.onRequest,
	        onResponse = proxy.onResponse,
	        onError = proxy.onError;

	    function handleResponse(xhr, xhrProxy) {
	        var handler = new ResponseHandler(xhr);
	        if (!onResponse) return handler.resolve();
	        var ret = {
	            response: xhrProxy.response,
	            status: xhrProxy.status,
	            statusText: xhrProxy.statusText,
	            config: xhr.config,
	            headers: xhr.resHeader || xhr.getAllResponseHeaders().split('\r\n').reduce(function (ob, str) {
	                if (str === "") return ob;
	                var m = str.split(":");
	                ob[m.shift()] = trim(m.join(':'));
	                return ob;
	            }, {})
	        };
	        onResponse(ret, handler);
	    }

	    function onerror(xhr, xhrProxy, e) {
	        var handler = new ErrorHandler(xhr);
	        var error = {config: xhr.config, error: e};
	        if (onError) {
	            onError(error, handler);
	        } else {
	            handler.next(error);
	        }
	    }

	    function preventXhrProxyCallback() {
	        return true;
	    }

	    function errorCallback(xhr, e) {
	        onerror(xhr, this, e);
	        return true;
	    }

	    function stateChangeCallback(xhr, xhrProxy) {
	        if (xhr.readyState === 4 && xhr.status !== 0) {
	            handleResponse(xhr, xhrProxy);
	        } else if (xhr.readyState !== 4) {
	            triggerListener(xhr, eventReadyStateChange);
	        }
	        return true;
	    }

	    return hook({
	        onload: preventXhrProxyCallback,
	        onloadend: preventXhrProxyCallback,
	        onerror: errorCallback,
	        ontimeout: errorCallback,
	        onabort: errorCallback,
	        onreadystatechange: function (xhr) {
	            return stateChangeCallback(xhr, this);
	        },
	        open: function open(args, xhr) {
	            var _this = this;
	            var config = xhr.config = {headers: {}};
	            config.method = args[0];
	            config.url = args[1];
	            config.async = args[2];
	            config.user = args[3];
	            config.password = args[4];
	            config.xhr = xhr;
	            var evName = 'on' + eventReadyStateChange;
	            if (!xhr[evName]) {
	                xhr[evName] = function () {
	                    return stateChangeCallback(xhr, _this);
	                };
	            }

	            var defaultErrorHandler = function defaultErrorHandler(e) {
	                onerror(xhr, _this, configEvent(e, _this));
	            };
	            [eventError, eventTimeout, eventAbort].forEach(function (e) {
	                var event = 'on' + e;
	                if (!xhr[event]) xhr[event] = defaultErrorHandler;
	            });

	            // 如果有请求拦截器，则在调用onRequest后再打开链接。因为onRequest最佳调用时机是在send前，
	            // 所以我们在send拦截函数中再手动调用open，因此返回true阻止xhr.open调用。
	            //
	            // 如果没有请求拦截器，则不用阻断xhr.open调用
	            if (onRequest) return true;
	        },
	        send: function (args, xhr) {
	            var config = xhr.config;
	            config.withCredentials=xhr.withCredentials;
	            config.body = args[0];
	            if (onRequest) {
	                // In 'onRequest', we may call XHR's event handler, such as `xhr.onload`.
	                // However, XHR's event handler may not be set until xhr.send is called in
	                // the user's code, so we use `setTimeout` to avoid this situation
	                var req = function () {
	                    onRequest(config, new RequestHandler(xhr));
	                };
	                config.async === false ? req() : setTimeout(req);
	                return true;
	            }
	        },
	        setRequestHeader: function (args, xhr) {
	            // Collect request headers
	            xhr.config.headers[args[0].toLowerCase()] = args[1];
	            return true;
	        },
	        addEventListener: function (args, xhr) {
	            var _this = this;
	            if (events.indexOf(args[0]) !== -1) {
	                var handler = args[1];
	                getEventTarget(xhr).addEventListener(args[0], function (e) {
	                    var event = configEvent(e, _this);
	                    event.type = args[0];
	                    event.isTrusted = true;
	                    handler.call(_this, event);
	                });
	                return true;
	            }
	        },
	        getAllResponseHeaders: function (_, xhr) {
	            var headers = xhr.resHeader;
	            if (headers) {
	                var header = "";
	                for (var key in headers) {
	                    header += key + ': ' + headers[key] + '\r\n';
	                }
	                return header;
	            }
	        },
	        getResponseHeader: function (args, xhr) {
	            var headers = xhr.resHeader;
	            if (headers) {
	                return headers[(args[0] || '').toLowerCase()];
	            }
	        }
	    });
	}

	function proxy() {
	  proxy$1({
	    onRequest: (config, handler) => {
	      const matchedRules = requestHookList.filter(({
	        match
	      }) => match.test(config.url));

	      if (matchedRules) {
	        matchedRules.forEach(rule => {
	          if (rule.overrideFunc) {
	            config = rule.overrideFunc(config);
	          }

	          if (rule.captureFunc) {
	            rule.captureFunc(config);
	          }
	        });
	      }

	      handler.next(config);
	    },
	    onResponse: (response, handler) => {
	      const matchedRules = responseHookList.filter(({
	        match
	      }) => match.test(response.config.url));

	      if (matchedRules) {
	        matchedRules.forEach(rule => {
	          if (rule.overrideFunc) {
	            response.response = rule.overrideFunc(response.response);
	          }

	          if (rule.captureFunc) {
	            rule.captureFunc(response.response);
	          }
	        });
	      }

	      handler.next(response);
	    }
	  });
	}
	function unproxy() {
	  unProxy();
	}

	async function login () {
	  const isLogin = JSON.parse(document.getElementById('__NEXT_DATA__').innerText).props.initialState.user.isAuthenticated;
	  const isLoginPage = window.location.pathname === '/login';

	  if (!isLogin && !isLoginPage) {
	    dialog({
	      content: message.loginGuide.content,
	      actions: [{
	        label: message.loginGuide.no,
	        onClick: () => {}
	      }, {
	        label: message.loginGuide.yes,
	        onClick: () => window.location.href = `/login?returnUrl=${window.location.pathname}`
	      }]
	    });
	  }
	}

	async function check () {
	  login();
	}

	var dist = {};

	var ga4 = {};

	var gtag = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = void 0;

		var gtag = function gtag() {
		  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }

		  if (typeof window !== "undefined") {
		    var _window;

		    if (typeof window.gtag === "undefined") {
		      window.dataLayer = window.dataLayer || [];

		      window.gtag = function gtag() {
		        window.dataLayer.push(arguments);
		      };
		    }

		    (_window = window).gtag.apply(_window, args);
		  }
		};

		var _default = gtag;
		exports["default"] = _default;
	} (gtag));

	var format = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = format;
		var smallWords = /^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;

		function toTitleCase(string) {
		  return string.toString().trim().replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g, function (match, index, title) {
		    if (index > 0 && index + match.length !== title.length && match.search(smallWords) > -1 && title.charAt(index - 2) !== ":" && (title.charAt(index + match.length) !== "-" || title.charAt(index - 1) === "-") && title.charAt(index - 1).search(/[^\s-]/) < 0) {
		      return match.toLowerCase();
		    }

		    if (match.substr(1).search(/[A-Z]|\../) > -1) {
		      return match;
		    }

		    return match.charAt(0).toUpperCase() + match.substr(1);
		  });
		} // See if s could be an email address. We don't want to send personal data like email.
		// https://support.google.com/analytics/answer/2795983?hl=en


		function mightBeEmail(s) {
		  // There's no point trying to validate rfc822 fully, just look for ...@...
		  return typeof s === "string" && s.indexOf("@") !== -1;
		}

		var redacted = "REDACTED (Potential Email Address)";

		function redactEmail(string) {
		  if (mightBeEmail(string)) {
		    console.warn("This arg looks like an email address, redacting.");
		    return redacted;
		  }

		  return string;
		}

		function format() {
		  var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
		  var titleCase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
		  var redactingEmail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

		  var _str = s || "";

		  if (titleCase) {
		    _str = toTitleCase(s);
		  }

		  if (redactingEmail) {
		    _str = redactEmail(_str);
		  }

		  return _str;
		}
	} (format));

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = exports.GA4 = void 0;

		var _gtag = _interopRequireDefault(gtag);

		var _format = _interopRequireDefault(format);

		var _excluded = ["eventCategory", "eventAction", "eventLabel", "eventValue", "hitType"],
		    _excluded2 = ["title", "location"],
		    _excluded3 = ["page", "hitType"],
		    _excluded4 = ["action", "category", "label", "value", "nonInteraction", "transport"];

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

		function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

		function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

		function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

		function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

		function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

		function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

		/*
		Links
		https://developers.google.com/gtagjs/reference/api
		https://developers.google.com/tag-platform/gtagjs/reference
		*/

		/**
		 * @typedef GaOptions
		 * @type {Object}
		 * @property {boolean} [cookieUpdate=true]
		 * @property {number} [cookieExpires=63072000] Default two years
		 * @property {string} [cookieDomain="auto"]
		 * @property {string} [cookieFlags]
		 * @property {string} [userId]
		 * @property {string} [clientId]
		 * @property {boolean} [anonymizeIp]
		 * @property {string} [contentGroup1]
		 * @property {string} [contentGroup2]
		 * @property {string} [contentGroup3]
		 * @property {string} [contentGroup4]
		 * @property {string} [contentGroup5]
		 * @property {boolean} [allowAdFeatures=true]
		 * @property {boolean} [allowAdPersonalizationSignals]
		 * @property {boolean} [nonInteraction]
		 * @property {string} [page]
		 */

		/**
		 * @typedef UaEventOptions
		 * @type {Object}
		 * @property {string} action
		 * @property {string} category
		 * @property {string} [label]
		 * @property {number} [value]
		 * @property {boolean} [nonInteraction]
		 * @property {('beacon'|'xhr'|'image')} [transport]
		 */

		/**
		 * @typedef InitOptions
		 * @type {Object}
		 * @property {string} trackingId
		 * @property {GaOptions|any} [gaOptions]
		 * @property {Object} [gtagOptions] New parameter
		 */
		var GA4 = /*#__PURE__*/function () {
		  function GA4() {
		    var _this = this;

		    _classCallCheck(this, GA4);

		    _defineProperty(this, "reset", function () {
		      _this.isInitialized = false;
		      _this._testMode = false;
		      _this._currentMeasurementId;
		      _this._hasLoadedGA = false;
		      _this._isQueuing = false;
		      _this._queueGtag = [];
		    });

		    _defineProperty(this, "_gtag", function () {
		      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		        args[_key] = arguments[_key];
		      }

		      if (!_this._testMode) {
		        if (_this._isQueuing) {
		          _this._queueGtag.push(args);
		        } else {
		          _gtag["default"].apply(void 0, args);
		        }
		      } else {
		        _this._queueGtag.push(args);
		      }
		    });

		    _defineProperty(this, "_loadGA", function (GA_MEASUREMENT_ID, nonce) {
		      if (typeof window === "undefined" || typeof document === "undefined") {
		        return;
		      }

		      if (!_this._hasLoadedGA) {
		        // Global Site Tag (gtag.js) - Google Analytics
		        var script = document.createElement("script");
		        script.async = true;
		        script.src = "https://www.googletagmanager.com/gtag/js?id=".concat(GA_MEASUREMENT_ID);

		        if (nonce) {
		          script.setAttribute("nonce", nonce);
		        }

		        document.body.appendChild(script);
		        window.dataLayer = window.dataLayer || [];

		        window.gtag = function gtag() {
		          window.dataLayer.push(arguments);
		        };

		        _this._hasLoadedGA = true;
		      }
		    });

		    _defineProperty(this, "_toGtagOptions", function (gaOptions) {
		      if (!gaOptions) {
		        return;
		      }

		      var mapFields = {
		        // Old https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#cookieUpdate
		        // New https://developers.google.com/analytics/devguides/collection/gtagjs/cookies-user-id#cookie_update
		        cookieUpdate: "cookie_update",
		        cookieExpires: "cookie_expires",
		        cookieDomain: "cookie_domain",
		        cookieFlags: "cookie_flags",
		        // must be in set method?
		        userId: "user_id",
		        clientId: "client_id",
		        anonymizeIp: "anonymize_ip",
		        // https://support.google.com/analytics/answer/2853546?hl=en#zippy=%2Cin-this-article
		        contentGroup1: "content_group1",
		        contentGroup2: "content_group2",
		        contentGroup3: "content_group3",
		        contentGroup4: "content_group4",
		        contentGroup5: "content_group5",
		        // https://support.google.com/analytics/answer/9050852?hl=en
		        allowAdFeatures: "allow_google_signals",
		        allowAdPersonalizationSignals: "allow_ad_personalization_signals",
		        nonInteraction: "non_interaction",
		        page: "page_path",
		        hitCallback: "event_callback"
		      };
		      var gtagOptions = Object.entries(gaOptions).reduce(function (prev, _ref) {
		        var _ref2 = _slicedToArray(_ref, 2),
		            key = _ref2[0],
		            value = _ref2[1];

		        if (mapFields[key]) {
		          prev[mapFields[key]] = value;
		        } else {
		          prev[key] = value;
		        }

		        return prev;
		      }, {});
		      return gtagOptions;
		    });

		    _defineProperty(this, "initialize", function (GA_MEASUREMENT_ID) {
		      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		      if (!GA_MEASUREMENT_ID) {
		        throw new Error("Require GA_MEASUREMENT_ID");
		      }

		      var initConfigs = typeof GA_MEASUREMENT_ID === "string" ? [{
		        trackingId: GA_MEASUREMENT_ID
		      }] : GA_MEASUREMENT_ID;
		      _this._currentMeasurementId = initConfigs[0].trackingId;
		      var gaOptions = options.gaOptions,
		          gtagOptions = options.gtagOptions,
		          _options$legacyDimens = options.legacyDimensionMetric,
		          legacyDimensionMetric = _options$legacyDimens === void 0 ? true : _options$legacyDimens,
		          nonce = options.nonce,
		          _options$testMode = options.testMode,
		          testMode = _options$testMode === void 0 ? false : _options$testMode;
		      _this._testMode = testMode;

		      if (!testMode) {
		        _this._loadGA(_this._currentMeasurementId, nonce);
		      }

		      if (!_this.isInitialized) {
		        _this._gtag("js", new Date());

		        initConfigs.forEach(function (config) {
		          var mergedGtagOptions = _this._appendCustomMap(_objectSpread(_objectSpread(_objectSpread({
		            // https://developers.google.com/analytics/devguides/collection/gtagjs/pages#disable_pageview_measurement
		            send_page_view: false
		          }, _this._toGtagOptions(_objectSpread(_objectSpread({}, gaOptions), config.gaOptions))), gtagOptions), config.gtagOptions), legacyDimensionMetric);

		          _this._gtag("config", config.trackingId, mergedGtagOptions);
		        });
		      }

		      _this.isInitialized = true;

		      if (!testMode) {
		        var queues = _toConsumableArray(_this._queueGtag);

		        _this._queueGtag = [];
		        _this._isQueuing = false;

		        while (queues.length) {
		          var queue = queues.shift();

		          _this._gtag.apply(_this, _toConsumableArray(queue));

		          if (queue[0] === "get") {
		            _this._isQueuing = true;
		          }
		        }
		      }
		    });

		    _defineProperty(this, "set", function (fieldsObject) {
		      if (!fieldsObject) {
		        console.warn("`fieldsObject` is required in .set()");
		        return;
		      }

		      if (_typeof(fieldsObject) !== "object") {
		        console.warn("Expected `fieldsObject` arg to be an Object");
		        return;
		      }

		      if (Object.keys(fieldsObject).length === 0) {
		        console.warn("empty `fieldsObject` given to .set()");
		      }

		      _this._gaCommand("set", fieldsObject);
		    });

		    _defineProperty(this, "_gaCommandSendEvent", function (eventCategory, eventAction, eventLabel, eventValue, fieldsObject) {
		      _this._gtag("event", eventAction, _objectSpread(_objectSpread({
		        event_category: eventCategory,
		        event_label: eventLabel,
		        value: eventValue
		      }, fieldsObject && {
		        non_interaction: fieldsObject.nonInteraction
		      }), _this._toGtagOptions(fieldsObject)));
		    });

		    _defineProperty(this, "_gaCommandSendEventParameters", function () {
		      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		        args[_key2] = arguments[_key2];
		      }

		      if (typeof args[0] === "string") {
		        _this._gaCommandSendEvent.apply(_this, _toConsumableArray(args.slice(1)));
		      } else {
		        var _args$ = args[0],
		            eventCategory = _args$.eventCategory,
		            eventAction = _args$.eventAction,
		            eventLabel = _args$.eventLabel,
		            eventValue = _args$.eventValue;
		            _args$.hitType;
		            var rest = _objectWithoutProperties(_args$, _excluded);

		        _this._gaCommandSendEvent(eventCategory, eventAction, eventLabel, eventValue, rest);
		      }
		    });

		    _defineProperty(this, "_gaCommandSendTiming", function (timingCategory, timingVar, timingValue, timingLabel) {
		      _this._gtag("event", "timing_complete", {
		        name: timingVar,
		        value: timingValue,
		        event_category: timingCategory,
		        event_label: timingLabel
		      });
		    });

		    _defineProperty(this, "_gaCommandSendPageview", function (page, fieldsObject) {
		      if (fieldsObject && Object.keys(fieldsObject).length) {
		        var _this$_toGtagOptions = _this._toGtagOptions(fieldsObject),
		            title = _this$_toGtagOptions.title,
		            location = _this$_toGtagOptions.location,
		            rest = _objectWithoutProperties(_this$_toGtagOptions, _excluded2);

		        _this._gtag("event", "page_view", _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, page && {
		          page_path: page
		        }), title && {
		          page_title: title
		        }), location && {
		          page_location: location
		        }), rest));
		      } else if (page) {
		        _this._gtag("event", "page_view", {
		          page_path: page
		        });
		      } else {
		        _this._gtag("event", "page_view");
		      }
		    });

		    _defineProperty(this, "_gaCommandSendPageviewParameters", function () {
		      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
		        args[_key3] = arguments[_key3];
		      }

		      if (typeof args[0] === "string") {
		        _this._gaCommandSendPageview.apply(_this, _toConsumableArray(args.slice(1)));
		      } else {
		        var _args$2 = args[0],
		            page = _args$2.page;
		            _args$2.hitType;
		            var rest = _objectWithoutProperties(_args$2, _excluded3);

		        _this._gaCommandSendPageview(page, rest);
		      }
		    });

		    _defineProperty(this, "_gaCommandSend", function () {
		      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
		        args[_key4] = arguments[_key4];
		      }

		      var hitType = typeof args[0] === "string" ? args[0] : args[0].hitType;

		      switch (hitType) {
		        case "event":
		          _this._gaCommandSendEventParameters.apply(_this, args);

		          break;

		        case "pageview":
		          _this._gaCommandSendPageviewParameters.apply(_this, args);

		          break;

		        case "timing":
		          _this._gaCommandSendTiming.apply(_this, _toConsumableArray(args.slice(1)));

		          break;

		        case "screenview":
		        case "transaction":
		        case "item":
		        case "social":
		        case "exception":
		          console.warn("Unsupported send command: ".concat(hitType));
		          break;

		        default:
		          console.warn("Send command doesn't exist: ".concat(hitType));
		      }
		    });

		    _defineProperty(this, "_gaCommandSet", function () {
		      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
		        args[_key5] = arguments[_key5];
		      }

		      if (typeof args[0] === "string") {
		        args[0] = _defineProperty({}, args[0], args[1]);
		      }

		      _this._gtag("set", _this._toGtagOptions(args[0]));
		    });

		    _defineProperty(this, "_gaCommand", function (command) {
		      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
		        args[_key6 - 1] = arguments[_key6];
		      }

		      switch (command) {
		        case "send":
		          _this._gaCommandSend.apply(_this, args);

		          break;

		        case "set":
		          _this._gaCommandSet.apply(_this, args);

		          break;

		        default:
		          console.warn("Command doesn't exist: ".concat(command));
		      }
		    });

		    _defineProperty(this, "ga", function () {
		      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
		        args[_key7] = arguments[_key7];
		      }

		      if (typeof args[0] === "string") {
		        _this._gaCommand.apply(_this, args);
		      } else {
		        var readyCallback = args[0];

		        _this._gtag("get", _this._currentMeasurementId, "client_id", function (clientId) {
		          _this._isQueuing = false;
		          var queues = _this._queueGtag;
		          readyCallback({
		            get: function get(property) {
		              return property === "clientId" ? clientId : property === "trackingId" ? _this._currentMeasurementId : property === "apiVersion" ? "1" : undefined;
		            }
		          });

		          while (queues.length) {
		            var queue = queues.shift();

		            _this._gtag.apply(_this, _toConsumableArray(queue));
		          }
		        });

		        _this._isQueuing = true;
		      }

		      return _this.ga;
		    });

		    _defineProperty(this, "event", function (optionsOrName, params) {
		      if (typeof optionsOrName === "string") {
		        _this._gtag("event", optionsOrName, _this._toGtagOptions(params));
		      } else {
		        var action = optionsOrName.action,
		            category = optionsOrName.category,
		            label = optionsOrName.label,
		            value = optionsOrName.value,
		            nonInteraction = optionsOrName.nonInteraction,
		            transport = optionsOrName.transport,
		            rest = _objectWithoutProperties(optionsOrName, _excluded4);

		        if (!category || !action) {
		          console.warn("args.category AND args.action are required in event()");
		          return;
		        } // Required Fields


		        var fieldObject = {
		          hitType: "event",
		          eventCategory: (0, _format["default"])(category),
		          eventAction: (0, _format["default"])(action)
		        }; // Optional Fields

		        if (label) {
		          fieldObject.eventLabel = (0, _format["default"])(label);
		        }

		        if (typeof value !== "undefined") {
		          if (typeof value !== "number") {
		            console.warn("Expected `args.value` arg to be a Number.");
		          } else {
		            fieldObject.eventValue = value;
		          }
		        }

		        if (typeof nonInteraction !== "undefined") {
		          if (typeof nonInteraction !== "boolean") {
		            console.warn("`args.nonInteraction` must be a boolean.");
		          } else {
		            fieldObject.nonInteraction = nonInteraction;
		          }
		        }

		        if (typeof transport !== "undefined") {
		          if (typeof transport !== "string") {
		            console.warn("`args.transport` must be a string.");
		          } else {
		            if (["beacon", "xhr", "image"].indexOf(transport) === -1) {
		              console.warn("`args.transport` must be either one of these values: `beacon`, `xhr` or `image`");
		            }

		            fieldObject.transport = transport;
		          }
		        }

		        Object.keys(rest).filter(function (key) {
		          return key.substr(0, "dimension".length) === "dimension";
		        }).forEach(function (key) {
		          fieldObject[key] = rest[key];
		        });
		        Object.keys(rest).filter(function (key) {
		          return key.substr(0, "metric".length) === "metric";
		        }).forEach(function (key) {
		          fieldObject[key] = rest[key];
		        });

		        _this._gaCommand("send", fieldObject);
		      }
		    });

		    _defineProperty(this, "send", function (fieldObject) {
		      _this._gaCommand("send", fieldObject);
		    });

		    _defineProperty(this, "pageview", function (path, _, title) {
		      var pathTrim = path === null || path === void 0 ? void 0 : path.trim();

		      if (pathTrim === "") {
		        console.warn("path cannot be an empty string in .pageview()");
		        return;
		      }

		      _this._gaCommand("send", "pageview", pathTrim, {
		        title: title
		      });
		    });

		    this.reset();
		  }

		  _createClass(GA4, [{
		    key: "gtag",
		    value: function gtag() {
		      this._gtag.apply(this, arguments);
		    }
		  }, {
		    key: "_appendCustomMap",
		    value: function _appendCustomMap(options) {
		      var legacyDimensionMetric = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

		      if (!legacyDimensionMetric) {
		        return options;
		      }

		      if (!options.custom_map) {
		        options.custom_map = {};
		      }

		      for (var i = 1; i <= 200; i++) {
		        if (!options.custom_map["dimension".concat(i)]) {
		          options.custom_map["dimension".concat(i)] = "dimension".concat(i);
		        }

		        if (!options.custom_map["metric".concat(i)]) {
		          options.custom_map["metric".concat(i)] = "metric".concat(i);
		        }
		      }

		      return options;
		    }
		    /**
		     * @since v1.0.2
		     * @param {string} [path="location.href"]
		     * @param {string[]} [_] unsupported
		     * @param {string} [title="location.pathname"]
		     * @deprecated Use `.send("pageview")` instead
		     */

		  }, {
		    key: "outboundLink",
		    value:
		    /**
		     * @since v1.0.6
		     * @param {Object} options
		     * @param {string} options.label
		     * @param {function} hitCallback
		     * @deprecated Use `enhanced measurement` feature in Google Analytics.
		     */
		    function outboundLink(_ref3, hitCallback) {
		      var label = _ref3.label;

		      if (typeof hitCallback !== "function") {
		        console.warn("hitCallback function is required");
		        return;
		      }

		      if (!label) {
		        console.warn("args.label is required in outboundLink()");
		        return;
		      } // Required Fields


		      var fieldObject = {
		        hitType: "event",
		        eventCategory: "Outbound",
		        eventAction: "Click",
		        eventLabel: (0, _format["default"])(label)
		      };
		      var safetyCallbackCalled = false;

		      var safetyCallback = function safetyCallback() {
		        // This prevents a delayed response from GA
		        // causing hitCallback from being fired twice
		        safetyCallbackCalled = true;
		        hitCallback();
		      }; // Using a timeout to ensure the execution of critical application code
		      // in the case when the GA server might be down
		      // or an ad blocker prevents sending the data
		      // register safety net timeout:


		      var t = setTimeout(safetyCallback, 250);

		      var clearableCallbackForGA = function clearableCallbackForGA() {
		        clearTimeout(t);

		        if (!safetyCallbackCalled) {
		          hitCallback();
		        }
		      };

		      fieldObject.hitCallback = clearableCallbackForGA;

		      this._gaCommand("send", fieldObject);
		    }
		  }]);

		  return GA4;
		}();

		exports.GA4 = GA4;

		var _default = new GA4();

		exports["default"] = _default;
	} (ga4));

	(function (exports) {

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports["default"] = exports.ReactGAImplementation = void 0;

		var _ga = _interopRequireWildcard(ga4);

		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

		var ReactGAImplementation = _ga.GA4;
		exports.ReactGAImplementation = ReactGAImplementation;
		var _default = _ga["default"];
		exports["default"] = _default;
	} (dist));

	var ReactGA = /*@__PURE__*/getDefaultExportFromCjs(dist);

	async function init$1() {
	  ReactGA.initialize('G-H635ES4QGW');
	  ReactGA.send("pageview");
	}

	async function init() {
	  init$1();
	  init$2();
	}

	var Main = g(function () {
	  y(() => {
	    check();
	    proxy();
	    init();
	    return () => {
	      unproxy();
	    };
	  }, []);
	  return v$1(lib.Provider, {
	    store: store
	  }, v$1(dist$8.exports.SnackbarProvider, {
	    maxSnack: 1
	  }, v$1(ModifyStyle, null), v$1(Snackbar, null), v$1(RemoteConfig, null), v$1(Dialog, null), v$1(Banner, null)));
	});

	const injectDomContainer = document.createElement('div');
	S$1(v$1(Main, null), injectDomContainer);

	if (document.body) {
	  document.body.appendChild(injectDomContainer);
	} else {
	  window.addEventListener('DOMContentLoaded', () => document.body.appendChild(injectDomContainer));
	}

})();
